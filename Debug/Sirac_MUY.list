
Sirac_MUY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027028  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027f8  080272c8  080272c8  000372c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08029ac0  08029ac0  00039ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08029ac8  08029ac8  00039ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08029acc  08029acc  00039acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004cc  24000000  08029ad0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008b78  240004d0  08029f9c  000404d0  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  24009048  08029f9c  00049048  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000404cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004dd33  00000000  00000000  000404fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000904d  00000000  00000000  0008e22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032a8  00000000  00000000  00097280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002f20  00000000  00000000  0009a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00048b4b  00000000  00000000  0009d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004c2e7  00000000  00000000  000e5f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019c8c8  00000000  00000000  0013227a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002ceb42  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ef04  00000000  00000000  002ceb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240004d0 	.word	0x240004d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080272b0 	.word	0x080272b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240004d4 	.word	0x240004d4
 80002dc:	080272b0 	.word	0x080272b0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9ac 	b.w	8000a98 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468e      	mov	lr, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14d      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4694      	mov	ip, r2
 80007da:	d969      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b152      	cbz	r2, 80007f8 <__udivmoddi4+0x30>
 80007e2:	fa01 f302 	lsl.w	r3, r1, r2
 80007e6:	f1c2 0120 	rsb	r1, r2, #32
 80007ea:	fa20 f101 	lsr.w	r1, r0, r1
 80007ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f2:	ea41 0e03 	orr.w	lr, r1, r3
 80007f6:	4094      	lsls	r4, r2
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	0c21      	lsrs	r1, r4, #16
 80007fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000802:	fa1f f78c 	uxth.w	r7, ip
 8000806:	fb08 e316 	mls	r3, r8, r6, lr
 800080a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800080e:	fb06 f107 	mul.w	r1, r6, r7
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f106 30ff 	add.w	r0, r6, #4294967295
 800081e:	f080 811f 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 811c 	bls.w	8000a60 <__udivmoddi4+0x298>
 8000828:	3e02      	subs	r6, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f0f8 	udiv	r0, r3, r8
 8000834:	fb08 3310 	mls	r3, r8, r0, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb00 f707 	mul.w	r7, r0, r7
 8000840:	42a7      	cmp	r7, r4
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x92>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 33ff 	add.w	r3, r0, #4294967295
 800084c:	f080 810a 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000850:	42a7      	cmp	r7, r4
 8000852:	f240 8107 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000856:	4464      	add	r4, ip
 8000858:	3802      	subs	r0, #2
 800085a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800085e:	1be4      	subs	r4, r4, r7
 8000860:	2600      	movs	r6, #0
 8000862:	b11d      	cbz	r5, 800086c <__udivmoddi4+0xa4>
 8000864:	40d4      	lsrs	r4, r2
 8000866:	2300      	movs	r3, #0
 8000868:	e9c5 4300 	strd	r4, r3, [r5]
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0xc2>
 8000876:	2d00      	cmp	r5, #0
 8000878:	f000 80ef 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087c:	2600      	movs	r6, #0
 800087e:	e9c5 0100 	strd	r0, r1, [r5]
 8000882:	4630      	mov	r0, r6
 8000884:	4631      	mov	r1, r6
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f683 	clz	r6, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	428b      	cmp	r3, r1
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80f9 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb61 0303 	sbc.w	r3, r1, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	469e      	mov	lr, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d0e0      	beq.n	800086c <__udivmoddi4+0xa4>
 80008aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ae:	e7dd      	b.n	800086c <__udivmoddi4+0xa4>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8092 	bne.w	80009e2 <__udivmoddi4+0x21a>
 80008be:	eba1 010c 	sub.w	r1, r1, ip
 80008c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c6:	fa1f fe8c 	uxth.w	lr, ip
 80008ca:	2601      	movs	r6, #1
 80008cc:	0c20      	lsrs	r0, r4, #16
 80008ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80008d2:	fb07 1113 	mls	r1, r7, r3, r1
 80008d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	4288      	cmp	r0, r1
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0101 	adds.w	r1, ip, r1
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	4288      	cmp	r0, r1
 80008ee:	f200 80cb 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a09      	subs	r1, r1, r0
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000900:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000904:	fb0e fe00 	mul.w	lr, lr, r0
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 31ff 	add.w	r1, r0, #4294967295
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80bb 	bhi.w	8000a92 <__udivmoddi4+0x2ca>
 800091c:	4608      	mov	r0, r1
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79c      	b.n	8000862 <__udivmoddi4+0x9a>
 8000928:	f1c6 0720 	rsb	r7, r6, #32
 800092c:	40b3      	lsls	r3, r6
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa20 f407 	lsr.w	r4, r0, r7
 800093a:	fa01 f306 	lsl.w	r3, r1, r6
 800093e:	431c      	orrs	r4, r3
 8000940:	40f9      	lsrs	r1, r7
 8000942:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000946:	fa00 f306 	lsl.w	r3, r0, r6
 800094a:	fbb1 f8f9 	udiv	r8, r1, r9
 800094e:	0c20      	lsrs	r0, r4, #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fb09 1118 	mls	r1, r9, r8, r1
 8000958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800095c:	fb08 f00e 	mul.w	r0, r8, lr
 8000960:	4288      	cmp	r0, r1
 8000962:	fa02 f206 	lsl.w	r2, r2, r6
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0101 	adds.w	r1, ip, r1
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	4288      	cmp	r0, r1
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4461      	add	r1, ip
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f9 	udiv	r0, r1, r9
 8000988:	fb09 1110 	mls	r1, r9, r0, r1
 800098c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000990:	fb00 fe0e 	mul.w	lr, r0, lr
 8000994:	458e      	cmp	lr, r1
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	458e      	cmp	lr, r1
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4461      	add	r1, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9402 	umull	r9, r4, r0, r2
 80009b2:	eba1 010e 	sub.w	r1, r1, lr
 80009b6:	42a1      	cmp	r1, r4
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46a6      	mov	lr, r4
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	b15d      	cbz	r5, 80009da <__udivmoddi4+0x212>
 80009c2:	ebb3 0208 	subs.w	r2, r3, r8
 80009c6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ca:	fa01 f707 	lsl.w	r7, r1, r7
 80009ce:	fa22 f306 	lsr.w	r3, r2, r6
 80009d2:	40f1      	lsrs	r1, r6
 80009d4:	431f      	orrs	r7, r3
 80009d6:	e9c5 7100 	strd	r7, r1, [r5]
 80009da:	2600      	movs	r6, #0
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	f1c2 0320 	rsb	r3, r2, #32
 80009e6:	40d8      	lsrs	r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	fa21 f303 	lsr.w	r3, r1, r3
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4301      	orrs	r1, r0
 80009f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f8:	fa1f fe8c 	uxth.w	lr, ip
 80009fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a00:	fb07 3610 	mls	r6, r7, r0, r3
 8000a04:	0c0b      	lsrs	r3, r1, #16
 8000a06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	429e      	cmp	r6, r3
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1b9b      	subs	r3, r3, r6
 8000a2a:	b289      	uxth	r1, r1
 8000a2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a30:	fb07 3316 	mls	r3, r7, r6, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb06 f30e 	mul.w	r3, r6, lr
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0101 	adds.w	r1, ip, r1
 8000a44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3e02      	subs	r6, #2
 8000a50:	4461      	add	r1, ip
 8000a52:	1ac9      	subs	r1, r1, r3
 8000a54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	462e      	mov	r6, r5
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e705      	b.n	800086c <__udivmoddi4+0xa4>
 8000a60:	4606      	mov	r6, r0
 8000a62:	e6e3      	b.n	800082c <__udivmoddi4+0x64>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f8      	b.n	800085a <__udivmoddi4+0x92>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4646      	mov	r6, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4640      	mov	r0, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	3b02      	subs	r3, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	e732      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a8e:	4630      	mov	r0, r6
 8000a90:	e709      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a92:	4464      	add	r4, ip
 8000a94:	3802      	subs	r0, #2
 8000a96:	e742      	b.n	800091e <__udivmoddi4+0x156>

08000a98 <__aeabi_idiv0>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8000aa4:	22b0      	movs	r2, #176	; 0xb0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f021 fa41 	bl	8021f30 <memset>
    return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx, uint8_t isCalibMagReq) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af04      	add	r7, sp, #16
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
	//pre-def. vars
	uint8_t readData = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
	uint8_t writeData = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73bb      	strb	r3, [r7, #14]
	/*printf("**************************** \n");
	 printf("MPU9250 STM32 Implementation \n");
	 printf("**************************** \n");*/

	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1,
 8000acc:	230f      	movs	r3, #15
 8000ace:	9302      	str	r3, [sp, #8]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	f107 030f 	add.w	r3, r7, #15
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2301      	movs	r3, #1
 8000adc:	2275      	movs	r2, #117	; 0x75
 8000ade:	21d0      	movs	r1, #208	; 0xd0
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f00e fb45 	bl	800f170 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {
		printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);
	}

	if (readData == 113) {
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b71      	cmp	r3, #113	; 0x71
 8000aea:	d15e      	bne.n	8000baa <MPU9255_Init+0xf2>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8000aec:	4931      	ldr	r1, [pc, #196]	; (8000bb4 <MPU9255_Init+0xfc>)
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f001 fc1e 	bl	8002330 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		/*lcd_clear(&lcd2);
		 lcd_send_string(0,0,"Acc Gyro Calib", &lcd2);*/
		printf("Acc Gyro Calib\n");
 8000af4:	4830      	ldr	r0, [pc, #192]	; (8000bb8 <MPU9255_Init+0x100>)
 8000af6:	f022 f9d1 	bl	8022e9c <puts>
		HAL_Delay(100);
 8000afa:	2064      	movs	r0, #100	; 0x64
 8000afc:	f009 fa6a 	bl	8009fd4 <HAL_Delay>
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8000b00:	4a2e      	ldr	r2, [pc, #184]	; (8000bbc <MPU9255_Init+0x104>)
 8000b02:	492f      	ldr	r1, [pc, #188]	; (8000bc0 <MPU9255_Init+0x108>)
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 ffed 	bl	8001ae4 <calibrateMPU9250>
		HAL_Delay(1000);
 8000b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0e:	f009 fa61 	bl	8009fd4 <HAL_Delay>
		/*lcd_clear(&lcd2);
		 lcd_send_string(1,0,"Calib done", &lcd2);*/
		printf("Calib done\n");
 8000b12:	482c      	ldr	r0, [pc, #176]	; (8000bc4 <MPU9255_Init+0x10c>)
 8000b14:	f022 f9c2 	bl	8022e9c <puts>
		HAL_Delay(100);
 8000b18:	2064      	movs	r0, #100	; 0x64
 8000b1a:	f009 fa5b 	bl	8009fd4 <HAL_Delay>
		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 fefe 	bl	8001920 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8000b24:	2322      	movs	r3, #34	; 0x22
 8000b26:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1,
 8000b28:	230f      	movs	r3, #15
 8000b2a:	9302      	str	r3, [sp, #8]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	f107 030e 	add.w	r3, r7, #14
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	2237      	movs	r2, #55	; 0x37
 8000b3a:	21d0      	movs	r1, #208	; 0xd0
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f00e fa03 	bl	800ef48 <HAL_I2C_Mem_Write>
				i2c_timeout);

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1,
 8000b42:	230f      	movs	r3, #15
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2301      	movs	r3, #1
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f107 030f 	add.w	r3, r7, #15
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2301      	movs	r3, #1
 8000b52:	2200      	movs	r2, #0
 8000b54:	2118      	movs	r1, #24
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f00e fb0a 	bl	800f170 <HAL_I2C_Mem_Read>
				i2c_timeout);            // Read WHO_AM_I register for AK8963
		if (SerialDebugA) {
			printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);
		}
		HAL_Delay(1000);
 8000b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b60:	f009 fa38 	bl	8009fd4 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration); // Initialize device for active mode read of magnetometer
 8000b64:	4918      	ldr	r1, [pc, #96]	; (8000bc8 <MPU9255_Init+0x110>)
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 fc96 	bl	8001498 <initAK8963>
		//lcd_clear();
		//lcd_send_string(0,0,"MAG Calib");
		printf("MAG Calib\n");
 8000b6c:	4817      	ldr	r0, [pc, #92]	; (8000bcc <MPU9255_Init+0x114>)
 8000b6e:	f022 f995 	bl	8022e9c <puts>
		HAL_Delay(100);
 8000b72:	2064      	movs	r0, #100	; 0x64
 8000b74:	f009 fa2e 	bl	8009fd4 <HAL_Delay>

		if (!calibrateMag(I2Cx, magBias, magScale, !isCalibMagReq))
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <MPU9255_Init+0x118>)
 8000b86:	4913      	ldr	r1, [pc, #76]	; (8000bd4 <MPU9255_Init+0x11c>)
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 fd35 	bl	80015f8 <calibrateMag>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <MPU9255_Init+0xe0>
			return 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e009      	b.n	8000bac <MPU9255_Init+0xf4>

		//lcd_send_string(1,0,"Calib done");
		printf("Calib done\n");
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <MPU9255_Init+0x10c>)
 8000b9a:	f022 f97f 	bl	8022e9c <puts>

		HAL_Delay(1000);
 8000b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba2:	f009 fa17 	bl	8009fd4 <HAL_Delay>

		return 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <MPU9255_Init+0xf4>
	}
	return 0; // Loop forever if communication doesn't happen
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2400054c 	.word	0x2400054c
 8000bb8:	080272c8 	.word	0x080272c8
 8000bbc:	24000528 	.word	0x24000528
 8000bc0:	2400051c 	.word	0x2400051c
 8000bc4:	080272d8 	.word	0x080272d8
 8000bc8:	24000510 	.word	0x24000510
 8000bcc:	080272e4 	.word	0x080272e4
 8000bd0:	24000540 	.word	0x24000540
 8000bd4:	24000534 	.word	0x24000534

08000bd8 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t *DataStruct) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1,
 8000be2:	230f      	movs	r3, #15
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	2301      	movs	r3, #1
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	f107 030f 	add.w	r3, r7, #15
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	223a      	movs	r2, #58	; 0x3a
 8000bf4:	21d0      	movs	r1, #208	; 0xd0
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f00e faba 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80fc 	beq.w	8000e00 <readAll+0x228>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8000c08:	49c5      	ldr	r1, [pc, #788]	; (8000f20 <readAll+0x348>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 fb92 	bl	8001334 <readAccelData>
		getAres();
 8000c10:	f000 fb60 	bl	80012d4 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float) accelCount[0] * aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8000c14:	4bc2      	ldr	r3, [pc, #776]	; (8000f20 <readAll+0x348>)
 8000c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c22:	4bc0      	ldr	r3, [pc, #768]	; (8000f24 <readAll+0x34c>)
 8000c24:	edd3 7a00 	vldr	s15, [r3]
 8000c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2c:	4bbe      	ldr	r3, [pc, #760]	; (8000f28 <readAll+0x350>)
 8000c2e:	edc3 7a00 	vstr	s15, [r3]
		ay = (float) accelCount[1] * aRes; // - accelBias[1];
 8000c32:	4bbb      	ldr	r3, [pc, #748]	; (8000f20 <readAll+0x348>)
 8000c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c40:	4bb8      	ldr	r3, [pc, #736]	; (8000f24 <readAll+0x34c>)
 8000c42:	edd3 7a00 	vldr	s15, [r3]
 8000c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4a:	4bb8      	ldr	r3, [pc, #736]	; (8000f2c <readAll+0x354>)
 8000c4c:	edc3 7a00 	vstr	s15, [r3]
		az = (float) accelCount[2] * aRes; // - accelBias[2];
 8000c50:	4bb3      	ldr	r3, [pc, #716]	; (8000f20 <readAll+0x348>)
 8000c52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5e:	4bb1      	ldr	r3, [pc, #708]	; (8000f24 <readAll+0x34c>)
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c68:	4bb1      	ldr	r3, [pc, #708]	; (8000f30 <readAll+0x358>)
 8000c6a:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX = ax;
 8000c6e:	4bae      	ldr	r3, [pc, #696]	; (8000f28 <readAll+0x350>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8000c76:	4bad      	ldr	r3, [pc, #692]	; (8000f2c <readAll+0x354>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8000c7e:	4bac      	ldr	r3, [pc, #688]	; (8000f30 <readAll+0x358>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8000c86:	49ab      	ldr	r1, [pc, #684]	; (8000f34 <readAll+0x35c>)
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 fb86 	bl	800139a <readGyroData>
		getGres();
 8000c8e:	f000 faed 	bl	800126c <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float) gyroCount[0] * gRes; // get actual gyro value, this depends on scale being set
 8000c92:	4ba8      	ldr	r3, [pc, #672]	; (8000f34 <readAll+0x35c>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ca0:	4ba5      	ldr	r3, [pc, #660]	; (8000f38 <readAll+0x360>)
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000caa:	4ba4      	ldr	r3, [pc, #656]	; (8000f3c <readAll+0x364>)
 8000cac:	edc3 7a00 	vstr	s15, [r3]
		gy = (float) gyroCount[1] * gRes;
 8000cb0:	4ba0      	ldr	r3, [pc, #640]	; (8000f34 <readAll+0x35c>)
 8000cb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cb6:	ee07 3a90 	vmov	s15, r3
 8000cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cbe:	4b9e      	ldr	r3, [pc, #632]	; (8000f38 <readAll+0x360>)
 8000cc0:	edd3 7a00 	vldr	s15, [r3]
 8000cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc8:	4b9d      	ldr	r3, [pc, #628]	; (8000f40 <readAll+0x368>)
 8000cca:	edc3 7a00 	vstr	s15, [r3]
		gz = (float) gyroCount[2] * gRes;
 8000cce:	4b99      	ldr	r3, [pc, #612]	; (8000f34 <readAll+0x35c>)
 8000cd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cdc:	4b96      	ldr	r3, [pc, #600]	; (8000f38 <readAll+0x360>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce6:	4b97      	ldr	r3, [pc, #604]	; (8000f44 <readAll+0x36c>)
 8000ce8:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX = gx;
 8000cec:	4b93      	ldr	r3, [pc, #588]	; (8000f3c <readAll+0x364>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8000cf4:	4b92      	ldr	r3, [pc, #584]	; (8000f40 <readAll+0x368>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8000cfc:	4b91      	ldr	r3, [pc, #580]	; (8000f44 <readAll+0x36c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8000d04:	4990      	ldr	r1, [pc, #576]	; (8000f48 <readAll+0x370>)
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 fb7a 	bl	8001400 <readMagData>
		getMres();
 8000d0c:	f000 fa90 	bl	8001230 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float) magCount[0] * mRes * magCalibration[0] - magBias[0]; // get actual magnetometer value, this depends on scale being set
 8000d10:	4b8d      	ldr	r3, [pc, #564]	; (8000f48 <readAll+0x370>)
 8000d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d1e:	4b8b      	ldr	r3, [pc, #556]	; (8000f4c <readAll+0x374>)
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d28:	4b89      	ldr	r3, [pc, #548]	; (8000f50 <readAll+0x378>)
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d32:	4b88      	ldr	r3, [pc, #544]	; (8000f54 <readAll+0x37c>)
 8000d34:	edd3 7a00 	vldr	s15, [r3]
 8000d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3c:	4b86      	ldr	r3, [pc, #536]	; (8000f58 <readAll+0x380>)
 8000d3e:	edc3 7a00 	vstr	s15, [r3]
		my = (float) magCount[1] * mRes * magCalibration[1] - magBias[1];
 8000d42:	4b81      	ldr	r3, [pc, #516]	; (8000f48 <readAll+0x370>)
 8000d44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d48:	ee07 3a90 	vmov	s15, r3
 8000d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d50:	4b7e      	ldr	r3, [pc, #504]	; (8000f4c <readAll+0x374>)
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d5a:	4b7d      	ldr	r3, [pc, #500]	; (8000f50 <readAll+0x378>)
 8000d5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d64:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <readAll+0x37c>)
 8000d66:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d6e:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <readAll+0x384>)
 8000d70:	edc3 7a00 	vstr	s15, [r3]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magBias[2];
 8000d74:	4b74      	ldr	r3, [pc, #464]	; (8000f48 <readAll+0x370>)
 8000d76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d7a:	ee07 3a90 	vmov	s15, r3
 8000d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d82:	4b72      	ldr	r3, [pc, #456]	; (8000f4c <readAll+0x374>)
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d8c:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <readAll+0x378>)
 8000d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d96:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <readAll+0x37c>)
 8000d98:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000da0:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <readAll+0x388>)
 8000da2:	edc3 7a00 	vstr	s15, [r3]
		mx *= magScale[0];
 8000da6:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <readAll+0x38c>)
 8000da8:	ed93 7a00 	vldr	s14, [r3]
 8000dac:	4b6a      	ldr	r3, [pc, #424]	; (8000f58 <readAll+0x380>)
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db6:	4b68      	ldr	r3, [pc, #416]	; (8000f58 <readAll+0x380>)
 8000db8:	edc3 7a00 	vstr	s15, [r3]
		my *= magScale[1];
 8000dbc:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <readAll+0x38c>)
 8000dbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dc2:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <readAll+0x384>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <readAll+0x384>)
 8000dce:	edc3 7a00 	vstr	s15, [r3]
		mz *= magScale[2];
 8000dd2:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <readAll+0x38c>)
 8000dd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000dd8:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <readAll+0x388>)
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de2:	4b5f      	ldr	r3, [pc, #380]	; (8000f60 <readAll+0x388>)
 8000de4:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->MagX = mx;
 8000de8:	4b5b      	ldr	r3, [pc, #364]	; (8000f58 <readAll+0x380>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8000df0:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <readAll+0x384>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8000df8:	4b59      	ldr	r3, [pc, #356]	; (8000f60 <readAll+0x388>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	621a      	str	r2, [r3, #32]
//		printf("mag max = %d, %d, %d\tmag min =  %d, %d, %d\n", mag_max[0], mag_max[1], mag_max[2],
//				mag_min[0], mag_min[1], mag_min[2]);
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 8000e00:	f009 f8dc 	bl	8009fbc <HAL_GetTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4a58      	ldr	r2, [pc, #352]	; (8000f68 <readAll+0x390>)
 8000e08:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate) / 1000.0f); // set integration time by time elapsed since last filter update
 8000e0a:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <readAll+0x390>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b57      	ldr	r3, [pc, #348]	; (8000f6c <readAll+0x394>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e1c:	eddf 6a54 	vldr	s13, [pc, #336]	; 8000f70 <readAll+0x398>
 8000e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e24:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <readAll+0x39c>)
 8000e26:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <readAll+0x390>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a4f      	ldr	r2, [pc, #316]	; (8000f6c <readAll+0x394>)
 8000e30:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 8000e32:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <readAll+0x3a0>)
 8000e34:	ed93 7a00 	vldr	s14, [r3]
 8000e38:	4b4e      	ldr	r3, [pc, #312]	; (8000f74 <readAll+0x39c>)
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <readAll+0x3a0>)
 8000e44:	edc3 7a00 	vstr	s15, [r3]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx * PI / 180.0f, gy * PI / 180.0f,
 8000e48:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <readAll+0x350>)
 8000e4a:	edd3 4a00 	vldr	s9, [r3]
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <readAll+0x354>)
 8000e50:	edd3 0a00 	vldr	s1, [r3]
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <readAll+0x358>)
 8000e56:	ed93 1a00 	vldr	s2, [r3]
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <readAll+0x364>)
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e64:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000f10 <readAll+0x338>
 8000e68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e6c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000f18 <readAll+0x340>
 8000e70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e74:	eef7 1bc7 	vcvt.f32.f64	s3, d7
 8000e78:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <readAll+0x368>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e82:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000f10 <readAll+0x338>
 8000e86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e8a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8000f18 <readAll+0x340>
 8000e8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e92:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
			gz * PI / 180.0f, my, mx, mz);
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <readAll+0x36c>)
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea0:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000f10 <readAll+0x338>
 8000ea4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ea8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000f18 <readAll+0x340>
 8000eac:	ee86 7b05 	vdiv.f64	d7, d6, d5
	QuaternionUpdate(ax, ay, az, gx * PI / 180.0f, gy * PI / 180.0f,
 8000eb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <readAll+0x384>)
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <readAll+0x380>)
 8000ebc:	edd3 6a00 	vldr	s13, [r3]
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <readAll+0x388>)
 8000ec2:	ed93 6a00 	vldr	s12, [r3]
 8000ec6:	eeb0 4a46 	vmov.f32	s8, s12
 8000eca:	eef0 3a66 	vmov.f32	s7, s13
 8000ece:	eeb0 3a47 	vmov.f32	s6, s14
 8000ed2:	eef0 2a67 	vmov.f32	s5, s15
 8000ed6:	eeb0 0a64 	vmov.f32	s0, s9
 8000eda:	f001 fe59 	bl	8002b90 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 = 2.0f * (q[1] * q[2] + q[0] * q[3]);
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <readAll+0x3a4>)
 8000ee0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <readAll+0x3a4>)
 8000ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <readAll+0x3a4>)
 8000ef0:	edd3 6a00 	vldr	s13, [r3]
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <readAll+0x3a4>)
 8000ef6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <readAll+0x3a8>)
 8000f08:	edc3 7a00 	vstr	s15, [r3]
 8000f0c:	e03a      	b.n	8000f84 <readAll+0x3ac>
 8000f0e:	bf00      	nop
 8000f10:	35f80991 	.word	0x35f80991
 8000f14:	40092492 	.word	0x40092492
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40668000 	.word	0x40668000
 8000f20:	240004f8 	.word	0x240004f8
 8000f24:	240004ec 	.word	0x240004ec
 8000f28:	24000580 	.word	0x24000580
 8000f2c:	24000584 	.word	0x24000584
 8000f30:	24000588 	.word	0x24000588
 8000f34:	24000500 	.word	0x24000500
 8000f38:	240004f0 	.word	0x240004f0
 8000f3c:	2400058c 	.word	0x2400058c
 8000f40:	24000590 	.word	0x24000590
 8000f44:	24000594 	.word	0x24000594
 8000f48:	24000508 	.word	0x24000508
 8000f4c:	240004f4 	.word	0x240004f4
 8000f50:	24000510 	.word	0x24000510
 8000f54:	24000534 	.word	0x24000534
 8000f58:	24000598 	.word	0x24000598
 8000f5c:	2400059c 	.word	0x2400059c
 8000f60:	240005a0 	.word	0x240005a0
 8000f64:	24000540 	.word	0x24000540
 8000f68:	2400057c 	.word	0x2400057c
 8000f6c:	24000578 	.word	0x24000578
 8000f70:	447a0000 	.word	0x447a0000
 8000f74:	24000570 	.word	0x24000570
 8000f78:	24000574 	.word	0x24000574
 8000f7c:	24000008 	.word	0x24000008
 8000f80:	240005b0 	.word	0x240005b0
	a22 = q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8000f84:	4b98      	ldr	r3, [pc, #608]	; (80011e8 <readAll+0x610>)
 8000f86:	ed93 7a00 	vldr	s14, [r3]
 8000f8a:	4b97      	ldr	r3, [pc, #604]	; (80011e8 <readAll+0x610>)
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f94:	4b94      	ldr	r3, [pc, #592]	; (80011e8 <readAll+0x610>)
 8000f96:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f9a:	4b93      	ldr	r3, [pc, #588]	; (80011e8 <readAll+0x610>)
 8000f9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa8:	4b8f      	ldr	r3, [pc, #572]	; (80011e8 <readAll+0x610>)
 8000faa:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fae:	4b8e      	ldr	r3, [pc, #568]	; (80011e8 <readAll+0x610>)
 8000fb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fbc:	4b8a      	ldr	r3, [pc, #552]	; (80011e8 <readAll+0x610>)
 8000fbe:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fc2:	4b89      	ldr	r3, [pc, #548]	; (80011e8 <readAll+0x610>)
 8000fc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd0:	4b86      	ldr	r3, [pc, #536]	; (80011ec <readAll+0x614>)
 8000fd2:	edc3 7a00 	vstr	s15, [r3]
	a31 = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8000fd6:	4b84      	ldr	r3, [pc, #528]	; (80011e8 <readAll+0x610>)
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	4b82      	ldr	r3, [pc, #520]	; (80011e8 <readAll+0x610>)
 8000fde:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe6:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <readAll+0x610>)
 8000fe8:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fec:	4b7e      	ldr	r3, [pc, #504]	; (80011e8 <readAll+0x610>)
 8000fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ffe:	4b7c      	ldr	r3, [pc, #496]	; (80011f0 <readAll+0x618>)
 8001000:	edc3 7a00 	vstr	s15, [r3]
	a32 = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8001004:	4b78      	ldr	r3, [pc, #480]	; (80011e8 <readAll+0x610>)
 8001006:	ed93 7a01 	vldr	s14, [r3, #4]
 800100a:	4b77      	ldr	r3, [pc, #476]	; (80011e8 <readAll+0x610>)
 800100c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001014:	4b74      	ldr	r3, [pc, #464]	; (80011e8 <readAll+0x610>)
 8001016:	edd3 6a00 	vldr	s13, [r3]
 800101a:	4b73      	ldr	r3, [pc, #460]	; (80011e8 <readAll+0x610>)
 800101c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001028:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800102c:	4b71      	ldr	r3, [pc, #452]	; (80011f4 <readAll+0x61c>)
 800102e:	edc3 7a00 	vstr	s15, [r3]
	a33 = q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8001032:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <readAll+0x610>)
 8001034:	ed93 7a00 	vldr	s14, [r3]
 8001038:	4b6b      	ldr	r3, [pc, #428]	; (80011e8 <readAll+0x610>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001042:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <readAll+0x610>)
 8001044:	edd3 6a01 	vldr	s13, [r3, #4]
 8001048:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <readAll+0x610>)
 800104a:	edd3 7a01 	vldr	s15, [r3, #4]
 800104e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001052:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001056:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <readAll+0x610>)
 8001058:	edd3 6a02 	vldr	s13, [r3, #8]
 800105c:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <readAll+0x610>)
 800105e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001066:	ee37 7a67 	vsub.f32	s14, s14, s15
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <readAll+0x610>)
 800106c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001070:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <readAll+0x610>)
 8001072:	edd3 7a03 	vldr	s15, [r3, #12]
 8001076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107e:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <readAll+0x620>)
 8001080:	edc3 7a00 	vstr	s15, [r3]

	pitch = -asinf(a32);
 8001084:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <readAll+0x61c>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	eeb0 0a67 	vmov.f32	s0, s15
 800108e:	f025 fded 	bl	8026c6c <asinf>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	eef1 7a67 	vneg.f32	s15, s15
 800109a:	4b58      	ldr	r3, [pc, #352]	; (80011fc <readAll+0x624>)
 800109c:	edc3 7a00 	vstr	s15, [r3]
	roll = atan2f(a31, a33);
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <readAll+0x618>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	4b54      	ldr	r3, [pc, #336]	; (80011f8 <readAll+0x620>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	eef0 0a47 	vmov.f32	s1, s14
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	f025 fe06 	bl	8026cc4 <atan2f>
 80010b8:	eef0 7a40 	vmov.f32	s15, s0
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <readAll+0x628>)
 80010be:	edc3 7a00 	vstr	s15, [r3]
	yaw = atan2f(a12, a22);
 80010c2:	4b50      	ldr	r3, [pc, #320]	; (8001204 <readAll+0x62c>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	4b48      	ldr	r3, [pc, #288]	; (80011ec <readAll+0x614>)
 80010ca:	ed93 7a00 	vldr	s14, [r3]
 80010ce:	eef0 0a47 	vmov.f32	s1, s14
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	f025 fdf5 	bl	8026cc4 <atan2f>
 80010da:	eef0 7a40 	vmov.f32	s15, s0
 80010de:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <readAll+0x630>)
 80010e0:	edc3 7a00 	vstr	s15, [r3]
	pitch *= 180.0f / PI;
 80010e4:	4b45      	ldr	r3, [pc, #276]	; (80011fc <readAll+0x624>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80011e0 <readAll+0x608>
 80010f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <readAll+0x624>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]
	yaw *= 180.0f / PI;
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <readAll+0x630>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800110a:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80011e0 <readAll+0x608>
 800110e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001112:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <readAll+0x630>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
	yaw += 5.53f; // Declination
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <readAll+0x630>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800120c <readAll+0x634>
 8001126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <readAll+0x630>)
 800112c:	edc3 7a00 	vstr	s15, [r3]

	if (yaw < 0)
 8001130:	4b35      	ldr	r3, [pc, #212]	; (8001208 <readAll+0x630>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	d509      	bpl.n	8001154 <readAll+0x57c>
		yaw += 360.0f; // Ensure yaw stays between 0 and 360
 8001140:	4b31      	ldr	r3, [pc, #196]	; (8001208 <readAll+0x630>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001210 <readAll+0x638>
 800114a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <readAll+0x630>)
 8001150:	edc3 7a00 	vstr	s15, [r3]
	roll *= 180.0f / PI;
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <readAll+0x628>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80011e0 <readAll+0x608>
 8001162:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001166:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <readAll+0x628>)
 800116c:	edc3 7a00 	vstr	s15, [r3]
	lin_ax = ax + a31;
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <readAll+0x63c>)
 8001172:	ed93 7a00 	vldr	s14, [r3]
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <readAll+0x618>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <readAll+0x640>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	lin_ay = ay + a32;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <readAll+0x644>)
 8001188:	ed93 7a00 	vldr	s14, [r3]
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <readAll+0x61c>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <readAll+0x648>)
 8001198:	edc3 7a00 	vstr	s15, [r3]
	lin_az = az - a33;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <readAll+0x64c>)
 800119e:	ed93 7a00 	vldr	s14, [r3]
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <readAll+0x620>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <readAll+0x650>)
 80011ae:	edc3 7a00 	vstr	s15, [r3]

	DataStruct->yaw = yaw;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <readAll+0x630>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <readAll+0x624>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <readAll+0x628>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28

	sum = 0;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <readAll+0x654>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	d0051a32 	.word	0xd0051a32
 80011e4:	404ca2e8 	.word	0x404ca2e8
 80011e8:	24000008 	.word	0x24000008
 80011ec:	240005b4 	.word	0x240005b4
 80011f0:	240005b8 	.word	0x240005b8
 80011f4:	240005bc 	.word	0x240005bc
 80011f8:	240005c0 	.word	0x240005c0
 80011fc:	24000564 	.word	0x24000564
 8001200:	2400056c 	.word	0x2400056c
 8001204:	240005b0 	.word	0x240005b0
 8001208:	24000568 	.word	0x24000568
 800120c:	40b0f5c3 	.word	0x40b0f5c3
 8001210:	43b40000 	.word	0x43b40000
 8001214:	24000580 	.word	0x24000580
 8001218:	240005a4 	.word	0x240005a4
 800121c:	24000584 	.word	0x24000584
 8001220:	240005a8 	.word	0x240005a8
 8001224:	24000588 	.word	0x24000588
 8001228:	240005ac 	.word	0x240005ac
 800122c:	24000574 	.word	0x24000574

08001230 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	switch (Mscale) {
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <getMres+0x2c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <getMres+0x12>
 800123c:	2b01      	cmp	r3, #1
 800123e:	d004      	beq.n	800124a <getMres+0x1a>
		break;
	case MFS_16BITS:
		mRes = 10. * 4912. / 32760.0; // Proper scale to return milliGauss
		break;
	}
}
 8001240:	e007      	b.n	8001252 <getMres+0x22>
		mRes = 10. * 4912. / 8190.; // Proper scale to return milliGauss
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <getMres+0x30>)
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <getMres+0x34>)
 8001246:	601a      	str	r2, [r3, #0]
		break;
 8001248:	e003      	b.n	8001252 <getMres+0x22>
		mRes = 10. * 4912. / 32760.0; // Proper scale to return milliGauss
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <getMres+0x30>)
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <getMres+0x38>)
 800124e:	601a      	str	r2, [r3, #0]
		break;
 8001250:	bf00      	nop
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	24000002 	.word	0x24000002
 8001260:	240004f4 	.word	0x240004f4
 8001264:	40bfebff 	.word	0x40bfebff
 8001268:	3fbfebff 	.word	0x3fbfebff

0800126c <getGres>:

void getGres() {
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	switch (Gscale) {
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <getGres+0x50>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b03      	cmp	r3, #3
 8001276:	d81b      	bhi.n	80012b0 <getGres+0x44>
 8001278:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <getGres+0x14>)
 800127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127e:	bf00      	nop
 8001280:	08001291 	.word	0x08001291
 8001284:	08001299 	.word	0x08001299
 8001288:	080012a1 	.word	0x080012a1
 800128c:	080012a9 	.word	0x080012a9
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <getGres+0x54>)
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <getGres+0x58>)
 8001294:	601a      	str	r2, [r3, #0]
		break;
 8001296:	e00b      	b.n	80012b0 <getGres+0x44>
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <getGres+0x54>)
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <getGres+0x5c>)
 800129c:	601a      	str	r2, [r3, #0]
		break;
 800129e:	e007      	b.n	80012b0 <getGres+0x44>
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <getGres+0x54>)
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <getGres+0x60>)
 80012a4:	601a      	str	r2, [r3, #0]
		break;
 80012a6:	e003      	b.n	80012b0 <getGres+0x44>
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <getGres+0x54>)
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <getGres+0x64>)
 80012ac:	601a      	str	r2, [r3, #0]
		break;
 80012ae:	bf00      	nop
	}
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	24000000 	.word	0x24000000
 80012c0:	240004f0 	.word	0x240004f0
 80012c4:	3bfa0000 	.word	0x3bfa0000
 80012c8:	3c7a0000 	.word	0x3c7a0000
 80012cc:	3cfa0000 	.word	0x3cfa0000
 80012d0:	3d7a0000 	.word	0x3d7a0000

080012d4 <getAres>:

void getAres() {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	switch (Ascale) {
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <getAres+0x58>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d81f      	bhi.n	8001320 <getAres+0x4c>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <getAres+0x14>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	08001303 	.word	0x08001303
 80012f0:	0800130d 	.word	0x0800130d
 80012f4:	08001317 	.word	0x08001317
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <getAres+0x5c>)
 80012fa:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80012fe:	601a      	str	r2, [r3, #0]
		break;
 8001300:	e00e      	b.n	8001320 <getAres+0x4c>
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <getAres+0x5c>)
 8001304:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001308:	601a      	str	r2, [r3, #0]
		break;
 800130a:	e009      	b.n	8001320 <getAres+0x4c>
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <getAres+0x5c>)
 800130e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001312:	601a      	str	r2, [r3, #0]
		break;
 8001314:	e004      	b.n	8001320 <getAres+0x4c>
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <getAres+0x5c>)
 8001318:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800131c:	601a      	str	r2, [r3, #0]
		break;
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	24000001 	.word	0x24000001
 8001330:	240004ec 	.word	0x240004ec

08001334 <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t *destination) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af04      	add	r7, sp, #16
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	uint8_t rawAccelData[6];  // x/y/z accel register data stored here
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0],
 800133e:	230f      	movs	r3, #15
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2306      	movs	r3, #6
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	223b      	movs	r2, #59	; 0x3b
 8001350:	21d0      	movs	r1, #208	; 0xd0
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f00d ff0c 	bl	800f170 <HAL_I2C_Mem_Read>
			6, i2c_timeout); // Read the six raw data registers into data array
	destination[0] = ((int16_t) rawAccelData[0] << 8) | rawAccelData[1]; // Turn the MSB and LSB into a signed 16-bit value
 8001358:	7a3b      	ldrb	r3, [r7, #8]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	7a7b      	ldrb	r3, [r7, #9]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21a      	sxth	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t) rawAccelData[2] << 8) | rawAccelData[3];
 800136a:	7abb      	ldrb	r3, [r7, #10]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b219      	sxth	r1, r3
 8001370:	7afb      	ldrb	r3, [r7, #11]
 8001372:	b21a      	sxth	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3302      	adds	r3, #2
 8001378:	430a      	orrs	r2, r1
 800137a:	b212      	sxth	r2, r2
 800137c:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t) rawAccelData[4] << 8) | rawAccelData[5];
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b219      	sxth	r1, r3
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	b21a      	sxth	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	3304      	adds	r3, #4
 800138c:	430a      	orrs	r2, r1
 800138e:	b212      	sxth	r2, r2
 8001390:	801a      	strh	r2, [r3, #0]
		printf("Acc X: %d\r\n", destination[0]);
		printf("Acc Y: %d\r\n", destination[1]);
		printf("Acc Z: %d\r\n", destination[2]);
		printf("-------------------------\r\n");
	}
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t *destination) {
 800139a:	b580      	push	{r7, lr}
 800139c:	b088      	sub	sp, #32
 800139e:	af04      	add	r7, sp, #16
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
	uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6,
 80013a4:	230f      	movs	r3, #15
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2306      	movs	r3, #6
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2243      	movs	r2, #67	; 0x43
 80013b6:	21d0      	movs	r1, #208	; 0xd0
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f00d fed9 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout); // Read the six raw data registers sequentially into data array
	destination[0] = ((int16_t) rawGyroData[0] << 8) | rawGyroData[1]; // Turn the MSB and LSB into a signed 16-bit value
 80013be:	7a3b      	ldrb	r3, [r7, #8]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	7a7b      	ldrb	r3, [r7, #9]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t) rawGyroData[2] << 8) | rawGyroData[3];
 80013d0:	7abb      	ldrb	r3, [r7, #10]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b219      	sxth	r1, r3
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	b21a      	sxth	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3302      	adds	r3, #2
 80013de:	430a      	orrs	r2, r1
 80013e0:	b212      	sxth	r2, r2
 80013e2:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t) rawGyroData[4] << 8) | rawGyroData[5];
 80013e4:	7b3b      	ldrb	r3, [r7, #12]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b219      	sxth	r1, r3
 80013ea:	7b7b      	ldrb	r3, [r7, #13]
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	430a      	orrs	r2, r1
 80013f4:	b212      	sxth	r2, r2
 80013f6:	801a      	strh	r2, [r3, #0]
		printf("Gyro X: %d\r\n", destination[0]);
		printf("Gyro Y: %d\r\n", destination[1]);
		printf("Gyro Z: %d\r\n", destination[2]);
		printf("---------------------------\r\n");
	}
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t *destination) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af04      	add	r7, sp, #16
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1,
 800140a:	230f      	movs	r3, #15
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 0316 	add.w	r3, r7, #22
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	2202      	movs	r2, #2
 800141c:	2118      	movs	r1, #24
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f00d fea6 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);
	if ((readData & 0x01) == 0x01) {
 8001424:	7dbb      	ldrb	r3, [r7, #22]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <readMagData+0x90>
		uint8_t rawMagData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0],
 800142e:	230f      	movs	r3, #15
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	2307      	movs	r3, #7
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	2118      	movs	r1, #24
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f00d fe94 	bl	800f170 <HAL_I2C_Mem_Read>
				7, i2c_timeout); // Read the six raw data and ST2 registers sequentially into data array
		uint8_t c = rawMagData[6];
 8001448:	7cbb      	ldrb	r3, [r7, #18]
 800144a:	75fb      	strb	r3, [r7, #23]
		if (!(c & 0x08)) {
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d11c      	bne.n	8001490 <readMagData+0x90>
			destination[0] = ((int16_t) rawMagData[1] << 8) | rawMagData[0]; // Turn the MSB and LSB into a signed 16-bit value
 8001456:	7b7b      	ldrb	r3, [r7, #13]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21a      	sxth	r2, r3
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b21a      	sxth	r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t) rawMagData[3] << 8) | rawMagData[2]; // Data stored as little Endian
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b219      	sxth	r1, r3
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	b21a      	sxth	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3302      	adds	r3, #2
 8001476:	430a      	orrs	r2, r1
 8001478:	b212      	sxth	r2, r2
 800147a:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t) rawMagData[5] << 8) | rawMagData[4];
 800147c:	7c7b      	ldrb	r3, [r7, #17]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b219      	sxth	r1, r3
 8001482:	7c3b      	ldrb	r3, [r7, #16]
 8001484:	b21a      	sxth	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3304      	adds	r3, #4
 800148a:	430a      	orrs	r2, r1
 800148c:	b212      	sxth	r2, r2
 800148e:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float *destination) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af04      	add	r7, sp, #16
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	//First extract the factory calibration for each magnetometer axis
	// x/y/z gyro calibration data stored here
	uint8_t rawMagCalData[3];

	//Power down magnetometer
	writeData = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1,
 80014a6:	230f      	movs	r3, #15
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	f107 030f 	add.w	r3, r7, #15
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	220a      	movs	r2, #10
 80014b8:	2118      	movs	r1, #24
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f00d fd44 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f008 fd87 	bl	8009fd4 <HAL_Delay>

	writeData = 0x0F;
 80014c6:	230f      	movs	r3, #15
 80014c8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1,
 80014ca:	230f      	movs	r3, #15
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2301      	movs	r3, #1
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f107 030f 	add.w	r3, r7, #15
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	220a      	movs	r2, #10
 80014dc:	2118      	movs	r1, #24
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f00d fd32 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);  // Enter Fuse ROM access mode
	HAL_Delay(100);
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f008 fd75 	bl	8009fd4 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3,
 80014ea:	230f      	movs	r3, #15
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2303      	movs	r3, #3
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	2210      	movs	r2, #16
 80014fc:	2118      	movs	r1, #24
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f00d fe36 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawMagCalData[0] - 128) / 256. + 1.; // Return x-axis sensitivity adjustment values, etc.
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	3b80      	subs	r3, #128	; 0x80
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001510:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001514:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80015e8 <initAK8963+0x150>
 8001518:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800151c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001520:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001524:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	edc3 7a00 	vstr	s15, [r3]
	destination[1] = (float) (rawMagCalData[1] - 128) / 256. + 1.;
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	3b80      	subs	r3, #128	; 0x80
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800153e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80015e8 <initAK8963+0x150>
 8001542:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001546:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800154a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3304      	adds	r3, #4
 8001552:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001556:	edc3 7a00 	vstr	s15, [r3]
	destination[2] = (float) (rawMagCalData[2] - 128) / 256. + 1.;
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	3b80      	subs	r3, #128	; 0x80
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001566:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800156a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80015e8 <initAK8963+0x150>
 800156e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001572:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001576:	ee37 7b06 	vadd.f64	d7, d7, d6
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3308      	adds	r3, #8
 800157e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001582:	edc3 7a00 	vstr	s15, [r3]
		printf("Mag cal off Y: %f\r\n", destination[1]);
		printf("Mag cal off Z: %f\r\n", destination[2]);
		printf("-------------------------\r\n");
	}

	writeData = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1,
 800158a:	230f      	movs	r3, #15
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2301      	movs	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f107 030f 	add.w	r3, r7, #15
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	220a      	movs	r2, #10
 800159c:	2118      	movs	r1, #24
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f00d fcd2 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);   // Power down magnetometer
	HAL_Delay(100);
 80015a4:	2064      	movs	r0, #100	; 0x64
 80015a6:	f008 fd15 	bl	8009fd4 <HAL_Delay>

	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeData = Mscale << 4 | Mmode;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <initAK8963+0x158>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <initAK8963+0x15c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1,
 80015c0:	230f      	movs	r3, #15
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	f107 030f 	add.w	r3, r7, #15
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	220a      	movs	r2, #10
 80015d2:	2118      	movs	r1, #24
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f00d fcb7 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);  // Set magnetometer data resolution and sample ODR

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
	HAL_Delay(10);
 80015da:	200a      	movs	r0, #10
 80015dc:	f008 fcfa 	bl	8009fd4 <HAL_Delay>

	if (SerialDebugA) {
		printf("MAG Init Succesful! \r\n");
	}
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40700000 	.word	0x40700000
 80015f0:	24000002 	.word	0x24000002
 80015f4:	24000003 	.word	0x24000003

080015f8 <calibrateMag>:

uint8_t calibrateMag(I2C_HandleTypeDef *I2Cx, float *dest1, float *dest2,
		uint8_t readFromMem) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	70fb      	strb	r3, [r7, #3]

	int32_t mag_bias[3] = { 0, 0, 0 }, mag_scale[3] = { 0, 0, 0 };
 8001606:	2300      	movs	r3, #0
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
 800160a:	2300      	movs	r3, #0
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160e:	2300      	movs	r3, #0
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t mag_max[3] = { -32767, -32767, -32767 }, mag_min[3] = { 32767,
 800161e:	4abb      	ldr	r2, [pc, #748]	; (800190c <calibrateMag+0x314>)
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001628:	6018      	str	r0, [r3, #0]
 800162a:	3304      	adds	r3, #4
 800162c:	8019      	strh	r1, [r3, #0]
 800162e:	4ab8      	ldr	r2, [pc, #736]	; (8001910 <calibrateMag+0x318>)
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001638:	6018      	str	r0, [r3, #0]
 800163a:	3304      	adds	r3, #4
 800163c:	8019      	strh	r1, [r3, #0]
			32767, 32767 };

	if (!readFromMem) {
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 8084 	bne.w	800174e <calibrateMag+0x156>
		uint16_t ii = 0, sample_count = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800164c:	2300      	movs	r3, #0
 800164e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		int16_t mag_temp[3] = { 0, 0, 0 };
 8001652:	2300      	movs	r3, #0
 8001654:	82bb      	strh	r3, [r7, #20]
 8001656:	2300      	movs	r3, #0
 8001658:	82fb      	strh	r3, [r7, #22]
 800165a:	2300      	movs	r3, #0
 800165c:	833b      	strh	r3, [r7, #24]

		if (SerialDebugA) {
			printf(
					"Mag Calibration: Wave device in a figure eight until done!\r\n");
		}
		HAL_Delay(4000);
 800165e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001662:	f008 fcb7 	bl	8009fd4 <HAL_Delay>
		playStartCalib();
 8001666:	f007 faad 	bl	8008bc4 <playStartCalib>
		// shoot for ~fifteen seconds of mag data
		if (Mmode == 0x02)
 800166a:	4baa      	ldr	r3, [pc, #680]	; (8001914 <calibrateMag+0x31c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d102      	bne.n	8001678 <calibrateMag+0x80>
			sample_count = 128; // at 8 Hz ODR, new mag data is available every 125 ms
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (Mmode == 0x06)
 8001678:	4ba6      	ldr	r3, [pc, #664]	; (8001914 <calibrateMag+0x31c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b06      	cmp	r3, #6
 800167e:	d103      	bne.n	8001688 <calibrateMag+0x90>
			sample_count = 1500; // at 100 Hz ODR, new mag data is available every 10 ms
 8001680:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001684:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		for (ii = 0; ii < sample_count; ii++) {
 8001688:	2300      	movs	r3, #0
 800168a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800168e:	e055      	b.n	800173c <calibrateMag+0x144>
			readMagData(I2Cx, mag_temp);  // Read the mag data
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff feb2 	bl	8001400 <readMagData>
			for (int jj = 0; jj < 3; jj++) {
 800169c:	2300      	movs	r3, #0
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
 80016a0:	e036      	b.n	8001710 <calibrateMag+0x118>
				if (mag_temp[jj] > mag_max[jj])
 80016a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	3350      	adds	r3, #80	; 0x50
 80016a8:	443b      	add	r3, r7
 80016aa:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80016ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	3350      	adds	r3, #80	; 0x50
 80016b4:	443b      	add	r3, r7
 80016b6:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dd0b      	ble.n	80016d6 <calibrateMag+0xde>
					mag_max[jj] = mag_temp[jj];
 80016be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3350      	adds	r3, #80	; 0x50
 80016c4:	443b      	add	r3, r7
 80016c6:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80016ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	3350      	adds	r3, #80	; 0x50
 80016d0:	443b      	add	r3, r7
 80016d2:	f823 2c2c 	strh.w	r2, [r3, #-44]
				if (mag_temp[jj] < mag_min[jj])
 80016d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	3350      	adds	r3, #80	; 0x50
 80016dc:	443b      	add	r3, r7
 80016de:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80016e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	3350      	adds	r3, #80	; 0x50
 80016e8:	443b      	add	r3, r7
 80016ea:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	da0b      	bge.n	800170a <calibrateMag+0x112>
					mag_min[jj] = mag_temp[jj];
 80016f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	3350      	adds	r3, #80	; 0x50
 80016f8:	443b      	add	r3, r7
 80016fa:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80016fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	3350      	adds	r3, #80	; 0x50
 8001704:	443b      	add	r3, r7
 8001706:	f823 2c34 	strh.w	r2, [r3, #-52]
			for (int jj = 0; jj < 3; jj++) {
 800170a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800170c:	3301      	adds	r3, #1
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001712:	2b02      	cmp	r3, #2
 8001714:	ddc5      	ble.n	80016a2 <calibrateMag+0xaa>
			}
			if (Mmode == 0x02)
 8001716:	4b7f      	ldr	r3, [pc, #508]	; (8001914 <calibrateMag+0x31c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d102      	bne.n	8001724 <calibrateMag+0x12c>
				HAL_Delay(135); // at 8 Hz ODR, new mag data is available every 125 ms
 800171e:	2087      	movs	r0, #135	; 0x87
 8001720:	f008 fc58 	bl	8009fd4 <HAL_Delay>
			if (Mmode == 0x06)
 8001724:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <calibrateMag+0x31c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b06      	cmp	r3, #6
 800172a:	d102      	bne.n	8001732 <calibrateMag+0x13a>
				HAL_Delay(12); // at 100 Hz ODR, new mag data is available every 10 ms
 800172c:	200c      	movs	r0, #12
 800172e:	f008 fc51 	bl	8009fd4 <HAL_Delay>
		for (ii = 0; ii < sample_count; ii++) {
 8001732:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001736:	3301      	adds	r3, #1
 8001738:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800173c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001740:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001744:	429a      	cmp	r2, r3
 8001746:	d3a3      	bcc.n	8001690 <calibrateMag+0x98>
//				W25qxx_Write(magData[i], (FLASH_ADD_STARTING_FOR_MAG + (i * 8)),
//						8);
//			}
//		}

		playEndCalib();
 8001748:	f007 fa5e 	bl	8008c08 <playEndCalib>
 800174c:	e00f      	b.n	800176e <calibrateMag+0x176>
	} else {
		mag_max[0] = 275;
 800174e:	f240 1313 	movw	r3, #275	; 0x113
 8001752:	84bb      	strh	r3, [r7, #36]	; 0x24
		mag_max[1] = 200;
 8001754:	23c8      	movs	r3, #200	; 0xc8
 8001756:	84fb      	strh	r3, [r7, #38]	; 0x26
		mag_max[2] = 93;
 8001758:	235d      	movs	r3, #93	; 0x5d
 800175a:	853b      	strh	r3, [r7, #40]	; 0x28

		mag_min[0] = -176;
 800175c:	f64f 7350 	movw	r3, #65360	; 0xff50
 8001760:	83bb      	strh	r3, [r7, #28]
		mag_min[1] = -258;
 8001762:	f64f 63fe 	movw	r3, #65278	; 0xfefe
 8001766:	83fb      	strh	r3, [r7, #30]
		mag_min[2] = -371;
 8001768:	f64f 638d 	movw	r3, #65165	; 0xfe8d
 800176c:	843b      	strh	r3, [r7, #32]
//		printf("\n");
//		if (status != HAL_OK)
//			return 0;
	}
	// Get hard iron correction
	mag_bias[0] = (mag_max[0] + mag_min[0]) / 2; // get average x mag bias in counts
 800176e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001772:	461a      	mov	r2, r3
 8001774:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	da00      	bge.n	8001780 <calibrateMag+0x188>
 800177e:	3301      	adds	r3, #1
 8001780:	105b      	asrs	r3, r3, #1
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
	mag_bias[1] = (mag_max[1] + mag_min[1]) / 2; // get average y mag bias in counts
 8001784:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001788:	461a      	mov	r2, r3
 800178a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800178e:	4413      	add	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	da00      	bge.n	8001796 <calibrateMag+0x19e>
 8001794:	3301      	adds	r3, #1
 8001796:	105b      	asrs	r3, r3, #1
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
	mag_bias[2] = (mag_max[2] + mag_min[2]) / 2; // get average z mag bias in counts
 800179a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800179e:	461a      	mov	r2, r3
 80017a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017a4:	4413      	add	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <calibrateMag+0x1b4>
 80017aa:	3301      	adds	r3, #1
 80017ac:	105b      	asrs	r3, r3, #1
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40

	dest1[0] = (float) mag_bias[0] * mRes * magCalibration[0]; // save mag biases in G for main program
 80017b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ba:	4b57      	ldr	r3, [pc, #348]	; (8001918 <calibrateMag+0x320>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c4:	4b55      	ldr	r3, [pc, #340]	; (800191c <calibrateMag+0x324>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1] * mRes * magCalibration[1];
 80017d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017de:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <calibrateMag+0x320>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <calibrateMag+0x324>)
 80017ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	3304      	adds	r3, #4
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2] * mRes * magCalibration[2];
 80017fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001804:	4b44      	ldr	r3, [pc, #272]	; (8001918 <calibrateMag+0x320>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <calibrateMag+0x324>)
 8001810:	edd3 7a02 	vldr	s15, [r3, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3308      	adds	r3, #8
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	edc3 7a00 	vstr	s15, [r3]

	// Get soft iron correction estimate
	mag_scale[0] = (mag_max[0] - mag_min[0]) / 2; // get average x axis max chord length in counts
 8001820:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001824:	461a      	mov	r2, r3
 8001826:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	da00      	bge.n	8001832 <calibrateMag+0x23a>
 8001830:	3301      	adds	r3, #1
 8001832:	105b      	asrs	r3, r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
	mag_scale[1] = (mag_max[1] - mag_min[1]) / 2; // get average y axis max chord length in counts
 8001836:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800183a:	461a      	mov	r2, r3
 800183c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	da00      	bge.n	8001848 <calibrateMag+0x250>
 8001846:	3301      	adds	r3, #1
 8001848:	105b      	asrs	r3, r3, #1
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
	mag_scale[2] = (mag_max[2] - mag_min[2]) / 2; // get average z axis max chord length in counts
 800184c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001850:	461a      	mov	r2, r3
 8001852:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	da00      	bge.n	800185e <calibrateMag+0x266>
 800185c:	3301      	adds	r3, #1
 800185e:	105b      	asrs	r3, r3, #1
 8001860:	637b      	str	r3, [r7, #52]	; 0x34

	float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8001862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001866:	441a      	add	r2, r3
 8001868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186a:	4413      	add	r3, r2
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001874:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	avg_rad /= 3.0;
 8001878:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800187c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001884:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	if (avg_rad == 0) {
 8001888:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800188c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d10e      	bne.n	80018b4 <calibrateMag+0x2bc>
		dest2[0] = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
		dest2[1] = 0;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
		dest2[2] = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3308      	adds	r3, #8
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e025      	b.n	8001900 <calibrateMag+0x308>
	} else {
		dest2[0] = avg_rad / ((float) mag_scale[0]);
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018be:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80018c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	edc3 7a00 	vstr	s15, [r3]
		dest2[1] = avg_rad / ((float) mag_scale[1]);
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3304      	adds	r3, #4
 80018da:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80018de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e2:	edc3 7a00 	vstr	s15, [r3]
		dest2[2] = avg_rad / ((float) mag_scale[2]);
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3308      	adds	r3, #8
 80018f4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80018f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fc:	edc3 7a00 	vstr	s15, [r3]
	}

	if (SerialDebugA) {
		printf("Mag Calibration done!\r\n");
	}
	return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	3750      	adds	r7, #80	; 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	080272f0 	.word	0x080272f0
 8001910:	080272f8 	.word	0x080272f8
 8001914:	24000003 	.word	0x24000003
 8001918:	240004f4 	.word	0x240004f4
 800191c:	24000510 	.word	0x24000510

08001920 <initMPU9250>:

void initMPU9250(I2C_HandleTypeDef *I2Cx) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af04      	add	r7, sp, #16
 8001926:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8001928:	2300      	movs	r3, #0
 800192a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1,
 800192c:	230f      	movs	r3, #15
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	2301      	movs	r3, #1
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	f107 030e 	add.w	r3, r7, #14
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	226b      	movs	r2, #107	; 0x6b
 800193e:	21d0      	movs	r1, #208	; 0xd0
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f00d fb01 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 8001946:	2064      	movs	r0, #100	; 0x64
 8001948:	f008 fb44 	bl	8009fd4 <HAL_Delay>

	writeData = 0x01;
 800194c:	2301      	movs	r3, #1
 800194e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1,
 8001950:	230f      	movs	r3, #15
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	f107 030e 	add.w	r3, r7, #14
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	226b      	movs	r2, #107	; 0x6b
 8001962:	21d0      	movs	r1, #208	; 0xd0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f00d faef 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 800196a:	2064      	movs	r0, #100	; 0x64
 800196c:	f008 fb32 	bl	8009fd4 <HAL_Delay>

	writeData = 0x03;
 8001970:	2303      	movs	r3, #3
 8001972:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1,
 8001974:	230f      	movs	r3, #15
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	2301      	movs	r3, #1
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f107 030e 	add.w	r3, r7, #14
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	221a      	movs	r2, #26
 8001986:	21d0      	movs	r1, #208	; 0xd0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f00d fadd 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 800198e:	2064      	movs	r0, #100	; 0x64
 8001990:	f008 fb20 	bl	8009fd4 <HAL_Delay>

	writeData = 0x04;
 8001994:	2304      	movs	r3, #4
 8001996:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1,
 8001998:	230f      	movs	r3, #15
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	2301      	movs	r3, #1
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	f107 030e 	add.w	r3, r7, #14
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2301      	movs	r3, #1
 80019a8:	2219      	movs	r2, #25
 80019aa:	21d0      	movs	r1, #208	; 0xd0
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f00d facb 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 80019b2:	2064      	movs	r0, #100	; 0x64
 80019b4:	f008 fb0e 	bl	8009fd4 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1,
 80019b8:	230f      	movs	r3, #15
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	2301      	movs	r3, #1
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	f107 030f 	add.w	r3, r7, #15
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	221b      	movs	r2, #27
 80019ca:	21d0      	movs	r1, #208	; 0xd0
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f00d fbcf 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	f023 0303 	bic.w	r3, r3, #3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	f023 0318 	bic.w	r3, r3, #24
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <initMPU9250+0x1bc>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	b25a      	sxtb	r2, r3
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80019fa:	2064      	movs	r0, #100	; 0x64
 80019fc:	f008 faea 	bl	8009fd4 <HAL_Delay>

	writeData = readData;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1,
 8001a04:	230f      	movs	r3, #15
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	f107 030e 	add.w	r3, r7, #14
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	221b      	movs	r2, #27
 8001a16:	21d0      	movs	r1, #208	; 0xd0
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f00d fa95 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 8001a1e:	2064      	movs	r0, #100	; 0x64
 8001a20:	f008 fad8 	bl	8009fd4 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1,
 8001a24:	230f      	movs	r3, #15
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	f107 030f 	add.w	r3, r7, #15
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	221c      	movs	r2, #28
 8001a36:	21d0      	movs	r1, #208	; 0xd0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f00d fb99 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	f023 0318 	bic.w	r3, r3, #24
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <initMPU9250+0x1c0>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	b25a      	sxtb	r2, r3
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1,
 8001a60:	230f      	movs	r3, #15
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	2301      	movs	r3, #1
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	f107 030e 	add.w	r3, r7, #14
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	221c      	movs	r2, #28
 8001a72:	21d0      	movs	r1, #208	; 0xd0
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f00d fa67 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 8001a7a:	2064      	movs	r0, #100	; 0x64
 8001a7c:	f008 faaa 	bl	8009fd4 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1,
 8001a80:	230f      	movs	r3, #15
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	2301      	movs	r3, #1
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	f107 030f 	add.w	r3, r7, #15
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	221d      	movs	r2, #29
 8001a92:	21d0      	movs	r1, #208	; 0xd0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f00d fb6b 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03; // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	f043 0303 	orr.w	r3, r3, #3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1,
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	f107 030e 	add.w	r3, r7, #14
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	221d      	movs	r2, #29
 8001ac4:	21d0      	movs	r1, #208	; 0xd0
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f00d fa3e 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(100);
 8001acc:	2064      	movs	r0, #100	; 0x64
 8001ace:	f008 fa81 	bl	8009fd4 <HAL_Delay>

	if (SerialDebugA) {
		printf("MPU Init Succesful! \r\n");
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24000000 	.word	0x24000000
 8001ae0:	24000001 	.word	0x24000001

08001ae4 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float *dest1, float *dest2) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09e      	sub	sp, #120	; 0x78
 8001ae8:	af04      	add	r7, sp, #16
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	//pre def. vars
	uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
 8001b04:	2300      	movs	r3, #0
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1,
 8001b0e:	230f      	movs	r3, #15
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	226b      	movs	r2, #107	; 0x6b
 8001b20:	21d0      	movs	r1, #208	; 0xd0
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f00d fa10 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Write a one to bit 7 reset bit; toggle reset device
	HAL_Delay(100);
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f008 fa53 	bl	8009fd4 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1,
 8001b34:	230f      	movs	r3, #15
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	226b      	movs	r2, #107	; 0x6b
 8001b46:	21d0      	movs	r1, #208	; 0xd0
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f00d f9fd 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = 0x00;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1,
 8001b54:	230f      	movs	r3, #15
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2301      	movs	r3, #1
 8001b64:	226c      	movs	r2, #108	; 0x6c
 8001b66:	21d0      	movs	r1, #208	; 0xd0
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f00d f9ed 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(200);
 8001b6e:	20c8      	movs	r0, #200	; 0xc8
 8001b70:	f008 fa30 	bl	8009fd4 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1,
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2238      	movs	r2, #56	; 0x38
 8001b8c:	21d0      	movs	r1, #208	; 0xd0
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f00d f9da 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Disable all interrupts
	writeData = 0x00;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1,
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	9302      	str	r3, [sp, #8]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	2223      	movs	r2, #35	; 0x23
 8001bac:	21d0      	movs	r1, #208	; 0xd0
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f00d f9ca 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Disable FIFO
	writeData = 0x00;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1,
 8001bba:	230f      	movs	r3, #15
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	226b      	movs	r2, #107	; 0x6b
 8001bcc:	21d0      	movs	r1, #208	; 0xd0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f00d f9ba 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Turn on internal clock source
	writeData = 0x00;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1,
 8001bda:	230f      	movs	r3, #15
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2301      	movs	r3, #1
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2301      	movs	r3, #1
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	21d0      	movs	r1, #208	; 0xd0
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f00d f9aa 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Disable I2C master
	writeData = 0x00;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1,
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	9302      	str	r3, [sp, #8]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	226a      	movs	r2, #106	; 0x6a
 8001c0c:	21d0      	movs	r1, #208	; 0xd0
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f00d f99a 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Disable FIFO and I2C master modes
	writeData = 0x0C;
 8001c14:	230c      	movs	r3, #12
 8001c16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1,
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	226a      	movs	r2, #106	; 0x6a
 8001c2c:	21d0      	movs	r1, #208	; 0xd0
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f00d f98a 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Reset FIFO and DMP
	HAL_Delay(15);
 8001c34:	200f      	movs	r0, #15
 8001c36:	f008 f9cd 	bl	8009fd4 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1,
 8001c40:	230f      	movs	r3, #15
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2301      	movs	r3, #1
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	221a      	movs	r2, #26
 8001c52:	21d0      	movs	r1, #208	; 0xd0
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f00d f977 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Set low-pass filter to 188 Hz
	writeData = 0x00;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1,
 8001c60:	230f      	movs	r3, #15
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	2301      	movs	r3, #1
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2219      	movs	r2, #25
 8001c72:	21d0      	movs	r1, #208	; 0xd0
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f00d f967 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);	// Set sample rate to 1 kHz
	writeData = 0x00;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1,
 8001c80:	230f      	movs	r3, #15
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	2301      	movs	r3, #1
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	221b      	movs	r2, #27
 8001c92:	21d0      	movs	r1, #208	; 0xd0
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f00d f957 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
	writeData = 0x00;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1,
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	221c      	movs	r2, #28
 8001cb2:	21d0      	movs	r1, #208	; 0xd0
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f00d f947 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
 8001cba:	2383      	movs	r3, #131	; 0x83
 8001cbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g
 8001cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8001cc8:	2340      	movs	r3, #64	; 0x40
 8001cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1,
 8001cce:	230f      	movs	r3, #15
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	226a      	movs	r2, #106	; 0x6a
 8001ce0:	21d0      	movs	r1, #208	; 0xd0
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f00d f930 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);  // Enable FIFO
	writeData = 0x78;
 8001ce8:	2378      	movs	r3, #120	; 0x78
 8001cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1,
 8001cee:	230f      	movs	r3, #15
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	2223      	movs	r2, #35	; 0x23
 8001d00:	21d0      	movs	r1, #208	; 0xd0
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f00d f920 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8001d08:	2028      	movs	r0, #40	; 0x28
 8001d0a:	f008 f963 	bl	8009fd4 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1,
 8001d14:	230f      	movs	r3, #15
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2301      	movs	r3, #1
 8001d24:	2223      	movs	r2, #35	; 0x23
 8001d26:	21d0      	movs	r1, #208	; 0xd0
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f00d f90d 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Disable gyro and accelerometer sensors for FIFO
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2,
 8001d2e:	230f      	movs	r3, #15
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2272      	movs	r2, #114	; 0x72
 8001d40:	21d0      	movs	r1, #208	; 0xd0
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f00d fa14 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout); // read FIFO sample count
	fifo_count = ((uint16_t) calibData[0] << 8) | calibData[1];
 8001d48:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 8001d5e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d62:	4a5a      	ldr	r2, [pc, #360]	; (8001ecc <calibrateMPU9250+0x3e8>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001d74:	e077      	b.n	8001e66 <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
 8001d76:	2300      	movs	r3, #0
 8001d78:	833b      	strh	r3, [r7, #24]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	837b      	strh	r3, [r7, #26]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	83bb      	strh	r3, [r7, #28]
 8001d82:	2300      	movs	r3, #0
 8001d84:	823b      	strh	r3, [r7, #16]
 8001d86:	2300      	movs	r3, #0
 8001d88:	827b      	strh	r3, [r7, #18]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12,
 8001d8e:	230f      	movs	r3, #15
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	230c      	movs	r3, #12
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2274      	movs	r2, #116	; 0x74
 8001da0:	21d0      	movs	r1, #208	; 0xd0
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f00d f9e4 	bl	800f170 <HAL_I2C_Mem_Read>
				i2c_timeout);

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] =
				(int16_t) (((int16_t) calibData[0] << 8) | calibData[1]);
 8001da8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21b      	sxth	r3, r3
		accel_temp[0] =
 8001dba:	833b      	strh	r3, [r7, #24]
		accel_temp[1] =
				(int16_t) (((int16_t) calibData[2] << 8) | calibData[3]);
 8001dbc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b21b      	sxth	r3, r3
		accel_temp[1] =
 8001dce:	837b      	strh	r3, [r7, #26]
		accel_temp[2] =
				(int16_t) (((int16_t) calibData[4] << 8) | calibData[5]);
 8001dd0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
		accel_temp[2] =
 8001de2:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0] = (int16_t) (((int16_t) calibData[6] << 8) | calibData[7]);
 8001de4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	823b      	strh	r3, [r7, #16]
		gyro_temp[1] = (int16_t) (((int16_t) calibData[8] << 8) | calibData[9]);
 8001df8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	827b      	strh	r3, [r7, #18]
		gyro_temp[2] =
				(int16_t) (((int16_t) calibData[10] << 8) | calibData[11]);
 8001e0c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	b21b      	sxth	r3, r3
		gyro_temp[2] =
 8001e1e:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e26:	4413      	add	r3, r2
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8001e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001e30:	4413      	add	r3, r2
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8001e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e36:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0] += (int32_t) gyro_temp[0];
 8001e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1] += (int32_t) gyro_temp[1];
 8001e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001e4e:	4413      	add	r3, r2
 8001e50:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2] += (int32_t) gyro_temp[2];
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001e58:	4413      	add	r3, r2
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8001e5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001e60:	3301      	adds	r3, #1
 8001e62:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001e66:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001e6a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d381      	bcc.n	8001d76 <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8001e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e78:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8001e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e84:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8001e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e90:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0] /= (int32_t) packet_count;
 8001e96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1] /= (int32_t) packet_count;
 8001ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ea4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ea8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001eac:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2] /= (int32_t) packet_count;
 8001eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eb0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001eb8:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if (accel_bias[2] > 0L) {
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	dd07      	ble.n	8001ed0 <calibrateMPU9250+0x3ec>
		accel_bias[2] -= (int32_t) accelsensitivity;
 8001ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ec2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eca:	e006      	b.n	8001eda <calibrateMPU9250+0x3f6>
 8001ecc:	aaaaaaab 	.word	0xaaaaaaab
	} else {
		accel_bias[2] += (int32_t) accelsensitivity;
 8001ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001ed6:	4413      	add	r3, r2
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001edc:	425b      	negs	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da00      	bge.n	8001ee4 <calibrateMPU9250+0x400>
 8001ee2:	3303      	adds	r3, #3
 8001ee4:	109b      	asrs	r3, r3, #2
 8001ee6:	121b      	asrs	r3, r3, #8
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef0:	425b      	negs	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	da00      	bge.n	8001ef8 <calibrateMPU9250+0x414>
 8001ef6:	3303      	adds	r3, #3
 8001ef8:	109b      	asrs	r3, r3, #2
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8001f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f02:	425b      	negs	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da00      	bge.n	8001f0a <calibrateMPU9250+0x426>
 8001f08:	3303      	adds	r3, #3
 8001f0a:	109b      	asrs	r3, r3, #2
 8001f0c:	121b      	asrs	r3, r3, #8
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1] / 4) & 0xFF;
 8001f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f16:	425b      	negs	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da00      	bge.n	8001f1e <calibrateMPU9250+0x43a>
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	109b      	asrs	r3, r3, #2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8001f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f28:	425b      	negs	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da00      	bge.n	8001f30 <calibrateMPU9250+0x44c>
 8001f2e:	3303      	adds	r3, #3
 8001f30:	109b      	asrs	r3, r3, #2
 8001f32:	121b      	asrs	r3, r3, #8
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2] / 4) & 0xFF;
 8001f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f3c:	425b      	negs	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da00      	bge.n	8001f44 <calibrateMPU9250+0x460>
 8001f42:	3303      	adds	r3, #3
 8001f44:	109b      	asrs	r3, r3, #2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8001f4c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1,
 8001f54:	230f      	movs	r3, #15
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	2213      	movs	r2, #19
 8001f66:	21d0      	movs	r1, #208	; 0xd0
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f00c ffed 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[1];
 8001f6e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1,
 8001f76:	230f      	movs	r3, #15
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	2214      	movs	r2, #20
 8001f88:	21d0      	movs	r1, #208	; 0xd0
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f00c ffdc 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[2];
 8001f90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1,
 8001f98:	230f      	movs	r3, #15
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2215      	movs	r2, #21
 8001faa:	21d0      	movs	r1, #208	; 0xd0
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f00c ffcb 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[3];
 8001fb2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1,
 8001fba:	230f      	movs	r3, #15
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2216      	movs	r2, #22
 8001fcc:	21d0      	movs	r1, #208	; 0xd0
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f00c ffba 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[4];
 8001fd4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1,
 8001fdc:	230f      	movs	r3, #15
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	2217      	movs	r2, #23
 8001fee:	21d0      	movs	r1, #208	; 0xd0
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f00c ffa9 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[5];
 8001ff6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1,
 8001ffe:	230f      	movs	r3, #15
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	2301      	movs	r3, #1
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	2218      	movs	r2, #24
 8002010:	21d0      	movs	r1, #208	; 0xd0
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f00c ff98 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity;
 8002018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002022:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800202e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 8002038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002042:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3304      	adds	r3, #4
 8002052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002056:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 800205a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002064:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3308      	adds	r3, #8
 8002074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002078:	edc3 7a00 	vstr	s15, [r3]

		printf("-------------------------\r\n");
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = { 0, 0, 0 }; //A place to hold the factory accelerometer trim biases
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2,
 8002088:	230f      	movs	r3, #15
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	2302      	movs	r3, #2
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2301      	movs	r3, #1
 8002098:	2277      	movs	r2, #119	; 0x77
 800209a:	21d0      	movs	r1, #208	; 0xd0
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f00d f867 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout); //Read factory accelerometer trim values
	accel_bias_reg[0] =
			(int32_t) (((int16_t) calibData[0] << 8) | calibData[1]);
 80020a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80020ac:	4313      	orrs	r3, r2
	accel_bias_reg[0] =
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2,
 80020b0:	230f      	movs	r3, #15
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2302      	movs	r3, #2
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2301      	movs	r3, #1
 80020c0:	227a      	movs	r2, #122	; 0x7a
 80020c2:	21d0      	movs	r1, #208	; 0xd0
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f00d f853 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);
	accel_bias_reg[1] =
			(int32_t) (((int16_t) calibData[0] << 8) | calibData[1]);
 80020ca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80020d4:	4313      	orrs	r3, r2
	accel_bias_reg[1] =
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2,
 80020d8:	230f      	movs	r3, #15
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	2302      	movs	r3, #2
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2301      	movs	r3, #1
 80020e8:	227d      	movs	r2, #125	; 0x7d
 80020ea:	21d0      	movs	r1, #208	; 0xd0
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f00d f83f 	bl	800f170 <HAL_I2C_Mem_Read>
			i2c_timeout);
	accel_bias_reg[2] =
			(int32_t) (((int16_t) calibData[0] << 8) | calibData[1]);
 80020f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80020fc:	4313      	orrs	r3, r2
	accel_bias_reg[2] =
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8002100:	2301      	movs	r3, #1
 8002102:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = { 0, 0, 0 };
 8002104:	4a89      	ldr	r2, [pc, #548]	; (800232c <calibrateMPU9250+0x848>)
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	4611      	mov	r1, r2
 800210e:	8019      	strh	r1, [r3, #0]
 8002110:	3302      	adds	r3, #2
 8002112:	0c12      	lsrs	r2, r2, #16
 8002114:	701a      	strb	r2, [r3, #0]

	for (ii = 0; ii < 3; ii++) {
 8002116:	2300      	movs	r3, #0
 8002118:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800211c:	e017      	b.n	800214e <calibrateMPU9250+0x66a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if ((accel_bias_reg[ii] & mask))
 800211e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	3368      	adds	r3, #104	; 0x68
 8002126:	443b      	add	r3, r7
 8002128:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800212c:	461a      	mov	r2, r3
 800212e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <calibrateMPU9250+0x660>
			mask_bit[ii] = 0x01;
 8002136:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800213a:	3368      	adds	r3, #104	; 0x68
 800213c:	443b      	add	r3, r7
 800213e:	2201      	movs	r2, #1
 8002140:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (ii = 0; ii < 3; ii++) {
 8002144:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002148:	3301      	adds	r3, #1
 800214a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800214e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002152:	2b02      	cmp	r3, #2
 8002154:	d9e3      	bls.n	800211e <calibrateMPU9250+0x63a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0] / 8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	2b00      	cmp	r3, #0
 800215c:	da00      	bge.n	8002160 <calibrateMPU9250+0x67c>
 800215e:	3307      	adds	r3, #7
 8002160:	10db      	asrs	r3, r3, #3
 8002162:	425b      	negs	r3, r3
 8002164:	4413      	add	r3, r2
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8002168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	2b00      	cmp	r3, #0
 800216e:	da00      	bge.n	8002172 <calibrateMPU9250+0x68e>
 8002170:	3307      	adds	r3, #7
 8002172:	10db      	asrs	r3, r3, #3
 8002174:	425b      	negs	r3, r3
 8002176:	4413      	add	r3, r2
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800217a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217e:	2b00      	cmp	r3, #0
 8002180:	da00      	bge.n	8002184 <calibrateMPU9250+0x6a0>
 8002182:	3307      	adds	r3, #7
 8002184:	10db      	asrs	r3, r3, #3
 8002186:	425b      	negs	r3, r3
 8002188:	4413      	add	r3, r2
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	121b      	asrs	r3, r3, #8
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0]) & 0xFF;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800219e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80021a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	121b      	asrs	r3, r3, #8
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1]) & 0xFF;
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80021c0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80021c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	121b      	asrs	r3, r3, #8
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2]) & 0xFF;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80021e2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80021e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 80021f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80021f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1,
 80021fa:	230f      	movs	r3, #15
 80021fc:	9302      	str	r3, [sp, #8]
 80021fe:	2301      	movs	r3, #1
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	2277      	movs	r2, #119	; 0x77
 800220c:	21d0      	movs	r1, #208	; 0xd0
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f00c fe9a 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[1];
 8002214:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1,
 800221c:	230f      	movs	r3, #15
 800221e:	9302      	str	r3, [sp, #8]
 8002220:	2301      	movs	r3, #1
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2301      	movs	r3, #1
 800222c:	2278      	movs	r2, #120	; 0x78
 800222e:	21d0      	movs	r1, #208	; 0xd0
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f00c fe89 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[2];
 8002236:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800223a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1,
 800223e:	230f      	movs	r3, #15
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2301      	movs	r3, #1
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2301      	movs	r3, #1
 800224e:	227a      	movs	r2, #122	; 0x7a
 8002250:	21d0      	movs	r1, #208	; 0xd0
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f00c fe78 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[3];
 8002258:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800225c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1,
 8002260:	230f      	movs	r3, #15
 8002262:	9302      	str	r3, [sp, #8]
 8002264:	2301      	movs	r3, #1
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2301      	movs	r3, #1
 8002270:	227b      	movs	r2, #123	; 0x7b
 8002272:	21d0      	movs	r1, #208	; 0xd0
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f00c fe67 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[4];
 800227a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800227e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1,
 8002282:	230f      	movs	r3, #15
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	2301      	movs	r3, #1
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2301      	movs	r3, #1
 8002292:	227d      	movs	r2, #125	; 0x7d
 8002294:	21d0      	movs	r1, #208	; 0xd0
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f00c fe56 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = calibData[5];
 800229c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1,
 80022a4:	230f      	movs	r3, #15
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	2301      	movs	r3, #1
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	227e      	movs	r2, #126	; 0x7e
 80022b6:	21d0      	movs	r1, #208	; 0xd0
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f00c fe45 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022fc:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800230a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3308      	adds	r3, #8
 800231a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231e:	edc3 7a00 	vstr	s15, [r3]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
	}
}
 8002322:	bf00      	nop
 8002324:	3768      	adds	r7, #104	; 0x68
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	08027300 	.word	0x08027300

08002330 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float *destination) {
 8002330:	b580      	push	{r7, lr}
 8002332:	ed2d 8b02 	vpush	{d8}
 8002336:	b0a8      	sub	sp, #160	; 0xa0
 8002338:	af04      	add	r7, sp, #16
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = { 0, 0, 0, 0, 0, 0 };
 800233e:	4aa2      	ldr	r2, [pc, #648]	; (80025c8 <MPU9250SelfTest+0x298>)
 8002340:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002348:	6018      	str	r0, [r3, #0]
 800234a:	3304      	adds	r3, #4
 800234c:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = { 0 }, aAvg[3] = { 0 }, aSTAvg[3] = { 0 }, gSTAvg[3] =
 800234e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
			{ 0 };
	float factoryTrim[6];
	uint8_t FS = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1,
 800238a:	230f      	movs	r3, #15
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	2301      	movs	r3, #1
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	2219      	movs	r2, #25
 800239c:	21d0      	movs	r1, #208	; 0xd0
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f00c fdd2 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Set gyro sample rate to 1 kHz
	writeData = 0x02;
 80023a4:	2302      	movs	r3, #2
 80023a6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1,
 80023aa:	230f      	movs	r3, #15
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	2301      	movs	r3, #1
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2301      	movs	r3, #1
 80023ba:	221a      	movs	r2, #26
 80023bc:	21d0      	movs	r1, #208	; 0xd0
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f00c fdc2 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeData = FS << 3;
 80023c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1,
 80023d0:	230f      	movs	r3, #15
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	2301      	movs	r3, #1
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2301      	movs	r3, #1
 80023e0:	221b      	movs	r2, #27
 80023e2:	21d0      	movs	r1, #208	; 0xd0
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f00c fdaf 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Set full scale range for the gyro to 250 dps
	writeData = 0x02;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1,
 80023f0:	230f      	movs	r3, #15
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	2301      	movs	r3, #1
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2301      	movs	r3, #1
 8002400:	221d      	movs	r2, #29
 8002402:	21d0      	movs	r1, #208	; 0xd0
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f00c fd9f 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeData = FS << 3;
 800240a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1,
 8002416:	230f      	movs	r3, #15
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	2301      	movs	r3, #1
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2301      	movs	r3, #1
 8002426:	221c      	movs	r2, #28
 8002428:	21d0      	movs	r1, #208	; 0xd0
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f00c fd8c 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Set full scale range for the accelerometer to 2 g

	//get average current values of gyro and acclerometer
	for (int ii = 0; ii < 200; ii++) {
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002436:	e066      	b.n	8002506 <MPU9250SelfTest+0x1d6>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1,
 8002438:	230f      	movs	r3, #15
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	2306      	movs	r3, #6
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	223b      	movs	r2, #59	; 0x3b
 800244a:	21d0      	movs	r1, #208	; 0xd0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f00c fe8f 	bl	800f170 <HAL_I2C_Mem_Read>
				&rawTestData[0], 6, i2c_timeout); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawTestData[0] << 8) | rawTestData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8002452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002454:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8002458:	0212      	lsls	r2, r2, #8
 800245a:	b211      	sxth	r1, r2
 800245c:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8002460:	b212      	sxth	r2, r2
 8002462:	430a      	orrs	r2, r1
 8002464:	b212      	sxth	r2, r2
 8002466:	4413      	add	r3, r2
 8002468:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t) (((int16_t) rawTestData[2] << 8) | rawTestData[3]);
 800246a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8002470:	0212      	lsls	r2, r2, #8
 8002472:	b211      	sxth	r1, r2
 8002474:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8002478:	b212      	sxth	r2, r2
 800247a:	430a      	orrs	r2, r1
 800247c:	b212      	sxth	r2, r2
 800247e:	4413      	add	r3, r2
 8002480:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t) (((int16_t) rawTestData[4] << 8) | rawTestData[5]);
 8002482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002484:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8002488:	0212      	lsls	r2, r2, #8
 800248a:	b211      	sxth	r1, r2
 800248c:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8002490:	b212      	sxth	r2, r2
 8002492:	430a      	orrs	r2, r1
 8002494:	b212      	sxth	r2, r2
 8002496:	4413      	add	r3, r2
 8002498:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0],
 800249a:	230f      	movs	r3, #15
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	2306      	movs	r3, #6
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2301      	movs	r3, #1
 80024aa:	2243      	movs	r2, #67	; 0x43
 80024ac:	21d0      	movs	r1, #208	; 0xd0
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f00c fe5e 	bl	800f170 <HAL_I2C_Mem_Read>
				6, i2c_timeout); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawTestData[0] << 8) | rawTestData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80024ba:	0212      	lsls	r2, r2, #8
 80024bc:	b211      	sxth	r1, r2
 80024be:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80024c2:	b212      	sxth	r2, r2
 80024c4:	430a      	orrs	r2, r1
 80024c6:	b212      	sxth	r2, r2
 80024c8:	4413      	add	r3, r2
 80024ca:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t) (((int16_t) rawTestData[2] << 8) | rawTestData[3]);
 80024cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ce:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80024d2:	0212      	lsls	r2, r2, #8
 80024d4:	b211      	sxth	r1, r2
 80024d6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80024da:	b212      	sxth	r2, r2
 80024dc:	430a      	orrs	r2, r1
 80024de:	b212      	sxth	r2, r2
 80024e0:	4413      	add	r3, r2
 80024e2:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t) (((int16_t) rawTestData[4] << 8) | rawTestData[5]);
 80024e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e6:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80024ea:	0212      	lsls	r2, r2, #8
 80024ec:	b211      	sxth	r1, r2
 80024ee:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80024f2:	b212      	sxth	r2, r2
 80024f4:	430a      	orrs	r2, r1
 80024f6:	b212      	sxth	r2, r2
 80024f8:	4413      	add	r3, r2
 80024fa:	667b      	str	r3, [r7, #100]	; 0x64
	for (int ii = 0; ii < 200; ii++) {
 80024fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002500:	3301      	adds	r3, #1
 8002502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800250a:	2bc7      	cmp	r3, #199	; 0xc7
 800250c:	dd94      	ble.n	8002438 <MPU9250SelfTest+0x108>
	}

	//Get average of 200 values and store as average current readings
	for (int ii = 0; ii < 3; ii++) {
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002514:	e02c      	b.n	8002570 <MPU9250SelfTest+0x240>
		aAvg[ii] /= 200;
 8002516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3390      	adds	r3, #144	; 0x90
 800251e:	443b      	add	r3, r7
 8002520:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <MPU9250SelfTest+0x29c>)
 8002526:	fb82 1203 	smull	r1, r2, r2, r3
 800252a:	1192      	asrs	r2, r2, #6
 800252c:	17db      	asrs	r3, r3, #31
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	3390      	adds	r3, #144	; 0x90
 8002538:	443b      	add	r3, r7
 800253a:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 800253e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	3390      	adds	r3, #144	; 0x90
 8002546:	443b      	add	r3, r7
 8002548:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <MPU9250SelfTest+0x29c>)
 800254e:	fb82 1203 	smull	r1, r2, r2, r3
 8002552:	1192      	asrs	r2, r2, #6
 8002554:	17db      	asrs	r3, r3, #31
 8002556:	1ad2      	subs	r2, r2, r3
 8002558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	3390      	adds	r3, #144	; 0x90
 8002560:	443b      	add	r3, r7
 8002562:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii = 0; ii < 3; ii++) {
 8002566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800256a:	3301      	adds	r3, #1
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002574:	2b02      	cmp	r3, #2
 8002576:	ddce      	ble.n	8002516 <MPU9250SelfTest+0x1e6>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 8002578:	23e0      	movs	r3, #224	; 0xe0
 800257a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1,
 800257e:	230f      	movs	r3, #15
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	2301      	movs	r3, #1
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	221c      	movs	r2, #28
 8002590:	21d0      	movs	r1, #208	; 0xd0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f00c fcd8 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeData = 0xE0;
 8002598:	23e0      	movs	r3, #224	; 0xe0
 800259a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1,
 800259e:	230f      	movs	r3, #15
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2301      	movs	r3, #1
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2301      	movs	r3, #1
 80025ae:	221b      	movs	r2, #27
 80025b0:	21d0      	movs	r1, #208	; 0xd0
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f00c fcc8 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80025b8:	2019      	movs	r0, #25
 80025ba:	f007 fd0b 	bl	8009fd4 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for (int ii = 0; ii < 200; ii++) {
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025c4:	e06b      	b.n	800269e <MPU9250SelfTest+0x36e>
 80025c6:	bf00      	nop
 80025c8:	08027304 	.word	0x08027304
 80025cc:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1,
 80025d0:	230f      	movs	r3, #15
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2306      	movs	r3, #6
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2301      	movs	r3, #1
 80025e0:	223b      	movs	r2, #59	; 0x3b
 80025e2:	21d0      	movs	r1, #208	; 0xd0
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f00c fdc3 	bl	800f170 <HAL_I2C_Mem_Read>
				&rawTestData[0], 6, i2c_timeout); // Read the six raw data registers into data array
		aSTAvg[0] +=
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				(int16_t) (((int16_t) rawTestData[0] << 8) | rawTestData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80025ec:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80025f0:	0212      	lsls	r2, r2, #8
 80025f2:	b211      	sxth	r1, r2
 80025f4:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80025f8:	b212      	sxth	r2, r2
 80025fa:	430a      	orrs	r2, r1
 80025fc:	b212      	sxth	r2, r2
		aSTAvg[0] +=
 80025fe:	4413      	add	r3, r2
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] +=
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
				(int16_t) (((int16_t) rawTestData[2] << 8) | rawTestData[3]);
 8002604:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8002608:	0212      	lsls	r2, r2, #8
 800260a:	b211      	sxth	r1, r2
 800260c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8002610:	b212      	sxth	r2, r2
 8002612:	430a      	orrs	r2, r1
 8002614:	b212      	sxth	r2, r2
		aSTAvg[1] +=
 8002616:	4413      	add	r3, r2
 8002618:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] +=
 800261a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
				(int16_t) (((int16_t) rawTestData[4] << 8) | rawTestData[5]);
 800261c:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8002620:	0212      	lsls	r2, r2, #8
 8002622:	b211      	sxth	r1, r2
 8002624:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8002628:	b212      	sxth	r2, r2
 800262a:	430a      	orrs	r2, r1
 800262c:	b212      	sxth	r2, r2
		aSTAvg[2] +=
 800262e:	4413      	add	r3, r2
 8002630:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0],
 8002632:	230f      	movs	r3, #15
 8002634:	9302      	str	r3, [sp, #8]
 8002636:	2306      	movs	r3, #6
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2301      	movs	r3, #1
 8002642:	2243      	movs	r2, #67	; 0x43
 8002644:	21d0      	movs	r1, #208	; 0xd0
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f00c fd92 	bl	800f170 <HAL_I2C_Mem_Read>
				6, i2c_timeout); // Read the six raw data registers sequentially into data array
		gSTAvg[0] +=
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
				(int16_t) (((int16_t) rawTestData[0] << 8) | rawTestData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800264e:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8002652:	0212      	lsls	r2, r2, #8
 8002654:	b211      	sxth	r1, r2
 8002656:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800265a:	b212      	sxth	r2, r2
 800265c:	430a      	orrs	r2, r1
 800265e:	b212      	sxth	r2, r2
		gSTAvg[0] +=
 8002660:	4413      	add	r3, r2
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] +=
 8002664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
				(int16_t) (((int16_t) rawTestData[2] << 8) | rawTestData[3]);
 8002666:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	b211      	sxth	r1, r2
 800266e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8002672:	b212      	sxth	r2, r2
 8002674:	430a      	orrs	r2, r1
 8002676:	b212      	sxth	r2, r2
		gSTAvg[1] +=
 8002678:	4413      	add	r3, r2
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] +=
 800267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
				(int16_t) (((int16_t) rawTestData[4] << 8) | rawTestData[5]);
 800267e:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8002682:	0212      	lsls	r2, r2, #8
 8002684:	b211      	sxth	r1, r2
 8002686:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800268a:	b212      	sxth	r2, r2
 800268c:	430a      	orrs	r2, r1
 800268e:	b212      	sxth	r2, r2
		gSTAvg[2] +=
 8002690:	4413      	add	r3, r2
 8002692:	643b      	str	r3, [r7, #64]	; 0x40
	for (int ii = 0; ii < 200; ii++) {
 8002694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002698:	3301      	adds	r3, #1
 800269a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800269e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a2:	2bc7      	cmp	r3, #199	; 0xc7
 80026a4:	dd94      	ble.n	80025d0 <MPU9250SelfTest+0x2a0>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii = 0; ii < 3; ii++) {
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026ac:	e02c      	b.n	8002708 <MPU9250SelfTest+0x3d8>
		aSTAvg[ii] /= 200;
 80026ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3390      	adds	r3, #144	; 0x90
 80026b6:	443b      	add	r3, r7
 80026b8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80026bc:	4ac6      	ldr	r2, [pc, #792]	; (80029d8 <MPU9250SelfTest+0x6a8>)
 80026be:	fb82 1203 	smull	r1, r2, r2, r3
 80026c2:	1192      	asrs	r2, r2, #6
 80026c4:	17db      	asrs	r3, r3, #31
 80026c6:	1ad2      	subs	r2, r2, r3
 80026c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	3390      	adds	r3, #144	; 0x90
 80026d0:	443b      	add	r3, r7
 80026d2:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 80026d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	3390      	adds	r3, #144	; 0x90
 80026de:	443b      	add	r3, r7
 80026e0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80026e4:	4abc      	ldr	r2, [pc, #752]	; (80029d8 <MPU9250SelfTest+0x6a8>)
 80026e6:	fb82 1203 	smull	r1, r2, r2, r3
 80026ea:	1192      	asrs	r2, r2, #6
 80026ec:	17db      	asrs	r3, r3, #31
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3390      	adds	r3, #144	; 0x90
 80026f8:	443b      	add	r3, r7
 80026fa:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii = 0; ii < 3; ii++) {
 80026fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002702:	3301      	adds	r3, #1
 8002704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800270c:	2b02      	cmp	r3, #2
 800270e:	ddce      	ble.n	80026ae <MPU9250SelfTest+0x37e>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1,
 8002716:	230f      	movs	r3, #15
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2301      	movs	r3, #1
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	221c      	movs	r2, #28
 8002728:	21d0      	movs	r1, #208	; 0xd0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f00c fc0c 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	writeData = 0x00;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1,
 8002736:	230f      	movs	r3, #15
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	2301      	movs	r3, #1
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2301      	movs	r3, #1
 8002746:	221b      	movs	r2, #27
 8002748:	21d0      	movs	r1, #208	; 0xd0
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f00c fbfc 	bl	800ef48 <HAL_I2C_Mem_Write>
			i2c_timeout);
	HAL_Delay(25);  // Delay a while to let the device stabilize
 8002750:	2019      	movs	r0, #25
 8002752:	f007 fc3f 	bl	8009fd4 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0],
 8002756:	230f      	movs	r3, #15
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	2301      	movs	r3, #1
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2301      	movs	r3, #1
 8002766:	220d      	movs	r2, #13
 8002768:	21d0      	movs	r1, #208	; 0xd0
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f00c fd00 	bl	800f170 <HAL_I2C_Mem_Read>
			1, i2c_timeout);  // X-axis accel self-test results
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1],
 8002770:	230f      	movs	r3, #15
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	2301      	movs	r3, #1
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800277c:	3301      	adds	r3, #1
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2301      	movs	r3, #1
 8002782:	220e      	movs	r2, #14
 8002784:	21d0      	movs	r1, #208	; 0xd0
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f00c fcf2 	bl	800f170 <HAL_I2C_Mem_Read>
			1, i2c_timeout);  // Y-axis accel self-test results
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2],
 800278c:	230f      	movs	r3, #15
 800278e:	9302      	str	r3, [sp, #8]
 8002790:	2301      	movs	r3, #1
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002798:	3302      	adds	r3, #2
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	220f      	movs	r2, #15
 80027a0:	21d0      	movs	r1, #208	; 0xd0
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f00c fce4 	bl	800f170 <HAL_I2C_Mem_Read>
			1, i2c_timeout);  // Z-axis accel self-test results
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3],
 80027a8:	230f      	movs	r3, #15
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	2301      	movs	r3, #1
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027b4:	3303      	adds	r3, #3
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	2200      	movs	r2, #0
 80027bc:	21d0      	movs	r1, #208	; 0xd0
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f00c fcd6 	bl	800f170 <HAL_I2C_Mem_Read>
			1, i2c_timeout);  // X-axis gyro self-test results
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4],
 80027c4:	230f      	movs	r3, #15
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	2301      	movs	r3, #1
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027d0:	3304      	adds	r3, #4
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	2201      	movs	r2, #1
 80027d8:	21d0      	movs	r1, #208	; 0xd0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f00c fcc8 	bl	800f170 <HAL_I2C_Mem_Read>
			1, i2c_timeout);  // Y-axis gyro self-test results
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5],
 80027e0:	230f      	movs	r3, #15
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2301      	movs	r3, #1
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027ec:	3305      	adds	r3, #5
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2301      	movs	r3, #1
 80027f2:	2202      	movs	r2, #2
 80027f4:	21d0      	movs	r1, #208	; 0xd0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f00c fcba 	bl	800f170 <HAL_I2C_Mem_Read>
			1, i2c_timeout);  // Z-axis gyro self-test results

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
 80027fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002800:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8002814:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002820:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002824:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002828:	ee37 7b46 	vsub.f64	d7, d7, d6
 800282c:	eeb0 1b47 	vmov.f64	d1, d7
 8002830:	ed9f 0b67 	vldr	d0, [pc, #412]	; 80029d0 <MPU9250SelfTest+0x6a0>
 8002834:	f023 ffc8 	bl	80267c8 <pow>
 8002838:	eeb0 7b40 	vmov.f64	d7, d0
 800283c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002840:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	factoryTrim[0] = (float) (2620 / 1 << FS)
 8002844:	edc7 7a08 	vstr	s15, [r7, #32]
	factoryTrim[1] = (float) (2620 / 1 << FS)
 8002848:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800284c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8002860:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002870:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002874:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002878:	eeb0 1b47 	vmov.f64	d1, d7
 800287c:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80029d0 <MPU9250SelfTest+0x6a0>
 8002880:	f023 ffa2 	bl	80267c8 <pow>
 8002884:	eeb0 7b40 	vmov.f64	d7, d0
 8002888:	ee28 7b07 	vmul.f64	d7, d8, d7
 800288c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	factoryTrim[1] = (float) (2620 / 1 << FS)
 8002890:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	factoryTrim[2] = (float) (2620 / 1 << FS)
 8002894:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002898:	f640 223c 	movw	r2, #2620	; 0xa3c
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80028ac:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80028c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028c4:	eeb0 1b47 	vmov.f64	d1, d7
 80028c8:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80029d0 <MPU9250SelfTest+0x6a0>
 80028cc:	f023 ff7c 	bl	80267c8 <pow>
 80028d0:	eeb0 7b40 	vmov.f64	d7, d0
 80028d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80028d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80028dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	factoryTrim[3] = (float) (2620 / 1 << FS)
 80028e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80028e4:	f640 223c 	movw	r2, #2620	; 0xa3c
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80028f8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002908:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800290c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002910:	eeb0 1b47 	vmov.f64	d1, d7
 8002914:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80029d0 <MPU9250SelfTest+0x6a0>
 8002918:	f023 ff56 	bl	80267c8 <pow>
 800291c:	eeb0 7b40 	vmov.f64	d7, d0
 8002920:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002924:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	factoryTrim[3] = (float) (2620 / 1 << FS)
 8002928:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	factoryTrim[4] = (float) (2620 / 1 << FS)
 800292c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002930:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002940:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8002944:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002954:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002958:	ee37 7b46 	vsub.f64	d7, d7, d6
 800295c:	eeb0 1b47 	vmov.f64	d1, d7
 8002960:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80029d0 <MPU9250SelfTest+0x6a0>
 8002964:	f023 ff30 	bl	80267c8 <pow>
 8002968:	eeb0 7b40 	vmov.f64	d7, d0
 800296c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002970:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8002974:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8002978:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800297c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8002990:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80029a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029a8:	eeb0 1b47 	vmov.f64	d1, d7
 80029ac:	ed9f 0b08 	vldr	d0, [pc, #32]	; 80029d0 <MPU9250SelfTest+0x6a0>
 80029b0:	f023 ff0a 	bl	80267c8 <pow>
 80029b4:	eeb0 7b40 	vmov.f64	d7, d0
 80029b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80029bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	factoryTrim[5] = (float) (2620 / 1 << FS)
 80029c0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80029c4:	2300      	movs	r3, #0
 80029c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029c8:	e06d      	b.n	8002aa6 <MPU9250SelfTest+0x776>
 80029ca:	bf00      	nop
 80029cc:	f3af 8000 	nop.w
 80029d0:	c28f5c29 	.word	0xc28f5c29
 80029d4:	3ff028f5 	.word	0x3ff028f5
 80029d8:	51eb851f 	.word	0x51eb851f
		testResults[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 80029dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	3390      	adds	r3, #144	; 0x90
 80029e2:	443b      	add	r3, r7
 80029e4:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80029e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3390      	adds	r3, #144	; 0x90
 80029ee:	443b      	add	r3, r7
 80029f0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a02:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002b88 <MPU9250SelfTest+0x858>
 8002a06:	ee27 5b06 	vmul.f64	d5, d7, d6
				/ factoryTrim[i] - 100.;   // Report percent differences
 8002a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	3390      	adds	r3, #144	; 0x90
 8002a10:	443b      	add	r3, r7
 8002a12:	3b70      	subs	r3, #112	; 0x70
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a1c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a20:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8002b88 <MPU9250SelfTest+0x858>
 8002a24:	ee37 7b46 	vsub.f64	d7, d7, d6
		testResults[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8002a28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a2c:	ee17 2a90 	vmov	r2, s15
 8002a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3390      	adds	r3, #144	; 0x90
 8002a36:	443b      	add	r3, r7
 8002a38:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8002a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	3390      	adds	r3, #144	; 0x90
 8002a42:	443b      	add	r3, r7
 8002a44:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8002a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	3390      	adds	r3, #144	; 0x90
 8002a4e:	443b      	add	r3, r7
 8002a50:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a62:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002b88 <MPU9250SelfTest+0x858>
 8002a66:	ee27 5b06 	vmul.f64	d5, d7, d6
				/ factoryTrim[i + 3] - 100.; // Report percent differences
 8002a6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a6c:	3303      	adds	r3, #3
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3390      	adds	r3, #144	; 0x90
 8002a72:	443b      	add	r3, r7
 8002a74:	3b70      	subs	r3, #112	; 0x70
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002a7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a82:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8002b88 <MPU9250SelfTest+0x858>
 8002a86:	ee37 7b46 	vsub.f64	d7, d7, d6
		testResults[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8002a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a8c:	3303      	adds	r3, #3
 8002a8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a92:	ee17 2a90 	vmov	r2, s15
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3390      	adds	r3, #144	; 0x90
 8002a9a:	443b      	add	r3, r7
 8002a9c:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8002aa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	dd97      	ble.n	80029dc <MPU9250SelfTest+0x6ac>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
	}

	for (int i = 0; i < 3; i++) {
 8002aac:	2300      	movs	r3, #0
 8002aae:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ab0:	e060      	b.n	8002b74 <MPU9250SelfTest+0x844>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8002ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	3390      	adds	r3, #144	; 0x90
 8002ab8:	443b      	add	r3, r7
 8002aba:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8002abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	3390      	adds	r3, #144	; 0x90
 8002ac4:	443b      	add	r3, r7
 8002ac6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ad8:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002b88 <MPU9250SelfTest+0x858>
 8002adc:	ee27 5b06 	vmul.f64	d5, d7, d6
				/ factoryTrim[i] - 100.;   // Report percent differences
 8002ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	3390      	adds	r3, #144	; 0x90
 8002ae6:	443b      	add	r3, r7
 8002ae8:	3b70      	subs	r3, #112	; 0x70
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002af2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002af6:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8002b88 <MPU9250SelfTest+0x858>
 8002afa:	ee37 7b46 	vsub.f64	d7, d7, d6
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8002afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4413      	add	r3, r2
				/ factoryTrim[i] - 100.;   // Report percent differences
 8002b06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8002b0a:	edc3 7a00 	vstr	s15, [r3]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	3390      	adds	r3, #144	; 0x90
 8002b14:	443b      	add	r3, r7
 8002b16:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8002b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	3390      	adds	r3, #144	; 0x90
 8002b20:	443b      	add	r3, r7
 8002b22:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b34:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8002b88 <MPU9250SelfTest+0x858>
 8002b38:	ee27 5b06 	vmul.f64	d5, d7, d6
				/ factoryTrim[i + 3] - 100.; // Report percent differences
 8002b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b3e:	3303      	adds	r3, #3
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3390      	adds	r3, #144	; 0x90
 8002b44:	443b      	add	r3, r7
 8002b46:	3b70      	subs	r3, #112	; 0x70
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b54:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8002b88 <MPU9250SelfTest+0x858>
 8002b58:	ee37 7b46 	vsub.f64	d7, d7, d6
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8002b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5e:	3303      	adds	r3, #3
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4413      	add	r3, r2
				/ factoryTrim[i + 3] - 100.; // Report percent differences
 8002b66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8002b6a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 8002b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b70:	3301      	adds	r3, #1
 8002b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	dd9b      	ble.n	8002ab2 <MPU9250SelfTest+0x782>
	}
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	3790      	adds	r7, #144	; 0x90
 8002b80:	46bd      	mov	sp, r7
 8002b82:	ecbd 8b02 	vpop	{d8}
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40590000 	.word	0x40590000

08002b90 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0b2      	sub	sp, #200	; 0xc8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002b9a:	edc7 0a08 	vstr	s1, [r7, #32]
 8002b9e:	ed87 1a07 	vstr	s2, [r7, #28]
 8002ba2:	edc7 1a06 	vstr	s3, [r7, #24]
 8002ba6:	ed87 2a05 	vstr	s4, [r7, #20]
 8002baa:	edc7 2a04 	vstr	s5, [r7, #16]
 8002bae:	ed87 3a03 	vstr	s6, [r7, #12]
 8002bb2:	edc7 3a02 	vstr	s7, [r7, #8]
 8002bb6:	ed87 4a01 	vstr	s8, [r7, #4]
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <QuaternionUpdate+0x1ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bc2:	4b6e      	ldr	r3, [pc, #440]	; (8002d7c <QuaternionUpdate+0x1ec>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bca:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <QuaternionUpdate+0x1ec>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <QuaternionUpdate+0x1ec>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8002bda:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002bde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002be2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 8002be6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002bea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 8002bf2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002bf6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bfa:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 8002bfe:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c06:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 8002c0a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002c0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c12:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 8002c1e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c26:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 8002c32:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002c36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c3a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 8002c3e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002c42:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 8002c4e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002c52:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 8002c5e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002c62:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 8002c6e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002c72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 8002c7a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002c7e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c86:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 8002c8a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002c8e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c96:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 8002c9a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ca2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 8002ca6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002caa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 8002cb6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002cba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cbe:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8002cc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cc6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002cca:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce6:	f023 ffef 	bl	8026cc8 <sqrtf>
 8002cea:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f)
 8002cee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002cf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	f000 85b2 	beq.w	8003862 <QuaternionUpdate+0xcd2>
		return; // handle NaN
	norm = 1.0f / norm;
 8002cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d02:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 8002d0e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d12:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 8002d1e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d22:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 8002d2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d32:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3a:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8002d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d42:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d62:	f023 ffb1 	bl	8026cc8 <sqrtf>
 8002d66:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f)
 8002d6a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d76:	f000 8576 	beq.w	8003866 <QuaternionUpdate+0xcd6>
 8002d7a:	e001      	b.n	8002d80 <QuaternionUpdate+0x1f0>
 8002d7c:	24000008 	.word	0x24000008
		return; // handle NaN
	norm = 1.0f / norm;
 8002d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d84:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d8c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 8002d90:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d94:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9c:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8002da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002da4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dac:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8002db0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002db4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8002dc0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002dc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 8002dd4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002dd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ddc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 8002de8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002dec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002df0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8002dfc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002e00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e04:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 8002e10:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e14:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002e20:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e2c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002e30:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e40:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8002e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e58:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e60:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8002e64:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8002e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e70:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e80:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e8c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e90:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3
 8002e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8002ea0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002ea4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eac:	edd7 6a02 	vldr	s13, [r7, #8]
 8002eb0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002ec0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ecc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002ed0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002edc:	edd7 6a02 	vldr	s13, [r7, #8]
 8002ee0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee8:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8002eec:	edd7 6a02 	vldr	s13, [r7, #8]
 8002ef0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002efc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002f00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f14:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f18:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrtf(hx * hx + hy * hy);
 8002f28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002f2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	f023 fec2 	bl	8026cc8 <sqrtf>
 8002f44:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8002f48:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002f4c:	eeb1 7a67 	vneg.f32	s14, s15
 8002f50:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f58:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002f5c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f68:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f6c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f78:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002f7c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f88:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f8c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f94:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8002f98:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002f9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fa4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb0:	edd7 6a01 	vldr	s13, [r7, #4]
 8002fb4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc0:	edd7 6a01 	vldr	s13, [r7, #4]
 8002fc4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 8002fd4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fdc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 8002fe0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002fe4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fe8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 8002fec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ff0:	eeb1 7a67 	vneg.f32	s14, s15
 8002ff4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002ff8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ffc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003000:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003004:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003008:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800300c:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ _2q2 * (2.0f * q1q2 + _2q3q4 - ay)
 8003010:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003014:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003018:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800301c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003020:	edd7 7a08 	vldr	s15, [r7, #32]
 8003024:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003028:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800302c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003030:	ee37 7a27 	vadd.f32	s14, s14, s15
			- _2bz * q3
 8003034:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003038:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800303c:	ee66 6aa7 	vmul.f32	s13, s13, s15
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 8003040:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003044:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003048:	ee36 6a67 	vsub.f32	s12, s12, s15
 800304c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003050:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003054:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003058:	ee26 6a27 	vmul.f32	s12, s12, s15
 800305c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8003060:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003064:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003068:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800306c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003070:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003074:	edd7 7a03 	vldr	s15, [r7, #12]
 8003078:	ee76 7a67 	vsub.f32	s15, s12, s15
 800307c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			- _2bz * q3
 8003080:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (-_2bx * q4 + _2bz * q2)
 8003084:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003088:	eef1 6a67 	vneg.f32	s13, s15
 800308c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003090:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003094:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8003098:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800309c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80030a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80030a4:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80030a8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 80030b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80030b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80030b8:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80030bc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80030c0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80030c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80030c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80030cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80030d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ (-_2bx * q4 + _2bz * q2)
 80030dc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ _2bx * q3
 80030e0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80030e4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80030e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80030ec:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80030f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80030f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80030fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003100:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003104:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003108:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800310c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003110:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003114:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003118:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800311c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003120:	edd7 7a01 	vldr	s15, [r7, #4]
 8003124:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003128:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax)
 800312c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003130:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 8003134:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003138:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800313c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003140:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003144:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800314c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003154:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003158:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800315c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003160:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003164:	edd7 7a08 	vldr	s15, [r7, #32]
 8003168:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800316c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003174:	ee37 7a27 	vadd.f32	s14, s14, s15
			- 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003178:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800317c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003180:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003184:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003188:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800318c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003190:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003194:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003198:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800319c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80031a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80031a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ac:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ _2bz * q4
 80031b0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80031b4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80031b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80031bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80031c0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80031c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80031c8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80031cc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80031d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031d8:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80031dc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031e0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80031e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80031e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80031f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80031f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ _2bz * q4
 80031fc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (_2bx * q3 + _2bz * q1)
 8003200:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8003204:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003208:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800320c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8003210:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003214:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003218:	ee76 6aa7 	vadd.f32	s13, s13, s15
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 800321c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8003220:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003224:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003228:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800322c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003230:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8003234:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003238:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800323c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003240:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003244:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003248:	edd7 7a02 	vldr	s15, [r7, #8]
 800324c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003250:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ (_2bx * q3 + _2bz * q1)
 8003254:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (_2bx * q4 - _4bz * q2)
 8003258:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800325c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003260:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003264:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8003268:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800326c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003270:	ee76 6ae7 	vsub.f32	s13, s13, s15
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003274:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8003278:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800327c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003280:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003284:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003288:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800328c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003290:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003294:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003298:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800329c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80032a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80032a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80032a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay)
 80032b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 80032bc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80032c0:	eeb1 7a67 	vneg.f32	s14, s15
 80032c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80032c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80032cc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80032d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80032d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032dc:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ _2q4 * (2.0f * q1q2 + _2q3q4 - ay)
 80032e0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80032e8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80032ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80032f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032f8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80032fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003300:	ee37 7a27 	vadd.f32	s14, s14, s15
			- 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az)
 8003304:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003308:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800330c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003310:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003314:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003318:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800331c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003320:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003324:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003328:	ee36 6a67 	vsub.f32	s12, s12, s15
 800332c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003330:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003338:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (-_4bx * q3 - _2bz * q1)
 800333c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003340:	eef1 6a67 	vneg.f32	s13, s15
 8003344:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003348:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800334c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8003350:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003354:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003358:	ee76 6ae7 	vsub.f32	s13, s13, s15
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 800335c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003360:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003364:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003368:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800336c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003370:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003374:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003378:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800337c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003380:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003384:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003388:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800338c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003390:	edd7 7a03 	vldr	s15, [r7, #12]
 8003394:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003398:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ (-_4bx * q3 - _2bz * q1)
 800339c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (_2bx * q2 + _2bz * q4)
 80033a0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80033a4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80033a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033ac:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80033b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80033b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 80033bc:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80033c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80033c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80033c8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033d0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80033d4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80033d8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80033dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80033e0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80033e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ (_2bx * q2 + _2bz * q4)
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (_2bx * q1 - _4bz * q3)
 80033f8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80033fc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003400:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003404:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8003408:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800340c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003410:	ee76 6ae7 	vsub.f32	s13, s13, s15
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003414:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8003418:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800341c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003420:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003424:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003428:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800342c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003430:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003434:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003438:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800343c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003440:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003444:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003448:	edd7 7a01 	vldr	s15, [r7, #4]
 800344c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003450:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax)
 8003454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003458:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 800345c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003460:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003464:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800346c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003474:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800347c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003480:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003484:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003488:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800348c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003490:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003494:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800349c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (-_4bx * q4 + _2bz * q2)
 80034a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80034a4:	eef1 6a67 	vneg.f32	s13, s15
 80034a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80034ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034b0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80034b4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80034b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
					* (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx)
 80034c0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80034c4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80034c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80034cc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80034d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80034d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80034d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034dc:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80034e0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80034e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80034e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80034ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80034f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80034f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ (-_4bx * q4 + _2bz * q2)
 8003500:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (-_2bx * q1 + _2bz * q3)
 8003504:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003508:	eef1 6a67 	vneg.f32	s13, s15
 800350c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003510:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003514:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8003518:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800351c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003520:	ee76 6aa7 	vadd.f32	s13, s13, s15
					* (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my)
 8003524:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8003528:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800352c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003530:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003534:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003538:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800353c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003540:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003544:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003548:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800354c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003550:	edd7 7a02 	vldr	s15, [r7, #8]
 8003554:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003558:	ee66 7aa7 	vmul.f32	s15, s13, s15
			+ (-_2bx * q1 + _2bz * q3)
 800355c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ _2bx * q2
 8003560:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8003564:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003568:	ee66 6aa7 	vmul.f32	s13, s13, s15
					* (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800356c:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8003570:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003574:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003578:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800357c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003580:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003584:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003588:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800358c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003590:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003594:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003598:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800359c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80035a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80035a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay)
 80035ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4); // normalise step magnitude
 80035b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80035b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80035c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035c8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80035cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80035d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e0:	eeb0 0a67 	vmov.f32	s0, s15
 80035e4:	f023 fb70 	bl	8026cc8 <sqrtf>
 80035e8:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f / norm;
 80035ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 80035fc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003600:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003608:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 800360c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003610:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003618:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 800361c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003620:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003628:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 800362c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003630:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003638:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800363c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003640:	eeb1 7a67 	vneg.f32	s14, s15
 8003644:	edd7 7a06 	vldr	s15, [r7, #24]
 8003648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800364c:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8003650:	edd7 7a05 	vldr	s15, [r7, #20]
 8003654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003658:	ee37 7a67 	vsub.f32	s14, s14, s15
 800365c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8003660:	edd7 7a04 	vldr	s15, [r7, #16]
 8003664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003670:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003674:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <QuaternionUpdate+0xce0>)
 8003676:	edd3 6a00 	vldr	s13, [r3]
 800367a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800367e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003686:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 800368a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800368e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003696:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800369a:	edd7 7a04 	vldr	s15, [r7, #16]
 800369e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a6:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80036aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036be:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <QuaternionUpdate+0xce0>)
 80036c0:	edd3 6a00 	vldr	s13, [r3]
 80036c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80036c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 80036d4:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80036d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036e0:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80036e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80036e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80036f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80036f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003700:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003704:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <QuaternionUpdate+0xce0>)
 800370a:	edd3 6a00 	vldr	s13, [r3]
 800370e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800371e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003722:	edd7 7a04 	vldr	s15, [r7, #16]
 8003726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372a:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800372e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373a:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800373e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800374e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <QuaternionUpdate+0xce0>)
 8003754:	edd3 6a00 	vldr	s13, [r3]
 8003758:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800375c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003764:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 8003768:	4b42      	ldr	r3, [pc, #264]	; (8003874 <QuaternionUpdate+0xce4>)
 800376a:	ed93 7a00 	vldr	s14, [r3]
 800376e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800377a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377e:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 8003782:	4b3c      	ldr	r3, [pc, #240]	; (8003874 <QuaternionUpdate+0xce4>)
 8003784:	ed93 7a00 	vldr	s14, [r3]
 8003788:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800378c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003790:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003798:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 800379c:	4b35      	ldr	r3, [pc, #212]	; (8003874 <QuaternionUpdate+0xce4>)
 800379e:	ed93 7a00 	vldr	s14, [r3]
 80037a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80037ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b2:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 80037b6:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <QuaternionUpdate+0xce4>)
 80037b8:	ed93 7a00 	vldr	s14, [r3]
 80037bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80037c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037cc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4); // normalise quaternion
 80037d0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80037d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80037d8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80037dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80037e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80037f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003800:	f023 fa62 	bl	8026cc8 <sqrtf>
 8003804:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f / norm;
 8003808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003814:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 8003818:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800381c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <QuaternionUpdate+0xce8>)
 8003826:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 800382a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800382e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <QuaternionUpdate+0xce8>)
 8003838:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 800383c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8003840:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <QuaternionUpdate+0xce8>)
 800384a:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 800384e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003852:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <QuaternionUpdate+0xce8>)
 800385c:	edc3 7a03 	vstr	s15, [r3, #12]
 8003860:	e002      	b.n	8003868 <QuaternionUpdate+0xcd8>
		return; // handle NaN
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <QuaternionUpdate+0xcd8>
		return; // handle NaN
 8003866:	bf00      	nop

}
 8003868:	37c8      	adds	r7, #200	; 0xc8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	24000004 	.word	0x24000004
 8003874:	24000570 	.word	0x24000570
 8003878:	24000008 	.word	0x24000008
 800387c:	00000000 	.word	0x00000000

08003880 <imu_gravityCompensatedAccel>:

float imu_gravityCompensatedAccel(float ax, float ay, float az) {
 8003880:	b480      	push	{r7}
 8003882:	b08b      	sub	sp, #44	; 0x2c
 8003884:	af00      	add	r7, sp, #0
 8003886:	ed87 0a03 	vstr	s0, [r7, #12]
 800388a:	edc7 0a02 	vstr	s1, [r7, #8]
 800388e:	ed87 1a01 	vstr	s2, [r7, #4]
	float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3]; // short name local variable for readability
 8003892:	4b3d      	ldr	r3, [pc, #244]	; (8003988 <imu_gravityCompensatedAccel+0x108>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
 8003898:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <imu_gravityCompensatedAccel+0x108>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	623b      	str	r3, [r7, #32]
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <imu_gravityCompensatedAccel+0x108>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <imu_gravityCompensatedAccel+0x108>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	61bb      	str	r3, [r7, #24]
	//q0 = 1; q1 = q2 = q3 = 0;
	float acc = 2.0 * (q1 * q3 - q0 * q2) * ax + 2.0f * (q0 * q1 + q2 * q3) * ay
 80038aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80038ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80038ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80038be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038ca:	ee37 6b07 	vadd.f64	d6, d7, d7
 80038ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80038d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80038da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038de:	edd7 7a08 	vldr	s15, [r7, #32]
 80038e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e6:	edd7 5a07 	vldr	s11, [r7, #28]
 80038ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80038ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003906:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3) * az - 1000.0f;
 800390a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800390e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003912:	edd7 7a08 	vldr	s15, [r7, #32]
 8003916:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800391a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800391e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003922:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800392a:	edd7 7a06 	vldr	s15, [r7, #24]
 800392e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003936:	edd7 7a01 	vldr	s15, [r7, #4]
 800393a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003942:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003946:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003980 <imu_gravityCompensatedAccel+0x100>
 800394a:	ee37 7b46 	vsub.f64	d7, d7, d6
	float acc = 2.0 * (q1 * q3 - q0 * q2) * ax + 2.0f * (q0 * q1 + q2 * q3) * ay
 800394e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003952:	edc7 7a05 	vstr	s15, [r7, #20]
	acc *= 0.9807f; // in cm/s/s, assuming ax, ay, az are in milli-Gs
 8003956:	edd7 7a05 	vldr	s15, [r7, #20]
 800395a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800398c <imu_gravityCompensatedAccel+0x10c>
 800395e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003962:	edc7 7a05 	vstr	s15, [r7, #20]
	return acc;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	ee07 3a90 	vmov	s15, r3
}
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	372c      	adds	r7, #44	; 0x2c
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	f3af 8000 	nop.w
 8003980:	00000000 	.word	0x00000000
 8003984:	408f4000 	.word	0x408f4000
 8003988:	24000008 	.word	0x24000008
 800398c:	3f7b0f28 	.word	0x3f7b0f28

08003990 <kalmanFilter4d_configure>:
// It should be set higher for more thermic/turbulent conditions
// kAdapt injects more uncertainty in high acceleration situations to allow the filter to respond quicker.
// zInitial can be determined by averaging a few samples of the altitude measurement.
// vInitial and aInitial can be set to zero.

void kalmanFilter4d_configure(float aVariance,  float kAdapt, float zInitial, float vInitial, float aInitial){
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	ed87 0a05 	vstr	s0, [r7, #20]
 800399a:	edc7 0a04 	vstr	s1, [r7, #16]
 800399e:	ed87 1a03 	vstr	s2, [r7, #12]
 80039a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80039a6:	ed87 2a01 	vstr	s4, [r7, #4]
	ZMeasVariance = KF_Z_MEAS_VARIANCE;
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <kalmanFilter4d_configure+0xd8>)
 80039ac:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <kalmanFilter4d_configure+0xdc>)
 80039ae:	601a      	str	r2, [r3, #0]
	AMeasVariance = KF_A_MEAS_VARIANCE;
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <kalmanFilter4d_configure+0xe0>)
 80039b2:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <kalmanFilter4d_configure+0xe4>)
 80039b4:	601a      	str	r2, [r3, #0]
    ABiasVariance = KF_ACCELBIAS_VARIANCE;
 80039b6:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <kalmanFilter4d_configure+0xe8>)
 80039b8:	4a30      	ldr	r2, [pc, #192]	; (8003a7c <kalmanFilter4d_configure+0xec>)
 80039ba:	601a      	str	r2, [r3, #0]
	AccelVariance = aVariance;
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <kalmanFilter4d_configure+0xf0>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6013      	str	r3, [r2, #0]
	KAdapt = kAdapt;
 80039c2:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <kalmanFilter4d_configure+0xf4>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6013      	str	r3, [r2, #0]

	State.z = zInitial;
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <kalmanFilter4d_configure+0xf8>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6013      	str	r3, [r2, #0]
	State.v = vInitial;
 80039ce:	4a2e      	ldr	r2, [pc, #184]	; (8003a88 <kalmanFilter4d_configure+0xf8>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6053      	str	r3, [r2, #4]
    State.a = aInitial;
 80039d4:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <kalmanFilter4d_configure+0xf8>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6093      	str	r3, [r2, #8]
	State.b = 0.0f; // assume residual acceleration bias = 0 initially
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <kalmanFilter4d_configure+0xf8>)
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]

	Pzz = 1500.0f;
 80039e2:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <kalmanFilter4d_configure+0xfc>)
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <kalmanFilter4d_configure+0x100>)
 80039e6:	601a      	str	r2, [r3, #0]
    Pzv = 0.0f;
 80039e8:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <kalmanFilter4d_configure+0x104>)
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
	Pza = 0.0f;
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <kalmanFilter4d_configure+0x108>)
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
	Pzb = 0.0f;
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <kalmanFilter4d_configure+0x10c>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
	
	Pvz = Pzv; 
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <kalmanFilter4d_configure+0x104>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <kalmanFilter4d_configure+0x110>)
 8003a06:	6013      	str	r3, [r2, #0]
	Pvv = 1500.0f;
 8003a08:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <kalmanFilter4d_configure+0x114>)
 8003a0a:	4a21      	ldr	r2, [pc, #132]	; (8003a90 <kalmanFilter4d_configure+0x100>)
 8003a0c:	601a      	str	r2, [r3, #0]
	Pva = 0.0f;
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <kalmanFilter4d_configure+0x118>)
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
	Pvb = 0.0f;
 8003a16:	4b25      	ldr	r3, [pc, #148]	; (8003aac <kalmanFilter4d_configure+0x11c>)
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
	
	Paz = Pza;
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <kalmanFilter4d_configure+0x108>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <kalmanFilter4d_configure+0x120>)
 8003a24:	6013      	str	r3, [r2, #0]
	Pav = Pva;
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <kalmanFilter4d_configure+0x118>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <kalmanFilter4d_configure+0x124>)
 8003a2c:	6013      	str	r3, [r2, #0]
	Paa = 100000.0f;
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <kalmanFilter4d_configure+0x128>)
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <kalmanFilter4d_configure+0x12c>)
 8003a32:	601a      	str	r2, [r3, #0]
	Pab = 0.0f;
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <kalmanFilter4d_configure+0x130>)
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

	Pbz = Pzb;
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <kalmanFilter4d_configure+0x10c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <kalmanFilter4d_configure+0x134>)
 8003a42:	6013      	str	r3, [r2, #0]
	Pbv = Pvb;
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <kalmanFilter4d_configure+0x11c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <kalmanFilter4d_configure+0x138>)
 8003a4a:	6013      	str	r3, [r2, #0]
	Pba = Pab;
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <kalmanFilter4d_configure+0x130>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <kalmanFilter4d_configure+0x13c>)
 8003a52:	6013      	str	r3, [r2, #0]
	Pbb = 1500.0f;
 8003a54:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <kalmanFilter4d_configure+0x140>)
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <kalmanFilter4d_configure+0x100>)
 8003a58:	601a      	str	r2, [r3, #0]
	}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	2400061c 	.word	0x2400061c
 8003a6c:	43480000 	.word	0x43480000
 8003a70:	24000620 	.word	0x24000620
 8003a74:	42480000 	.word	0x42480000
 8003a78:	24000618 	.word	0x24000618
 8003a7c:	3ba3d70a 	.word	0x3ba3d70a
 8003a80:	24000614 	.word	0x24000614
 8003a84:	24000624 	.word	0x24000624
 8003a88:	240005c4 	.word	0x240005c4
 8003a8c:	240005d4 	.word	0x240005d4
 8003a90:	44bb8000 	.word	0x44bb8000
 8003a94:	240005d8 	.word	0x240005d8
 8003a98:	240005dc 	.word	0x240005dc
 8003a9c:	240005e0 	.word	0x240005e0
 8003aa0:	240005e4 	.word	0x240005e4
 8003aa4:	240005e8 	.word	0x240005e8
 8003aa8:	240005ec 	.word	0x240005ec
 8003aac:	240005f0 	.word	0x240005f0
 8003ab0:	240005f4 	.word	0x240005f4
 8003ab4:	240005f8 	.word	0x240005f8
 8003ab8:	240005fc 	.word	0x240005fc
 8003abc:	47c35000 	.word	0x47c35000
 8003ac0:	24000600 	.word	0x24000600
 8003ac4:	24000604 	.word	0x24000604
 8003ac8:	24000608 	.word	0x24000608
 8003acc:	2400060c 	.word	0x2400060c
 8003ad0:	24000610 	.word	0x24000610

08003ad4 <kalmanFilter4d_predict>:
//  | 1   dt  dt^2/2 -dt^2/2 |
//  | 0   1   dt     -dt     |
//  | 0   0   1       0      |
//  | 0   0   0       1      |
//
void kalmanFilter4d_predict(float dt) {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b095      	sub	sp, #84	; 0x54
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	ed87 0a01 	vstr	s0, [r7, #4]
	// Predicted (a priori) state vector estimate x_k- = F * x_k-1+
	float accel_true = State.a - State.b; // true acceleration = acceleration minus acceleration sensor bias
 8003ade:	4bd3      	ldr	r3, [pc, #844]	; (8003e2c <kalmanFilter4d_predict+0x358>)
 8003ae0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ae4:	4bd1      	ldr	r3, [pc, #836]	; (8003e2c <kalmanFilter4d_predict+0x358>)
 8003ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aee:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	State.z = State.z + (State.v * dt) + (accel_true * dt * dt* 0.5f);
 8003af2:	4bce      	ldr	r3, [pc, #824]	; (8003e2c <kalmanFilter4d_predict+0x358>)
 8003af4:	ed93 7a00 	vldr	s14, [r3]
 8003af8:	4bcc      	ldr	r3, [pc, #816]	; (8003e2c <kalmanFilter4d_predict+0x358>)
 8003afa:	edd3 6a01 	vldr	s13, [r3, #4]
 8003afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b0a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003b0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b1e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003b22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	4bc0      	ldr	r3, [pc, #768]	; (8003e2c <kalmanFilter4d_predict+0x358>)
 8003b2c:	edc3 7a00 	vstr	s15, [r3]
	State.v = State.v + (accel_true * dt);
 8003b30:	4bbe      	ldr	r3, [pc, #760]	; (8003e2c <kalmanFilter4d_predict+0x358>)
 8003b32:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b36:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003b3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b46:	4bb9      	ldr	r3, [pc, #740]	; (8003e2c <kalmanFilter4d_predict+0x358>)
 8003b48:	edc3 7a01 	vstr	s15, [r3, #4]

	// Predicted (a priori) state covariance estimate P_k- = (F * P_k-1+ * F_t) + Qk
	float dt2 = dt*dt;  // dt^2
 8003b4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b54:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float dt3 = dt2*dt; // dt^3 
 8003b58:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float dt4 = dt2*dt2; // dt^4;
 8003b68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003b6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b70:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float dt2div2 = dt2*0.5f; // dt^2/2
 8003b74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003b78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float dt3div2 = dt3*0.5f; // dt^3/2
 8003b84:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float dt4div2 = dt4*0.5f; // dt^4/2
 8003b94:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003b98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float dt4div4 = dt4*0.25f; // dt^4/4
 8003ba4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003ba8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	
	float p00 = Pzz + 2.0f*Pzv*dt + (Pza - Pzb)*dt2  + Pvv*dt2div2 + (Pva - Pvb)*dt3 + (Paa+Pbb)*dt4div4 - Pab*dt4div2;
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	; (8003e30 <kalmanFilter4d_predict+0x35c>)
 8003bb6:	edd3 7a00 	vldr	s15, [r3]
 8003bba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003bbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc6:	4b9b      	ldr	r3, [pc, #620]	; (8003e34 <kalmanFilter4d_predict+0x360>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd0:	4b99      	ldr	r3, [pc, #612]	; (8003e38 <kalmanFilter4d_predict+0x364>)
 8003bd2:	edd3 6a00 	vldr	s13, [r3]
 8003bd6:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <kalmanFilter4d_predict+0x368>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003be0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bec:	4b94      	ldr	r3, [pc, #592]	; (8003e40 <kalmanFilter4d_predict+0x36c>)
 8003bee:	edd3 6a00 	vldr	s13, [r3]
 8003bf2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bfe:	4b91      	ldr	r3, [pc, #580]	; (8003e44 <kalmanFilter4d_predict+0x370>)
 8003c00:	edd3 6a00 	vldr	s13, [r3]
 8003c04:	4b90      	ldr	r3, [pc, #576]	; (8003e48 <kalmanFilter4d_predict+0x374>)
 8003c06:	edd3 7a00 	vldr	s15, [r3]
 8003c0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c1a:	4b8c      	ldr	r3, [pc, #560]	; (8003e4c <kalmanFilter4d_predict+0x378>)
 8003c1c:	edd3 6a00 	vldr	s13, [r3]
 8003c20:	4b8b      	ldr	r3, [pc, #556]	; (8003e50 <kalmanFilter4d_predict+0x37c>)
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c36:	4b87      	ldr	r3, [pc, #540]	; (8003e54 <kalmanFilter4d_predict+0x380>)
 8003c38:	edd3 6a00 	vldr	s13, [r3]
 8003c3c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float p01 = Pzv + dt*(Pza - Pzb + Pvv) + 3.0f*dt2div2*(Pva - Pvb) - Pab*dt3 + (Paa + Pbb)*dt3div2;
 8003c4c:	4b7a      	ldr	r3, [pc, #488]	; (8003e38 <kalmanFilter4d_predict+0x364>)
 8003c4e:	ed93 7a00 	vldr	s14, [r3]
 8003c52:	4b7a      	ldr	r3, [pc, #488]	; (8003e3c <kalmanFilter4d_predict+0x368>)
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c5c:	4b78      	ldr	r3, [pc, #480]	; (8003e40 <kalmanFilter4d_predict+0x36c>)
 8003c5e:	edd3 7a00 	vldr	s15, [r3]
 8003c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c6e:	4b70      	ldr	r3, [pc, #448]	; (8003e30 <kalmanFilter4d_predict+0x35c>)
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003c7c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003c80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003c84:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <kalmanFilter4d_predict+0x370>)
 8003c86:	ed93 6a00 	vldr	s12, [r3]
 8003c8a:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <kalmanFilter4d_predict+0x374>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
 8003c90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9c:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <kalmanFilter4d_predict+0x380>)
 8003c9e:	edd3 6a00 	vldr	s13, [r3]
 8003ca2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cae:	4b67      	ldr	r3, [pc, #412]	; (8003e4c <kalmanFilter4d_predict+0x378>)
 8003cb0:	edd3 6a00 	vldr	s13, [r3]
 8003cb4:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <kalmanFilter4d_predict+0x37c>)
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003cbe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float p02 = Pza + Pva*dt + (Paa - Pba)*dt2div2;
 8003cce:	4b5d      	ldr	r3, [pc, #372]	; (8003e44 <kalmanFilter4d_predict+0x370>)
 8003cd0:	ed93 7a00 	vldr	s14, [r3]
 8003cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cdc:	4b56      	ldr	r3, [pc, #344]	; (8003e38 <kalmanFilter4d_predict+0x364>)
 8003cde:	edd3 7a00 	vldr	s15, [r3]
 8003ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ce6:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <kalmanFilter4d_predict+0x378>)
 8003ce8:	edd3 6a00 	vldr	s13, [r3]
 8003cec:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <kalmanFilter4d_predict+0x384>)
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003cf6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float p03 = Pzb + Pvb*dt + (Pab - Pbb)*dt2div2;
 8003d06:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <kalmanFilter4d_predict+0x374>)
 8003d08:	ed93 7a00 	vldr	s14, [r3]
 8003d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d14:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <kalmanFilter4d_predict+0x368>)
 8003d16:	edd3 7a00 	vldr	s15, [r3]
 8003d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d1e:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <kalmanFilter4d_predict+0x380>)
 8003d20:	edd3 6a00 	vldr	s13, [r3]
 8003d24:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <kalmanFilter4d_predict+0x37c>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d2e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3a:	edc7 7a08 	vstr	s15, [r7, #32]

	float p11 = Pvv + 2.0f*dt*(Pva - Pvb) + dt2*(Paa - 2.0f*Pab + Pbb);
 8003d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <kalmanFilter4d_predict+0x370>)
 8003d48:	edd3 6a00 	vldr	s13, [r3]
 8003d4c:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <kalmanFilter4d_predict+0x374>)
 8003d4e:	edd3 7a00 	vldr	s15, [r3]
 8003d52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <kalmanFilter4d_predict+0x36c>)
 8003d5c:	edd3 7a00 	vldr	s15, [r3]
 8003d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <kalmanFilter4d_predict+0x378>)
 8003d66:	edd3 6a00 	vldr	s13, [r3]
 8003d6a:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <kalmanFilter4d_predict+0x380>)
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d78:	4b35      	ldr	r3, [pc, #212]	; (8003e50 <kalmanFilter4d_predict+0x37c>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003d82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
	float p12 = Pva + dt*(Paa - Pba);
 8003d92:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <kalmanFilter4d_predict+0x378>)
 8003d94:	ed93 7a00 	vldr	s14, [r3]
 8003d98:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <kalmanFilter4d_predict+0x384>)
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <kalmanFilter4d_predict+0x370>)
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db4:	edc7 7a06 	vstr	s15, [r7, #24]
	float p13 = Pvb + dt*(Pab - Pbb);
 8003db8:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <kalmanFilter4d_predict+0x380>)
 8003dba:	ed93 7a00 	vldr	s14, [r3]
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <kalmanFilter4d_predict+0x37c>)
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <kalmanFilter4d_predict+0x374>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dda:	edc7 7a05 	vstr	s15, [r7, #20]

	float p22 = Paa;
 8003dde:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <kalmanFilter4d_predict+0x378>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	613b      	str	r3, [r7, #16]
	float p23 = Pab;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <kalmanFilter4d_predict+0x380>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
	float p33 = Pbb;
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <kalmanFilter4d_predict+0x37c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]

	Pzz = p00;
 8003df0:	4a10      	ldr	r2, [pc, #64]	; (8003e34 <kalmanFilter4d_predict+0x360>)
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	6013      	str	r3, [r2, #0]
	Pzv = p01;
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <kalmanFilter4d_predict+0x35c>)
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	6013      	str	r3, [r2, #0]
	Pza = p02;
 8003dfc:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <kalmanFilter4d_predict+0x364>)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	6013      	str	r3, [r2, #0]
	Pzb = p03;
 8003e02:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <kalmanFilter4d_predict+0x368>)
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	6013      	str	r3, [r2, #0]

	Pvz = Pzv;
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <kalmanFilter4d_predict+0x35c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <kalmanFilter4d_predict+0x388>)
 8003e0e:	6013      	str	r3, [r2, #0]
	Pvv = p11;
 8003e10:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <kalmanFilter4d_predict+0x36c>)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	6013      	str	r3, [r2, #0]
	Pva = p12;
 8003e16:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <kalmanFilter4d_predict+0x370>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6013      	str	r3, [r2, #0]
	Pvb = p13;
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <kalmanFilter4d_predict+0x374>)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	6013      	str	r3, [r2, #0]

	Paz = Pza;
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <kalmanFilter4d_predict+0x364>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <kalmanFilter4d_predict+0x38c>)
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01b      	b.n	8003e64 <kalmanFilter4d_predict+0x390>
 8003e2c:	240005c4 	.word	0x240005c4
 8003e30:	240005d8 	.word	0x240005d8
 8003e34:	240005d4 	.word	0x240005d4
 8003e38:	240005dc 	.word	0x240005dc
 8003e3c:	240005e0 	.word	0x240005e0
 8003e40:	240005e8 	.word	0x240005e8
 8003e44:	240005ec 	.word	0x240005ec
 8003e48:	240005f0 	.word	0x240005f0
 8003e4c:	240005fc 	.word	0x240005fc
 8003e50:	24000610 	.word	0x24000610
 8003e54:	24000600 	.word	0x24000600
 8003e58:	2400060c 	.word	0x2400060c
 8003e5c:	240005e4 	.word	0x240005e4
 8003e60:	240005f4 	.word	0x240005f4
	Pav = Pva;
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <kalmanFilter4d_predict+0x3fc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <kalmanFilter4d_predict+0x400>)
 8003e6a:	6013      	str	r3, [r2, #0]
	Paa = p22;
 8003e6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <kalmanFilter4d_predict+0x404>)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6013      	str	r3, [r2, #0]
	Pab = p23;
 8003e72:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <kalmanFilter4d_predict+0x408>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6013      	str	r3, [r2, #0]

	Pbz = Pzb;
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <kalmanFilter4d_predict+0x40c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <kalmanFilter4d_predict+0x410>)
 8003e7e:	6013      	str	r3, [r2, #0]
	Pbv = Pvb;
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <kalmanFilter4d_predict+0x414>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a19      	ldr	r2, [pc, #100]	; (8003eec <kalmanFilter4d_predict+0x418>)
 8003e86:	6013      	str	r3, [r2, #0]
	Pba = Pab;
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <kalmanFilter4d_predict+0x408>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <kalmanFilter4d_predict+0x41c>)
 8003e8e:	6013      	str	r3, [r2, #0]
	Pbb = p33; 
 8003e90:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <kalmanFilter4d_predict+0x420>)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6013      	str	r3, [r2, #0]

	// Add Q_k
	Paa = Paa + AccelVariance;
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <kalmanFilter4d_predict+0x404>)
 8003e98:	ed93 7a00 	vldr	s14, [r3]
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <kalmanFilter4d_predict+0x424>)
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <kalmanFilter4d_predict+0x404>)
 8003ea8:	edc3 7a00 	vstr	s15, [r3]
	Pbb = Pbb + ABiasVariance;
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <kalmanFilter4d_predict+0x420>)
 8003eae:	ed93 7a00 	vldr	s14, [r3]
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <kalmanFilter4d_predict+0x428>)
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <kalmanFilter4d_predict+0x420>)
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
	}
 8003ec2:	bf00      	nop
 8003ec4:	3754      	adds	r7, #84	; 0x54
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	240005ec 	.word	0x240005ec
 8003ed4:	240005f8 	.word	0x240005f8
 8003ed8:	240005fc 	.word	0x240005fc
 8003edc:	24000600 	.word	0x24000600
 8003ee0:	240005e0 	.word	0x240005e0
 8003ee4:	24000604 	.word	0x24000604
 8003ee8:	240005f0 	.word	0x240005f0
 8003eec:	24000608 	.word	0x24000608
 8003ef0:	2400060c 	.word	0x2400060c
 8003ef4:	24000610 	.word	0x24000610
 8003ef8:	24000614 	.word	0x24000614
 8003efc:	24000618 	.word	0x24000618

08003f00 <kalmanFilter4d_update>:
// y_k = m_k - (H * x_k-)
// 2x2 sensor noise covariance matrix R_k
// | zsensor_variance  0                |  
// | 0                 asensor_variance |

void kalmanFilter4d_update(float zm, float am, Altitude_ClimbRate_typedef* kfstruct) {
 8003f00:	b480      	push	{r7}
 8003f02:	b0a5      	sub	sp, #148	; 0x94
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f0e:	6078      	str	r0, [r7, #4]
	// Innovation Error y_k = measurement minus apriori estimate
	float z_err = zm - State.z;
 8003f10:	4be5      	ldr	r3, [pc, #916]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f1e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float a_err = am - State.a;
 8003f22:	4be1      	ldr	r3, [pc, #900]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 8003f24:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f28:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f30:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

	// Innovation covariance S_k
	// S_k = (H * P_k- * H_t) + R_k
	float s00 = Pzz;
 8003f34:	4bdd      	ldr	r3, [pc, #884]	; (80042ac <kalmanFilter4d_update+0x3ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float s01 = Pza;
 8003f3c:	4bdc      	ldr	r3, [pc, #880]	; (80042b0 <kalmanFilter4d_update+0x3b0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	float s10 = s01;
 8003f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f48:	67fb      	str	r3, [r7, #124]	; 0x7c
	float s11 = Paa;
 8003f4a:	4bda      	ldr	r3, [pc, #872]	; (80042b4 <kalmanFilter4d_update+0x3b4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	67bb      	str	r3, [r7, #120]	; 0x78

	// add R_k
	s00 += ZMeasVariance;
 8003f50:	4bd9      	ldr	r3, [pc, #868]	; (80042b8 <kalmanFilter4d_update+0x3b8>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	s11 += AMeasVariance;
 8003f62:	4bd6      	ldr	r3, [pc, #856]	; (80042bc <kalmanFilter4d_update+0x3bc>)
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f70:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	// inject additional uncertainty for high acceleration situations
	float accel_ext = abs(am-State.b);
 8003f74:	4bcc      	ldr	r3, [pc, #816]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 8003f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f86:	ee17 3a90 	vmov	r3, s15
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bfb8      	it	lt
 8003f8e:	425b      	neglt	r3, r3
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f98:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s11 += (KAdapt*accel_ext*accel_ext);
 8003f9c:	4bc8      	ldr	r3, [pc, #800]	; (80042c0 <kalmanFilter4d_update+0x3c0>)
 8003f9e:	ed93 7a00 	vldr	s14, [r3]
 8003fa2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003faa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fba:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// allow system to update acceleration sensor bias estimate only when there is low acceleration
	ABiasVariance = KF_ACCELBIAS_VARIANCE/(1.0f + accel_ext);	
 8003fbe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fca:	eddf 6abe 	vldr	s13, [pc, #760]	; 80042c4 <kalmanFilter4d_update+0x3c4>
 8003fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd2:	4bbd      	ldr	r3, [pc, #756]	; (80042c8 <kalmanFilter4d_update+0x3c8>)
 8003fd4:	edc3 7a00 	vstr	s15, [r3]

	// Compute S_k_inv
	float sdetinv = 1.0f/(s00*s11 - s10*s01);
 8003fd8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003fdc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fe4:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8003fe8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ffc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float sinv00 = sdetinv * s11;
 8004000:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004004:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float sinv01 = -sdetinv * s10;
 8004010:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004014:	eef1 7a67 	vneg.f32	s15, s15
 8004018:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800401c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004020:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float sinv10 = sinv01;
 8004024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004026:	667b      	str	r3, [r7, #100]	; 0x64
	float sinv11 = sdetinv * s00;
 8004028:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800402c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004034:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Kalman gain K_k [4x2] matrix
	// K_k = P_k- * H_t * S_k_inv
	float k00 = Pzz*sinv00 + Pza*sinv10;  
 8004038:	4b9c      	ldr	r3, [pc, #624]	; (80042ac <kalmanFilter4d_update+0x3ac>)
 800403a:	ed93 7a00 	vldr	s14, [r3]
 800403e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004042:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004046:	4b9a      	ldr	r3, [pc, #616]	; (80042b0 <kalmanFilter4d_update+0x3b0>)
 8004048:	edd3 6a00 	vldr	s13, [r3]
 800404c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004058:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float k01 = Pzz*sinv01 + Pza*sinv11;
 800405c:	4b93      	ldr	r3, [pc, #588]	; (80042ac <kalmanFilter4d_update+0x3ac>)
 800405e:	ed93 7a00 	vldr	s14, [r3]
 8004062:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800406a:	4b91      	ldr	r3, [pc, #580]	; (80042b0 <kalmanFilter4d_update+0x3b0>)
 800406c:	edd3 6a00 	vldr	s13, [r3]
 8004070:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800407c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float k10 = Pvz*sinv00 + Pva*sinv10;
 8004080:	4b92      	ldr	r3, [pc, #584]	; (80042cc <kalmanFilter4d_update+0x3cc>)
 8004082:	ed93 7a00 	vldr	s14, [r3]
 8004086:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800408a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800408e:	4b90      	ldr	r3, [pc, #576]	; (80042d0 <kalmanFilter4d_update+0x3d0>)
 8004090:	edd3 6a00 	vldr	s13, [r3]
 8004094:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800409c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float k11 = Pvz*sinv01 + Pva*sinv11;
 80040a4:	4b89      	ldr	r3, [pc, #548]	; (80042cc <kalmanFilter4d_update+0x3cc>)
 80040a6:	ed93 7a00 	vldr	s14, [r3]
 80040aa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80040ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b2:	4b87      	ldr	r3, [pc, #540]	; (80042d0 <kalmanFilter4d_update+0x3d0>)
 80040b4:	edd3 6a00 	vldr	s13, [r3]
 80040b8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80040bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float k20 = Paz*sinv00 + Paa*sinv10;
 80040c8:	4b82      	ldr	r3, [pc, #520]	; (80042d4 <kalmanFilter4d_update+0x3d4>)
 80040ca:	ed93 7a00 	vldr	s14, [r3]
 80040ce:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80040d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d6:	4b77      	ldr	r3, [pc, #476]	; (80042b4 <kalmanFilter4d_update+0x3b4>)
 80040d8:	edd3 6a00 	vldr	s13, [r3]
 80040dc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80040e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float k21 = Paz*sinv01 + Paa*sinv11;
 80040ec:	4b79      	ldr	r3, [pc, #484]	; (80042d4 <kalmanFilter4d_update+0x3d4>)
 80040ee:	ed93 7a00 	vldr	s14, [r3]
 80040f2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80040f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040fa:	4b6e      	ldr	r3, [pc, #440]	; (80042b4 <kalmanFilter4d_update+0x3b4>)
 80040fc:	edd3 6a00 	vldr	s13, [r3]
 8004100:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float k30 = Pbz*sinv00 + Pba*sinv10;
 8004110:	4b71      	ldr	r3, [pc, #452]	; (80042d8 <kalmanFilter4d_update+0x3d8>)
 8004112:	ed93 7a00 	vldr	s14, [r3]
 8004116:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800411a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800411e:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <kalmanFilter4d_update+0x3dc>)
 8004120:	edd3 6a00 	vldr	s13, [r3]
 8004124:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800412c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004130:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float k31 = Pbz*sinv01 + Pba*sinv11;
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <kalmanFilter4d_update+0x3d8>)
 8004136:	ed93 7a00 	vldr	s14, [r3]
 800413a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800413e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004142:	4b66      	ldr	r3, [pc, #408]	; (80042dc <kalmanFilter4d_update+0x3dc>)
 8004144:	edd3 6a00 	vldr	s13, [r3]
 8004148:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800414c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004154:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	// Updated (a posteriori) state estimate x_k+ 
	// x_k+ = x_k- + K_k * y_k
	State.z = State.z + (k00*z_err + k01*a_err);
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 800415a:	ed93 7a00 	vldr	s14, [r3]
 800415e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8004162:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004166:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800416a:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800416e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004172:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 8004180:	edc3 7a00 	vstr	s15, [r3]
	State.v = State.v + (k10*z_err + k11*a_err);
 8004184:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 8004186:	ed93 7a01 	vldr	s14, [r3, #4]
 800418a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800418e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004192:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004196:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800419a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800419e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041aa:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 80041ac:	edc3 7a01 	vstr	s15, [r3, #4]
	State.a = State.a + (k20*z_err + k21*a_err);
 80041b0:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 80041b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80041b6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80041ba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80041be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041c2:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 80041c6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80041ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d6:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 80041d8:	edc3 7a02 	vstr	s15, [r3, #8]
	State.b = State.b + (k30*z_err + k31*a_err);
 80041dc:	4b32      	ldr	r3, [pc, #200]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 80041de:	ed93 7a03 	vldr	s14, [r3, #12]
 80041e2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80041e6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80041ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041ee:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80041f2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80041f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004202:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <kalmanFilter4d_update+0x3a8>)
 8004204:	edc3 7a03 	vstr	s15, [r3, #12]

	// Updated (a posteriori) state covariance estimate P_k+
	// P_k+ = (I - K_k * H_k)*P_k-
	float tmp = 1.0f - k00;
 8004208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800420c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004214:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float p00 = tmp*Pzz - k01*Paz;
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <kalmanFilter4d_update+0x3ac>)
 800421a:	ed93 7a00 	vldr	s14, [r3]
 800421e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004226:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <kalmanFilter4d_update+0x3d4>)
 8004228:	edd3 6a00 	vldr	s13, [r3]
 800422c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004238:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float p01 = tmp*Pzv - k01*Pav;
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <kalmanFilter4d_update+0x3e0>)
 800423e:	ed93 7a00 	vldr	s14, [r3]
 8004242:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800424a:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <kalmanFilter4d_update+0x3e4>)
 800424c:	edd3 6a00 	vldr	s13, [r3]
 8004250:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800425c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float p02 = tmp*Pza - k01*Paa;
 8004260:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <kalmanFilter4d_update+0x3b0>)
 8004262:	ed93 7a00 	vldr	s14, [r3]
 8004266:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800426a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <kalmanFilter4d_update+0x3b4>)
 8004270:	edd3 6a00 	vldr	s13, [r3]
 8004274:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800427c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004280:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float p03 = tmp*Pzb - k01*Pab;
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <kalmanFilter4d_update+0x3e8>)
 8004286:	ed93 7a00 	vldr	s14, [r3]
 800428a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800428e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <kalmanFilter4d_update+0x3ec>)
 8004294:	edd3 6a00 	vldr	s13, [r3]
 8004298:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800429c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a4:	e024      	b.n	80042f0 <kalmanFilter4d_update+0x3f0>
 80042a6:	bf00      	nop
 80042a8:	240005c4 	.word	0x240005c4
 80042ac:	240005d4 	.word	0x240005d4
 80042b0:	240005dc 	.word	0x240005dc
 80042b4:	240005fc 	.word	0x240005fc
 80042b8:	2400061c 	.word	0x2400061c
 80042bc:	24000620 	.word	0x24000620
 80042c0:	24000624 	.word	0x24000624
 80042c4:	3ba3d70a 	.word	0x3ba3d70a
 80042c8:	24000618 	.word	0x24000618
 80042cc:	240005e4 	.word	0x240005e4
 80042d0:	240005ec 	.word	0x240005ec
 80042d4:	240005f4 	.word	0x240005f4
 80042d8:	24000604 	.word	0x24000604
 80042dc:	2400060c 	.word	0x2400060c
 80042e0:	240005d8 	.word	0x240005d8
 80042e4:	240005f8 	.word	0x240005f8
 80042e8:	240005e0 	.word	0x240005e0
 80042ec:	24000600 	.word	0x24000600
 80042f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float p11 = -k10*Pzv + Pvv - k11*Pav;
 80042f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80042f8:	eeb1 7a67 	vneg.f32	s14, s15
 80042fc:	4b69      	ldr	r3, [pc, #420]	; (80044a4 <kalmanFilter4d_update+0x5a4>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004306:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <kalmanFilter4d_update+0x5a8>)
 8004308:	edd3 7a00 	vldr	s15, [r3]
 800430c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004310:	4b66      	ldr	r3, [pc, #408]	; (80044ac <kalmanFilter4d_update+0x5ac>)
 8004312:	edd3 6a00 	vldr	s13, [r3]
 8004316:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800431a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800431e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004322:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float p12 = -k10*Pza + Pva - k11*Paa;
 8004326:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800432a:	eeb1 7a67 	vneg.f32	s14, s15
 800432e:	4b60      	ldr	r3, [pc, #384]	; (80044b0 <kalmanFilter4d_update+0x5b0>)
 8004330:	edd3 7a00 	vldr	s15, [r3]
 8004334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004338:	4b5e      	ldr	r3, [pc, #376]	; (80044b4 <kalmanFilter4d_update+0x5b4>)
 800433a:	edd3 7a00 	vldr	s15, [r3]
 800433e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004342:	4b5d      	ldr	r3, [pc, #372]	; (80044b8 <kalmanFilter4d_update+0x5b8>)
 8004344:	edd3 6a00 	vldr	s13, [r3]
 8004348:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800434c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004354:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float p13 = -k10*Pzb + Pvb - k11*Pab;
 8004358:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800435c:	eeb1 7a67 	vneg.f32	s14, s15
 8004360:	4b56      	ldr	r3, [pc, #344]	; (80044bc <kalmanFilter4d_update+0x5bc>)
 8004362:	edd3 7a00 	vldr	s15, [r3]
 8004366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800436a:	4b55      	ldr	r3, [pc, #340]	; (80044c0 <kalmanFilter4d_update+0x5c0>)
 800436c:	edd3 7a00 	vldr	s15, [r3]
 8004370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <kalmanFilter4d_update+0x5c4>)
 8004376:	edd3 6a00 	vldr	s13, [r3]
 800437a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800437e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004386:	edc7 7a08 	vstr	s15, [r7, #32]

	float p22 = -k20*Pza + (1.0f-k21)*Paa;
 800438a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800438e:	eeb1 7a67 	vneg.f32	s14, s15
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <kalmanFilter4d_update+0x5b0>)
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800439c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80043a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <kalmanFilter4d_update+0x5b8>)
 80043aa:	edd3 7a00 	vldr	s15, [r3]
 80043ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
	float p23 = -k20*Pzb + (1.0f-k21)*Pab;
 80043ba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80043be:	eeb1 7a67 	vneg.f32	s14, s15
 80043c2:	4b3e      	ldr	r3, [pc, #248]	; (80044bc <kalmanFilter4d_update+0x5bc>)
 80043c4:	edd3 7a00 	vldr	s15, [r3]
 80043c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80043d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043d8:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <kalmanFilter4d_update+0x5c4>)
 80043da:	edd3 7a00 	vldr	s15, [r3]
 80043de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e6:	edc7 7a06 	vstr	s15, [r7, #24]

	float p33 = -k30*Pzb -k31*Pab + Pbb;
 80043ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043ee:	eeb1 7a67 	vneg.f32	s14, s15
 80043f2:	4b32      	ldr	r3, [pc, #200]	; (80044bc <kalmanFilter4d_update+0x5bc>)
 80043f4:	edd3 7a00 	vldr	s15, [r3]
 80043f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043fc:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <kalmanFilter4d_update+0x5c4>)
 80043fe:	edd3 6a00 	vldr	s13, [r3]
 8004402:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800440a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800440e:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <kalmanFilter4d_update+0x5c8>)
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004418:	edc7 7a05 	vstr	s15, [r7, #20]

	Pzz = p00;
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <kalmanFilter4d_update+0x5cc>)
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	6013      	str	r3, [r2, #0]
	Pzv = p01;
 8004422:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <kalmanFilter4d_update+0x5a4>)
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	6013      	str	r3, [r2, #0]
	Pza = p02;
 8004428:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <kalmanFilter4d_update+0x5b0>)
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	6013      	str	r3, [r2, #0]
	Pzb = p03;
 800442e:	4a23      	ldr	r2, [pc, #140]	; (80044bc <kalmanFilter4d_update+0x5bc>)
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	6013      	str	r3, [r2, #0]

	Pvz = Pzv;
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <kalmanFilter4d_update+0x5a4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <kalmanFilter4d_update+0x5d0>)
 800443a:	6013      	str	r3, [r2, #0]
	Pvv = p11;
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <kalmanFilter4d_update+0x5a8>)
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	6013      	str	r3, [r2, #0]
	Pva = p12;
 8004442:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <kalmanFilter4d_update+0x5b4>)
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	6013      	str	r3, [r2, #0]
	Pvb = p13;
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <kalmanFilter4d_update+0x5c0>)
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	6013      	str	r3, [r2, #0]

	Paz = Pza;
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <kalmanFilter4d_update+0x5b0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <kalmanFilter4d_update+0x5d4>)
 8004454:	6013      	str	r3, [r2, #0]
	Pav = Pva;
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <kalmanFilter4d_update+0x5b4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a14      	ldr	r2, [pc, #80]	; (80044ac <kalmanFilter4d_update+0x5ac>)
 800445c:	6013      	str	r3, [r2, #0]
	Paa = p22;
 800445e:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <kalmanFilter4d_update+0x5b8>)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	6013      	str	r3, [r2, #0]
	Pab = p23;
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <kalmanFilter4d_update+0x5c4>)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	6013      	str	r3, [r2, #0]

	Pbz = Pzb;
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <kalmanFilter4d_update+0x5bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <kalmanFilter4d_update+0x5d8>)
 8004470:	6013      	str	r3, [r2, #0]
	Pbv = Pvb;
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <kalmanFilter4d_update+0x5c0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a19      	ldr	r2, [pc, #100]	; (80044dc <kalmanFilter4d_update+0x5dc>)
 8004478:	6013      	str	r3, [r2, #0]
	Pba = Pab;
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <kalmanFilter4d_update+0x5c4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <kalmanFilter4d_update+0x5e0>)
 8004480:	6013      	str	r3, [r2, #0]
	Pbb = p33; 
 8004482:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <kalmanFilter4d_update+0x5c8>)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	6013      	str	r3, [r2, #0]

	// return the state variables of interest (z and v)
	kfstruct->KFAltitudeCm = State.z;
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <kalmanFilter4d_update+0x5e4>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
	kfstruct->KFClimbrateCps= State.v;
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <kalmanFilter4d_update+0x5e4>)
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c
#if LOG_FILTER
	// WARNING : this should only be enabled for offline analysis of a downloaded data log !
	// e.g. see test code in /offline/kf 
	printf("%.1f %.1f %.1f %.1f %.1f %.1f %.1f %.1f %.1f\n",zm, State.z, Pzz, State.v, Pvv, State.a - State.b, Paa, State.b, Pbb);
#endif
	}
 8004498:	bf00      	nop
 800449a:	3794      	adds	r7, #148	; 0x94
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	240005d8 	.word	0x240005d8
 80044a8:	240005e8 	.word	0x240005e8
 80044ac:	240005f8 	.word	0x240005f8
 80044b0:	240005dc 	.word	0x240005dc
 80044b4:	240005ec 	.word	0x240005ec
 80044b8:	240005fc 	.word	0x240005fc
 80044bc:	240005e0 	.word	0x240005e0
 80044c0:	240005f0 	.word	0x240005f0
 80044c4:	24000600 	.word	0x24000600
 80044c8:	24000610 	.word	0x24000610
 80044cc:	240005d4 	.word	0x240005d4
 80044d0:	240005e4 	.word	0x240005e4
 80044d4:	240005f4 	.word	0x240005f4
 80044d8:	24000604 	.word	0x24000604
 80044dc:	24000608 	.word	0x24000608
 80044e0:	2400060c 	.word	0x2400060c
 80044e4:	240005c4 	.word	0x240005c4

080044e8 <LoRaE22_Init>:
	free(mem);
}

void LoRaE22_Init(UART_HandleTypeDef *huart, GPIO_TypeDef *AuxPort,
		GPIO_TypeDef *M0Port, GPIO_TypeDef *M1Port, uint16_t AuxPin,
		uint16_t M0Pin, uint16_t M1Pin) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
	initConfig.uartDevice = huart;
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <LoRaE22_Init+0x48>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6153      	str	r3, [r2, #20]
	initConfig.AUX_Port = AuxPort;
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <LoRaE22_Init+0x48>)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6013      	str	r3, [r2, #0]
	initConfig.AUX_Pin = AuxPin;
 8004502:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <LoRaE22_Init+0x48>)
 8004504:	8b3b      	ldrh	r3, [r7, #24]
 8004506:	8193      	strh	r3, [r2, #12]
	initConfig.M0_Port = M0Port;
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <LoRaE22_Init+0x48>)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6053      	str	r3, [r2, #4]
	initConfig.M0_Pin = M0Pin;
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <LoRaE22_Init+0x48>)
 8004510:	8bbb      	ldrh	r3, [r7, #28]
 8004512:	81d3      	strh	r3, [r2, #14]
	initConfig.M1_Port = M1Port;
 8004514:	4a06      	ldr	r2, [pc, #24]	; (8004530 <LoRaE22_Init+0x48>)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6093      	str	r3, [r2, #8]
	initConfig.M1_Pin = M1Pin;
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <LoRaE22_Init+0x48>)
 800451c:	8c3b      	ldrh	r3, [r7, #32]
 800451e:	8213      	strh	r3, [r2, #16]
	LoRaE22_SetMode(E22_NORMAL_MODE);
 8004520:	2001      	movs	r0, #1
 8004522:	f000 f807 	bl	8004534 <LoRaE22_SetMode>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	24000628 	.word	0x24000628

08004534 <LoRaE22_SetMode>:

LoRaTypedef_STATUS LoRaE22_SetMode(LoRaTypedef_MODES mode) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
	_managedDelay(10);
 800453e:	200a      	movs	r0, #10
 8004540:	f000 f898 	bl	8004674 <_managedDelay>

	switch (mode) {
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	3b01      	subs	r3, #1
 8004548:	2b03      	cmp	r3, #3
 800454a:	d84f      	bhi.n	80045ec <LoRaE22_SetMode+0xb8>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <LoRaE22_SetMode+0x20>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004565 	.word	0x08004565
 8004558:	08004587 	.word	0x08004587
 800455c:	080045a9 	.word	0x080045a9
 8004560:	080045cb 	.word	0x080045cb
	case E22_NORMAL_MODE:
		// Mode 0 | normal operation
		HAL_GPIO_WritePin(initConfig.M0_Port, initConfig.M0_Pin,
 8004564:	4b29      	ldr	r3, [pc, #164]	; (800460c <LoRaE22_SetMode+0xd8>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4a28      	ldr	r2, [pc, #160]	; (800460c <LoRaE22_SetMode+0xd8>)
 800456a:	89d1      	ldrh	r1, [r2, #14]
 800456c:	2200      	movs	r2, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f00a fb4c 	bl	800ec0c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(initConfig.M1_Port, initConfig.M1_Pin,
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <LoRaE22_SetMode+0xd8>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a24      	ldr	r2, [pc, #144]	; (800460c <LoRaE22_SetMode+0xd8>)
 800457a:	8a11      	ldrh	r1, [r2, #16]
 800457c:	2200      	movs	r2, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f00a fb44 	bl	800ec0c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8004584:	e034      	b.n	80045f0 <LoRaE22_SetMode+0xbc>
	case E22_WOR_MODE:
		HAL_GPIO_WritePin(initConfig.M0_Port, initConfig.M0_Pin, 1);
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <LoRaE22_SetMode+0xd8>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a20      	ldr	r2, [pc, #128]	; (800460c <LoRaE22_SetMode+0xd8>)
 800458c:	89d1      	ldrh	r1, [r2, #14]
 800458e:	2201      	movs	r2, #1
 8004590:	4618      	mov	r0, r3
 8004592:	f00a fb3b 	bl	800ec0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(initConfig.M1_Port, initConfig.M1_Pin, 0);
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <LoRaE22_SetMode+0xd8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a1c      	ldr	r2, [pc, #112]	; (800460c <LoRaE22_SetMode+0xd8>)
 800459c:	8a11      	ldrh	r1, [r2, #16]
 800459e:	2200      	movs	r2, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f00a fb33 	bl	800ec0c <HAL_GPIO_WritePin>
		break;
 80045a6:	e023      	b.n	80045f0 <LoRaE22_SetMode+0xbc>
	case E22_CONFIG_MODE:
		//		  case MODE_2_PROGRAM:
		HAL_GPIO_WritePin(initConfig.M0_Port, initConfig.M0_Pin, 0);
 80045a8:	4b18      	ldr	r3, [pc, #96]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4a17      	ldr	r2, [pc, #92]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045ae:	89d1      	ldrh	r1, [r2, #14]
 80045b0:	2200      	movs	r2, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f00a fb2a 	bl	800ec0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(initConfig.M1_Port, initConfig.M1_Pin, 1);
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045be:	8a11      	ldrh	r1, [r2, #16]
 80045c0:	2201      	movs	r2, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f00a fb22 	bl	800ec0c <HAL_GPIO_WritePin>
		break;
 80045c8:	e012      	b.n	80045f0 <LoRaE22_SetMode+0xbc>
	case E22_SLEEP_MODE:
		// Mode 3 | Setting operation
		HAL_GPIO_WritePin(initConfig.M0_Port, initConfig.M0_Pin, 1);
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4a0f      	ldr	r2, [pc, #60]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045d0:	89d1      	ldrh	r1, [r2, #14]
 80045d2:	2201      	movs	r2, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f00a fb19 	bl	800ec0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(initConfig.M1_Port, initConfig.M1_Pin, 1);
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4a0b      	ldr	r2, [pc, #44]	; (800460c <LoRaE22_SetMode+0xd8>)
 80045e0:	8a11      	ldrh	r1, [r2, #16]
 80045e2:	2201      	movs	r2, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f00a fb11 	bl	800ec0c <HAL_GPIO_WritePin>
		break;
 80045ea:	e001      	b.n	80045f0 <LoRaE22_SetMode+0xbc>

	default:
		return ERR_E22_INVALID_PARAM;
 80045ec:	2306      	movs	r3, #6
 80045ee:	e009      	b.n	8004604 <LoRaE22_SetMode+0xd0>
	}

	// data sheet says 2ms later control is returned, let's give just a bit more time
	// these modules can take time to activate pins
	_managedDelay(3);
 80045f0:	2003      	movs	r0, #3
 80045f2:	f000 f83f 	bl	8004674 <_managedDelay>

	// wait until aux pin goes back low
	LoRaTypedef_STATUS res = LoRaE22_waitCompleteResponse(1000);
 80045f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045fa:	f000 f809 	bl	8004610 <LoRaE22_waitCompleteResponse>
 80045fe:	4603      	mov	r3, r0
 8004600:	73fb      	strb	r3, [r7, #15]

	return res;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	24000628 	.word	0x24000628

08004610 <LoRaE22_waitCompleteResponse>:

LoRaTypedef_STATUS LoRaE22_waitCompleteResponse(unsigned long timeout) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

	LoRaTypedef_STATUS result = E22_SUCCESS;
 8004618:	2301      	movs	r3, #1
 800461a:	72fb      	strb	r3, [r7, #11]

	unsigned long t = HAL_GetTick();
 800461c:	f005 fcce 	bl	8009fbc <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

	if (((unsigned long) (t + timeout)) == 0) {
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10e      	bne.n	800464a <LoRaE22_waitCompleteResponse+0x3a>
		t = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
	}
	while (HAL_GPIO_ReadPin(initConfig.AUX_Port, initConfig.AUX_Pin)
 8004630:	e00b      	b.n	800464a <LoRaE22_waitCompleteResponse+0x3a>
			== GPIO_PIN_RESET) {
		if ((HAL_GetTick() - t) > timeout) {
 8004632:	f005 fcc3 	bl	8009fbc <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d203      	bcs.n	800464a <LoRaE22_waitCompleteResponse+0x3a>
			result = ERR_E22_TIMEOUT;
 8004642:	2309      	movs	r3, #9
 8004644:	72fb      	strb	r3, [r7, #11]

			return result;
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	e00e      	b.n	8004668 <LoRaE22_waitCompleteResponse+0x58>
	while (HAL_GPIO_ReadPin(initConfig.AUX_Port, initConfig.AUX_Pin)
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <LoRaE22_waitCompleteResponse+0x60>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <LoRaE22_waitCompleteResponse+0x60>)
 8004650:	8992      	ldrh	r2, [r2, #12]
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f00a fac1 	bl	800ebdc <HAL_GPIO_ReadPin>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0e8      	beq.n	8004632 <LoRaE22_waitCompleteResponse+0x22>
		}
	}

	_managedDelay(5);
 8004660:	2005      	movs	r0, #5
 8004662:	f000 f807 	bl	8004674 <_managedDelay>
	return result;
 8004666:	7afb      	ldrb	r3, [r7, #11]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	24000628 	.word	0x24000628

08004674 <_managedDelay>:

void _managedDelay(unsigned long timeout) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	unsigned long t = HAL_GetTick();
 800467c:	f005 fc9e 	bl	8009fbc <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]
	if (((unsigned long) (t + timeout)) == 0) {
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <_managedDelay+0x1c>
		t = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
	}
	while ((HAL_GetTick() - t) < timeout)
 8004690:	bf00      	nop
 8004692:	f005 fc93 	bl	8009fbc <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d8f7      	bhi.n	8004692 <_managedDelay+0x1e>
		;
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <LoRaE22_sendStruct>:

LoRaTypedef_STATUS LoRaE22_sendStruct(uint8_t *structureM, uint16_t size) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
	if (size > MAX_SIZE_TX_PACKET + 2) {
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	2bf2      	cmp	r3, #242	; 0xf2
 80046bc:	d901      	bls.n	80046c2 <LoRaE22_sendStruct+0x16>
		return ERR_E22_PACKET_TOO_BIG;
 80046be:	230f      	movs	r3, #15
 80046c0:	e023      	b.n	800470a <LoRaE22_sendStruct+0x5e>
	}
	uint8_t header[3] = { 0x05, 0x31, 0x12 };
 80046c2:	4a14      	ldr	r2, [pc, #80]	; (8004714 <LoRaE22_sendStruct+0x68>)
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	4611      	mov	r1, r2
 80046cc:	8019      	strh	r1, [r3, #0]
 80046ce:	3302      	adds	r3, #2
 80046d0:	0c12      	lsrs	r2, r2, #16
 80046d2:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(LORA_UART, header, 3, 100);
 80046d4:	f107 010c 	add.w	r1, r7, #12
 80046d8:	2364      	movs	r3, #100	; 0x64
 80046da:	2203      	movs	r2, #3
 80046dc:	480e      	ldr	r0, [pc, #56]	; (8004718 <LoRaE22_sendStruct+0x6c>)
 80046de:	f013 f805 	bl	80176ec <HAL_UART_Transmit>
	if (HAL_UART_Transmit_DMA(initConfig.uartDevice, structureM, size)
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <LoRaE22_sendStruct+0x70>)
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f013 f8ea 	bl	80178c4 <HAL_UART_Transmit_DMA>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <LoRaE22_sendStruct+0x4e>
			!= HAL_OK) {
		return ERR_E22_NO_RESPONSE_FROM_DEVICE;
 80046f6:	230c      	movs	r3, #12
 80046f8:	e007      	b.n	800470a <LoRaE22_sendStruct+0x5e>
	}
	HAL_Delay(50);
 80046fa:	2032      	movs	r0, #50	; 0x32
 80046fc:	f005 fc6a 	bl	8009fd4 <HAL_Delay>
	return LoRaE22_waitCompleteResponse(RESPONSE_DELAY);
 8004700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004704:	f7ff ff84 	bl	8004610 <LoRaE22_waitCompleteResponse>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	0802730c 	.word	0x0802730c
 8004718:	24003d58 	.word	0x24003d58
 800471c:	24000628 	.word	0x24000628

08004720 <parseNumber>:
	}
	return LoRaE22_waitCompleteResponse(RESPONSE_DELAY);

}

uint32_t parseNumber(uint8_t *msj, uint8_t len) {
 8004720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004724:	b087      	sub	sp, #28
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
 800472e:	466b      	mov	r3, sp
 8004730:	461e      	mov	r6, r3
	uint8_t *h = msj;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	613b      	str	r3, [r7, #16]
	uint8_t m[len];
 8004736:	78f9      	ldrb	r1, [r7, #3]
 8004738:	460b      	mov	r3, r1
 800473a:	3b01      	subs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	b2cb      	uxtb	r3, r1
 8004740:	2200      	movs	r2, #0
 8004742:	4698      	mov	r8, r3
 8004744:	4691      	mov	r9, r2
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800475a:	b2cb      	uxtb	r3, r1
 800475c:	2200      	movs	r2, #0
 800475e:	461c      	mov	r4, r3
 8004760:	4615      	mov	r5, r2
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	00eb      	lsls	r3, r5, #3
 800476c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004770:	00e2      	lsls	r2, r4, #3
 8004772:	460b      	mov	r3, r1
 8004774:	3307      	adds	r3, #7
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	ebad 0d03 	sub.w	sp, sp, r3
 800477e:	466b      	mov	r3, sp
 8004780:	3300      	adds	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]
	uint8_t *a = m;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	617b      	str	r3, [r7, #20]
	memset(m, 0, len * sizeof(uint8_t));
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	461a      	mov	r2, r3
 800478c:	2100      	movs	r1, #0
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f01d fbce 	bl	8021f30 <memset>
	while (*h != '\0' && isdigit(*h)) {
 8004794:	e008      	b.n	80047a8 <parseNumber+0x88>
		(*a) = *h++;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	613a      	str	r2, [r7, #16]
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	701a      	strb	r2, [r3, #0]
		a++;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	3301      	adds	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
	while (*h != '\0' && isdigit(*h)) {
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <parseNumber+0xa4>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <parseNumber+0xb8>)
 80047b8:	4413      	add	r3, r2
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e8      	bne.n	8004796 <parseNumber+0x76>
	}
	return (atoi((char*) m));
 80047c4:	68b8      	ldr	r0, [r7, #8]
 80047c6:	f01d fa74 	bl	8021cb2 <atoi>
 80047ca:	4603      	mov	r3, r0
 80047cc:	46b5      	mov	sp, r6
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047d8:	08027ccc 	.word	0x08027ccc

080047dc <parseMotor>:

uint8_t parseMotor(void *d, uint8_t len) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
	uint8_t *p = d;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	617b      	str	r3, [r7, #20]
	char *token1;
	char *s1 = " ";
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <parseMotor+0x80>)
 80047ee:	613b      	str	r3, [r7, #16]
	token1 = strtok((char*) p, s1);
 80047f0:	6939      	ldr	r1, [r7, #16]
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f01f fa80 	bl	8023cf8 <strtok>
 80047f8:	60f8      	str	r0, [r7, #12]
	if (token1 == NULL)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <parseMotor+0x28>
		return 0;
 8004800:	2300      	movs	r3, #0
 8004802:	e026      	b.n	8004852 <parseMotor+0x76>
	siracUydu.yerIstKomutu.motorTahrikGucu = parseNumber((uint8_t*) token1,
			strlen(token1));
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7fb fd75 	bl	80002f4 <strlen>
 800480a:	4603      	mov	r3, r0
	siracUydu.yerIstKomutu.motorTahrikGucu = parseNumber((uint8_t*) token1,
 800480c:	b2db      	uxtb	r3, r3
 800480e:	4619      	mov	r1, r3
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff ff85 	bl	8004720 <parseNumber>
 8004816:	4603      	mov	r3, r0
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <parseMotor+0x84>)
 800481c:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
	token1 = strtok(NULL, s1);
 8004820:	6939      	ldr	r1, [r7, #16]
 8004822:	2000      	movs	r0, #0
 8004824:	f01f fa68 	bl	8023cf8 <strtok>
 8004828:	60f8      	str	r0, [r7, #12]
	if (token1 == NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <parseMotor+0x58>
		return 0;
 8004830:	2300      	movs	r3, #0
 8004832:	e00e      	b.n	8004852 <parseMotor+0x76>
	siracUydu.yerIstKomutu.motorTahrikSuresi = parseNumber((uint8_t*) token1,
			strlen(token1));
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7fb fd5d 	bl	80002f4 <strlen>
 800483a:	4603      	mov	r3, r0
	siracUydu.yerIstKomutu.motorTahrikSuresi = parseNumber((uint8_t*) token1,
 800483c:	b2db      	uxtb	r3, r3
 800483e:	4619      	mov	r1, r3
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff ff6d 	bl	8004720 <parseNumber>
 8004846:	4603      	mov	r3, r0
 8004848:	b2da      	uxtb	r2, r3
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <parseMotor+0x84>)
 800484c:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
	return 1;
 8004850:	2301      	movs	r3, #1

}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	08027310 	.word	0x08027310
 8004860:	24000018 	.word	0x24000018

08004864 <parseSetDate>:

void parseSetDate(void *d, uint8_t len) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08e      	sub	sp, #56	; 0x38
 8004868:	af02      	add	r7, sp, #8
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
	uint8_t *p = d;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
	char *token1, *token2;
	char *timeData;
	char *dateData;
	char *s1 = " ";
 8004874:	4b46      	ldr	r3, [pc, #280]	; (8004990 <parseSetDate+0x12c>)
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
	char *s2 = ":";
 8004878:	4b46      	ldr	r3, [pc, #280]	; (8004994 <parseSetDate+0x130>)
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t h, m, s;
	uint8_t day, month;

	timeData = strtok((char*) p, s1);
 800487c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800487e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004880:	f01f fa3a 	bl	8023cf8 <strtok>
 8004884:	6238      	str	r0, [r7, #32]
	if (timeData == NULL)
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d073      	beq.n	8004974 <parseSetDate+0x110>
		return;
	dateData = strtok(NULL, s1);
 800488c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488e:	2000      	movs	r0, #0
 8004890:	f01f fa32 	bl	8023cf8 <strtok>
 8004894:	61f8      	str	r0, [r7, #28]
	if (dateData == NULL)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d06d      	beq.n	8004978 <parseSetDate+0x114>
		return;
	token1 = strtok((char*) timeData, s2);
 800489c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800489e:	6a38      	ldr	r0, [r7, #32]
 80048a0:	f01f fa2a 	bl	8023cf8 <strtok>
 80048a4:	61b8      	str	r0, [r7, #24]

	h = parseNumber((uint8_t*) token1, strlen(token1));
 80048a6:	69b8      	ldr	r0, [r7, #24]
 80048a8:	f7fb fd24 	bl	80002f4 <strlen>
 80048ac:	4603      	mov	r3, r0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	69b8      	ldr	r0, [r7, #24]
 80048b4:	f7ff ff34 	bl	8004720 <parseNumber>
 80048b8:	4603      	mov	r3, r0
 80048ba:	75fb      	strb	r3, [r7, #23]
	token1 = strtok((char*) NULL, s2);
 80048bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048be:	2000      	movs	r0, #0
 80048c0:	f01f fa1a 	bl	8023cf8 <strtok>
 80048c4:	61b8      	str	r0, [r7, #24]
	if (token1 == NULL)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d057      	beq.n	800497c <parseSetDate+0x118>
		return;
	m = parseNumber((uint8_t*) token1, strlen(token1));
 80048cc:	69b8      	ldr	r0, [r7, #24]
 80048ce:	f7fb fd11 	bl	80002f4 <strlen>
 80048d2:	4603      	mov	r3, r0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	69b8      	ldr	r0, [r7, #24]
 80048da:	f7ff ff21 	bl	8004720 <parseNumber>
 80048de:	4603      	mov	r3, r0
 80048e0:	75bb      	strb	r3, [r7, #22]
	token1 = strtok((char*) NULL, s2);
 80048e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e4:	2000      	movs	r0, #0
 80048e6:	f01f fa07 	bl	8023cf8 <strtok>
 80048ea:	61b8      	str	r0, [r7, #24]
	if (token1 == NULL)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d046      	beq.n	8004980 <parseSetDate+0x11c>
		return;
	s = parseNumber((uint8_t*) token1, strlen(token1));
 80048f2:	69b8      	ldr	r0, [r7, #24]
 80048f4:	f7fb fcfe 	bl	80002f4 <strlen>
 80048f8:	4603      	mov	r3, r0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	4619      	mov	r1, r3
 80048fe:	69b8      	ldr	r0, [r7, #24]
 8004900:	f7ff ff0e 	bl	8004720 <parseNumber>
 8004904:	4603      	mov	r3, r0
 8004906:	757b      	strb	r3, [r7, #21]

	token2 = strtok((char*) dateData, s2);
 8004908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800490a:	69f8      	ldr	r0, [r7, #28]
 800490c:	f01f f9f4 	bl	8023cf8 <strtok>
 8004910:	6138      	str	r0, [r7, #16]
	day = parseNumber((uint8_t*) token2, strlen(token2));
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f7fb fcee 	bl	80002f4 <strlen>
 8004918:	4603      	mov	r3, r0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	4619      	mov	r1, r3
 800491e:	6938      	ldr	r0, [r7, #16]
 8004920:	f7ff fefe 	bl	8004720 <parseNumber>
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]
	token2 = strtok((char*) NULL, s2);
 8004928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800492a:	2000      	movs	r0, #0
 800492c:	f01f f9e4 	bl	8023cf8 <strtok>
 8004930:	6138      	str	r0, [r7, #16]
	if (token1 == NULL)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d025      	beq.n	8004984 <parseSetDate+0x120>
		return;
	month = parseNumber((uint8_t*) token2, strlen(token2));
 8004938:	6938      	ldr	r0, [r7, #16]
 800493a:	f7fb fcdb 	bl	80002f4 <strlen>
 800493e:	4603      	mov	r3, r0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	6938      	ldr	r0, [r7, #16]
 8004946:	f7ff feeb 	bl	8004720 <parseNumber>
 800494a:	4603      	mov	r3, r0
 800494c:	73bb      	strb	r3, [r7, #14]
	token2 = strtok((char*) NULL, s2);
 800494e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004950:	2000      	movs	r0, #0
 8004952:	f01f f9d1 	bl	8023cf8 <strtok>
 8004956:	6138      	str	r0, [r7, #16]
	if (token1 == NULL)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d014      	beq.n	8004988 <parseSetDate+0x124>
		return;
	setRTC(h, m, s, 1, month, day);
 800495e:	7d7a      	ldrb	r2, [r7, #21]
 8004960:	7db9      	ldrb	r1, [r7, #22]
 8004962:	7df8      	ldrb	r0, [r7, #23]
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	2301      	movs	r3, #1
 800496e:	f004 f9cb 	bl	8008d08 <setRTC>
	return;
 8004972:	e00a      	b.n	800498a <parseSetDate+0x126>
		return;
 8004974:	bf00      	nop
 8004976:	e008      	b.n	800498a <parseSetDate+0x126>
		return;
 8004978:	bf00      	nop
 800497a:	e006      	b.n	800498a <parseSetDate+0x126>
		return;
 800497c:	bf00      	nop
 800497e:	e004      	b.n	800498a <parseSetDate+0x126>
		return;
 8004980:	bf00      	nop
 8004982:	e002      	b.n	800498a <parseSetDate+0x126>
		return;
 8004984:	bf00      	nop
 8004986:	e000      	b.n	800498a <parseSetDate+0x126>
		return;
 8004988:	bf00      	nop
}
 800498a:	3730      	adds	r7, #48	; 0x30
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08027310 	.word	0x08027310
 8004994:	08027314 	.word	0x08027314

08004998 <parseTData>:
void parseTData(void *p) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	uint8_t *h = p;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	617b      	str	r3, [r7, #20]
	switch (*h++) {
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	617a      	str	r2, [r7, #20]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b67      	cmp	r3, #103	; 0x67
 80049ae:	f040 80a7 	bne.w	8004b00 <parseTData+0x168>
	case 'g': {
		char *p = h;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	613b      	str	r3, [r7, #16]
		char *s = ",";
 80049b6:	4b58      	ldr	r3, [pc, #352]	; (8004b18 <parseTData+0x180>)
 80049b8:	60fb      	str	r3, [r7, #12]
		char *token;
		token = strtok(p, s);
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	6938      	ldr	r0, [r7, #16]
 80049be:	f01f f99b 	bl	8023cf8 <strtok>
 80049c2:	60b8      	str	r0, [r7, #8]
		strcpy(siracUydu.telemetri.tasiyiciTelemetri.gps2, token);
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4855      	ldr	r0, [pc, #340]	; (8004b1c <parseTData+0x184>)
 80049c8:	f01e fb96 	bl	80230f8 <strcpy>
		token = strtok(NULL, s);
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	2000      	movs	r0, #0
 80049d0:	f01f f992 	bl	8023cf8 <strtok>
 80049d4:	60b8      	str	r0, [r7, #8]
		strcat(siracUydu.telemetri.tasiyiciTelemetri.gps2, ",");
 80049d6:	4851      	ldr	r0, [pc, #324]	; (8004b1c <parseTData+0x184>)
 80049d8:	f7fb fc8c 	bl	80002f4 <strlen>
 80049dc:	4603      	mov	r3, r0
 80049de:	461a      	mov	r2, r3
 80049e0:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <parseTData+0x184>)
 80049e2:	4413      	add	r3, r2
 80049e4:	494c      	ldr	r1, [pc, #304]	; (8004b18 <parseTData+0x180>)
 80049e6:	461a      	mov	r2, r3
 80049e8:	460b      	mov	r3, r1
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	8013      	strh	r3, [r2, #0]
		strcat(siracUydu.telemetri.tasiyiciTelemetri.gps2, token);
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	484a      	ldr	r0, [pc, #296]	; (8004b1c <parseTData+0x184>)
 80049f2:	f01e fb72 	bl	80230da <strcat>
		token = strtok(NULL, s);
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	2000      	movs	r0, #0
 80049fa:	f01f f97d 	bl	8023cf8 <strtok>
 80049fe:	60b8      	str	r0, [r7, #8]
		strcat(siracUydu.telemetri.tasiyiciTelemetri.gps2, ",");
 8004a00:	4846      	ldr	r0, [pc, #280]	; (8004b1c <parseTData+0x184>)
 8004a02:	f7fb fc77 	bl	80002f4 <strlen>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b44      	ldr	r3, [pc, #272]	; (8004b1c <parseTData+0x184>)
 8004a0c:	4413      	add	r3, r2
 8004a0e:	4942      	ldr	r1, [pc, #264]	; (8004b18 <parseTData+0x180>)
 8004a10:	461a      	mov	r2, r3
 8004a12:	460b      	mov	r3, r1
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	8013      	strh	r3, [r2, #0]
		strcat(siracUydu.telemetri.tasiyiciTelemetri.gps2, token);
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4840      	ldr	r0, [pc, #256]	; (8004b1c <parseTData+0x184>)
 8004a1c:	f01e fb5d 	bl	80230da <strcat>
		token = strtok(NULL, s);
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	2000      	movs	r0, #0
 8004a24:	f01f f968 	bl	8023cf8 <strtok>
 8004a28:	60b8      	str	r0, [r7, #8]
		siracUydu.telemetri.tasiyiciTelemetri.basinc = atof(token) * 100.0;
 8004a2a:	68b8      	ldr	r0, [r7, #8]
 8004a2c:	f01d f93e 	bl	8021cac <atof>
 8004a30:	eeb0 7b40 	vmov.f64	d7, d0
 8004a34:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004b10 <parseTData+0x178>
 8004a38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004a40:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <parseTData+0x188>)
 8004a42:	edc3 7a9b 	vstr	s15, [r3, #620]	; 0x26c
		if (siracUydu.telemetri.tasiyiciTelemetri.basinc >= 70000.0) {
 8004a46:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <parseTData+0x188>)
 8004a48:	edd3 7a9b 	vldr	s15, [r3, #620]	; 0x26c
 8004a4c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004b24 <parseTData+0x18c>
 8004a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	db4c      	blt.n	8004af4 <parseTData+0x15c>
			siracUydu.telemetri.tasiyiciTelemetri.yukseklik = __getAlt(
					siracUydu.telemetri.tasiyiciTelemetri.basinc / 100.0,
 8004a5a:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <parseTData+0x188>)
 8004a5c:	edd3 7a9b 	vldr	s15, [r3, #620]	; 0x26c
			siracUydu.telemetri.tasiyiciTelemetri.yukseklik = __getAlt(
 8004a60:	eddf 6a31 	vldr	s13, [pc, #196]	; 8004b28 <parseTData+0x190>
 8004a64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a68:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <parseTData+0x188>)
 8004a6a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a6e:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8004b2c <parseTData+0x194>
 8004a72:	eef0 0a67 	vmov.f32	s1, s15
 8004a76:	eeb0 0a47 	vmov.f32	s0, s14
 8004a7a:	f000 fb79 	bl	8005170 <__getAlt>
 8004a7e:	eeb0 7a40 	vmov.f32	s14, s0
					siracUydu.sensorVerisi.baro.Temp_C,
					ALTITUDE_REFERENCE_PRESSURE)
					- siracUydu.telemetri.tasiyiciTelemetri.YerYukseklik;
 8004a82:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <parseTData+0x188>)
 8004a84:	edd3 7a9d 	vldr	s15, [r3, #628]	; 0x274
 8004a88:	ee77 7a67 	vsub.f32	s15, s14, s15
			siracUydu.telemetri.tasiyiciTelemetri.yukseklik = __getAlt(
 8004a8c:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <parseTData+0x188>)
 8004a8e:	edc3 7a9c 	vstr	s15, [r3, #624]	; 0x270
			if (siracUydu.telemetri.tasiyiciTelemetri.detect <= 3) {
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <parseTData+0x188>)
 8004a94:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d813      	bhi.n	8004ac4 <parseTData+0x12c>
				siracUydu.telemetri.tasiyiciTelemetri.YerYukseklik +=
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <parseTData+0x188>)
 8004a9e:	ed93 7a9d 	vldr	s14, [r3, #628]	; 0x274
						siracUydu.telemetri.tasiyiciTelemetri.yukseklik;
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <parseTData+0x188>)
 8004aa4:	edd3 7a9c 	vldr	s15, [r3, #624]	; 0x270
				siracUydu.telemetri.tasiyiciTelemetri.YerYukseklik +=
 8004aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aac:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <parseTData+0x188>)
 8004aae:	edc3 7a9d 	vstr	s15, [r3, #628]	; 0x274
				siracUydu.telemetri.tasiyiciTelemetri.detect++;
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <parseTData+0x188>)
 8004ab4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004ab8:	3301      	adds	r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <parseTData+0x188>)
 8004abe:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
				siracUydu.telemetri.tasiyiciTelemetri.detect++;
			}
		} else
			siracUydu.telemetri.tasiyiciTelemetri.yukseklik = 0.0;

		break;
 8004ac2:	e01f      	b.n	8004b04 <parseTData+0x16c>
			} else if (siracUydu.telemetri.tasiyiciTelemetri.detect == 3) {
 8004ac4:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <parseTData+0x188>)
 8004ac6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d11a      	bne.n	8004b04 <parseTData+0x16c>
				siracUydu.telemetri.tasiyiciTelemetri.YerYukseklik /= 3;
 8004ace:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <parseTData+0x188>)
 8004ad0:	ed93 7a9d 	vldr	s14, [r3, #628]	; 0x274
 8004ad4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <parseTData+0x188>)
 8004ade:	edc3 7a9d 	vstr	s15, [r3, #628]	; 0x274
				siracUydu.telemetri.tasiyiciTelemetri.detect++;
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <parseTData+0x188>)
 8004ae4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004ae8:	3301      	adds	r3, #1
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <parseTData+0x188>)
 8004aee:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8004af2:	e007      	b.n	8004b04 <parseTData+0x16c>
			siracUydu.telemetri.tasiyiciTelemetri.yukseklik = 0.0;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <parseTData+0x188>)
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
		break;
 8004afe:	e001      	b.n	8004b04 <parseTData+0x16c>
	}
	default:
		break;
 8004b00:	bf00      	nop
 8004b02:	e000      	b.n	8004b06 <parseTData+0x16e>
		break;
 8004b04:	bf00      	nop
	}
}
 8004b06:	bf00      	nop
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	00000000 	.word	0x00000000
 8004b14:	40590000 	.word	0x40590000
 8004b18:	08027318 	.word	0x08027318
 8004b1c:	24000291 	.word	0x24000291
 8004b20:	24000018 	.word	0x24000018
 8004b24:	4788b800 	.word	0x4788b800
 8004b28:	42c80000 	.word	0x42c80000
 8004b2c:	447d5000 	.word	0x447d5000

08004b30 <parseTError>:

void parseTError(void *d) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	char *p = d;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	617b      	str	r3, [r7, #20]
	char *s = ",";
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <parseTError+0x40>)
 8004b3e:	613b      	str	r3, [r7, #16]
	char *token;
	token = strtok(p, s);
 8004b40:	6939      	ldr	r1, [r7, #16]
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f01f f8d8 	bl	8023cf8 <strtok>
 8004b48:	60f8      	str	r0, [r7, #12]
	int err = atoi(token);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f01d f8b1 	bl	8021cb2 <atoi>
 8004b50:	60b8      	str	r0, [r7, #8]
	siracUydu.donanimDurumu |= err;
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <parseTError+0x44>)
 8004b54:	885b      	ldrh	r3, [r3, #2]
 8004b56:	b21a      	sxth	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	b21b      	sxth	r3, r3
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	b21b      	sxth	r3, r3
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <parseTError+0x44>)
 8004b64:	805a      	strh	r2, [r3, #2]
	return;
 8004b66:	bf00      	nop
}
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	08027318 	.word	0x08027318
 8004b74:	24000018 	.word	0x24000018

08004b78 <parseGSCommand>:

void parseGSCommand(void *p, uint8_t len) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	70fb      	strb	r3, [r7, #3]
	if (len == 0) {
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80c2 	beq.w	8004d10 <parseGSCommand+0x198>
		return;
	}
	uint8_t *h = p;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]

	switch (*h++) {
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	60fa      	str	r2, [r7, #12]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	3b61      	subs	r3, #97	; 0x61
 8004b9a:	2b16      	cmp	r3, #22
 8004b9c:	f200 80ba 	bhi.w	8004d14 <parseGSCommand+0x19c>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <parseGSCommand+0x30>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004caf 	.word	0x08004caf
 8004bac:	08004d15 	.word	0x08004d15
 8004bb0:	08004c79 	.word	0x08004c79
 8004bb4:	08004cbd 	.word	0x08004cbd
 8004bb8:	08004cfd 	.word	0x08004cfd
 8004bbc:	08004d05 	.word	0x08004d05
 8004bc0:	08004d15 	.word	0x08004d15
 8004bc4:	08004d15 	.word	0x08004d15
 8004bc8:	08004d15 	.word	0x08004d15
 8004bcc:	08004d15 	.word	0x08004d15
 8004bd0:	08004d15 	.word	0x08004d15
 8004bd4:	08004d15 	.word	0x08004d15
 8004bd8:	08004c43 	.word	0x08004c43
 8004bdc:	08004d15 	.word	0x08004d15
 8004be0:	08004d15 	.word	0x08004d15
 8004be4:	08004c8b 	.word	0x08004c8b
 8004be8:	08004cdd 	.word	0x08004cdd
 8004bec:	08004d15 	.word	0x08004d15
 8004bf0:	08004c05 	.word	0x08004c05
 8004bf4:	08004c9b 	.word	0x08004c9b
 8004bf8:	08004d15 	.word	0x08004d15
 8004bfc:	08004d15 	.word	0x08004d15
 8004c00:	08004cf7 	.word	0x08004cf7
	case 's': 	//seperate
		if (siracUydu.uyduDurumu == BEKLEME) {
 8004c04:	4b49      	ldr	r3, [pc, #292]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d112      	bne.n	8004c32 <parseGSCommand+0xba>
			servoTahrik(siracUydu.yerIstKomutu.servoKomutu);
 8004c0c:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c0e:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f004 fca8 	bl	8009568 <servoTahrik>
			siracUydu.yerIstKomutu.servoKomutu =
					!siracUydu.yerIstKomutu.servoKomutu;
 8004c18:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c1a:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	461a      	mov	r2, r3
			siracUydu.yerIstKomutu.servoKomutu =
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c2c:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
		} else if (siracUydu.ayrilmaDurumu == MANUEL_AYRILMA_GEREKLI) {
			servoTahrik(SERVO_AC);
		}
		break;
 8004c30:	e072      	b.n	8004d18 <parseGSCommand+0x1a0>
		} else if (siracUydu.ayrilmaDurumu == MANUEL_AYRILMA_GEREKLI) {
 8004c32:	4b3e      	ldr	r3, [pc, #248]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c34:	795b      	ldrb	r3, [r3, #5]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d16e      	bne.n	8004d18 <parseGSCommand+0x1a0>
			servoTahrik(SERVO_AC);
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f004 fc94 	bl	8009568 <servoTahrik>
		break;
 8004c40:	e06a      	b.n	8004d18 <parseGSCommand+0x1a0>

	case 'm': 	//manuel motor
		if (siracUydu.uyduDurumu == BEKLEME) {
 8004c42:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d168      	bne.n	8004d1c <parseGSCommand+0x1a4>
			if (parseMotor(h, strlen((char*) h))) {
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7fb fb52 	bl	80002f4 <strlen>
 8004c50:	4603      	mov	r3, r0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff fdc0 	bl	80047dc <parseMotor>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d05c      	beq.n	8004d1c <parseGSCommand+0x1a4>
				siracUydu.motorKontrolDurumu = MANUEL;
 8004c62:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c64:	2202      	movs	r2, #2
 8004c66:	711a      	strb	r2, [r3, #4]
				CLEAR_FLAG(timersFlag, motorTahrikTimeoutFlag);
 8004c68:	4b31      	ldr	r3, [pc, #196]	; (8004d30 <parseGSCommand+0x1b8>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f023 0304 	bic.w	r3, r3, #4
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <parseGSCommand+0x1b8>)
 8004c74:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8004c76:	e051      	b.n	8004d1c <parseGSCommand+0x1a4>

	case 'c': 	//imu calibration
		if (siracUydu.uyduDurumu == BEKLEME) {
 8004c78:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d14f      	bne.n	8004d20 <parseGSCommand+0x1a8>
			MPU9255_Init(IMU_I2C, 1);
 8004c80:	2101      	movs	r1, #1
 8004c82:	482c      	ldr	r0, [pc, #176]	; (8004d34 <parseGSCommand+0x1bc>)
 8004c84:	f7fb ff18 	bl	8000ab8 <MPU9255_Init>
			//printf("imu kalibrasyon\n");
		}
		break;
 8004c88:	e04a      	b.n	8004d20 <parseGSCommand+0x1a8>

	case 'p':	//package reset
		if (siracUydu.uyduDurumu == BEKLEME) {
 8004c8a:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <parseGSCommand+0x1b4>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d148      	bne.n	8004d24 <parseGSCommand+0x1ac>
			//printf("paket no reset\n");
			EraseFlash(0);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f004 f9b8 	bl	8009008 <EraseFlash>
		}
		break;
 8004c98:	e044      	b.n	8004d24 <parseGSCommand+0x1ac>

	case 't':	//set time
		parseSetDate(h, strlen((char*) h));
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7fb fb2a 	bl	80002f4 <strlen>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff fddc 	bl	8004864 <parseSetDate>
		break;
 8004cac:	e03b      	b.n	8004d26 <parseGSCommand+0x1ae>

	case 'a': //reset relative altitude
		siracUydu.sensorVerisi.irtifHizVerisi.GroundAltitude_cm =
				siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm;
 8004cae:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <parseGSCommand+0x1b4>)
 8004cb0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
		siracUydu.sensorVerisi.irtifHizVerisi.GroundAltitude_cm =
 8004cb4:	4a1d      	ldr	r2, [pc, #116]	; (8004d2c <parseGSCommand+0x1b4>)
 8004cb6:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
		break;
 8004cba:	e034      	b.n	8004d26 <parseGSCommand+0x1ae>
	case 'd': //motors disarm
		HAL_TIM_PWM_Stop(&ESC_HTIM, ESC1_CHN);
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	481e      	ldr	r0, [pc, #120]	; (8004d38 <parseGSCommand+0x1c0>)
 8004cc0:	f011 fb02 	bl	80162c8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&ESC_HTIM, ESC2_CHN);
 8004cc4:	2104      	movs	r1, #4
 8004cc6:	481c      	ldr	r0, [pc, #112]	; (8004d38 <parseGSCommand+0x1c0>)
 8004cc8:	f011 fafe 	bl	80162c8 <HAL_TIM_PWM_Stop>
		siracUydu.ArmDurumu = DISARM;
 8004ccc:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <parseGSCommand+0x1b4>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
		siracUydu.motorKontrolDurumu = DEVRE_DISI;
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <parseGSCommand+0x1b4>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	711a      	strb	r2, [r3, #4]
		break;
 8004cda:	e024      	b.n	8004d26 <parseGSCommand+0x1ae>

	case 'q': //motors arm
		HAL_TIM_PWM_Start(&ESC_HTIM, ESC1_CHN);
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4816      	ldr	r0, [pc, #88]	; (8004d38 <parseGSCommand+0x1c0>)
 8004ce0:	f011 f9e4 	bl	80160ac <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&ESC_HTIM, ESC2_CHN);
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	4814      	ldr	r0, [pc, #80]	; (8004d38 <parseGSCommand+0x1c0>)
 8004ce8:	f011 f9e0 	bl	80160ac <HAL_TIM_PWM_Start>
		siracUydu.ArmDurumu = ARM;
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <parseGSCommand+0x1b4>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
		break;
 8004cf4:	e017      	b.n	8004d26 <parseGSCommand+0x1ae>
	case 'w': //esc calibration
		ESCcalibration();
 8004cf6:	f004 fc53 	bl	80095a0 <ESCcalibration>
		break;
 8004cfa:	e014      	b.n	8004d26 <parseGSCommand+0x1ae>
	case 'e': {
		siracUydu.uyduDurumu = AYRILMA;
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <parseGSCommand+0x1b4>)
 8004cfe:	2204      	movs	r2, #4
 8004d00:	701a      	strb	r2, [r3, #0]
	}
		break;
 8004d02:	e010      	b.n	8004d26 <parseGSCommand+0x1ae>
	case 'f':
		siracUydu.uyduDurumu = BEKLEME;
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <parseGSCommand+0x1b4>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
		saveFlightState();
 8004d0a:	f004 f9ad 	bl	8009068 <saveFlightState>
		break;
 8004d0e:	e00a      	b.n	8004d26 <parseGSCommand+0x1ae>
		return;
 8004d10:	bf00      	nop
 8004d12:	e008      	b.n	8004d26 <parseGSCommand+0x1ae>
	default:
		break;
 8004d14:	bf00      	nop
 8004d16:	e006      	b.n	8004d26 <parseGSCommand+0x1ae>
		break;
 8004d18:	bf00      	nop
 8004d1a:	e004      	b.n	8004d26 <parseGSCommand+0x1ae>
		break;
 8004d1c:	bf00      	nop
 8004d1e:	e002      	b.n	8004d26 <parseGSCommand+0x1ae>
		break;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <parseGSCommand+0x1ae>
		break;
 8004d24:	bf00      	nop
	}

}
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	24000018 	.word	0x24000018
 8004d30:	2400292e 	.word	0x2400292e
 8004d34:	240028e0 	.word	0x240028e0
 8004d38:	24003b54 	.word	0x24003b54

08004d3c <parseESP>:

void parseESP(void *p, uint8_t len) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
	if (len == 0) {
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80b0 	beq.w	8004eb0 <parseESP+0x174>
		return;
	}
	char *h = p;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
	switch (*h++) {
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	627a      	str	r2, [r7, #36]	; 0x24
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b67      	cmp	r3, #103	; 0x67
 8004d5e:	d002      	beq.n	8004d66 <parseESP+0x2a>
 8004d60:	2b77      	cmp	r3, #119	; 0x77
 8004d62:	d064      	beq.n	8004e2e <parseESP+0xf2>
		token = strtok(NULL, s);
		siracUydu.ESP32Durumu.WifiSinyalGucu = atoi(token);
		break;
	}
	default:
		break;
 8004d64:	e0a3      	b.n	8004eae <parseESP+0x172>
		char *p = h;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	617b      	str	r3, [r7, #20]
		char *s = ",";
 8004d6a:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <parseESP+0x17c>)
 8004d6c:	613b      	str	r3, [r7, #16]
		token = strtok(p, s);
 8004d6e:	6939      	ldr	r1, [r7, #16]
 8004d70:	6978      	ldr	r0, [r7, #20]
 8004d72:	f01e ffc1 	bl	8023cf8 <strtok>
 8004d76:	60f8      	str	r0, [r7, #12]
		siracUydu.sensorVerisi.gps.sats_in_view = atoi(token);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f01c ff9a 	bl	8021cb2 <atoi>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	4b4e      	ldr	r3, [pc, #312]	; (8004ebc <parseESP+0x180>)
 8004d84:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		if (siracUydu.sensorVerisi.gps.sats_in_view >= 4) {
 8004d88:	4b4c      	ldr	r3, [pc, #304]	; (8004ebc <parseESP+0x180>)
 8004d8a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d907      	bls.n	8004da2 <parseESP+0x66>
			CLEAR_SENS_ERR(siracUydu.donanimDurumu, GPS_NOFIX);
 8004d92:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <parseESP+0x180>)
 8004d94:	885b      	ldrh	r3, [r3, #2]
 8004d96:	f023 0308 	bic.w	r3, r3, #8
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <parseESP+0x180>)
 8004d9e:	805a      	strh	r2, [r3, #2]
 8004da0:	e006      	b.n	8004db0 <parseESP+0x74>
			SET_SENS_ERR(siracUydu.donanimDurumu, GPS_NOFIX);
 8004da2:	4b46      	ldr	r3, [pc, #280]	; (8004ebc <parseESP+0x180>)
 8004da4:	885b      	ldrh	r3, [r3, #2]
 8004da6:	f043 0308 	orr.w	r3, r3, #8
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	4b43      	ldr	r3, [pc, #268]	; (8004ebc <parseESP+0x180>)
 8004dae:	805a      	strh	r2, [r3, #2]
		token = strtok(NULL, s);
 8004db0:	6939      	ldr	r1, [r7, #16]
 8004db2:	2000      	movs	r0, #0
 8004db4:	f01e ffa0 	bl	8023cf8 <strtok>
 8004db8:	60f8      	str	r0, [r7, #12]
		siracUydu.sensorVerisi.gps.latitude = atof(token);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f01c ff76 	bl	8021cac <atof>
 8004dc0:	eeb0 7b40 	vmov.f64	d7, d0
 8004dc4:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <parseESP+0x180>)
 8004dc6:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
		if (siracUydu.sensorVerisi.gps.latitude > 0.0) {
 8004dca:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <parseESP+0x180>)
 8004dcc:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8004dd0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	dd07      	ble.n	8004dea <parseESP+0xae>
			CLEAR_SENS_ERR(siracUydu.donanimDurumu, GPS_ERROR);
 8004dda:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <parseESP+0x180>)
 8004ddc:	885b      	ldrh	r3, [r3, #2]
 8004dde:	f023 0310 	bic.w	r3, r3, #16
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <parseESP+0x180>)
 8004de6:	805a      	strh	r2, [r3, #2]
 8004de8:	e006      	b.n	8004df8 <parseESP+0xbc>
			SET_SENS_ERR(siracUydu.donanimDurumu, GPS_ERROR);
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <parseESP+0x180>)
 8004dec:	885b      	ldrh	r3, [r3, #2]
 8004dee:	f043 0310 	orr.w	r3, r3, #16
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	4b31      	ldr	r3, [pc, #196]	; (8004ebc <parseESP+0x180>)
 8004df6:	805a      	strh	r2, [r3, #2]
		token = strtok(NULL, s);
 8004df8:	6939      	ldr	r1, [r7, #16]
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f01e ff7c 	bl	8023cf8 <strtok>
 8004e00:	60f8      	str	r0, [r7, #12]
		siracUydu.sensorVerisi.gps.longitude = atof(token);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f01c ff52 	bl	8021cac <atof>
 8004e08:	eeb0 7b40 	vmov.f64	d7, d0
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <parseESP+0x180>)
 8004e0e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		token = strtok(NULL, s);
 8004e12:	6939      	ldr	r1, [r7, #16]
 8004e14:	2000      	movs	r0, #0
 8004e16:	f01e ff6f 	bl	8023cf8 <strtok>
 8004e1a:	60f8      	str	r0, [r7, #12]
		siracUydu.sensorVerisi.gps.altitude = atof(token);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f01c ff45 	bl	8021cac <atof>
 8004e22:	eeb0 7b40 	vmov.f64	d7, d0
 8004e26:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <parseESP+0x180>)
 8004e28:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		break;
 8004e2c:	e03f      	b.n	8004eae <parseESP+0x172>
		char *p = h;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	623b      	str	r3, [r7, #32]
		char *s = ",";
 8004e32:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <parseESP+0x17c>)
 8004e34:	61fb      	str	r3, [r7, #28]
		token = strtok(p, s);
 8004e36:	69f9      	ldr	r1, [r7, #28]
 8004e38:	6a38      	ldr	r0, [r7, #32]
 8004e3a:	f01e ff5d 	bl	8023cf8 <strtok>
 8004e3e:	61b8      	str	r0, [r7, #24]
		siracUydu.ESP32Durumu.videoPaketBilgisi.AktarilmaBilgisi = atoi(token);
 8004e40:	69b8      	ldr	r0, [r7, #24]
 8004e42:	f01c ff36 	bl	8021cb2 <atoi>
 8004e46:	4603      	mov	r3, r0
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <parseESP+0x180>)
 8004e4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
		token = strtok(NULL, s);
 8004e50:	69f9      	ldr	r1, [r7, #28]
 8004e52:	2000      	movs	r0, #0
 8004e54:	f01e ff50 	bl	8023cf8 <strtok>
 8004e58:	61b8      	str	r0, [r7, #24]
		if (atoi(token)) {
 8004e5a:	69b8      	ldr	r0, [r7, #24]
 8004e5c:	f01c ff29 	bl	8021cb2 <atoi>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00e      	beq.n	8004e84 <parseESP+0x148>
			CLEAR_SENS_ERR(siracUydu.donanimDurumu, ESP32_WIFI_ERR);
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <parseESP+0x180>)
 8004e68:	885b      	ldrh	r3, [r3, #2]
 8004e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <parseESP+0x180>)
 8004e72:	805a      	strh	r2, [r3, #2]
			CLEAR_SENS_ERR(siracUydu.donanimDurumu, ESP32_SD_ERROR);
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <parseESP+0x180>)
 8004e76:	885b      	ldrh	r3, [r3, #2]
 8004e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <parseESP+0x180>)
 8004e80:	805a      	strh	r2, [r3, #2]
 8004e82:	e006      	b.n	8004e92 <parseESP+0x156>
			SET_SENS_ERR(siracUydu.donanimDurumu, ESP32_WIFI_ERR);
 8004e84:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <parseESP+0x180>)
 8004e86:	885b      	ldrh	r3, [r3, #2]
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <parseESP+0x180>)
 8004e90:	805a      	strh	r2, [r3, #2]
		token = strtok(NULL, s);
 8004e92:	69f9      	ldr	r1, [r7, #28]
 8004e94:	2000      	movs	r0, #0
 8004e96:	f01e ff2f 	bl	8023cf8 <strtok>
 8004e9a:	61b8      	str	r0, [r7, #24]
		siracUydu.ESP32Durumu.WifiSinyalGucu = atoi(token);
 8004e9c:	69b8      	ldr	r0, [r7, #24]
 8004e9e:	f01c ff08 	bl	8021cb2 <atoi>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <parseESP+0x180>)
 8004ea8:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
		break;
 8004eac:	bf00      	nop
	}
	return;
 8004eae:	e000      	b.n	8004eb2 <parseESP+0x176>
		return;
 8004eb0:	bf00      	nop
}
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	08027318 	.word	0x08027318
 8004ebc:	24000018 	.word	0x24000018

08004ec0 <UART_decode_process>:

void UART_decode_process(void *d, uint32_t len) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	uint8_t *p = d;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	617b      	str	r3, [r7, #20]
	char *token;
	char *s = "$";
 8004ece:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <UART_decode_process+0xb0>)
 8004ed0:	613b      	str	r3, [r7, #16]
	token = strtok((char*) p, s);
 8004ed2:	6939      	ldr	r1, [r7, #16]
 8004ed4:	6978      	ldr	r0, [r7, #20]
 8004ed6:	f01e ff0f 	bl	8023cf8 <strtok>
 8004eda:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03e      	beq.n	8004f60 <UART_decode_process+0xa0>
		return;
	token = strtok(NULL, s);
 8004ee2:	6939      	ldr	r1, [r7, #16]
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f01e ff07 	bl	8023cf8 <strtok>
 8004eea:	60f8      	str	r0, [r7, #12]
	if (token == NULL)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d038      	beq.n	8004f64 <UART_decode_process+0xa4>
		return;
	if (!strcmp((char*) p, "TD"))
 8004ef2:	4920      	ldr	r1, [pc, #128]	; (8004f74 <UART_decode_process+0xb4>)
 8004ef4:	6978      	ldr	r0, [r7, #20]
 8004ef6:	f7fb f9f3 	bl	80002e0 <strcmp>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <UART_decode_process+0x48>
		parseTData(token);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fd49 	bl	8004998 <parseTData>
		parseTError(token);
	else if (!strcmp((char*) p, "GC"))
		parseGSCommand(token, strlen(token) + 1);
	else if (!strcmp((char*) p, "ES"))
		parseESP(token, len);
	return;
 8004f06:	e02f      	b.n	8004f68 <UART_decode_process+0xa8>
	else if (!strcmp((char*) p, "TE"))
 8004f08:	491b      	ldr	r1, [pc, #108]	; (8004f78 <UART_decode_process+0xb8>)
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7fb f9e8 	bl	80002e0 <strcmp>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <UART_decode_process+0x5e>
		parseTError(token);
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff fe0a 	bl	8004b30 <parseTError>
	return;
 8004f1c:	e024      	b.n	8004f68 <UART_decode_process+0xa8>
	else if (!strcmp((char*) p, "GC"))
 8004f1e:	4917      	ldr	r1, [pc, #92]	; (8004f7c <UART_decode_process+0xbc>)
 8004f20:	6978      	ldr	r0, [r7, #20]
 8004f22:	f7fb f9dd 	bl	80002e0 <strcmp>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <UART_decode_process+0x84>
		parseGSCommand(token, strlen(token) + 1);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7fb f9e1 	bl	80002f4 <strlen>
 8004f32:	4603      	mov	r3, r0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	3301      	adds	r3, #1
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff fe1b 	bl	8004b78 <parseGSCommand>
	return;
 8004f42:	e011      	b.n	8004f68 <UART_decode_process+0xa8>
	else if (!strcmp((char*) p, "ES"))
 8004f44:	490e      	ldr	r1, [pc, #56]	; (8004f80 <UART_decode_process+0xc0>)
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	f7fb f9ca 	bl	80002e0 <strcmp>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <UART_decode_process+0xa8>
		parseESP(token, len);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff feef 	bl	8004d3c <parseESP>
	return;
 8004f5e:	e003      	b.n	8004f68 <UART_decode_process+0xa8>
		return;
 8004f60:	bf00      	nop
 8004f62:	e002      	b.n	8004f6a <UART_decode_process+0xaa>
		return;
 8004f64:	bf00      	nop
 8004f66:	e000      	b.n	8004f6a <UART_decode_process+0xaa>
	return;
 8004f68:	bf00      	nop
}
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	0802731c 	.word	0x0802731c
 8004f74:	08027320 	.word	0x08027320
 8004f78:	08027324 	.word	0x08027324
 8004f7c:	08027328 	.word	0x08027328
 8004f80:	0802732c 	.word	0x0802732c

08004f84 <MS5611_Init>:
static uint32_t D1_;
static uint32_t D2_;
static int32_t dT_;

MS5611_State MS5611_Init(volatile MS5611_typedef *ms56dev,
		I2C_HandleTypeDef *I2Cx) {
 8004f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef state;
	ms56dev->Pres_hpa = ms56dev->avgPres_hpa = ms56dev->Temp_C = 0.0f;
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6113      	str	r3, [r2, #16]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	60d3      	str	r3, [r2, #12]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6093      	str	r3, [r2, #8]
	ms56dev->I2Cdev = I2Cx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	601a      	str	r2, [r3, #0]
	state = __ms56_ReadCoefficients(ms56dev);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa96 	bl	80054d8 <__ms56_ReadCoefficients>
 8004fac:	4603      	mov	r3, r0
 8004fae:	73fb      	strb	r3, [r7, #15]
#ifdef DEBUG_MS56
	printf("\r\nCalib Coeffs : %d %d %d %d %d %d\r\n",cal_[0],cal_[1],cal_[2],cal_[3],cal_[4],cal_[5]);
#endif
	tref_ = (uint32_t) (cal_[4]) << 8;
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <MS5611_Init+0x8c>)
 8004fb2:	891b      	ldrh	r3, [r3, #8]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <MS5611_Init+0x90>)
 8004fba:	601a      	str	r2, [r3, #0]
	offT1_ = (int64_t) (cal_[1]) << 16;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <MS5611_Init+0x8c>)
 8004fbe:	885b      	ldrh	r3, [r3, #2]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	4698      	mov	r8, r3
 8004fc6:	4691      	mov	r9, r2
 8004fc8:	ea4f 4b18 	mov.w	fp, r8, lsr #16
 8004fcc:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 8004fd0:	4b11      	ldr	r3, [pc, #68]	; (8005018 <MS5611_Init+0x94>)
 8004fd2:	e9c3 ab00 	strd	sl, fp, [r3]
	sensT1_ = (int64_t) (cal_[0]) << 15;
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <MS5611_Init+0x8c>)
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2200      	movs	r2, #0
 8004fde:	461c      	mov	r4, r3
 8004fe0:	4615      	mov	r5, r2
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	03eb      	lsls	r3, r5, #15
 8004fec:	ea43 4354 	orr.w	r3, r3, r4, lsr #17
 8004ff0:	03e2      	lsls	r2, r4, #15
 8004ff2:	490a      	ldr	r1, [pc, #40]	; (800501c <MS5611_Init+0x98>)
 8004ff4:	e9c1 2300 	strd	r2, r3, [r1]
	return state == HAL_OK ? MS5611_SENSOR_OK : MS5611_SENSOR_ERROR;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	24000640 	.word	0x24000640
 8005014:	2400064c 	.word	0x2400064c
 8005018:	24000650 	.word	0x24000650
 800501c:	24000658 	.word	0x24000658

08005020 <MS5611_AveragedSample>:
#endif
}
#endif

void MS5611_AveragedSample(volatile MS5611_typedef *ms56dev, int nSamples,
		int avgAltFlag) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
	float tAccum, n, pa, pAccum;
	float tc;

	pAccum = 0;
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
	tAccum = 0;
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
	float zAccum = 0;
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
	n = nSamples;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005048:	edc7 7a08 	vstr	s15, [r7, #32]
	while (n--) {
 800504c:	e031      	b.n	80050b2 <MS5611_AveragedSample+0x92>
		__ms56_TriggerTemperatureSample(ms56dev);
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa90 	bl	8005574 <__ms56_TriggerTemperatureSample>
		HAL_Delay(MS5611_SAMPLE_PERIOD_MS);
 8005054:	200a      	movs	r0, #10
 8005056:	f004 ffbd 	bl	8009fd4 <HAL_Delay>
		D2_ = __ms56_ReadTemperatureSample(ms56dev);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa9e 	bl	800559c <__ms56_ReadTemperatureSample>
 8005060:	4603      	mov	r3, r0
 8005062:	4a3e      	ldr	r2, [pc, #248]	; (800515c <MS5611_AveragedSample+0x13c>)
 8005064:	6013      	str	r3, [r2, #0]
		__ms56_CalculateTemperatureCx10();
 8005066:	f000 f8bb 	bl	80051e0 <__ms56_CalculateTemperatureCx10>
		__ms56_TriggerPressureSample(ms56dev);
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fa6e 	bl	800554c <__ms56_TriggerPressureSample>
		HAL_Delay(MS5611_SAMPLE_PERIOD_MS);
 8005070:	200a      	movs	r0, #10
 8005072:	f004 ffaf 	bl	8009fd4 <HAL_Delay>
		D1_ = __ms56_ReadPressureSample(ms56dev);
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 faaf 	bl	80055da <__ms56_ReadPressureSample>
 800507c:	4603      	mov	r3, r0
 800507e:	4a38      	ldr	r2, [pc, #224]	; (8005160 <MS5611_AveragedSample+0x140>)
 8005080:	6013      	str	r3, [r2, #0]
		pa = __ms56_CalculatePressure_hPa();
 8005082:	f000 f8ed 	bl	8005260 <__ms56_CalculatePressure_hPa>
 8005086:	ed87 0a04 	vstr	s0, [r7, #16]

		pAccum += pa;
 800508a:	ed97 7a07 	vldr	s14, [r7, #28]
 800508e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005096:	edc7 7a07 	vstr	s15, [r7, #28]
		tAccum += tempCx100_;
 800509a:	4b32      	ldr	r3, [pc, #200]	; (8005164 <MS5611_AveragedSample+0x144>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80050aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	while (n--) {
 80050b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80050b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80050be:	ed87 7a08 	vstr	s14, [r7, #32]
 80050c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d1c0      	bne.n	800504e <MS5611_AveragedSample+0x2e>
//#else
//			zAccum += __getAlt(pa, tAccum, ALTITUDE_REFERENCE_PRESSURE);
#endif
		}
	}
	tc = (float) tAccum / nSamples;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050d6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80050da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050de:	edc7 7a05 	vstr	s15, [r7, #20]
	ms56dev->Temp_C = (float) (tc >= 0 ? (tc + 50) / 100 : (tc - 50) / 100);
 80050e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80050e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	db0a      	blt.n	8005106 <MS5611_AveragedSample+0xe6>
 80050f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80050f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005168 <MS5611_AveragedSample+0x148>
 80050f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050fc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800516c <MS5611_AveragedSample+0x14c>
 8005100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005104:	e009      	b.n	800511a <MS5611_AveragedSample+0xfa>
 8005106:	edd7 7a05 	vldr	s15, [r7, #20]
 800510a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005168 <MS5611_AveragedSample+0x148>
 800510e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005112:	eddf 6a16 	vldr	s13, [pc, #88]	; 800516c <MS5611_AveragedSample+0x14c>
 8005116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	edc3 7a04 	vstr	s15, [r3, #16]
	ms56dev->avgPres_hpa = (float) (pAccum) / nSamples;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800512a:	edd7 6a07 	vldr	s13, [r7, #28]
 800512e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	edc3 7a03 	vstr	s15, [r3, #12]

	if(avgAltFlag)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <MS5611_AveragedSample+0x134>
		zAccum /= nSamples; //compute avg altitude
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005148:	edd7 6a06 	vldr	s13, [r7, #24]
 800514c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005150:	edc7 7a06 	vstr	s15, [r7, #24]
	printf("altavg : %f cm\n",ms56dev->avgAltitude_cm);
else
	printf("\n");
#endif

}
 8005154:	bf00      	nop
 8005156:	3728      	adds	r7, #40	; 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	24000668 	.word	0x24000668
 8005160:	24000664 	.word	0x24000664
 8005164:	24000660 	.word	0x24000660
 8005168:	42480000 	.word	0x42480000
 800516c:	42c80000 	.word	0x42c80000

08005170 <__getAlt>:

float __getAlt(float P, float celsiusSample, float AltRef) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	ed87 0a03 	vstr	s0, [r7, #12]
 800517a:	edc7 0a02 	vstr	s1, [r7, #8]
 800517e:	ed87 1a01 	vstr	s2, [r7, #4]
return (145366.45*(1-pow((P/AltRef),0.190284)) * 0.3048);
 8005182:	edd7 6a03 	vldr	s13, [r7, #12]
 8005186:	ed97 7a01 	vldr	s14, [r7, #4]
 800518a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800518e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005192:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80051c8 <__getAlt+0x58>
 8005196:	eeb0 0b47 	vmov.f64	d0, d7
 800519a:	f021 fb15 	bl	80267c8 <pow>
 800519e:	eeb0 7b40 	vmov.f64	d7, d0
 80051a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80051a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80051aa:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80051d0 <__getAlt+0x60>
 80051ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051b2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80051d8 <__getAlt+0x68>
 80051b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80051be:	eeb0 0a67 	vmov.f32	s0, s15
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e279dd3c 	.word	0xe279dd3c
 80051cc:	3fc85b39 	.word	0x3fc85b39
 80051d0:	9999999a 	.word	0x9999999a
 80051d4:	4101beb3 	.word	0x4101beb3
 80051d8:	dbf487fd 	.word	0xdbf487fd
 80051dc:	3fd381d7 	.word	0x3fd381d7

080051e0 <__ms56_CalculateTemperatureCx10>:
		}
	}
	return zf;
}

void __ms56_CalculateTemperatureCx10(void) {
 80051e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80051e4:	af00      	add	r7, sp, #0
	dT_ = D2_ - tref_;
 80051e6:	4e19      	ldr	r6, [pc, #100]	; (800524c <__ms56_CalculateTemperatureCx10+0x6c>)
 80051e8:	6836      	ldr	r6, [r6, #0]
 80051ea:	4919      	ldr	r1, [pc, #100]	; (8005250 <__ms56_CalculateTemperatureCx10+0x70>)
 80051ec:	6809      	ldr	r1, [r1, #0]
 80051ee:	468c      	mov	ip, r1
 80051f0:	eba6 060c 	sub.w	r6, r6, ip
 80051f4:	4631      	mov	r1, r6
 80051f6:	4e17      	ldr	r6, [pc, #92]	; (8005254 <__ms56_CalculateTemperatureCx10+0x74>)
 80051f8:	6031      	str	r1, [r6, #0]
	tempCx100_ = 2000 + (((int64_t) dT_ * (cal_[5])) >> 23);
 80051fa:	4e16      	ldr	r6, [pc, #88]	; (8005254 <__ms56_CalculateTemperatureCx10+0x74>)
 80051fc:	6836      	ldr	r6, [r6, #0]
 80051fe:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 8005202:	4634      	mov	r4, r6
 8005204:	4665      	mov	r5, ip
 8005206:	4e14      	ldr	r6, [pc, #80]	; (8005258 <__ms56_CalculateTemperatureCx10+0x78>)
 8005208:	8976      	ldrh	r6, [r6, #10]
 800520a:	b2b6      	uxth	r6, r6
 800520c:	f04f 0c00 	mov.w	ip, #0
 8005210:	46b0      	mov	r8, r6
 8005212:	46e1      	mov	r9, ip
 8005214:	fb08 fc05 	mul.w	ip, r8, r5
 8005218:	fb04 f609 	mul.w	r6, r4, r9
 800521c:	4466      	add	r6, ip
 800521e:	fba4 2308 	umull	r2, r3, r4, r8
 8005222:	18f1      	adds	r1, r6, r3
 8005224:	460b      	mov	r3, r1
 8005226:	f04f 0000 	mov.w	r0, #0
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	0dd0      	lsrs	r0, r2, #23
 8005230:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8005234:	15d9      	asrs	r1, r3, #23
 8005236:	4603      	mov	r3, r0
 8005238:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800523c:	461a      	mov	r2, r3
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <__ms56_CalculateTemperatureCx10+0x7c>)
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800524a:	4770      	bx	lr
 800524c:	24000668 	.word	0x24000668
 8005250:	2400064c 	.word	0x2400064c
 8005254:	2400066c 	.word	0x2400066c
 8005258:	24000640 	.word	0x24000640
 800525c:	24000660 	.word	0x24000660

08005260 <__ms56_CalculatePressure_hPa>:

float __ms56_CalculatePressure_hPa(void) {
 8005260:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005264:	b0a7      	sub	sp, #156	; 0x9c
 8005266:	af00      	add	r7, sp, #0
	int32_t pa, t2;
	int64_t offset, sens, offset2, sens2;
	offset = offT1_ + ((((int64_t) cal_[3]) * dT_) >> 7);
 8005268:	4b93      	ldr	r3, [pc, #588]	; (80054b8 <__ms56_CalculatePressure_hPa+0x258>)
 800526a:	88db      	ldrh	r3, [r3, #6]
 800526c:	b29b      	uxth	r3, r3
 800526e:	2200      	movs	r2, #0
 8005270:	4698      	mov	r8, r3
 8005272:	4691      	mov	r9, r2
 8005274:	4b91      	ldr	r3, [pc, #580]	; (80054bc <__ms56_CalculatePressure_hPa+0x25c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	17da      	asrs	r2, r3, #31
 800527a:	4618      	mov	r0, r3
 800527c:	4611      	mov	r1, r2
 800527e:	fb00 f209 	mul.w	r2, r0, r9
 8005282:	fb08 f301 	mul.w	r3, r8, r1
 8005286:	4413      	add	r3, r2
 8005288:	fba8 4500 	umull	r4, r5, r8, r0
 800528c:	442b      	add	r3, r5
 800528e:	461d      	mov	r5, r3
 8005290:	f04f 0000 	mov.w	r0, #0
 8005294:	f04f 0100 	mov.w	r1, #0
 8005298:	09e0      	lsrs	r0, r4, #7
 800529a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 800529e:	11e9      	asrs	r1, r5, #7
 80052a0:	4b87      	ldr	r3, [pc, #540]	; (80054c0 <__ms56_CalculatePressure_hPa+0x260>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	1884      	adds	r4, r0, r2
 80052a8:	63bc      	str	r4, [r7, #56]	; 0x38
 80052aa:	eb41 0303 	adc.w	r3, r1, r3
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80052b4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	sens = (int64_t) sensT1_ + ((((int64_t) cal_[2]) * dT_) >> 8);
 80052b8:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <__ms56_CalculatePressure_hPa+0x258>)
 80052ba:	889b      	ldrh	r3, [r3, #4]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2200      	movs	r2, #0
 80052c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80052c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80052c4:	4b7d      	ldr	r3, [pc, #500]	; (80054bc <__ms56_CalculatePressure_hPa+0x25c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	17da      	asrs	r2, r3, #31
 80052ca:	653b      	str	r3, [r7, #80]	; 0x50
 80052cc:	657a      	str	r2, [r7, #84]	; 0x54
 80052ce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80052d2:	462b      	mov	r3, r5
 80052d4:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80052d8:	4642      	mov	r2, r8
 80052da:	fb02 f203 	mul.w	r2, r2, r3
 80052de:	464b      	mov	r3, r9
 80052e0:	4621      	mov	r1, r4
 80052e2:	fb01 f303 	mul.w	r3, r1, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	4622      	mov	r2, r4
 80052ea:	4641      	mov	r1, r8
 80052ec:	fba2 ab01 	umull	sl, fp, r2, r1
 80052f0:	445b      	add	r3, fp
 80052f2:	469b      	mov	fp, r3
 80052f4:	f04f 0000 	mov.w	r0, #0
 80052f8:	f04f 0100 	mov.w	r1, #0
 80052fc:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8005300:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
 8005304:	ea4f 212b 	mov.w	r1, fp, asr #8
 8005308:	4b6e      	ldr	r3, [pc, #440]	; (80054c4 <__ms56_CalculatePressure_hPa+0x264>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	1884      	adds	r4, r0, r2
 8005310:	633c      	str	r4, [r7, #48]	; 0x30
 8005312:	eb41 0303 	adc.w	r3, r1, r3
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
 8005318:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800531c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	if (tempCx100_ < 2000) {
 8005320:	4b69      	ldr	r3, [pc, #420]	; (80054c8 <__ms56_CalculatePressure_hPa+0x268>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005328:	da36      	bge.n	8005398 <__ms56_CalculatePressure_hPa+0x138>
		t2 = ((dT_ * dT_) >> 31);
 800532a:	4b64      	ldr	r3, [pc, #400]	; (80054bc <__ms56_CalculatePressure_hPa+0x25c>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b63      	ldr	r3, [pc, #396]	; (80054bc <__ms56_CalculatePressure_hPa+0x25c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	17db      	asrs	r3, r3, #31
 8005338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		offset2 = (5 * (tempCx100_ - 2000) * (tempCx100_ - 2000)) / 2;
 800533c:	4b62      	ldr	r3, [pc, #392]	; (80054c8 <__ms56_CalculatePressure_hPa+0x268>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8005344:	4b60      	ldr	r3, [pc, #384]	; (80054c8 <__ms56_CalculatePressure_hPa+0x268>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800534c:	fb03 f202 	mul.w	r2, r3, r2
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	da00      	bge.n	800535c <__ms56_CalculatePressure_hPa+0xfc>
 800535a:	3301      	adds	r3, #1
 800535c:	105b      	asrs	r3, r3, #1
 800535e:	17da      	asrs	r2, r3, #31
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
 8005362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005364:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005368:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		sens2 = offset2 / 2;
 800536c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005370:	2b00      	cmp	r3, #0
 8005372:	da06      	bge.n	8005382 <__ms56_CalculatePressure_hPa+0x122>
 8005374:	1c51      	adds	r1, r2, #1
 8005376:	6239      	str	r1, [r7, #32]
 8005378:	f143 0300 	adc.w	r3, r3, #0
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f04f 0100 	mov.w	r1, #0
 800538a:	0850      	lsrs	r0, r2, #1
 800538c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8005390:	1059      	asrs	r1, r3, #1
 8005392:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 8005396:	e00e      	b.n	80053b6 <__ms56_CalculatePressure_hPa+0x156>
	} else {
		t2 = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		sens2 = 0;
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		offset2 = 0;
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	}
	tempCx100_ -= t2;
 80053b6:	4b44      	ldr	r3, [pc, #272]	; (80054c8 <__ms56_CalculatePressure_hPa+0x268>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <__ms56_CalculatePressure_hPa+0x268>)
 80053c2:	601a      	str	r2, [r3, #0]
	offset -= offset2;
 80053c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80053c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80053cc:	1a84      	subs	r4, r0, r2
 80053ce:	61bc      	str	r4, [r7, #24]
 80053d0:	eb61 0303 	sbc.w	r3, r1, r3
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80053da:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	sens -= sens2;
 80053de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80053e2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80053e6:	1a84      	subs	r4, r0, r2
 80053e8:	613c      	str	r4, [r7, #16]
 80053ea:	eb61 0303 	sbc.w	r3, r1, r3
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80053f4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	pa = ((D1_ * sens) / 2097152 - (offset)) / 32768;
 80053f8:	4b34      	ldr	r3, [pc, #208]	; (80054cc <__ms56_CalculatePressure_hPa+0x26c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2200      	movs	r2, #0
 80053fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005400:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005404:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005408:	462a      	mov	r2, r5
 800540a:	fb02 f203 	mul.w	r2, r2, r3
 800540e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005410:	4621      	mov	r1, r4
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800541a:	4621      	mov	r1, r4
 800541c:	fba2 1201 	umull	r1, r2, r2, r1
 8005420:	667a      	str	r2, [r7, #100]	; 0x64
 8005422:	460a      	mov	r2, r1
 8005424:	663a      	str	r2, [r7, #96]	; 0x60
 8005426:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005428:	4413      	add	r3, r2
 800542a:	667b      	str	r3, [r7, #100]	; 0x64
 800542c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005430:	2b00      	cmp	r3, #0
 8005432:	da07      	bge.n	8005444 <__ms56_CalculatePressure_hPa+0x1e4>
 8005434:	4926      	ldr	r1, [pc, #152]	; (80054d0 <__ms56_CalculatePressure_hPa+0x270>)
 8005436:	1851      	adds	r1, r2, r1
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	f143 0300 	adc.w	r3, r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005444:	f04f 0000 	mov.w	r0, #0
 8005448:	f04f 0100 	mov.w	r1, #0
 800544c:	0d50      	lsrs	r0, r2, #21
 800544e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8005452:	1559      	asrs	r1, r3, #21
 8005454:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005458:	1a84      	subs	r4, r0, r2
 800545a:	643c      	str	r4, [r7, #64]	; 0x40
 800545c:	eb61 0303 	sbc.w	r3, r1, r3
 8005460:	647b      	str	r3, [r7, #68]	; 0x44
 8005462:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	da08      	bge.n	800547c <__ms56_CalculatePressure_hPa+0x21c>
 800546a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800546e:	1851      	adds	r1, r2, r1
 8005470:	6039      	str	r1, [r7, #0]
 8005472:	f143 0300 	adc.w	r3, r3, #0
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547c:	f04f 0000 	mov.w	r0, #0
 8005480:	f04f 0100 	mov.w	r1, #0
 8005484:	0bd0      	lsrs	r0, r2, #15
 8005486:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800548a:	13d9      	asrs	r1, r3, #15
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4613      	mov	r3, r2
 8005492:	66fb      	str	r3, [r7, #108]	; 0x6c
	return (float) pa / 100.0;
 8005494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80054d4 <__ms56_CalculatePressure_hPa+0x274>
 80054a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80054a6:	eef0 7a66 	vmov.f32	s15, s13
}
 80054aa:	eeb0 0a67 	vmov.f32	s0, s15
 80054ae:	379c      	adds	r7, #156	; 0x9c
 80054b0:	46bd      	mov	sp, r7
 80054b2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80054b6:	4770      	bx	lr
 80054b8:	24000640 	.word	0x24000640
 80054bc:	2400066c 	.word	0x2400066c
 80054c0:	24000650 	.word	0x24000650
 80054c4:	24000658 	.word	0x24000658
 80054c8:	24000660 	.word	0x24000660
 80054cc:	24000664 	.word	0x24000664
 80054d0:	001fffff 	.word	0x001fffff
 80054d4:	42c80000 	.word	0x42c80000

080054d8 <__ms56_ReadCoefficients>:

HAL_StatusTypeDef __ms56_ReadCoefficients(volatile MS5611_typedef *ms56dev) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af04      	add	r7, sp, #16
 80054de:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint8_t buf[2];
	HAL_StatusTypeDef state = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	73bb      	strb	r3, [r7, #14]
	for (cnt = 0; cnt < 6; cnt++) {
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
 80054e8:	e025      	b.n	8005536 <__ms56_ReadCoefficients+0x5e>
		state |= HAL_I2C_Mem_Read(ms56dev->I2Cdev, I2C_ID_MS5611,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
				(0xA2 + cnt * 2),
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	3351      	adds	r3, #81	; 0x51
		state |= HAL_I2C_Mem_Read(ms56dev->I2Cdev, I2C_ID_MS5611,
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	230f      	movs	r3, #15
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	2302      	movs	r3, #2
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	f107 030c 	add.w	r3, r7, #12
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	2301      	movs	r3, #1
 8005508:	21ee      	movs	r1, #238	; 0xee
 800550a:	f009 fe31 	bl	800f170 <HAL_I2C_Mem_Read>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	4313      	orrs	r3, r2
 8005516:	73bb      	strb	r3, [r7, #14]
				I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_16BIT,
				SENSOR_TIMEOUT);
		cal_[cnt] = (((uint16_t) buf[0]) << 8) | (uint16_t) buf[1];
 8005518:	7b3b      	ldrb	r3, [r7, #12]
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	b21a      	sxth	r2, r3
 800551e:	7b7b      	ldrb	r3, [r7, #13]
 8005520:	b21b      	sxth	r3, r3
 8005522:	4313      	orrs	r3, r2
 8005524:	b21a      	sxth	r2, r3
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	b291      	uxth	r1, r2
 800552a:	4a07      	ldr	r2, [pc, #28]	; (8005548 <__ms56_ReadCoefficients+0x70>)
 800552c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (cnt = 0; cnt < 6; cnt++) {
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	3301      	adds	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	2b05      	cmp	r3, #5
 800553a:	d9d6      	bls.n	80054ea <__ms56_ReadCoefficients+0x12>
	}
	return state;
 800553c:	7bbb      	ldrb	r3, [r7, #14]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	24000640 	.word	0x24000640

0800554c <__ms56_TriggerPressureSample>:

/// Trigger a pressure sample with max oversampling rate
void __ms56_TriggerPressureSample(volatile MS5611_typedef *ms56dev) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af02      	add	r7, sp, #8
 8005552:	6078      	str	r0, [r7, #4]
	// i2c_XmtData(I2C_ID_MS5611, 0x48);
	uint8_t ads = 0x44;
 8005554:	2344      	movs	r3, #68	; 0x44
 8005556:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ms56dev->I2Cdev, I2C_ID_MS5611, &ads,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	f107 020f 	add.w	r2, r7, #15
 8005560:	230f      	movs	r3, #15
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2301      	movs	r3, #1
 8005566:	21ee      	movs	r1, #238	; 0xee
 8005568:	f009 fbfa 	bl	800ed60 <HAL_I2C_Master_Transmit>
			I2C_MEMADD_SIZE_8BIT,
			SENSOR_TIMEOUT);

}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <__ms56_TriggerTemperatureSample>:

/// Trigger a temperature sample with max oversampling rate
void __ms56_TriggerTemperatureSample(volatile MS5611_typedef *ms56dev) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af02      	add	r7, sp, #8
 800557a:	6078      	str	r0, [r7, #4]
	uint8_t ads = 0x54;
 800557c:	2354      	movs	r3, #84	; 0x54
 800557e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ms56dev->I2Cdev, I2C_ID_MS5611, &ads,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	f107 020f 	add.w	r2, r7, #15
 8005588:	230f      	movs	r3, #15
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2301      	movs	r3, #1
 800558e:	21ee      	movs	r1, #238	; 0xee
 8005590:	f009 fbe6 	bl	800ed60 <HAL_I2C_Master_Transmit>
			I2C_MEMADD_SIZE_8BIT,
			SENSOR_TIMEOUT);
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <__ms56_ReadTemperatureSample>:

uint32_t __ms56_ReadTemperatureSample(volatile MS5611_typedef *ms56dev) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af04      	add	r7, sp, #16
 80055a2:	6078      	str	r0, [r7, #4]
	uint32_t w;
	uint8_t buf[3];
	HAL_I2C_Mem_Read(ms56dev->I2Cdev, I2C_ID_MS5611, 0x00, I2C_MEMADD_SIZE_8BIT,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	230f      	movs	r3, #15
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	2303      	movs	r3, #3
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	f107 0308 	add.w	r3, r7, #8
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	2301      	movs	r3, #1
 80055b8:	2200      	movs	r2, #0
 80055ba:	21ee      	movs	r1, #238	; 0xee
 80055bc:	f009 fdd8 	bl	800f170 <HAL_I2C_Mem_Read>
			buf, 3,
			SENSOR_TIMEOUT);
	w = (((uint32_t) buf[0]) << 16) | (((uint32_t) buf[1]) << 8)
 80055c0:	7a3b      	ldrb	r3, [r7, #8]
 80055c2:	041a      	lsls	r2, r3, #16
 80055c4:	7a7b      	ldrb	r3, [r7, #9]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	4313      	orrs	r3, r2
			| (uint32_t) buf[2];
 80055ca:	7aba      	ldrb	r2, [r7, #10]
	w = (((uint32_t) buf[0]) << 16) | (((uint32_t) buf[1]) << 8)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
	return w;
 80055d0:	68fb      	ldr	r3, [r7, #12]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <__ms56_ReadPressureSample>:

uint32_t __ms56_ReadPressureSample(volatile MS5611_typedef *ms56dev) {
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af04      	add	r7, sp, #16
 80055e0:	6078      	str	r0, [r7, #4]
	uint32_t w;
	uint8_t buf[3];
	HAL_I2C_Mem_Read(ms56dev->I2Cdev, I2C_ID_MS5611, 0x00, I2C_MEMADD_SIZE_8BIT,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	230f      	movs	r3, #15
 80055e8:	9302      	str	r3, [sp, #8]
 80055ea:	2303      	movs	r3, #3
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	f107 0308 	add.w	r3, r7, #8
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2301      	movs	r3, #1
 80055f6:	2200      	movs	r2, #0
 80055f8:	21ee      	movs	r1, #238	; 0xee
 80055fa:	f009 fdb9 	bl	800f170 <HAL_I2C_Mem_Read>
			buf, 3,
			SENSOR_TIMEOUT);
	w = (((uint32_t) buf[0]) << 16) | (((uint32_t) buf[1]) << 8)
 80055fe:	7a3b      	ldrb	r3, [r7, #8]
 8005600:	041a      	lsls	r2, r3, #16
 8005602:	7a7b      	ldrb	r3, [r7, #9]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	4313      	orrs	r3, r2
			| (uint32_t) buf[2];
 8005608:	7aba      	ldrb	r2, [r7, #10]
	w = (((uint32_t) buf[0]) << 16) | (((uint32_t) buf[1]) << 8)
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
	return w;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <MS5611_InitializeSampleStateMachine>:

void MS5611_InitializeSampleStateMachine(volatile MS5611_typedef *ms56dev) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	__ms56_TriggerTemperatureSample(ms56dev);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ffa7 	bl	8005574 <__ms56_TriggerTemperatureSample>
	ms56dev->readingState = MS5611_Temp_Read;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	711a      	strb	r2, [r3, #4]
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <MS5611_SampleStateMachine>:

MS5611_State MS5611_SampleStateMachine(volatile MS5611_typedef *ms56dev) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	if (ms56dev->readingState == MS5611_Temp_Read) {
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	791b      	ldrb	r3, [r3, #4]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d131      	bne.n	80056aa <MS5611_SampleStateMachine+0x76>
		D2_ = __ms56_ReadTemperatureSample(ms56dev);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ffa8 	bl	800559c <__ms56_ReadTemperatureSample>
 800564c:	4603      	mov	r3, r0
 800564e:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <MS5611_SampleStateMachine+0xb4>)
 8005650:	6013      	str	r3, [r2, #0]
		__ms56_TriggerPressureSample(ms56dev);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ff7a 	bl	800554c <__ms56_TriggerPressureSample>
		__ms56_CalculateTemperatureCx10();
 8005658:	f7ff fdc2 	bl	80051e0 <__ms56_CalculateTemperatureCx10>
		ms56dev->Temp_C = (float) (
				tempCx100_ >= 0 ?
 800565c:	4b23      	ldr	r3, [pc, #140]	; (80056ec <MS5611_SampleStateMachine+0xb8>)
 800565e:	681b      	ldr	r3, [r3, #0]
		ms56dev->Temp_C = (float) (
 8005660:	2b00      	cmp	r3, #0
 8005662:	db0d      	blt.n	8005680 <MS5611_SampleStateMachine+0x4c>
						(tempCx100_ + 50) / 100 : (tempCx100_ - 50) / 100);
 8005664:	4b21      	ldr	r3, [pc, #132]	; (80056ec <MS5611_SampleStateMachine+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3332      	adds	r3, #50	; 0x32
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <MS5611_SampleStateMachine+0xbc>)
 800566c:	fb82 1203 	smull	r1, r2, r2, r3
 8005670:	1152      	asrs	r2, r2, #5
 8005672:	17db      	asrs	r3, r3, #31
 8005674:	1ad3      	subs	r3, r2, r3
		ms56dev->Temp_C = (float) (
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567e:	e00c      	b.n	800569a <MS5611_SampleStateMachine+0x66>
						(tempCx100_ + 50) / 100 : (tempCx100_ - 50) / 100);
 8005680:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <MS5611_SampleStateMachine+0xb8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3b32      	subs	r3, #50	; 0x32
 8005686:	4a1a      	ldr	r2, [pc, #104]	; (80056f0 <MS5611_SampleStateMachine+0xbc>)
 8005688:	fb82 1203 	smull	r1, r2, r2, r3
 800568c:	1152      	asrs	r2, r2, #5
 800568e:	17db      	asrs	r3, r3, #31
 8005690:	1ad3      	subs	r3, r2, r3
		ms56dev->Temp_C = (float) (
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	edc3 7a04 	vstr	s15, [r3, #16]
		ms56dev->readingState = MS5611_Pressure_Read;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	711a      	strb	r2, [r3, #4]
		return MS5611_TEMP_DATA_READY;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e01a      	b.n	80056e0 <MS5611_SampleStateMachine+0xac>
	} else if (ms56dev->readingState == MS5611_Pressure_Read) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	791b      	ldrb	r3, [r3, #4]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d114      	bne.n	80056de <MS5611_SampleStateMachine+0xaa>
		D1_ = __ms56_ReadPressureSample(ms56dev);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff90 	bl	80055da <__ms56_ReadPressureSample>
 80056ba:	4603      	mov	r3, r0
 80056bc:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <MS5611_SampleStateMachine+0xc0>)
 80056be:	6013      	str	r3, [r2, #0]
		ms56dev->Pres_hpa = __ms56_CalculatePressure_hPa();
 80056c0:	f7ff fdce 	bl	8005260 <__ms56_CalculatePressure_hPa>
 80056c4:	eef0 7a40 	vmov.f32	s15, s0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	edc3 7a02 	vstr	s15, [r3, #8]

		__ms56_TriggerTemperatureSample(ms56dev);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ff50 	bl	8005574 <__ms56_TriggerTemperatureSample>
		ms56dev->readingState = MS5611_Temp_Read;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	711a      	strb	r2, [r3, #4]
		return MS5611_PRES_DATA_READY;
 80056da:	2302      	movs	r3, #2
 80056dc:	e000      	b.n	80056e0 <MS5611_SampleStateMachine+0xac>
	}
	return MS5611_SENSOR_ERROR;
 80056de:	2301      	movs	r3, #1
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	24000668 	.word	0x24000668
 80056ec:	24000660 	.word	0x24000660
 80056f0:	51eb851f 	.word	0x51eb851f
 80056f4:	24000664 	.word	0x24000664

080056f8 <ringbuf_init>:
#include "RingBuffer/ringbuf.h"
#include "string.h"

void ringbuf_init(RINGBUF *RingBuf) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
   memset(RingBuf->buffer,0,RINGBUF_SIZE*sizeof(float));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	2250      	movs	r2, #80	; 0x50
 8005706:	2100      	movs	r1, #0
 8005708:	4618      	mov	r0, r3
 800570a:	f01c fc11 	bl	8021f30 <memset>
   RingBuf->head = RINGBUF_SIZE-1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2213      	movs	r2, #19
 8005712:	601a      	str	r2, [r3, #0]
   }
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <ringbuf_addSample>:

void ringbuf_addSample(float sample, RINGBUF *RingBuf) {
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	ed87 0a01 	vstr	s0, [r7, #4]
 8005726:	6038      	str	r0, [r7, #0]
   RingBuf->head++;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	601a      	str	r2, [r3, #0]
   if (RingBuf->head >= RINGBUF_SIZE) RingBuf->head = 0;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b13      	cmp	r3, #19
 8005738:	dd02      	ble.n	8005740 <ringbuf_addSample+0x24>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
   RingBuf->buffer[RingBuf->head] = sample;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	3304      	adds	r3, #4
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
   }
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <ringbuf_averageNewestSamples>:
      index++;
      }
   return accum/numSamples;
   }   

float ringbuf_averageNewestSamples(int numSamples, RINGBUF *RingBuf) {
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
   int index = RingBuf->head; // newest Sample
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	617b      	str	r3, [r7, #20]
   float accum = 0.0f;
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
   for (int count = 0; count < numSamples; count++) {
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e017      	b.n	80057a8 <ringbuf_averageNewestSamples+0x4c>
      if (index < 0) index = RINGBUF_SIZE - 1;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	da01      	bge.n	8005782 <ringbuf_averageNewestSamples+0x26>
 800577e:	2313      	movs	r3, #19
 8005780:	617b      	str	r3, [r7, #20]
      accum += RingBuf->buffer[index];
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	edd3 7a00 	vldr	s15, [r3]
 8005790:	ed97 7a04 	vldr	s14, [r7, #16]
 8005794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005798:	edc7 7a04 	vstr	s15, [r7, #16]
      index--;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3b01      	subs	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
   for (int count = 0; count < numSamples; count++) {
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	dbe3      	blt.n	8005778 <ringbuf_averageNewestSamples+0x1c>
      }
   return accum/numSamples;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80057be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057c2:	eef0 7a66 	vmov.f32	s15, s13
   }
 80057c6:	eeb0 0a67 	vmov.f32	s0, s15
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	611a      	str	r2, [r3, #16]
 80057e8:	615a      	str	r2, [r3, #20]
 80057ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80057ec:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <MX_ADC2_Init+0xc4>)
 80057ee:	4a2b      	ldr	r2, [pc, #172]	; (800589c <MX_ADC2_Init+0xc8>)
 80057f0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80057f2:	4b29      	ldr	r3, [pc, #164]	; (8005898 <MX_ADC2_Init+0xc4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80057f8:	4b27      	ldr	r3, [pc, #156]	; (8005898 <MX_ADC2_Init+0xc4>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80057fe:	4b26      	ldr	r3, [pc, #152]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005800:	2200      	movs	r2, #0
 8005802:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005804:	4b24      	ldr	r3, [pc, #144]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005806:	2204      	movs	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800580a:	4b23      	ldr	r3, [pc, #140]	; (8005898 <MX_ADC2_Init+0xc4>)
 800580c:	2200      	movs	r2, #0
 800580e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005810:	4b21      	ldr	r3, [pc, #132]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005812:	2200      	movs	r2, #0
 8005814:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8005816:	4b20      	ldr	r3, [pc, #128]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005818:	2201      	movs	r2, #1
 800581a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 800581c:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <MX_ADC2_Init+0xc4>)
 800581e:	2201      	movs	r2, #1
 8005820:	771a      	strb	r2, [r3, #28]
  hadc2.Init.NbrOfDiscConversion = 8;
 8005822:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005824:	2208      	movs	r2, #8
 8005826:	621a      	str	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005828:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <MX_ADC2_Init+0xc4>)
 800582a:	2200      	movs	r2, #0
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005830:	2200      	movs	r2, #0
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005834:	4b18      	ldr	r3, [pc, #96]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005836:	2200      	movs	r2, #0
 8005838:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800583a:	4b17      	ldr	r3, [pc, #92]	; (8005898 <MX_ADC2_Init+0xc4>)
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005840:	4b15      	ldr	r3, [pc, #84]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005842:	2200      	movs	r2, #0
 8005844:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800584e:	4812      	ldr	r0, [pc, #72]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005850:	f004 fe38 	bl	800a4c4 <HAL_ADC_Init>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800585a:	f002 f803 	bl	8007864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <MX_ADC2_Init+0xcc>)
 8005860:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005862:	2306      	movs	r3, #6
 8005864:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800586a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800586e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005870:	2304      	movs	r3, #4
 8005872:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8005878:	2300      	movs	r3, #0
 800587a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	4619      	mov	r1, r3
 8005880:	4805      	ldr	r0, [pc, #20]	; (8005898 <MX_ADC2_Init+0xc4>)
 8005882:	f005 f9c1 	bl	800ac08 <HAL_ADC_ConfigChannel>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 800588c:	f001 ffea 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005890:	bf00      	nop
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	24000670 	.word	0x24000670
 800589c:	40022100 	.word	0x40022100
 80058a0:	25b00200 	.word	0x25b00200

080058a4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	60da      	str	r2, [r3, #12]
 80058b6:	611a      	str	r2, [r3, #16]
 80058b8:	615a      	str	r2, [r3, #20]
 80058ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80058bc:	4b2f      	ldr	r3, [pc, #188]	; (800597c <MX_ADC3_Init+0xd8>)
 80058be:	4a30      	ldr	r2, [pc, #192]	; (8005980 <MX_ADC3_Init+0xdc>)
 80058c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80058c2:	4b2e      	ldr	r3, [pc, #184]	; (800597c <MX_ADC3_Init+0xd8>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80058c8:	4b2c      	ldr	r3, [pc, #176]	; (800597c <MX_ADC3_Init+0xd8>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80058ce:	4b2b      	ldr	r3, [pc, #172]	; (800597c <MX_ADC3_Init+0xd8>)
 80058d0:	2204      	movs	r2, #4
 80058d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80058d4:	4b29      	ldr	r3, [pc, #164]	; (800597c <MX_ADC3_Init+0xd8>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80058da:	4b28      	ldr	r3, [pc, #160]	; (800597c <MX_ADC3_Init+0xd8>)
 80058dc:	2200      	movs	r2, #0
 80058de:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 80058e0:	4b26      	ldr	r3, [pc, #152]	; (800597c <MX_ADC3_Init+0xd8>)
 80058e2:	2202      	movs	r2, #2
 80058e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 80058e6:	4b25      	ldr	r3, [pc, #148]	; (800597c <MX_ADC3_Init+0xd8>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.NbrOfDiscConversion = 8;
 80058ec:	4b23      	ldr	r3, [pc, #140]	; (800597c <MX_ADC3_Init+0xd8>)
 80058ee:	2208      	movs	r2, #8
 80058f0:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <MX_ADC3_Init+0xd8>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <MX_ADC3_Init+0xd8>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <MX_ADC3_Init+0xd8>)
 8005900:	2200      	movs	r2, #0
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005904:	4b1d      	ldr	r3, [pc, #116]	; (800597c <MX_ADC3_Init+0xd8>)
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <MX_ADC3_Init+0xd8>)
 800590c:	2200      	movs	r2, #0
 800590e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <MX_ADC3_Init+0xd8>)
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005918:	4818      	ldr	r0, [pc, #96]	; (800597c <MX_ADC3_Init+0xd8>)
 800591a:	f004 fdd3 	bl	800a4c4 <HAL_ADC_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8005924:	f001 ff9e 	bl	8007864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005928:	2301      	movs	r3, #1
 800592a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800592c:	2306      	movs	r3, #6
 800592e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8005930:	2307      	movs	r3, #7
 8005932:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005934:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005938:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800593a:	2304      	movs	r3, #4
 800593c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005946:	1d3b      	adds	r3, r7, #4
 8005948:	4619      	mov	r1, r3
 800594a:	480c      	ldr	r0, [pc, #48]	; (800597c <MX_ADC3_Init+0xd8>)
 800594c:	f005 f95c 	bl	800ac08 <HAL_ADC_ConfigChannel>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8005956:	f001 ff85 	bl	8007864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800595a:	230c      	movs	r3, #12
 800595c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4806      	ldr	r0, [pc, #24]	; (800597c <MX_ADC3_Init+0xd8>)
 8005964:	f005 f950 	bl	800ac08 <HAL_ADC_ConfigChannel>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800596e:	f001 ff79 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8005972:	bf00      	nop
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	240006d4 	.word	0x240006d4
 8005980:	58026000 	.word	0x58026000

08005984 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08c      	sub	sp, #48	; 0x30
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598c:	f107 031c 	add.w	r3, r7, #28
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a30      	ldr	r2, [pc, #192]	; (8005a64 <HAL_ADC_MspInit+0xe0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d12a      	bne.n	80059fc <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 80059a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80059ac:	4a2e      	ldr	r2, [pc, #184]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 80059ae:	f043 0320 	orr.w	r3, r3, #32
 80059b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80059b6:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 80059b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c4:	4b28      	ldr	r3, [pc, #160]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 80059c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ca:	4a27      	ldr	r2, [pc, #156]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 80059d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PB0     ------> ADC2_INP9
    */
    GPIO_InitStruct.Pin = UV_SENSOR_Pin;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059e6:	2303      	movs	r3, #3
 80059e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UV_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80059ee:	f107 031c 	add.w	r3, r7, #28
 80059f2:	4619      	mov	r1, r3
 80059f4:	481d      	ldr	r0, [pc, #116]	; (8005a6c <HAL_ADC_MspInit+0xe8>)
 80059f6:	f008 ff41 	bl	800e87c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80059fa:	e02e      	b.n	8005a5a <HAL_ADC_MspInit+0xd6>
  else if(adcHandle->Instance==ADC3)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <HAL_ADC_MspInit+0xec>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d129      	bne.n	8005a5a <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 8005a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 8005a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 8005a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 8005a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 8005a2c:	f043 0304 	orr.w	r3, r3, #4
 8005a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <HAL_ADC_MspInit+0xe4>)
 8005a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8005a42:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8005a46:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005a4a:	f004 faf3 	bl	800a034 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8005a4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8005a52:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005a56:	f004 faed 	bl	800a034 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8005a5a:	bf00      	nop
 8005a5c:	3730      	adds	r7, #48	; 0x30
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40022100 	.word	0x40022100
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	58020400 	.word	0x58020400
 8005a70:	58026000 	.word	0x58026000

08005a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <MX_DMA_Init+0x4c>)
 8005a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a80:	4a0f      	ldr	r2, [pc, #60]	; (8005ac0 <MX_DMA_Init+0x4c>)
 8005a82:	f043 0302 	orr.w	r3, r3, #2
 8005a86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <MX_DMA_Init+0x4c>)
 8005a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2038      	movs	r0, #56	; 0x38
 8005a9e:	f006 f801 	bl	800baa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005aa2:	2038      	movs	r0, #56	; 0x38
 8005aa4:	f006 f818 	bl	800bad8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2105      	movs	r1, #5
 8005aac:	2039      	movs	r0, #57	; 0x39
 8005aae:	f005 fff9 	bl	800baa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005ab2:	2039      	movs	r0, #57	; 0x39
 8005ab4:	f006 f810 	bl	800bad8 <HAL_NVIC_EnableIRQ>

}
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	58024400 	.word	0x58024400

08005ac4 <bufsize>:
char path[PATH_SIZE];  // buffer to store path

int i = 0;

int bufsize(char *buf)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	int i = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8005ad0:	e002      	b.n	8005ad8 <bufsize+0x14>
		i++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	607a      	str	r2, [r7, #4]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1f6      	bne.n	8005ad2 <bufsize+0xe>
	return i;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <clear_buffer>:

void clear_buffer(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUFFER_SIZE; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	e007      	b.n	8005b10 <clear_buffer+0x1c>
		buffer[i] = '\0';
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <clear_buffer+0x30>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2bff      	cmp	r3, #255	; 0xff
 8005b14:	ddf4      	ble.n	8005b00 <clear_buffer+0xc>
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	240027c0 	.word	0x240027c0

08005b28 <mount_sd>:
			break;
	}
}

uint8_t mount_sd(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, SDPath, 0);
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	490b      	ldr	r1, [pc, #44]	; (8005b5c <mount_sd+0x34>)
 8005b30:	480b      	ldr	r0, [pc, #44]	; (8005b60 <mount_sd+0x38>)
 8005b32:	f017 fbdf 	bl	801d2f4 <f_mount>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <mount_sd+0x3c>)
 8005b3c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <mount_sd+0x3c>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <mount_sd+0x28>
		{printf("error in mounting SD CARD...\n");
 8005b46:	4808      	ldr	r0, [pc, #32]	; (8005b68 <mount_sd+0x40>)
 8005b48:	f01d f9a8 	bl	8022e9c <puts>
		return 0;}
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e003      	b.n	8005b58 <mount_sd+0x30>
		printf("SD CARD mounted successfully...\n");
 8005b50:	4806      	ldr	r0, [pc, #24]	; (8005b6c <mount_sd+0x44>)
 8005b52:	f01d f9a3 	bl	8022e9c <puts>
		return 1;
 8005b56:	2301      	movs	r3, #1
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	24003fec 	.word	0x24003fec
 8005b60:	24000738 	.word	0x24000738
 8005b64:	240027b8 	.word	0x240027b8
 8005b68:	08027330 	.word	0x08027330
 8005b6c:	08027350 	.word	0x08027350

08005b70 <write_file>:
	}
	return fresult;
}

FILE_State write_file(char *name, char *buf)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 8005b7a:	4941      	ldr	r1, [pc, #260]	; (8005c80 <write_file+0x110>)
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f018 f86b 	bl	801dc58 <f_stat>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	4b3f      	ldr	r3, [pc, #252]	; (8005c84 <write_file+0x114>)
 8005b88:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8005b8a:	4b3e      	ldr	r3, [pc, #248]	; (8005c84 <write_file+0x114>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <write_file+0x36>
	{
#ifdef DEBUG_SD
		sprintf(buffer, "*%s* does not exists\n", name);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	493c      	ldr	r1, [pc, #240]	; (8005c88 <write_file+0x118>)
 8005b96:	483d      	ldr	r0, [pc, #244]	; (8005c8c <write_file+0x11c>)
 8005b98:	f01d fa3c 	bl	8023014 <siprintf>
		printf(buffer);
 8005b9c:	483b      	ldr	r0, [pc, #236]	; (8005c8c <write_file+0x11c>)
 8005b9e:	f01d f8f7 	bl	8022d90 <iprintf>
#endif
		return FILE_NOT_EXIST;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e068      	b.n	8005c78 <write_file+0x108>
	}

	else
	{
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4839      	ldr	r0, [pc, #228]	; (8005c90 <write_file+0x120>)
 8005bac:	f017 fc06 	bl	801d3bc <f_open>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4b33      	ldr	r3, [pc, #204]	; (8005c84 <write_file+0x114>)
 8005bb6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8005bb8:	4b32      	ldr	r3, [pc, #200]	; (8005c84 <write_file+0x114>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <write_file+0x6a>
		{
#ifdef DEBUG_SD

			sprintf(buffer, "error no %d in opening file *%s*\n", fresult,
 8005bc0:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <write_file+0x114>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4932      	ldr	r1, [pc, #200]	; (8005c94 <write_file+0x124>)
 8005bca:	4830      	ldr	r0, [pc, #192]	; (8005c8c <write_file+0x11c>)
 8005bcc:	f01d fa22 	bl	8023014 <siprintf>
					name);
			printf(buffer);
 8005bd0:	482e      	ldr	r0, [pc, #184]	; (8005c8c <write_file+0x11c>)
 8005bd2:	f01d f8dd 	bl	8022d90 <iprintf>
#endif
			return FILE_OPEN_ERR;
 8005bd6:	2307      	movs	r3, #7
 8005bd8:	e04e      	b.n	8005c78 <write_file+0x108>
		}

		/* Writing text */

		fresult = f_write(&fil, buf, bufsize(buf), &bw);
 8005bda:	6838      	ldr	r0, [r7, #0]
 8005bdc:	f7ff ff72 	bl	8005ac4 <bufsize>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <write_file+0x128>)
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	4829      	ldr	r0, [pc, #164]	; (8005c90 <write_file+0x120>)
 8005bea:	f017 fdba 	bl	801d762 <f_write>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <write_file+0x114>)
 8005bf4:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8005bf6:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <write_file+0x114>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d019      	beq.n	8005c32 <write_file+0xc2>
		{
			clear_buffer();
 8005bfe:	f7ff ff79 	bl	8005af4 <clear_buffer>
#ifdef DEBUG_SD
			sprintf(buffer, "error no %d in writing file *%s*\n", fresult,
 8005c02:	4b20      	ldr	r3, [pc, #128]	; (8005c84 <write_file+0x114>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4924      	ldr	r1, [pc, #144]	; (8005c9c <write_file+0x12c>)
 8005c0c:	481f      	ldr	r0, [pc, #124]	; (8005c8c <write_file+0x11c>)
 8005c0e:	f01d fa01 	bl	8023014 <siprintf>
					name);
			printf(buffer);
 8005c12:	481e      	ldr	r0, [pc, #120]	; (8005c8c <write_file+0x11c>)
 8005c14:	f01d f8bc 	bl	8022d90 <iprintf>
#endif
			fresult = f_close(&fil);
 8005c18:	481d      	ldr	r0, [pc, #116]	; (8005c90 <write_file+0x120>)
 8005c1a:	f017 ffee 	bl	801dbfa <f_close>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <write_file+0x114>)
 8005c24:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8005c26:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <write_file+0x114>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <write_file+0xd6>
			{
				return FILE_WRITE_CLOSE_ERR;
 8005c2e:	230b      	movs	r3, #11
 8005c30:	e022      	b.n	8005c78 <write_file+0x108>
			}
		}

		else
		{
			clear_buffer();
 8005c32:	f7ff ff5f 	bl	8005af4 <clear_buffer>
#ifdef DEBUG_SD

			sprintf(buffer, "*%s* written successfully\n", name);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4919      	ldr	r1, [pc, #100]	; (8005ca0 <write_file+0x130>)
 8005c3a:	4814      	ldr	r0, [pc, #80]	; (8005c8c <write_file+0x11c>)
 8005c3c:	f01d f9ea 	bl	8023014 <siprintf>
			printf(buffer);
 8005c40:	4812      	ldr	r0, [pc, #72]	; (8005c8c <write_file+0x11c>)
 8005c42:	f01d f8a5 	bl	8022d90 <iprintf>
#endif

		}

		/* Close file */
		fresult = f_close(&fil);
 8005c46:	4812      	ldr	r0, [pc, #72]	; (8005c90 <write_file+0x120>)
 8005c48:	f017 ffd7 	bl	801dbfa <f_close>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <write_file+0x114>)
 8005c52:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <write_file+0x114>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <write_file+0x106>
		{
#ifdef DEBUG_SD
			sprintf(buffer, "error no %d in closing file *%s*\n", fresult,
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <write_file+0x114>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	490f      	ldr	r1, [pc, #60]	; (8005ca4 <write_file+0x134>)
 8005c66:	4809      	ldr	r0, [pc, #36]	; (8005c8c <write_file+0x11c>)
 8005c68:	f01d f9d4 	bl	8023014 <siprintf>
					name);
			printf(buffer);
 8005c6c:	4807      	ldr	r0, [pc, #28]	; (8005c8c <write_file+0x11c>)
 8005c6e:	f01d f88f 	bl	8022d90 <iprintf>
#endif
			return FILE_CLOSE_ERR;
 8005c72:	2310      	movs	r3, #16
 8005c74:	e000      	b.n	8005c78 <write_file+0x108>
		}
		return FILE_WRITTEN;
 8005c76:	2303      	movs	r3, #3
	}
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	240027a0 	.word	0x240027a0
 8005c84:	240027b8 	.word	0x240027b8
 8005c88:	080273e8 	.word	0x080273e8
 8005c8c:	240027c0 	.word	0x240027c0
 8005c90:	24001770 	.word	0x24001770
 8005c94:	08027400 	.word	0x08027400
 8005c98:	240027bc 	.word	0x240027bc
 8005c9c:	08027424 	.word	0x08027424
 8005ca0:	08027448 	.word	0x08027448
 8005ca4:	08027464 	.word	0x08027464

08005ca8 <create_file>:
		return FILE_READ;
	}
}

FILE_State create_file(char *name)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8005cb0:	492e      	ldr	r1, [pc, #184]	; (8005d6c <create_file+0xc4>)
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f017 ffd0 	bl	801dc58 <f_stat>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4b2c      	ldr	r3, [pc, #176]	; (8005d70 <create_file+0xc8>)
 8005cbe:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <create_file+0xc8>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d108      	bne.n	8005cda <create_file+0x32>
	{
#ifdef DEBUG_SD
		printf("*%s* already exists!!!!\n", name);
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	482a      	ldr	r0, [pc, #168]	; (8005d74 <create_file+0xcc>)
 8005ccc:	f01d f860 	bl	8022d90 <iprintf>
		printf(buffer);
 8005cd0:	4829      	ldr	r0, [pc, #164]	; (8005d78 <create_file+0xd0>)
 8005cd2:	f01d f85d 	bl	8022d90 <iprintf>
#endif
		return FILE_EXIST;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e044      	b.n	8005d64 <create_file+0xbc>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8005cda:	220b      	movs	r2, #11
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4827      	ldr	r0, [pc, #156]	; (8005d7c <create_file+0xd4>)
 8005ce0:	f017 fb6c 	bl	801d3bc <f_open>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <create_file+0xc8>)
 8005cea:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <create_file+0xc8>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d018      	beq.n	8005d26 <create_file+0x7e>
		{
#ifdef DEBUG_SD
			printf("error no %d in creating file *%s*\n", fresult, name);
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <create_file+0xc8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4820      	ldr	r0, [pc, #128]	; (8005d80 <create_file+0xd8>)
 8005cfe:	f01d f847 	bl	8022d90 <iprintf>
			printf(buffer);
 8005d02:	481d      	ldr	r0, [pc, #116]	; (8005d78 <create_file+0xd0>)
 8005d04:	f01d f844 	bl	8022d90 <iprintf>
#endif
			fresult = f_close(&fil);
 8005d08:	481c      	ldr	r0, [pc, #112]	; (8005d7c <create_file+0xd4>)
 8005d0a:	f017 ff76 	bl	801dbfa <f_close>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	461a      	mov	r2, r3
 8005d12:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <create_file+0xc8>)
 8005d14:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8005d16:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <create_file+0xc8>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <create_file+0x7a>
			{
				return FILE_CREATE_CLOSE_ERR;
 8005d1e:	230d      	movs	r3, #13
 8005d20:	e020      	b.n	8005d64 <create_file+0xbc>
			}
			return FILE_CREATE_ERR;
 8005d22:	230c      	movs	r3, #12
 8005d24:	e01e      	b.n	8005d64 <create_file+0xbc>
		}
		else
		{
#ifdef DEBUG_SD
			printf("*%s* created successfully\n", name);
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4816      	ldr	r0, [pc, #88]	; (8005d84 <create_file+0xdc>)
 8005d2a:	f01d f831 	bl	8022d90 <iprintf>
			printf(buffer);
 8005d2e:	4812      	ldr	r0, [pc, #72]	; (8005d78 <create_file+0xd0>)
 8005d30:	f01d f82e 	bl	8022d90 <iprintf>
#endif

		}

		fresult = f_close(&fil);
 8005d34:	4811      	ldr	r0, [pc, #68]	; (8005d7c <create_file+0xd4>)
 8005d36:	f017 ff60 	bl	801dbfa <f_close>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <create_file+0xc8>)
 8005d40:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8005d42:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <create_file+0xc8>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <create_file+0xba>
		{
#ifdef DEBUG_SD
			printf("error no %d in closing file *%s*\n", fresult, name);
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <create_file+0xc8>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4619      	mov	r1, r3
 8005d52:	480d      	ldr	r0, [pc, #52]	; (8005d88 <create_file+0xe0>)
 8005d54:	f01d f81c 	bl	8022d90 <iprintf>
			printf(buffer);
 8005d58:	4807      	ldr	r0, [pc, #28]	; (8005d78 <create_file+0xd0>)
 8005d5a:	f01d f819 	bl	8022d90 <iprintf>
#endif
			return FILE_CLOSE_ERR;
 8005d5e:	2310      	movs	r3, #16
 8005d60:	e000      	b.n	8005d64 <create_file+0xbc>
		}
	}
	return FILE_CREATED;
 8005d62:	2304      	movs	r3, #4
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	240027a0 	.word	0x240027a0
 8005d70:	240027b8 	.word	0x240027b8
 8005d74:	080274d0 	.word	0x080274d0
 8005d78:	240027c0 	.word	0x240027c0
 8005d7c:	24001770 	.word	0x24001770
 8005d80:	080274ec 	.word	0x080274ec
 8005d84:	08027510 	.word	0x08027510
 8005d88:	08027464 	.word	0x08027464

08005d8c <remove_file>:

FILE_State remove_file(char *name)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 8005d94:	491b      	ldr	r1, [pc, #108]	; (8005e04 <remove_file+0x78>)
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f017 ff5e 	bl	801dc58 <f_stat>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <remove_file+0x7c>)
 8005da2:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8005da4:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <remove_file+0x7c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <remove_file+0x34>
	{
#ifdef DEBUG_SD

		sprintf(buffer, "*%s* does not exists\n", name);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4917      	ldr	r1, [pc, #92]	; (8005e0c <remove_file+0x80>)
 8005db0:	4817      	ldr	r0, [pc, #92]	; (8005e10 <remove_file+0x84>)
 8005db2:	f01d f92f 	bl	8023014 <siprintf>
		printf(buffer);
 8005db6:	4816      	ldr	r0, [pc, #88]	; (8005e10 <remove_file+0x84>)
 8005db8:	f01c ffea 	bl	8022d90 <iprintf>
#endif
		return FILE_NOT_EXIST;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e01d      	b.n	8005dfc <remove_file+0x70>
	}

	else
	{
		fresult = f_unlink(name);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f017 ff89 	bl	801dcd8 <f_unlink>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <remove_file+0x7c>)
 8005dcc:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK)
 8005dce:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <remove_file+0x7c>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <remove_file+0x5e>
		{
#ifdef DEBUG_SD

			sprintf(buffer, "*%s* has been removed successfully\n", name);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	490e      	ldr	r1, [pc, #56]	; (8005e14 <remove_file+0x88>)
 8005dda:	480d      	ldr	r0, [pc, #52]	; (8005e10 <remove_file+0x84>)
 8005ddc:	f01d f91a 	bl	8023014 <siprintf>
			printf(buffer);
 8005de0:	480b      	ldr	r0, [pc, #44]	; (8005e10 <remove_file+0x84>)
 8005de2:	f01c ffd5 	bl	8022d90 <iprintf>
#endif
			return FILE_REMOVED;
 8005de6:	2305      	movs	r3, #5
 8005de8:	e008      	b.n	8005dfc <remove_file+0x70>

		else
		{
#ifdef DEBUG_SD

			sprintf(buffer, "error in removing *%s*\n", name);
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	490a      	ldr	r1, [pc, #40]	; (8005e18 <remove_file+0x8c>)
 8005dee:	4808      	ldr	r0, [pc, #32]	; (8005e10 <remove_file+0x84>)
 8005df0:	f01d f910 	bl	8023014 <siprintf>
			printf(buffer);
 8005df4:	4806      	ldr	r0, [pc, #24]	; (8005e10 <remove_file+0x84>)
 8005df6:	f01c ffcb 	bl	8022d90 <iprintf>
#endif
			return FILE_REMOVE_ERR;
 8005dfa:	230e      	movs	r3, #14
		}
	}
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	240027a0 	.word	0x240027a0
 8005e08:	240027b8 	.word	0x240027b8
 8005e0c:	080273e8 	.word	0x080273e8
 8005e10:	240027c0 	.word	0x240027c0
 8005e14:	0802752c 	.word	0x0802752c
 8005e18:	08027550 	.word	0x08027550

08005e1c <check_file>:
	sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
	printf(buffer);
}

FILE_State check_file(char *name)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af04      	add	r7, sp, #16
 8005e22:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 8005e24:	4949      	ldr	r1, [pc, #292]	; (8005f4c <check_file+0x130>)
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f017 ff16 	bl	801dc58 <f_stat>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4b47      	ldr	r3, [pc, #284]	; (8005f50 <check_file+0x134>)
 8005e32:	701a      	strb	r2, [r3, #0]
	switch (fresult)
 8005e34:	4b46      	ldr	r3, [pc, #280]	; (8005f50 <check_file+0x134>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <check_file+0x26>
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d06c      	beq.n	8005f1a <check_file+0xfe>
 8005e40:	e075      	b.n	8005f2e <check_file+0x112>
	{
	case FR_OK:
#ifdef DEBUG_SD

		sprintf(buffer, "Below are the details of the *%s* \nSize: %lu\n", name,
 8005e42:	4b42      	ldr	r3, [pc, #264]	; (8005f4c <check_file+0x130>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4942      	ldr	r1, [pc, #264]	; (8005f54 <check_file+0x138>)
 8005e4a:	4843      	ldr	r0, [pc, #268]	; (8005f58 <check_file+0x13c>)
 8005e4c:	f01d f8e2 	bl	8023014 <siprintf>
				fno.fsize);
		printf(buffer);
 8005e50:	4841      	ldr	r0, [pc, #260]	; (8005f58 <check_file+0x13c>)
 8005e52:	f01c ff9d 	bl	8022d90 <iprintf>
		sprintf(buffer, "Timestamp: %u/%02u/%02u, %02u:%02u\n",
				(fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8005e56:	4b3d      	ldr	r3, [pc, #244]	; (8005f4c <check_file+0x130>)
 8005e58:	889b      	ldrh	r3, [r3, #4]
 8005e5a:	0a5b      	lsrs	r3, r3, #9
 8005e5c:	b29b      	uxth	r3, r3
		sprintf(buffer, "Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8005e5e:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
				(fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8005e62:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <check_file+0x130>)
 8005e64:	889b      	ldrh	r3, [r3, #4]
		sprintf(buffer, "Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f003 000f 	and.w	r0, r3, #15
				(fno.fdate >> 9) + 1980, fno.fdate >> 5 & 15, fno.fdate & 31,
 8005e6e:	4b37      	ldr	r3, [pc, #220]	; (8005f4c <check_file+0x130>)
 8005e70:	889b      	ldrh	r3, [r3, #4]
		sprintf(buffer, "Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8005e72:	f003 031f 	and.w	r3, r3, #31
				fno.ftime >> 11, fno.ftime >> 5 & 63);
 8005e76:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <check_file+0x130>)
 8005e78:	88d2      	ldrh	r2, [r2, #6]
		sprintf(buffer, "Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8005e7a:	0ad2      	lsrs	r2, r2, #11
 8005e7c:	b292      	uxth	r2, r2
 8005e7e:	4614      	mov	r4, r2
				fno.ftime >> 11, fno.ftime >> 5 & 63);
 8005e80:	4a32      	ldr	r2, [pc, #200]	; (8005f4c <check_file+0x130>)
 8005e82:	88d2      	ldrh	r2, [r2, #6]
		sprintf(buffer, "Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8005e84:	0952      	lsrs	r2, r2, #5
 8005e86:	b292      	uxth	r2, r2
 8005e88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005e8c:	9202      	str	r2, [sp, #8]
 8005e8e:	9401      	str	r4, [sp, #4]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4603      	mov	r3, r0
 8005e94:	460a      	mov	r2, r1
 8005e96:	4931      	ldr	r1, [pc, #196]	; (8005f5c <check_file+0x140>)
 8005e98:	482f      	ldr	r0, [pc, #188]	; (8005f58 <check_file+0x13c>)
 8005e9a:	f01d f8bb 	bl	8023014 <siprintf>
		printf(buffer);
 8005e9e:	482e      	ldr	r0, [pc, #184]	; (8005f58 <check_file+0x13c>)
 8005ea0:	f01c ff76 	bl	8022d90 <iprintf>
		sprintf(buffer, "Attributes: %c%c%c%c%c\n",
				(fno.fattrib & AM_DIR) ? 'D' : '-',
 8005ea4:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <check_file+0x130>)
 8005ea6:	7a1b      	ldrb	r3, [r3, #8]
 8005ea8:	f003 0310 	and.w	r3, r3, #16
		sprintf(buffer, "Attributes: %c%c%c%c%c\n",
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <check_file+0x98>
 8005eb0:	2044      	movs	r0, #68	; 0x44
 8005eb2:	e000      	b.n	8005eb6 <check_file+0x9a>
 8005eb4:	202d      	movs	r0, #45	; 0x2d
				(fno.fattrib & AM_RDO) ? 'R' : '-',
 8005eb6:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <check_file+0x130>)
 8005eb8:	7a1b      	ldrb	r3, [r3, #8]
 8005eba:	f003 0301 	and.w	r3, r3, #1
		sprintf(buffer, "Attributes: %c%c%c%c%c\n",
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <check_file+0xaa>
 8005ec2:	2452      	movs	r4, #82	; 0x52
 8005ec4:	e000      	b.n	8005ec8 <check_file+0xac>
 8005ec6:	242d      	movs	r4, #45	; 0x2d
				(fno.fattrib & AM_HID) ? 'H' : '-',
 8005ec8:	4b20      	ldr	r3, [pc, #128]	; (8005f4c <check_file+0x130>)
 8005eca:	7a1b      	ldrb	r3, [r3, #8]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
		sprintf(buffer, "Attributes: %c%c%c%c%c\n",
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <check_file+0xbc>
 8005ed4:	2348      	movs	r3, #72	; 0x48
 8005ed6:	e000      	b.n	8005eda <check_file+0xbe>
 8005ed8:	232d      	movs	r3, #45	; 0x2d
				(fno.fattrib & AM_SYS) ? 'S' : '-',
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <check_file+0x130>)
 8005edc:	7a12      	ldrb	r2, [r2, #8]
 8005ede:	f002 0204 	and.w	r2, r2, #4
		sprintf(buffer, "Attributes: %c%c%c%c%c\n",
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	d001      	beq.n	8005eea <check_file+0xce>
 8005ee6:	2253      	movs	r2, #83	; 0x53
 8005ee8:	e000      	b.n	8005eec <check_file+0xd0>
 8005eea:	222d      	movs	r2, #45	; 0x2d
				(fno.fattrib & AM_ARC) ? 'A' : '-');
 8005eec:	4917      	ldr	r1, [pc, #92]	; (8005f4c <check_file+0x130>)
 8005eee:	7a09      	ldrb	r1, [r1, #8]
 8005ef0:	f001 0120 	and.w	r1, r1, #32
		sprintf(buffer, "Attributes: %c%c%c%c%c\n",
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d001      	beq.n	8005efc <check_file+0xe0>
 8005ef8:	2141      	movs	r1, #65	; 0x41
 8005efa:	e000      	b.n	8005efe <check_file+0xe2>
 8005efc:	212d      	movs	r1, #45	; 0x2d
 8005efe:	9102      	str	r1, [sp, #8]
 8005f00:	9201      	str	r2, [sp, #4]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	4623      	mov	r3, r4
 8005f06:	4602      	mov	r2, r0
 8005f08:	4915      	ldr	r1, [pc, #84]	; (8005f60 <check_file+0x144>)
 8005f0a:	4813      	ldr	r0, [pc, #76]	; (8005f58 <check_file+0x13c>)
 8005f0c:	f01d f882 	bl	8023014 <siprintf>
		printf(buffer);
 8005f10:	4811      	ldr	r0, [pc, #68]	; (8005f58 <check_file+0x13c>)
 8005f12:	f01c ff3d 	bl	8022d90 <iprintf>
#endif
		return FILE_EXIST;
 8005f16:	2300      	movs	r3, #0
 8005f18:	e014      	b.n	8005f44 <check_file+0x128>
		break;

	case FR_NO_FILE:
#ifdef DEBUG_SD

		sprintf(buffer, "*%s* does not exist.\n", name);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4911      	ldr	r1, [pc, #68]	; (8005f64 <check_file+0x148>)
 8005f1e:	480e      	ldr	r0, [pc, #56]	; (8005f58 <check_file+0x13c>)
 8005f20:	f01d f878 	bl	8023014 <siprintf>
		printf(buffer);
 8005f24:	480c      	ldr	r0, [pc, #48]	; (8005f58 <check_file+0x13c>)
 8005f26:	f01c ff33 	bl	8022d90 <iprintf>
#endif

		return FILE_NOT_EXIST;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e00a      	b.n	8005f44 <check_file+0x128>
		break;

	default:
#ifdef DEBUG_SD
		sprintf(buffer, "An error occurred. (%d)\n", fresult);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <check_file+0x134>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	490c      	ldr	r1, [pc, #48]	; (8005f68 <check_file+0x14c>)
 8005f36:	4808      	ldr	r0, [pc, #32]	; (8005f58 <check_file+0x13c>)
 8005f38:	f01d f86c 	bl	8023014 <siprintf>
		printf(buffer);
 8005f3c:	4806      	ldr	r0, [pc, #24]	; (8005f58 <check_file+0x13c>)
 8005f3e:	f01c ff27 	bl	8022d90 <iprintf>
#endif

		return FILE_READ_ERR;
 8005f42:	2308      	movs	r3, #8
	}
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd90      	pop	{r4, r7, pc}
 8005f4c:	240027a0 	.word	0x240027a0
 8005f50:	240027b8 	.word	0x240027b8
 8005f54:	080275ec 	.word	0x080275ec
 8005f58:	240027c0 	.word	0x240027c0
 8005f5c:	0802761c 	.word	0x0802761c
 8005f60:	08027640 	.word	0x08027640
 8005f64:	08027658 	.word	0x08027658
 8005f68:	08027670 	.word	0x08027670

08005f6c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of uartLoraSema */
	uartLoraSemaHandle = osSemaphoreNew(1, 1, &uartLoraSema_attributes);
 8005f70:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <MX_FREERTOS_Init+0x84>)
 8005f72:	2101      	movs	r1, #1
 8005f74:	2001      	movs	r0, #1
 8005f76:	f018 fa88 	bl	801e48a <osSemaphoreNew>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <MX_FREERTOS_Init+0x88>)
 8005f7e:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of TelemetriTimer */
	TelemetriTimerHandle = osTimerNew(TelemTimCall, osTimerOnce, NULL,
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <MX_FREERTOS_Init+0x8c>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	2100      	movs	r1, #0
 8005f86:	481d      	ldr	r0, [pc, #116]	; (8005ffc <MX_FREERTOS_Init+0x90>)
 8005f88:	f018 f982 	bl	801e290 <osTimerNew>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <MX_FREERTOS_Init+0x94>)
 8005f90:	6013      	str	r3, [r2, #0]
			&TelemetriTimer_attributes);

	/* creation of TimeoutTimer */
	TimeoutTimerHandle = osTimerNew(TimeoutTimerCall, osTimerOnce,
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <MX_FREERTOS_Init+0x98>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <MX_FREERTOS_Init+0x9c>)
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	481b      	ldr	r0, [pc, #108]	; (800600c <MX_FREERTOS_Init+0xa0>)
 8005f9e:	f018 f977 	bl	801e290 <osTimerNew>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <MX_FREERTOS_Init+0xa4>)
 8005fa6:	6013      	str	r3, [r2, #0]
			(void*) selectedFlag, &TimeoutTimer_attributes);

	/* creation of TahrikTimer */
	TahrikTimerHandle = osTimerNew(TahrikTimerCall, osTimerOnce, NULL,
 8005fa8:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <MX_FREERTOS_Init+0xa8>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	481a      	ldr	r0, [pc, #104]	; (8006018 <MX_FREERTOS_Init+0xac>)
 8005fb0:	f018 f96e 	bl	801e290 <osTimerNew>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4a19      	ldr	r2, [pc, #100]	; (800601c <MX_FREERTOS_Init+0xb0>)
 8005fb8:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of MotorTask */
	MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8005fba:	4a19      	ldr	r2, [pc, #100]	; (8006020 <MX_FREERTOS_Init+0xb4>)
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4819      	ldr	r0, [pc, #100]	; (8006024 <MX_FREERTOS_Init+0xb8>)
 8005fc0:	f018 f8a3 	bl	801e10a <osThreadNew>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4a18      	ldr	r2, [pc, #96]	; (8006028 <MX_FREERTOS_Init+0xbc>)
 8005fc8:	6013      	str	r3, [r2, #0]

	/* creation of DataComTask */
	DataComTaskHandle = osThreadNew(StartDataCom, NULL,
 8005fca:	4a18      	ldr	r2, [pc, #96]	; (800602c <MX_FREERTOS_Init+0xc0>)
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4818      	ldr	r0, [pc, #96]	; (8006030 <MX_FREERTOS_Init+0xc4>)
 8005fd0:	f018 f89b 	bl	801e10a <osThreadNew>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	4a17      	ldr	r2, [pc, #92]	; (8006034 <MX_FREERTOS_Init+0xc8>)
 8005fd8:	6013      	str	r3, [r2, #0]
			&DataComTask_attributes);

	/* creation of SensorsTask */
	SensorsTaskHandle = osThreadNew(StartSensors, NULL,
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <MX_FREERTOS_Init+0xcc>)
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4817      	ldr	r0, [pc, #92]	; (800603c <MX_FREERTOS_Init+0xd0>)
 8005fe0:	f018 f893 	bl	801e10a <osThreadNew>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4a16      	ldr	r2, [pc, #88]	; (8006040 <MX_FREERTOS_Init+0xd4>)
 8005fe8:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8005fea:	bf00      	nop
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	08027be8 	.word	0x08027be8
 8005ff4:	240028dc 	.word	0x240028dc
 8005ff8:	08027bb8 	.word	0x08027bb8
 8005ffc:	0800665d 	.word	0x0800665d
 8006000:	240028d0 	.word	0x240028d0
 8006004:	240028c0 	.word	0x240028c0
 8006008:	08027bc8 	.word	0x08027bc8
 800600c:	0800667d 	.word	0x0800667d
 8006010:	240028d4 	.word	0x240028d4
 8006014:	08027bd8 	.word	0x08027bd8
 8006018:	080066a5 	.word	0x080066a5
 800601c:	240028d8 	.word	0x240028d8
 8006020:	08027b4c 	.word	0x08027b4c
 8006024:	08006045 	.word	0x08006045
 8006028:	240028c4 	.word	0x240028c4
 800602c:	08027b70 	.word	0x08027b70
 8006030:	080061e1 	.word	0x080061e1
 8006034:	240028c8 	.word	0x240028c8
 8006038:	08027b94 	.word	0x08027b94
 800603c:	080063bd 	.word	0x080063bd
 8006040:	240028cc 	.word	0x240028cc

08006044 <StartMotorTask>:
 * @brief  Function implementing the MotorTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	/*
	 * ESC1 ve ESC2 PWM baslatilmali arm ile yapilabilir;
	 */
	int dt;
	uint32_t clockPrevious, clockNow;
	HAL_TIM_PWM_Start(&SERVO_HTIM, SERVO2_CHN);
 800604c:	2104      	movs	r1, #4
 800604e:	485c      	ldr	r0, [pc, #368]	; (80061c0 <StartMotorTask+0x17c>)
 8006050:	f010 f82c 	bl	80160ac <HAL_TIM_PWM_Start>
	servoTahrik(SERVO_KAPAT);
 8006054:	2001      	movs	r0, #1
 8006056:	f003 fa87 	bl	8009568 <servoTahrik>
	MotorKontrol_typedef prevKontrol = siracUydu.motorKontrolDurumu;
 800605a:	4b5a      	ldr	r3, [pc, #360]	; (80061c4 <StartMotorTask+0x180>)
 800605c:	791b      	ldrb	r3, [r3, #4]
 800605e:	73fb      	strb	r3, [r7, #15]
	 * STACK SIZE 232
	 */
	//ESCcalibration();
	/* Infinite loop */
	for (;;) {
		if (siracUydu.uyduDurumu >= GY_INIS1) {
 8006060:	4b58      	ldr	r3, [pc, #352]	; (80061c4 <StartMotorTask+0x180>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b04      	cmp	r3, #4
 8006066:	d921      	bls.n	80060ac <StartMotorTask+0x68>
			if (siracUydu.sensorVerisi.imu.roll >= 90
 8006068:	4b56      	ldr	r3, [pc, #344]	; (80061c4 <StartMotorTask+0x180>)
 800606a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800606e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80061c8 <StartMotorTask+0x184>
 8006072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607a:	da09      	bge.n	8006090 <StartMotorTask+0x4c>
					|| siracUydu.sensorVerisi.imu.pitch >= 90) {
 800607c:	4b51      	ldr	r3, [pc, #324]	; (80061c4 <StartMotorTask+0x180>)
 800607e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006082:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80061c8 <StartMotorTask+0x184>
 8006086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608e:	db06      	blt.n	800609e <StartMotorTask+0x5a>
				prevKontrol = siracUydu.motorKontrolDurumu;
 8006090:	4b4c      	ldr	r3, [pc, #304]	; (80061c4 <StartMotorTask+0x180>)
 8006092:	791b      	ldrb	r3, [r3, #4]
 8006094:	73fb      	strb	r3, [r7, #15]
				siracUydu.motorKontrolDurumu = DEVRE_DISI;
 8006096:	4b4b      	ldr	r3, [pc, #300]	; (80061c4 <StartMotorTask+0x180>)
 8006098:	2200      	movs	r2, #0
 800609a:	711a      	strb	r2, [r3, #4]
 800609c:	e006      	b.n	80060ac <StartMotorTask+0x68>
			} else if (siracUydu.motorKontrolDurumu == DEVRE_DISI) {
 800609e:	4b49      	ldr	r3, [pc, #292]	; (80061c4 <StartMotorTask+0x180>)
 80060a0:	791b      	ldrb	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <StartMotorTask+0x68>
				siracUydu.motorKontrolDurumu = prevKontrol;
 80060a6:	4a47      	ldr	r2, [pc, #284]	; (80061c4 <StartMotorTask+0x180>)
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	7113      	strb	r3, [r2, #4]
			}
		}
		switch (siracUydu.motorKontrolDurumu) {
 80060ac:	4b45      	ldr	r3, [pc, #276]	; (80061c4 <StartMotorTask+0x180>)
 80060ae:	791b      	ldrb	r3, [r3, #4]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d02d      	beq.n	8006110 <StartMotorTask+0xcc>
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	dc7e      	bgt.n	80061b6 <StartMotorTask+0x172>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d074      	beq.n	80061a6 <StartMotorTask+0x162>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d17a      	bne.n	80061b6 <StartMotorTask+0x172>
			} else {
				PID(siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateMps,
						siracUydu.sensorVerisi.kararAraliklari.InisHizi, dt);
			}
			motorTahrik(PID1.pwm, PID1.pwm);*/
		motorTahrik(MOTOR_PWM_CALC(siracUydu.sensorVerisi.kararAraliklari.InisHizi), MOTOR_PWM_CALC(siracUydu.sensorVerisi.kararAraliklari.InisHizi));
 80060c0:	4b40      	ldr	r3, [pc, #256]	; (80061c4 <StartMotorTask+0x180>)
 80060c2:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 80060c6:	461a      	mov	r2, r3
 80060c8:	4613      	mov	r3, r2
 80060ca:	029b      	lsls	r3, r3, #10
 80060cc:	4413      	add	r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	4a3e      	ldr	r2, [pc, #248]	; (80061cc <StartMotorTask+0x188>)
 80060d2:	fb82 1203 	smull	r1, r2, r2, r3
 80060d6:	1152      	asrs	r2, r2, #5
 80060d8:	17db      	asrs	r3, r3, #31
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f603 1392 	addw	r3, r3, #2450	; 0x992
 80060e2:	b298      	uxth	r0, r3
 80060e4:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <StartMotorTask+0x180>)
 80060e6:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 80060ea:	461a      	mov	r2, r3
 80060ec:	4613      	mov	r3, r2
 80060ee:	029b      	lsls	r3, r3, #10
 80060f0:	4413      	add	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4a35      	ldr	r2, [pc, #212]	; (80061cc <StartMotorTask+0x188>)
 80060f6:	fb82 1203 	smull	r1, r2, r2, r3
 80060fa:	1152      	asrs	r2, r2, #5
 80060fc:	17db      	asrs	r3, r3, #31
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	b29b      	uxth	r3, r3
 8006102:	f603 1392 	addw	r3, r3, #2450	; 0x992
 8006106:	b29b      	uxth	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	f003 fa17 	bl	800953c <motorTahrik>
			break;
 800610e:	e052      	b.n	80061b6 <StartMotorTask+0x172>
		case (MANUEL):
			if (siracUydu.uyduDurumu == BEKLEME) {			//timer start
 8006110:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <StartMotorTask+0x180>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d14d      	bne.n	80061b4 <StartMotorTask+0x170>
				if (!osTimerIsRunning(
 8006118:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <StartMotorTask+0x18c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f018 f998 	bl	801e452 <osTimerIsRunning>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d116      	bne.n	8006156 <StartMotorTask+0x112>
						TahrikTimerHandle) && !CHECK_FLAG(timersFlag, motorTahrikTimeoutFlag)) {
 8006128:	4b2a      	ldr	r3, [pc, #168]	; (80061d4 <StartMotorTask+0x190>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d110      	bne.n	8006156 <StartMotorTask+0x112>
					osTimerStart(TahrikTimerHandle,
 8006134:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <StartMotorTask+0x18c>)
 8006136:	681a      	ldr	r2, [r3, #0]
							pdMS_TO_TICKS(
 8006138:	4b22      	ldr	r3, [pc, #136]	; (80061c4 <StartMotorTask+0x180>)
 800613a:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800613e:	4619      	mov	r1, r3
 8006140:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <StartMotorTask+0x194>)
 8006142:	fb01 f303 	mul.w	r3, r1, r3
					osTimerStart(TahrikTimerHandle,
 8006146:	4925      	ldr	r1, [pc, #148]	; (80061dc <StartMotorTask+0x198>)
 8006148:	fba1 1303 	umull	r1, r3, r1, r3
 800614c:	099b      	lsrs	r3, r3, #6
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f018 f919 	bl	801e388 <osTimerStart>
									siracUydu.yerIstKomutu.motorTahrikSuresi
											* 1000));
				}
				motorTahrik(
						MOTOR_PWM_CALC(siracUydu.yerIstKomutu.motorTahrikGucu),
 8006156:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <StartMotorTask+0x180>)
 8006158:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800615c:	461a      	mov	r2, r3
 800615e:	4613      	mov	r3, r2
 8006160:	029b      	lsls	r3, r3, #10
 8006162:	4413      	add	r3, r2
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	4a19      	ldr	r2, [pc, #100]	; (80061cc <StartMotorTask+0x188>)
 8006168:	fb82 1203 	smull	r1, r2, r2, r3
 800616c:	1152      	asrs	r2, r2, #5
 800616e:	17db      	asrs	r3, r3, #31
 8006170:	1ad3      	subs	r3, r2, r3
				motorTahrik(
 8006172:	b29b      	uxth	r3, r3
 8006174:	f603 1392 	addw	r3, r3, #2450	; 0x992
 8006178:	b298      	uxth	r0, r3
						MOTOR_PWM_CALC(siracUydu.yerIstKomutu.motorTahrikGucu));
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <StartMotorTask+0x180>)
 800617c:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 8006180:	461a      	mov	r2, r3
 8006182:	4613      	mov	r3, r2
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	4413      	add	r3, r2
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	4a10      	ldr	r2, [pc, #64]	; (80061cc <StartMotorTask+0x188>)
 800618c:	fb82 1203 	smull	r1, r2, r2, r3
 8006190:	1152      	asrs	r2, r2, #5
 8006192:	17db      	asrs	r3, r3, #31
 8006194:	1ad3      	subs	r3, r2, r3
				motorTahrik(
 8006196:	b29b      	uxth	r3, r3
 8006198:	f603 1392 	addw	r3, r3, #2450	; 0x992
 800619c:	b29b      	uxth	r3, r3
 800619e:	4619      	mov	r1, r3
 80061a0:	f003 f9cc 	bl	800953c <motorTahrik>
			}
			break;
 80061a4:	e006      	b.n	80061b4 <StartMotorTask+0x170>
		case (DEVRE_DISI):
			motorTahrik(PWM_ARM, PWM_ARM);
 80061a6:	f640 01fc 	movw	r1, #2300	; 0x8fc
 80061aa:	f640 00fc 	movw	r0, #2300	; 0x8fc
 80061ae:	f003 f9c5 	bl	800953c <motorTahrik>
			break;
 80061b2:	e000      	b.n	80061b6 <StartMotorTask+0x172>
			break;
 80061b4:	bf00      	nop
		}
		osDelay(25);
 80061b6:	2019      	movs	r0, #25
 80061b8:	f018 f83a 	bl	801e230 <osDelay>
		if (siracUydu.uyduDurumu >= GY_INIS1) {
 80061bc:	e750      	b.n	8006060 <StartMotorTask+0x1c>
 80061be:	bf00      	nop
 80061c0:	24003bec 	.word	0x24003bec
 80061c4:	24000018 	.word	0x24000018
 80061c8:	42b40000 	.word	0x42b40000
 80061cc:	51eb851f 	.word	0x51eb851f
 80061d0:	240028d8 	.word	0x240028d8
 80061d4:	2400292e 	.word	0x2400292e
 80061d8:	000f4240 	.word	0x000f4240
 80061dc:	10624dd3 	.word	0x10624dd3

080061e0 <StartDataCom>:
 * @brief Function implementing the DataComTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDataCom */
void StartDataCom(void *argument) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDataCom */
	//uint16_t a = uxTaskGetStackHighWaterMark(NULL);
	/*
	 * STACK SIZE 1765
	 */
	memset(ESP_line, '\0', ESP32_MAX_LENGTH);
 80061e8:	2296      	movs	r2, #150	; 0x96
 80061ea:	2100      	movs	r1, #0
 80061ec:	485a      	ldr	r0, [pc, #360]	; (8006358 <StartDataCom+0x178>)
 80061ee:	f01b fe9f 	bl	8021f30 <memset>
	HAL_UART_Receive_IT(&huart3, &esp_rx_d, 1); //Enable UART INT for gps
 80061f2:	2201      	movs	r2, #1
 80061f4:	4959      	ldr	r1, [pc, #356]	; (800635c <StartDataCom+0x17c>)
 80061f6:	485a      	ldr	r0, [pc, #360]	; (8006360 <StartDataCom+0x180>)
 80061f8:	f011 fb0e 	bl	8017818 <HAL_UART_Receive_IT>
	/* Infinite loop */
	for (;;) {

		findFlightState();
 80061fc:	f000 fd5e 	bl	8006cbc <findFlightState>

		if (siracUydu.telemetri.GY_telemetriVeriDurumu
 8006200:	4b58      	ldr	r3, [pc, #352]	; (8006364 <StartDataCom+0x184>)
 8006202:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006206:	2b02      	cmp	r3, #2
 8006208:	d118      	bne.n	800623c <StartDataCom+0x5c>
				== TELEMETRI_VERISI_GEREKLI) {
			sendTelem();
 800620a:	f000 ff53 	bl	80070b4 <sendTelem>
			saveToSD();
 800620e:	f001 f973 	bl	80074f8 <saveToSD>
			savePacketNum();
 8006212:	f002 ff5f 	bl	80090d4 <savePacketNum>
			saveFlightState();
 8006216:	f002 ff27 	bl	8009068 <saveFlightState>
			siracUydu.telemetri.GY_telemetriVeriDurumu =
 800621a:	4b52      	ldr	r3, [pc, #328]	; (8006364 <StartDataCom+0x184>)
 800621c:	2203      	movs	r2, #3
 800621e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
					TELEMETRI_VERISI_GEREKLI_DEGIL;

			siracUydu.sensorVerisi.irtifHizVerisi.PrevAltitude_m =
					siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m;
 8006222:	4b50      	ldr	r3, [pc, #320]	; (8006364 <StartDataCom+0x184>)
 8006224:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
			siracUydu.sensorVerisi.irtifHizVerisi.PrevAltitude_m =
 8006228:	4a4e      	ldr	r2, [pc, #312]	; (8006364 <StartDataCom+0x184>)
 800622a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
			osTimerStart(TelemetriTimerHandle, pdMS_TO_TICKS(500));
 800622e:	4b4e      	ldr	r3, [pc, #312]	; (8006368 <StartDataCom+0x188>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006236:	4618      	mov	r0, r3
 8006238:	f018 f8a6 	bl	801e388 <osTimerStart>
		}
		if (CHECK_FLAG(uartFlag, UART_LORA)) {
 800623c:	4b4b      	ldr	r3, [pc, #300]	; (800636c <StartDataCom+0x18c>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d079      	beq.n	800633c <StartDataCom+0x15c>
			UART_decode_process(LORA_line, strlen((char*) LORA_line));
 8006248:	4849      	ldr	r0, [pc, #292]	; (8006370 <StartDataCom+0x190>)
 800624a:	f7fa f853 	bl	80002f4 <strlen>
 800624e:	4603      	mov	r3, r0
 8006250:	4619      	mov	r1, r3
 8006252:	4847      	ldr	r0, [pc, #284]	; (8006370 <StartDataCom+0x190>)
 8006254:	f7fe fe34 	bl	8004ec0 <UART_decode_process>
			memset(LORA_line, '\0', LORA_MAX_LENGTH);
 8006258:	221e      	movs	r2, #30
 800625a:	2100      	movs	r1, #0
 800625c:	4844      	ldr	r0, [pc, #272]	; (8006370 <StartDataCom+0x190>)
 800625e:	f01b fe67 	bl	8021f30 <memset>
			CLEAR_FLAG(uartFlag, UART_LORA);
 8006262:	4b42      	ldr	r3, [pc, #264]	; (800636c <StartDataCom+0x18c>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f023 0301 	bic.w	r3, r3, #1
 800626a:	b2da      	uxtb	r2, r3
 800626c:	4b3f      	ldr	r3, [pc, #252]	; (800636c <StartDataCom+0x18c>)
 800626e:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(LORA_UART, LORA_line, LORA_MAX_LENGTH);
 8006270:	221e      	movs	r2, #30
 8006272:	493f      	ldr	r1, [pc, #252]	; (8006370 <StartDataCom+0x190>)
 8006274:	483f      	ldr	r0, [pc, #252]	; (8006374 <StartDataCom+0x194>)
 8006276:	f014 f860 	bl	801a33a <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800627a:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <StartDataCom+0x198>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a3f      	ldr	r2, [pc, #252]	; (800637c <StartDataCom+0x19c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d04a      	beq.n	800631a <StartDataCom+0x13a>
 8006284:	4b3c      	ldr	r3, [pc, #240]	; (8006378 <StartDataCom+0x198>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a3d      	ldr	r2, [pc, #244]	; (8006380 <StartDataCom+0x1a0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d045      	beq.n	800631a <StartDataCom+0x13a>
 800628e:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <StartDataCom+0x198>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a3c      	ldr	r2, [pc, #240]	; (8006384 <StartDataCom+0x1a4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d040      	beq.n	800631a <StartDataCom+0x13a>
 8006298:	4b37      	ldr	r3, [pc, #220]	; (8006378 <StartDataCom+0x198>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3a      	ldr	r2, [pc, #232]	; (8006388 <StartDataCom+0x1a8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d03b      	beq.n	800631a <StartDataCom+0x13a>
 80062a2:	4b35      	ldr	r3, [pc, #212]	; (8006378 <StartDataCom+0x198>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a39      	ldr	r2, [pc, #228]	; (800638c <StartDataCom+0x1ac>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d036      	beq.n	800631a <StartDataCom+0x13a>
 80062ac:	4b32      	ldr	r3, [pc, #200]	; (8006378 <StartDataCom+0x198>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a37      	ldr	r2, [pc, #220]	; (8006390 <StartDataCom+0x1b0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d031      	beq.n	800631a <StartDataCom+0x13a>
 80062b6:	4b30      	ldr	r3, [pc, #192]	; (8006378 <StartDataCom+0x198>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a36      	ldr	r2, [pc, #216]	; (8006394 <StartDataCom+0x1b4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d02c      	beq.n	800631a <StartDataCom+0x13a>
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <StartDataCom+0x198>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a34      	ldr	r2, [pc, #208]	; (8006398 <StartDataCom+0x1b8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d027      	beq.n	800631a <StartDataCom+0x13a>
 80062ca:	4b2b      	ldr	r3, [pc, #172]	; (8006378 <StartDataCom+0x198>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a33      	ldr	r2, [pc, #204]	; (800639c <StartDataCom+0x1bc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <StartDataCom+0x13a>
 80062d4:	4b28      	ldr	r3, [pc, #160]	; (8006378 <StartDataCom+0x198>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a31      	ldr	r2, [pc, #196]	; (80063a0 <StartDataCom+0x1c0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01d      	beq.n	800631a <StartDataCom+0x13a>
 80062de:	4b26      	ldr	r3, [pc, #152]	; (8006378 <StartDataCom+0x198>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a30      	ldr	r2, [pc, #192]	; (80063a4 <StartDataCom+0x1c4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <StartDataCom+0x13a>
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <StartDataCom+0x198>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2e      	ldr	r2, [pc, #184]	; (80063a8 <StartDataCom+0x1c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <StartDataCom+0x13a>
 80062f2:	4b21      	ldr	r3, [pc, #132]	; (8006378 <StartDataCom+0x198>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <StartDataCom+0x1cc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <StartDataCom+0x13a>
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <StartDataCom+0x198>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2b      	ldr	r2, [pc, #172]	; (80063b0 <StartDataCom+0x1d0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <StartDataCom+0x13a>
 8006306:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <StartDataCom+0x198>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <StartDataCom+0x1d4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <StartDataCom+0x13a>
 8006310:	4b19      	ldr	r3, [pc, #100]	; (8006378 <StartDataCom+0x198>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a28      	ldr	r2, [pc, #160]	; (80063b8 <StartDataCom+0x1d8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d108      	bne.n	800632c <StartDataCom+0x14c>
 800631a:	4b17      	ldr	r3, [pc, #92]	; (8006378 <StartDataCom+0x198>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b15      	ldr	r3, [pc, #84]	; (8006378 <StartDataCom+0x198>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0208 	bic.w	r2, r2, #8
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e007      	b.n	800633c <StartDataCom+0x15c>
 800632c:	4b12      	ldr	r3, [pc, #72]	; (8006378 <StartDataCom+0x198>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b11      	ldr	r3, [pc, #68]	; (8006378 <StartDataCom+0x198>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0204 	bic.w	r2, r2, #4
 800633a:	601a      	str	r2, [r3, #0]
		}
		if (LORA_line[29] != '\0') {
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <StartDataCom+0x190>)
 800633e:	7f5b      	ldrb	r3, [r3, #29]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <StartDataCom+0x16e>
			memset(LORA_line, '\0', LORA_MAX_LENGTH);
 8006344:	221e      	movs	r2, #30
 8006346:	2100      	movs	r1, #0
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <StartDataCom+0x190>)
 800634a:	f01b fdf1 	bl	8021f30 <memset>
		}
		osDelay(25);
 800634e:	2019      	movs	r0, #25
 8006350:	f017 ff6e 	bl	801e230 <osDelay>
		findFlightState();
 8006354:	e752      	b.n	80061fc <StartDataCom+0x1c>
 8006356:	bf00      	nop
 8006358:	24002930 	.word	0x24002930
 800635c:	2400292d 	.word	0x2400292d
 8006360:	24003cc8 	.word	0x24003cc8
 8006364:	24000018 	.word	0x24000018
 8006368:	240028d0 	.word	0x240028d0
 800636c:	240029e7 	.word	0x240029e7
 8006370:	240029c8 	.word	0x240029c8
 8006374:	24003d58 	.word	0x24003d58
 8006378:	24003de8 	.word	0x24003de8
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8

080063bc <StartSensors>:
 * @param argument: Not used
 * @retval None
 */
#define ALT_IIR 80
/* USER CODE END Header_StartSensors */
void StartSensors(void *argument) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSensors */
	enableHardware();
 80063c4:	f000 fc0a 	bl	8006bdc <enableHardware>
	uint32_t clockNow, clockPrevious;

	MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 80063c8:	4a8e      	ldr	r2, [pc, #568]	; (8006604 <StartSensors+0x248>)
 80063ca:	2100      	movs	r1, #0
 80063cc:	488e      	ldr	r0, [pc, #568]	; (8006608 <StartSensors+0x24c>)
 80063ce:	f017 fe9c 	bl	801e10a <osThreadNew>
 80063d2:	4603      	mov	r3, r0
 80063d4:	4a8d      	ldr	r2, [pc, #564]	; (800660c <StartSensors+0x250>)
 80063d6:	6013      	str	r3, [r2, #0]
	DataComTaskHandle = osThreadNew(StartDataCom, NULL,
 80063d8:	4a8d      	ldr	r2, [pc, #564]	; (8006610 <StartSensors+0x254>)
 80063da:	2100      	movs	r1, #0
 80063dc:	488d      	ldr	r0, [pc, #564]	; (8006614 <StartSensors+0x258>)
 80063de:	f017 fe94 	bl	801e10a <osThreadNew>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4a8c      	ldr	r2, [pc, #560]	; (8006618 <StartSensors+0x25c>)
 80063e6:	6013      	str	r3, [r2, #0]
			&DataComTask_attributes);

	clockNow = xTaskGetTickCount();
 80063e8:	f019 fec2 	bl	8020170 <xTaskGetTickCount>
 80063ec:	6178      	str	r0, [r7, #20]

	float tempAlt_m = 0.0;
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	613b      	str	r3, [r7, #16]
	/*
	 * STACK SIZE 840
	 */
	/* Infinite loop */
	for (;;) {
		readAll(IMU_I2C, &siracUydu.sensorVerisi.imu);
 80063f4:	4989      	ldr	r1, [pc, #548]	; (800661c <StartSensors+0x260>)
 80063f6:	488a      	ldr	r0, [pc, #552]	; (8006620 <StartSensors+0x264>)
 80063f8:	f7fa fbee 	bl	8000bd8 <readAll>
		siracUydu.sensorVerisi.imu.axNEDmG = -siracUydu.sensorVerisi.imu.AccelY
 80063fc:	4b89      	ldr	r3, [pc, #548]	; (8006624 <StartSensors+0x268>)
 80063fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8006402:	eef1 7a67 	vneg.f32	s15, s15
				* 1000;
 8006406:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006628 <StartSensors+0x26c>
 800640a:	ee67 7a87 	vmul.f32	s15, s15, s14
		siracUydu.sensorVerisi.imu.axNEDmG = -siracUydu.sensorVerisi.imu.AccelY
 800640e:	4b85      	ldr	r3, [pc, #532]	; (8006624 <StartSensors+0x268>)
 8006410:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		siracUydu.sensorVerisi.imu.ayNEDmG = -siracUydu.sensorVerisi.imu.AccelX
 8006414:	4b83      	ldr	r3, [pc, #524]	; (8006624 <StartSensors+0x268>)
 8006416:	edd3 7a04 	vldr	s15, [r3, #16]
 800641a:	eef1 7a67 	vneg.f32	s15, s15
				* 1000;
 800641e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8006628 <StartSensors+0x26c>
 8006422:	ee67 7a87 	vmul.f32	s15, s15, s14
		siracUydu.sensorVerisi.imu.ayNEDmG = -siracUydu.sensorVerisi.imu.AccelX
 8006426:	4b7f      	ldr	r3, [pc, #508]	; (8006624 <StartSensors+0x268>)
 8006428:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		siracUydu.sensorVerisi.imu.azNEDmG = siracUydu.sensorVerisi.imu.AccelZ
 800642c:	4b7d      	ldr	r3, [pc, #500]	; (8006624 <StartSensors+0x268>)
 800642e:	edd3 7a06 	vldr	s15, [r3, #24]
				* 1000;
 8006432:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8006628 <StartSensors+0x26c>
 8006436:	ee67 7a87 	vmul.f32	s15, s15, s14
		siracUydu.sensorVerisi.imu.azNEDmG = siracUydu.sensorVerisi.imu.AccelZ
 800643a:	4b7a      	ldr	r3, [pc, #488]	; (8006624 <StartSensors+0x268>)
 800643c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		siracUydu.sensorVerisi.imu.gravityCompensatedAccelMg =
				imu_gravityCompensatedAccel(siracUydu.sensorVerisi.imu.axNEDmG,
 8006440:	4b78      	ldr	r3, [pc, #480]	; (8006624 <StartSensors+0x268>)
 8006442:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006446:	4b77      	ldr	r3, [pc, #476]	; (8006624 <StartSensors+0x268>)
 8006448:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800644c:	4b75      	ldr	r3, [pc, #468]	; (8006624 <StartSensors+0x268>)
 800644e:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8006452:	eeb0 1a66 	vmov.f32	s2, s13
 8006456:	eef0 0a47 	vmov.f32	s1, s14
 800645a:	eeb0 0a67 	vmov.f32	s0, s15
 800645e:	f7fd fa0f 	bl	8003880 <imu_gravityCompensatedAccel>
 8006462:	eef0 7a40 	vmov.f32	s15, s0
		siracUydu.sensorVerisi.imu.gravityCompensatedAccelMg =
 8006466:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <StartSensors+0x268>)
 8006468:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
						siracUydu.sensorVerisi.imu.ayNEDmG,
						siracUydu.sensorVerisi.imu.azNEDmG);

		ringbuf_addSample(siracUydu.sensorVerisi.imu.gravityCompensatedAccelMg,
 800646c:	4b6d      	ldr	r3, [pc, #436]	; (8006624 <StartSensors+0x268>)
 800646e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006472:	486e      	ldr	r0, [pc, #440]	; (800662c <StartSensors+0x270>)
 8006474:	eeb0 0a67 	vmov.f32	s0, s15
 8006478:	f7ff f950 	bl	800571c <ringbuf_addSample>
				&AccRingBuf);

		siracUydu.sensorVerisi.imu.zAccelAverage = ringbuf_averageNewestSamples(
 800647c:	496b      	ldr	r1, [pc, #428]	; (800662c <StartSensors+0x270>)
 800647e:	200a      	movs	r0, #10
 8006480:	f7ff f96c 	bl	800575c <ringbuf_averageNewestSamples>
 8006484:	eef0 7a40 	vmov.f32	s15, s0
 8006488:	4b66      	ldr	r3, [pc, #408]	; (8006624 <StartSensors+0x268>)
 800648a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
				10, &AccRingBuf);

		if (MS5611_SampleStateMachine(&siracUydu.sensorVerisi.baro)
 800648e:	4868      	ldr	r0, [pc, #416]	; (8006630 <StartSensors+0x274>)
 8006490:	f7ff f8d0 	bl	8005634 <MS5611_SampleStateMachine>
 8006494:	4603      	mov	r3, r0
 8006496:	2b02      	cmp	r3, #2
 8006498:	f040 8082 	bne.w	80065a0 <StartSensors+0x1e4>
				== MS5611_PRES_DATA_READY) {

			ringbuf_addSample(siracUydu.sensorVerisi.baro.Pres_hpa,
 800649c:	4b61      	ldr	r3, [pc, #388]	; (8006624 <StartSensors+0x268>)
 800649e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80064a2:	4864      	ldr	r0, [pc, #400]	; (8006634 <StartSensors+0x278>)
 80064a4:	eeb0 0a67 	vmov.f32	s0, s15
 80064a8:	f7ff f938 	bl	800571c <ringbuf_addSample>
					&BaroRingBuf);

			siracUydu.sensorVerisi.baro.avgPres_hpa =
					ringbuf_averageNewestSamples(12, &BaroRingBuf);
 80064ac:	4961      	ldr	r1, [pc, #388]	; (8006634 <StartSensors+0x278>)
 80064ae:	200c      	movs	r0, #12
 80064b0:	f7ff f954 	bl	800575c <ringbuf_averageNewestSamples>
 80064b4:	eef0 7a40 	vmov.f32	s15, s0
			siracUydu.sensorVerisi.baro.avgPres_hpa =
 80064b8:	4b5a      	ldr	r3, [pc, #360]	; (8006624 <StartSensors+0x268>)
 80064ba:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

			siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm = __getAlt(
 80064be:	4b59      	ldr	r3, [pc, #356]	; (8006624 <StartSensors+0x268>)
 80064c0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80064c4:	4b57      	ldr	r3, [pc, #348]	; (8006624 <StartSensors+0x268>)
 80064c6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80064ca:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8006638 <StartSensors+0x27c>
 80064ce:	eef0 0a47 	vmov.f32	s1, s14
 80064d2:	eeb0 0a67 	vmov.f32	s0, s15
 80064d6:	f7fe fe4b 	bl	8005170 <__getAlt>
 80064da:	eef0 7a40 	vmov.f32	s15, s0
					siracUydu.sensorVerisi.baro.avgPres_hpa,
					siracUydu.sensorVerisi.baro.Temp_C,
					ALTITUDE_REFERENCE_PRESSURE) * 100.0f;
 80064de:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800663c <StartSensors+0x280>
 80064e2:	ee67 7a87 	vmul.f32	s15, s15, s14
			siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm = __getAlt(
 80064e6:	4b4f      	ldr	r3, [pc, #316]	; (8006624 <StartSensors+0x268>)
 80064e8:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
			clockPrevious = clockNow;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	60fb      	str	r3, [r7, #12]
			clockNow = xTaskGetTickCount();
 80064f0:	f019 fe3e 	bl	8020170 <xTaskGetTickCount>
 80064f4:	6178      	str	r0, [r7, #20]
			siracUydu.sensorVerisi.dt = ((float) (clockNow - clockPrevious)
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ 1000.0f);
 8006504:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006628 <StartSensors+0x26c>
 8006508:	eec7 7a26 	vdiv.f32	s15, s14, s13
			siracUydu.sensorVerisi.dt = ((float) (clockNow - clockPrevious)
 800650c:	4b45      	ldr	r3, [pc, #276]	; (8006624 <StartSensors+0x268>)
 800650e:	edc3 7a57 	vstr	s15, [r3, #348]	; 0x15c

			kalmanFilter4d_predict(siracUydu.sensorVerisi.dt);
 8006512:	4b44      	ldr	r3, [pc, #272]	; (8006624 <StartSensors+0x268>)
 8006514:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 8006518:	eeb0 0a67 	vmov.f32	s0, s15
 800651c:	f7fd fada 	bl	8003ad4 <kalmanFilter4d_predict>
			kalmanFilter4d_update(
 8006520:	4b40      	ldr	r3, [pc, #256]	; (8006624 <StartSensors+0x268>)
 8006522:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8006526:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <StartSensors+0x268>)
 8006528:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800652c:	4844      	ldr	r0, [pc, #272]	; (8006640 <StartSensors+0x284>)
 800652e:	eef0 0a47 	vmov.f32	s1, s14
 8006532:	eeb0 0a67 	vmov.f32	s0, s15
 8006536:	f7fd fce3 	bl	8003f00 <kalmanFilter4d_update>
					siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm,
					siracUydu.sensorVerisi.imu.zAccelAverage,
					&siracUydu.sensorVerisi.irtifHizVerisi);

			siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m =
					(siracUydu.sensorVerisi.irtifHizVerisi.KFAltitudeCm
 800653a:	4b3a      	ldr	r3, [pc, #232]	; (8006624 <StartSensors+0x268>)
 800653c:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
							- siracUydu.sensorVerisi.irtifHizVerisi.GroundAltitude_cm)
 8006540:	4b38      	ldr	r3, [pc, #224]	; (8006624 <StartSensors+0x268>)
 8006542:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8006546:	ee37 7a67 	vsub.f32	s14, s14, s15
							/ 100.0f;
 800654a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800663c <StartSensors+0x280>
 800654e:	eec7 7a26 	vdiv.f32	s15, s14, s13
			siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m =
 8006552:	4b34      	ldr	r3, [pc, #208]	; (8006624 <StartSensors+0x268>)
 8006554:	edc3 7a4d 	vstr	s15, [r3, #308]	; 0x134

			siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m =
					(tempAlt_m * (float) ALT_IIR
 8006558:	edd7 7a04 	vldr	s15, [r7, #16]
 800655c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006644 <StartSensors+0x288>
 8006560:	ee27 7a87 	vmul.f32	s14, s15, s14
							+ siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006564:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <StartSensors+0x268>)
 8006566:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
									* (100.0f - (float) ALT_IIR)) / 100.0f;
 800656a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800656e:	ee67 7aa6 	vmul.f32	s15, s15, s13
							+ siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006572:	ee37 7a27 	vadd.f32	s14, s14, s15
									* (100.0f - (float) ALT_IIR)) / 100.0f;
 8006576:	eddf 6a31 	vldr	s13, [pc, #196]	; 800663c <StartSensors+0x280>
 800657a:	eec7 7a26 	vdiv.f32	s15, s14, s13
			siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m =
 800657e:	4b29      	ldr	r3, [pc, #164]	; (8006624 <StartSensors+0x268>)
 8006580:	edc3 7a4d 	vstr	s15, [r3, #308]	; 0x134
			tempAlt_m =
 8006584:	4b27      	ldr	r3, [pc, #156]	; (8006624 <StartSensors+0x268>)
 8006586:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800658a:	613b      	str	r3, [r7, #16]
					siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m;

			siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateMps =
					siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateCps
 800658c:	4b25      	ldr	r3, [pc, #148]	; (8006624 <StartSensors+0x268>)
 800658e:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
							/ 100.0f;
 8006592:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800663c <StartSensors+0x280>
 8006596:	eec7 7a26 	vdiv.f32	s15, s14, s13
			siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateMps =
 800659a:	4b22      	ldr	r3, [pc, #136]	; (8006624 <StartSensors+0x268>)
 800659c:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		}
		getBatVolt();
 80065a0:	f002 fe36 	bl	8009210 <getBatVolt>
		getUVSensor();
 80065a4:	f002 feac 	bl	8009300 <getUVSensor>
		if (esp_rx_d == '\n') {
 80065a8:	4b27      	ldr	r3, [pc, #156]	; (8006648 <StartSensors+0x28c>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b0a      	cmp	r3, #10
 80065ae:	d125      	bne.n	80065fc <StartSensors+0x240>
			UART_decode_process(ESP_line, strlen((char*) ESP_line));
 80065b0:	4826      	ldr	r0, [pc, #152]	; (800664c <StartSensors+0x290>)
 80065b2:	f7f9 fe9f 	bl	80002f4 <strlen>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4619      	mov	r1, r3
 80065ba:	4824      	ldr	r0, [pc, #144]	; (800664c <StartSensors+0x290>)
 80065bc:	f7fe fc80 	bl	8004ec0 <UART_decode_process>
			memset(ESP_line, '\0', ESP32_MAX_LENGTH);
 80065c0:	2296      	movs	r2, #150	; 0x96
 80065c2:	2100      	movs	r1, #0
 80065c4:	4821      	ldr	r0, [pc, #132]	; (800664c <StartSensors+0x290>)
 80065c6:	f01b fcb3 	bl	8021f30 <memset>
			CLEAR_FLAG(uartFlag, UART_ESP);
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <StartSensors+0x294>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f023 0302 	bic.w	r3, r3, #2
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <StartSensors+0x294>)
 80065d6:	701a      	strb	r2, [r3, #0]
			CLEAR_SENS_ERR(siracUydu.donanimDurumu, ESP32_ERROR);
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <StartSensors+0x268>)
 80065da:	885b      	ldrh	r3, [r3, #2]
 80065dc:	f023 0320 	bic.w	r3, r3, #32
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <StartSensors+0x268>)
 80065e4:	805a      	strh	r2, [r3, #2]
			esp_rx_i = 0;
 80065e6:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <StartSensors+0x298>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
			esp_rx_d = 0;
 80065ec:	4b16      	ldr	r3, [pc, #88]	; (8006648 <StartSensors+0x28c>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, &esp_rx_d, 1); //Receive GPS char on every interrupt
 80065f2:	2201      	movs	r2, #1
 80065f4:	4914      	ldr	r1, [pc, #80]	; (8006648 <StartSensors+0x28c>)
 80065f6:	4818      	ldr	r0, [pc, #96]	; (8006658 <StartSensors+0x29c>)
 80065f8:	f011 f90e 	bl	8017818 <HAL_UART_Receive_IT>
		}
		osDelay(25);
 80065fc:	2019      	movs	r0, #25
 80065fe:	f017 fe17 	bl	801e230 <osDelay>
		readAll(IMU_I2C, &siracUydu.sensorVerisi.imu);
 8006602:	e6f7      	b.n	80063f4 <StartSensors+0x38>
 8006604:	08027b4c 	.word	0x08027b4c
 8006608:	08006045 	.word	0x08006045
 800660c:	240028c4 	.word	0x240028c4
 8006610:	08027b70 	.word	0x08027b70
 8006614:	080061e1 	.word	0x080061e1
 8006618:	240028c8 	.word	0x240028c8
 800661c:	24000028 	.word	0x24000028
 8006620:	240028e0 	.word	0x240028e0
 8006624:	24000018 	.word	0x24000018
 8006628:	447a0000 	.word	0x447a0000
 800662c:	24003f2c 	.word	0x24003f2c
 8006630:	2400006c 	.word	0x2400006c
 8006634:	24003ed8 	.word	0x24003ed8
 8006638:	447d5000 	.word	0x447d5000
 800663c:	42c80000 	.word	0x42c80000
 8006640:	2400013c 	.word	0x2400013c
 8006644:	42a00000 	.word	0x42a00000
 8006648:	2400292d 	.word	0x2400292d
 800664c:	24002930 	.word	0x24002930
 8006650:	240029e7 	.word	0x240029e7
 8006654:	2400292c 	.word	0x2400292c
 8006658:	24003cc8 	.word	0x24003cc8

0800665c <TelemTimCall>:
	}
	/* USER CODE END StartSensors */
}

/* TelemTimCall function */
void TelemTimCall(void *argument) {
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TelemTimCall */
	siracUydu.telemetri.GY_telemetriVeriDurumu = TELEMETRI_VERISI_GEREKLI;
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <TelemTimCall+0x1c>)
 8006666:	2202      	movs	r2, #2
 8006668:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	/* USER CODE END TelemTimCall */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	24000018 	.word	0x24000018

0800667c <TimeoutTimerCall>:

/* TimeoutTimerCall function */
void TimeoutTimerCall(void *argument) {
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TimeoutTimerCall */
	SET_FLAG(timersFlag, (TimersFlag_typedef )argument);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <TimeoutTimerCall+0x24>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4313      	orrs	r3, r2
 800668e:	b2da      	uxtb	r2, r3
 8006690:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <TimeoutTimerCall+0x24>)
 8006692:	701a      	strb	r2, [r3, #0]
	/* USER CODE END TimeoutTimerCall */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	2400292e 	.word	0x2400292e

080066a4 <TahrikTimerCall>:

/* TahrikTimerCall function */
void TahrikTimerCall(void *argument) {
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TahrikTimerCall */
	SET_FLAG(timersFlag, motorTahrikTimeoutFlag);
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <TahrikTimerCall+0x28>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f043 0304 	orr.w	r3, r3, #4
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <TahrikTimerCall+0x28>)
 80066b8:	701a      	strb	r2, [r3, #0]
	siracUydu.motorKontrolDurumu = DEVRE_DISI;
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <TahrikTimerCall+0x2c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	711a      	strb	r2, [r3, #4]
	/* USER CODE END TahrikTimerCall */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	2400292e 	.word	0x2400292e
 80066d0:	24000018 	.word	0x24000018

080066d4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	; 0x30
 80066d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066da:	f107 031c 	add.w	r3, r7, #28
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	609a      	str	r2, [r3, #8]
 80066e6:	60da      	str	r2, [r3, #12]
 80066e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066ea:	4b5a      	ldr	r3, [pc, #360]	; (8006854 <MX_GPIO_Init+0x180>)
 80066ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <MX_GPIO_Init+0x180>)
 80066f2:	f043 0310 	orr.w	r3, r3, #16
 80066f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066fa:	4b56      	ldr	r3, [pc, #344]	; (8006854 <MX_GPIO_Init+0x180>)
 80066fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006708:	4b52      	ldr	r3, [pc, #328]	; (8006854 <MX_GPIO_Init+0x180>)
 800670a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800670e:	4a51      	ldr	r2, [pc, #324]	; (8006854 <MX_GPIO_Init+0x180>)
 8006710:	f043 0304 	orr.w	r3, r3, #4
 8006714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006718:	4b4e      	ldr	r3, [pc, #312]	; (8006854 <MX_GPIO_Init+0x180>)
 800671a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006726:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <MX_GPIO_Init+0x180>)
 8006728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800672c:	4a49      	ldr	r2, [pc, #292]	; (8006854 <MX_GPIO_Init+0x180>)
 800672e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006736:	4b47      	ldr	r3, [pc, #284]	; (8006854 <MX_GPIO_Init+0x180>)
 8006738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800673c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006744:	4b43      	ldr	r3, [pc, #268]	; (8006854 <MX_GPIO_Init+0x180>)
 8006746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800674a:	4a42      	ldr	r2, [pc, #264]	; (8006854 <MX_GPIO_Init+0x180>)
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006754:	4b3f      	ldr	r3, [pc, #252]	; (8006854 <MX_GPIO_Init+0x180>)
 8006756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006762:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <MX_GPIO_Init+0x180>)
 8006764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006768:	4a3a      	ldr	r2, [pc, #232]	; (8006854 <MX_GPIO_Init+0x180>)
 800676a:	f043 0302 	orr.w	r3, r3, #2
 800676e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006772:	4b38      	ldr	r3, [pc, #224]	; (8006854 <MX_GPIO_Init+0x180>)
 8006774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006780:	4b34      	ldr	r3, [pc, #208]	; (8006854 <MX_GPIO_Init+0x180>)
 8006782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006786:	4a33      	ldr	r2, [pc, #204]	; (8006854 <MX_GPIO_Init+0x180>)
 8006788:	f043 0308 	orr.w	r3, r3, #8
 800678c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006790:	4b30      	ldr	r3, [pc, #192]	; (8006854 <MX_GPIO_Init+0x180>)
 8006792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LORA_M1_Pin|LORA_M0_Pin, GPIO_PIN_RESET);
 800679e:	2200      	movs	r2, #0
 80067a0:	2160      	movs	r1, #96	; 0x60
 80067a2:	482d      	ldr	r0, [pc, #180]	; (8006858 <MX_GPIO_Init+0x184>)
 80067a4:	f008 fa32 	bl	800ec0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80067a8:	2200      	movs	r2, #0
 80067aa:	21c0      	movs	r1, #192	; 0xc0
 80067ac:	482b      	ldr	r0, [pc, #172]	; (800685c <MX_GPIO_Init+0x188>)
 80067ae:	f008 fa2d 	bl	800ec0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 80067b2:	2310      	movs	r3, #16
 80067b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 80067be:	f107 031c 	add.w	r3, r7, #28
 80067c2:	4619      	mov	r1, r3
 80067c4:	4824      	ldr	r0, [pc, #144]	; (8006858 <MX_GPIO_Init+0x184>)
 80067c6:	f008 f859 	bl	800e87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LORA_M1_Pin|LORA_M0_Pin;
 80067ca:	2360      	movs	r3, #96	; 0x60
 80067cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067ce:	2301      	movs	r3, #1
 80067d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80067d2:	2302      	movs	r3, #2
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067d6:	2300      	movs	r3, #0
 80067d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067da:	f107 031c 	add.w	r3, r7, #28
 80067de:	4619      	mov	r1, r3
 80067e0:	481d      	ldr	r0, [pc, #116]	; (8006858 <MX_GPIO_Init+0x184>)
 80067e2:	f008 f84b 	bl	800e87c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AYRILMA_BTN_Pin;
 80067e6:	2380      	movs	r3, #128	; 0x80
 80067e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067ea:	2300      	movs	r3, #0
 80067ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067ee:	2301      	movs	r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AYRILMA_BTN_GPIO_Port, &GPIO_InitStruct);
 80067f2:	f107 031c 	add.w	r3, r7, #28
 80067f6:	4619      	mov	r1, r3
 80067f8:	4819      	ldr	r0, [pc, #100]	; (8006860 <MX_GPIO_Init+0x18c>)
 80067fa:	f008 f83f 	bl	800e87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80067fe:	2303      	movs	r3, #3
 8006800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006802:	2300      	movs	r3, #0
 8006804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006806:	2302      	movs	r3, #2
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800680a:	f107 031c 	add.w	r3, r7, #28
 800680e:	4619      	mov	r1, r3
 8006810:	4812      	ldr	r0, [pc, #72]	; (800685c <MX_GPIO_Init+0x188>)
 8006812:	f008 f833 	bl	800e87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8006816:	2338      	movs	r3, #56	; 0x38
 8006818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800681a:	2303      	movs	r3, #3
 800681c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681e:	2300      	movs	r3, #0
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006822:	f107 031c 	add.w	r3, r7, #28
 8006826:	4619      	mov	r1, r3
 8006828:	480c      	ldr	r0, [pc, #48]	; (800685c <MX_GPIO_Init+0x188>)
 800682a:	f008 f827 	bl	800e87c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800682e:	23c0      	movs	r3, #192	; 0xc0
 8006830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006832:	2301      	movs	r3, #1
 8006834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006836:	2302      	movs	r3, #2
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800683a:	2300      	movs	r3, #0
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800683e:	f107 031c 	add.w	r3, r7, #28
 8006842:	4619      	mov	r1, r3
 8006844:	4805      	ldr	r0, [pc, #20]	; (800685c <MX_GPIO_Init+0x188>)
 8006846:	f008 f819 	bl	800e87c <HAL_GPIO_Init>

}
 800684a:	bf00      	nop
 800684c:	3730      	adds	r7, #48	; 0x30
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
 8006858:	58021000 	.word	0x58021000
 800685c:	58020c00 	.word	0x58020c00
 8006860:	58020000 	.word	0x58020000

08006864 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <MX_I2C2_Init+0x74>)
 800686a:	4a1c      	ldr	r2, [pc, #112]	; (80068dc <MX_I2C2_Init+0x78>)
 800686c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800686e:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <MX_I2C2_Init+0x74>)
 8006870:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <MX_I2C2_Init+0x7c>)
 8006872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006874:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <MX_I2C2_Init+0x74>)
 8006876:	2200      	movs	r2, #0
 8006878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800687a:	4b17      	ldr	r3, [pc, #92]	; (80068d8 <MX_I2C2_Init+0x74>)
 800687c:	2201      	movs	r2, #1
 800687e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006880:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <MX_I2C2_Init+0x74>)
 8006882:	2200      	movs	r2, #0
 8006884:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <MX_I2C2_Init+0x74>)
 8006888:	2200      	movs	r2, #0
 800688a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800688c:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <MX_I2C2_Init+0x74>)
 800688e:	2200      	movs	r2, #0
 8006890:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <MX_I2C2_Init+0x74>)
 8006894:	2200      	movs	r2, #0
 8006896:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006898:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <MX_I2C2_Init+0x74>)
 800689a:	2200      	movs	r2, #0
 800689c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800689e:	480e      	ldr	r0, [pc, #56]	; (80068d8 <MX_I2C2_Init+0x74>)
 80068a0:	f008 f9ce 	bl	800ec40 <HAL_I2C_Init>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80068aa:	f000 ffdb 	bl	8007864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80068ae:	2100      	movs	r1, #0
 80068b0:	4809      	ldr	r0, [pc, #36]	; (80068d8 <MX_I2C2_Init+0x74>)
 80068b2:	f009 f81d 	bl	800f8f0 <HAL_I2CEx_ConfigAnalogFilter>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80068bc:	f000 ffd2 	bl	8007864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80068c0:	2100      	movs	r1, #0
 80068c2:	4805      	ldr	r0, [pc, #20]	; (80068d8 <MX_I2C2_Init+0x74>)
 80068c4:	f009 f85f 	bl	800f986 <HAL_I2CEx_ConfigDigitalFilter>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80068ce:	f000 ffc9 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80068d2:	bf00      	nop
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	240028e0 	.word	0x240028e0
 80068dc:	40005800 	.word	0x40005800
 80068e0:	10707dbc 	.word	0x10707dbc

080068e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b0b8      	sub	sp, #224	; 0xe0
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	605a      	str	r2, [r3, #4]
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	60da      	str	r2, [r3, #12]
 80068fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068fc:	f107 0310 	add.w	r3, r7, #16
 8006900:	22bc      	movs	r2, #188	; 0xbc
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f01b fb13 	bl	8021f30 <memset>
  if(i2cHandle->Instance==I2C2)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <HAL_I2C_MspInit+0xc0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d143      	bne.n	800699c <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006914:	2308      	movs	r3, #8
 8006916:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8006918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800691c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	4618      	mov	r0, r3
 8006926:	f00a ff57 	bl	80117d8 <HAL_RCCEx_PeriphCLKConfig>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8006930:	f000 ff98 	bl	8007864 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006934:	4b1c      	ldr	r3, [pc, #112]	; (80069a8 <HAL_I2C_MspInit+0xc4>)
 8006936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800693a:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <HAL_I2C_MspInit+0xc4>)
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006944:	4b18      	ldr	r3, [pc, #96]	; (80069a8 <HAL_I2C_MspInit+0xc4>)
 8006946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006952:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800695a:	2312      	movs	r3, #18
 800695c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006966:	2300      	movs	r3, #0
 8006968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800696c:	2304      	movs	r3, #4
 800696e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006972:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006976:	4619      	mov	r1, r3
 8006978:	480c      	ldr	r0, [pc, #48]	; (80069ac <HAL_I2C_MspInit+0xc8>)
 800697a:	f007 ff7f 	bl	800e87c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <HAL_I2C_MspInit+0xc4>)
 8006980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006984:	4a08      	ldr	r2, [pc, #32]	; (80069a8 <HAL_I2C_MspInit+0xc4>)
 8006986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800698a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800698e:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <HAL_I2C_MspInit+0xc4>)
 8006990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800699c:	bf00      	nop
 800699e:	37e0      	adds	r7, #224	; 0xe0
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40005800 	.word	0x40005800
 80069a8:	58024400 	.word	0x58024400
 80069ac:	58020400 	.word	0x58020400

080069b0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 100);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	2364      	movs	r3, #100	; 0x64
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	4803      	ldr	r0, [pc, #12]	; (80069d4 <_write+0x24>)
 80069c6:	f010 fe91 	bl	80176ec <HAL_UART_Transmit>
	return len;
 80069ca:	687b      	ldr	r3, [r7, #4]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	24003c38 	.word	0x24003c38

080069d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]

	if (huart == &huart3) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <HAL_UART_RxCpltCallback+0x64>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d117      	bne.n	8006a1c <HAL_UART_RxCpltCallback+0x44>
		if (esp_rx_d != '\n' && esp_rx_i < sizeof(ESP_line)) //Read until end of senctence
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <HAL_UART_RxCpltCallback+0x68>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b0a      	cmp	r3, #10
 80069f2:	d00e      	beq.n	8006a12 <HAL_UART_RxCpltCallback+0x3a>
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <HAL_UART_RxCpltCallback+0x6c>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b96      	cmp	r3, #150	; 0x96
 80069fa:	d80a      	bhi.n	8006a12 <HAL_UART_RxCpltCallback+0x3a>
				{
			ESP_line[esp_rx_i++] = esp_rx_d;
 80069fc:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <HAL_UART_RxCpltCallback+0x6c>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	b2d1      	uxtb	r1, r2
 8006a04:	4a0f      	ldr	r2, [pc, #60]	; (8006a44 <HAL_UART_RxCpltCallback+0x6c>)
 8006a06:	7011      	strb	r1, [r2, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <HAL_UART_RxCpltCallback+0x68>)
 8006a0c:	7819      	ldrb	r1, [r3, #0]
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <HAL_UART_RxCpltCallback+0x70>)
 8006a10:	5499      	strb	r1, [r3, r2]
		} else {
			/*******Reset variables*********/
			//SET_FLAG(uartFlag, UART_ESP);
		}
		HAL_UART_Receive_IT(&huart3, &esp_rx_d, 1);	//Receive GPS char on every interrupt
 8006a12:	2201      	movs	r2, #1
 8006a14:	490a      	ldr	r1, [pc, #40]	; (8006a40 <HAL_UART_RxCpltCallback+0x68>)
 8006a16:	4809      	ldr	r0, [pc, #36]	; (8006a3c <HAL_UART_RxCpltCallback+0x64>)
 8006a18:	f010 fefe 	bl	8017818 <HAL_UART_Receive_IT>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_UART_RxCpltCallback+0x5a>
 8006a22:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <HAL_UART_RxCpltCallback+0x74>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy

}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	24003cc8 	.word	0x24003cc8
 8006a40:	2400292d 	.word	0x2400292d
 8006a44:	2400292c 	.word	0x2400292c
 8006a48:	24002930 	.word	0x24002930
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	807b      	strh	r3, [r7, #2]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]
	if (huart == LORA_UART) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a0e      	ldr	r2, [pc, #56]	; (8006a9c <HAL_UARTEx_RxEventCallback+0x4c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d109      	bne.n	8006a7c <HAL_UARTEx_RxEventCallback+0x2c>
		HAL_UART_DMAStop(LORA_UART);
 8006a68:	480c      	ldr	r0, [pc, #48]	; (8006a9c <HAL_UARTEx_RxEventCallback+0x4c>)
 8006a6a:	f010 ffbd 	bl	80179e8 <HAL_UART_DMAStop>
		SET_FLAG(uartFlag, UART_LORA);
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <HAL_UARTEx_RxEventCallback+0x50>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <HAL_UARTEx_RxEventCallback+0x50>)
 8006a7a:	701a      	strb	r2, [r3, #0]
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <HAL_UARTEx_RxEventCallback+0x42>
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <HAL_UARTEx_RxEventCallback+0x54>)
 8006a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	f3bf 8f6f 	isb	sy

}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	24003d58 	.word	0x24003d58
 8006aa0:	240029e7 	.word	0x240029e7
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <enableINT>:

void enableINT() {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(LORA_UART, LORA_line, LORA_MAX_LENGTH);
 8006aac:	221e      	movs	r2, #30
 8006aae:	4936      	ldr	r1, [pc, #216]	; (8006b88 <enableINT+0xe0>)
 8006ab0:	4836      	ldr	r0, [pc, #216]	; (8006b8c <enableINT+0xe4>)
 8006ab2:	f013 fc42 	bl	801a33a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8006ab6:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <enableINT+0xe8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a36      	ldr	r2, [pc, #216]	; (8006b94 <enableINT+0xec>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d04a      	beq.n	8006b56 <enableINT+0xae>
 8006ac0:	4b33      	ldr	r3, [pc, #204]	; (8006b90 <enableINT+0xe8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a34      	ldr	r2, [pc, #208]	; (8006b98 <enableINT+0xf0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d045      	beq.n	8006b56 <enableINT+0xae>
 8006aca:	4b31      	ldr	r3, [pc, #196]	; (8006b90 <enableINT+0xe8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a33      	ldr	r2, [pc, #204]	; (8006b9c <enableINT+0xf4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d040      	beq.n	8006b56 <enableINT+0xae>
 8006ad4:	4b2e      	ldr	r3, [pc, #184]	; (8006b90 <enableINT+0xe8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a31      	ldr	r2, [pc, #196]	; (8006ba0 <enableINT+0xf8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d03b      	beq.n	8006b56 <enableINT+0xae>
 8006ade:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <enableINT+0xe8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a30      	ldr	r2, [pc, #192]	; (8006ba4 <enableINT+0xfc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d036      	beq.n	8006b56 <enableINT+0xae>
 8006ae8:	4b29      	ldr	r3, [pc, #164]	; (8006b90 <enableINT+0xe8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a2e      	ldr	r2, [pc, #184]	; (8006ba8 <enableINT+0x100>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d031      	beq.n	8006b56 <enableINT+0xae>
 8006af2:	4b27      	ldr	r3, [pc, #156]	; (8006b90 <enableINT+0xe8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2d      	ldr	r2, [pc, #180]	; (8006bac <enableINT+0x104>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d02c      	beq.n	8006b56 <enableINT+0xae>
 8006afc:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <enableINT+0xe8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a2b      	ldr	r2, [pc, #172]	; (8006bb0 <enableINT+0x108>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d027      	beq.n	8006b56 <enableINT+0xae>
 8006b06:	4b22      	ldr	r3, [pc, #136]	; (8006b90 <enableINT+0xe8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2a      	ldr	r2, [pc, #168]	; (8006bb4 <enableINT+0x10c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d022      	beq.n	8006b56 <enableINT+0xae>
 8006b10:	4b1f      	ldr	r3, [pc, #124]	; (8006b90 <enableINT+0xe8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a28      	ldr	r2, [pc, #160]	; (8006bb8 <enableINT+0x110>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d01d      	beq.n	8006b56 <enableINT+0xae>
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	; (8006b90 <enableINT+0xe8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a27      	ldr	r2, [pc, #156]	; (8006bbc <enableINT+0x114>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d018      	beq.n	8006b56 <enableINT+0xae>
 8006b24:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <enableINT+0xe8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a25      	ldr	r2, [pc, #148]	; (8006bc0 <enableINT+0x118>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <enableINT+0xae>
 8006b2e:	4b18      	ldr	r3, [pc, #96]	; (8006b90 <enableINT+0xe8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a24      	ldr	r2, [pc, #144]	; (8006bc4 <enableINT+0x11c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <enableINT+0xae>
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <enableINT+0xe8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a22      	ldr	r2, [pc, #136]	; (8006bc8 <enableINT+0x120>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d009      	beq.n	8006b56 <enableINT+0xae>
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <enableINT+0xe8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a21      	ldr	r2, [pc, #132]	; (8006bcc <enableINT+0x124>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <enableINT+0xae>
 8006b4c:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <enableINT+0xe8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <enableINT+0x128>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <enableINT+0xc0>
 8006b56:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <enableINT+0xe8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <enableINT+0xe8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0208 	bic.w	r2, r2, #8
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e007      	b.n	8006b78 <enableINT+0xd0>
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <enableINT+0xe8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <enableINT+0xe8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0204 	bic.w	r2, r2, #4
 8006b76:	601a      	str	r2, [r3, #0]
	/*
	 HAL_UARTEx_ReceiveToIdle_DMA(ESP_UART, ESP_line, ESP32_MAX_LENGTH);
	 __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
	 */
	HAL_UART_Receive_IT(&huart3, &esp_rx_d, 1); //Enable UART INT for gps
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4916      	ldr	r1, [pc, #88]	; (8006bd4 <enableINT+0x12c>)
 8006b7c:	4816      	ldr	r0, [pc, #88]	; (8006bd8 <enableINT+0x130>)
 8006b7e:	f010 fe4b 	bl	8017818 <HAL_UART_Receive_IT>
}
 8006b82:	bf00      	nop
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	240029c8 	.word	0x240029c8
 8006b8c:	24003d58 	.word	0x24003d58
 8006b90:	24003de8 	.word	0x24003de8
 8006b94:	40020010 	.word	0x40020010
 8006b98:	40020028 	.word	0x40020028
 8006b9c:	40020040 	.word	0x40020040
 8006ba0:	40020058 	.word	0x40020058
 8006ba4:	40020070 	.word	0x40020070
 8006ba8:	40020088 	.word	0x40020088
 8006bac:	400200a0 	.word	0x400200a0
 8006bb0:	400200b8 	.word	0x400200b8
 8006bb4:	40020410 	.word	0x40020410
 8006bb8:	40020428 	.word	0x40020428
 8006bbc:	40020440 	.word	0x40020440
 8006bc0:	40020458 	.word	0x40020458
 8006bc4:	40020470 	.word	0x40020470
 8006bc8:	40020488 	.word	0x40020488
 8006bcc:	400204a0 	.word	0x400204a0
 8006bd0:	400204b8 	.word	0x400204b8
 8006bd4:	2400292d 	.word	0x2400292d
 8006bd8:	24003cc8 	.word	0x24003cc8

08006bdc <enableHardware>:

void enableHardware() {
 8006bdc:	b5b0      	push	{r4, r5, r7, lr}
 8006bde:	af00      	add	r7, sp, #0
	enableBaro();
 8006be0:	f002 f92a 	bl	8008e38 <enableBaro>
	enableFlash();
 8006be4:	f002 f9e8 	bl	8008fb8 <enableFlash>
//EraseFlash(1);
	enableSD();
 8006be8:	f002 fa96 	bl	8009118 <enableSD>
	getPacketNum();
 8006bec:	f002 fa50 	bl	8009090 <getPacketNum>
	getFlightState();
 8006bf0:	f002 fa42 	bl	8009078 <getFlightState>
	enableGPS();
 8006bf4:	f002 f988 	bl	8008f08 <enableGPS>
	enableIMU();
 8006bf8:	f002 f8fc 	bl	8008df4 <enableIMU>
	enableUV();
 8006bfc:	f002 f9a6 	bl	8008f4c <enableUV>
	enableINT();
 8006c00:	f7ff ff52 	bl	8006aa8 <enableINT>
	enableTelemetry();
 8006c04:	f002 faec 	bl	80091e0 <enableTelemetry>
	vbat_ADC_Calibrate();
 8006c08:	f002 fc0e 	bl	8009428 <vbat_ADC_Calibrate>
	kalmanFilter4d_configure(KF_ACCELBIAS_VARIANCE, KF_ADAPT,
 8006c0c:	4b26      	ldr	r3, [pc, #152]	; (8006ca8 <enableHardware+0xcc>)
 8006c0e:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8006c12:	ed9f 2a26 	vldr	s4, [pc, #152]	; 8006cac <enableHardware+0xd0>
 8006c16:	eddf 1a25 	vldr	s3, [pc, #148]	; 8006cac <enableHardware+0xd0>
 8006c1a:	eeb0 1a67 	vmov.f32	s2, s15
 8006c1e:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8006c22:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8006cb0 <enableHardware+0xd4>
 8006c26:	f7fc feb3 	bl	8003990 <kalmanFilter4d_configure>
			siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm, 0.0f, 0.0f);
//check ground station;

	siracUydu.ESP32Durumu.WifiSinyalGucu = 0;
 8006c2a:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <enableHardware+0xcc>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
	siracUydu.ESP32Durumu.videoPaketBilgisi.AktarilmaBilgisi =
 8006c32:	4b1d      	ldr	r3, [pc, #116]	; (8006ca8 <enableHardware+0xcc>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
	VIDEO_AKTARILAMADI;
	siracUydu.ESP32Durumu.videoPaketBilgisi.DosyaBoyutu = 0;
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <enableHardware+0xcc>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba

	siracUydu.sensorVerisi.kararAraliklari.BeklemedeYukseklik_max = 5;
 8006c42:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <enableHardware+0xcc>)
 8006c44:	2205      	movs	r2, #5
 8006c46:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

	siracUydu.sensorVerisi.kararAraliklari.InisHizi_max =
 8006c4a:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <enableHardware+0xcc>)
 8006c4c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8006c50:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	ASKIDAN_ONCE_INIS_HIZI_MAX;
	siracUydu.sensorVerisi.kararAraliklari.InisHizi_min =
 8006c54:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <enableHardware+0xcc>)
 8006c56:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8006c5a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	ASKIDAN_ONCE_INIS_HIZI_MIN;

	siracUydu.sensorVerisi.kararAraliklari.PilGerilimi_max = 4.2 * 3;
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <enableHardware+0xcc>)
 8006c60:	220c      	movs	r2, #12
 8006c62:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	siracUydu.sensorVerisi.kararAraliklari.PilGerilimi_min = 2.7 * 3;
 8006c66:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <enableHardware+0xcc>)
 8006c68:	2208      	movs	r2, #8
 8006c6a:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121

	siracUydu.telemetri.GY_telemetriVeriDurumu = TELEMETRI_VERISI_GEREKLI;
 8006c6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <enableHardware+0xcc>)
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	strcpy(siracUydu.telemetri.tasiyiciTelemetri.gps2,
 8006c76:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <enableHardware+0xd8>)
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <enableHardware+0xdc>)
 8006c7a:	4615      	mov	r5, r2
 8006c7c:	461c      	mov	r4, r3
 8006c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c80:	6028      	str	r0, [r5, #0]
 8006c82:	6069      	str	r1, [r5, #4]
 8006c84:	60aa      	str	r2, [r5, #8]
 8006c86:	60eb      	str	r3, [r5, #12]
 8006c88:	cc03      	ldmia	r4!, {r0, r1}
 8006c8a:	6128      	str	r0, [r5, #16]
 8006c8c:	6169      	str	r1, [r5, #20]
 8006c8e:	8823      	ldrh	r3, [r4, #0]
 8006c90:	832b      	strh	r3, [r5, #24]
			"0.00000000,0.00000000,0.0");
	siracUydu.telemetri.tasiyiciTelemetri.YerYukseklik = 0.0f;
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <enableHardware+0xcc>)
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	siracUydu.telemetri.tasiyiciTelemetri.detect = 0;
 8006c9c:	4b02      	ldr	r3, [pc, #8]	; (8006ca8 <enableHardware+0xcc>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
}
 8006ca4:	bf00      	nop
 8006ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ca8:	24000018 	.word	0x24000018
 8006cac:	00000000 	.word	0x00000000
 8006cb0:	3ba3d70a 	.word	0x3ba3d70a
 8006cb4:	24000291 	.word	0x24000291
 8006cb8:	080276ec 	.word	0x080276ec

08006cbc <findFlightState>:
	snprintf(buff, 10, "%d,%d", siracUydu.donanimDurumu,
			siracUydu.sensorVerisi.sensorVeriSagligi);
	strcat(siracUydu.telemetri.telemetriPaketi, buff);
}

void findFlightState() {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
	switch (siracUydu.uyduDurumu) {
 8006cc0:	4bb4      	ldr	r3, [pc, #720]	; (8006f94 <findFlightState+0x2d8>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	f200 81df 	bhi.w	800708a <findFlightState+0x3ce>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <findFlightState+0x18>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d49 	.word	0x08006d49
 8006cdc:	08006d85 	.word	0x08006d85
 8006ce0:	08006dbb 	.word	0x08006dbb
 8006ce4:	08006e91 	.word	0x08006e91
 8006ce8:	08006f11 	.word	0x08006f11
 8006cec:	08006f6d 	.word	0x08006f6d
 8006cf0:	08006ff1 	.word	0x08006ff1
 8006cf4:	0800701f 	.word	0x0800701f
	case BEKLEME:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "Bekleme");
 8006cf8:	4aa7      	ldr	r2, [pc, #668]	; (8006f98 <findFlightState+0x2dc>)
 8006cfa:	49a8      	ldr	r1, [pc, #672]	; (8006f9c <findFlightState+0x2e0>)
 8006cfc:	48a8      	ldr	r0, [pc, #672]	; (8006fa0 <findFlightState+0x2e4>)
 8006cfe:	f01c f989 	bl	8023014 <siprintf>
		if (siracUydu.ArmDurumu
 8006d02:	4ba4      	ldr	r3, [pc, #656]	; (8006f94 <findFlightState+0x2d8>)
 8006d04:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 8006d08:	461a      	mov	r2, r3
				& (siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006d0a:	4ba2      	ldr	r3, [pc, #648]	; (8006f94 <findFlightState+0x2d8>)
 8006d0c:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
						> YUKSELME_IRTIFA_TETIKLEME
						&& siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateMps
 8006d10:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1c:	dd0b      	ble.n	8006d36 <findFlightState+0x7a>
 8006d1e:	4b9d      	ldr	r3, [pc, #628]	; (8006f94 <findFlightState+0x2d8>)
 8006d20:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8006d24:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8006d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d30:	dd01      	ble.n	8006d36 <findFlightState+0x7a>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <findFlightState+0x7c>
 8006d36:	2300      	movs	r3, #0
				& (siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006d38:	4013      	ands	r3, r2
		if (siracUydu.ArmDurumu
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 819e 	beq.w	800707c <findFlightState+0x3c0>
								> YUKSELME_HIZ_TETIKLEME)) {
			siracUydu.uyduDurumu = YUKSELME;
 8006d40:	4b94      	ldr	r3, [pc, #592]	; (8006f94 <findFlightState+0x2d8>)
 8006d42:	2202      	movs	r2, #2
 8006d44:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006d46:	e199      	b.n	800707c <findFlightState+0x3c0>

	case YUKSELME:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "Yukselme");
 8006d48:	4a96      	ldr	r2, [pc, #600]	; (8006fa4 <findFlightState+0x2e8>)
 8006d4a:	4994      	ldr	r1, [pc, #592]	; (8006f9c <findFlightState+0x2e0>)
 8006d4c:	4894      	ldr	r0, [pc, #592]	; (8006fa0 <findFlightState+0x2e4>)
 8006d4e:	f01c f961 	bl	8023014 <siprintf>

		if (siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateMps < 0
 8006d52:	4b90      	ldr	r3, [pc, #576]	; (8006f94 <findFlightState+0x2d8>)
 8006d54:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8006d58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d60:	d400      	bmi.n	8006d64 <findFlightState+0xa8>
				&& siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
						< siracUydu.sensorVerisi.irtifHizVerisi.PrevAltitude_m) {
			siracUydu.uyduDurumu = MU_INIS;
		}

		break;
 8006d62:	e192      	b.n	800708a <findFlightState+0x3ce>
				&& siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006d64:	4b8b      	ldr	r3, [pc, #556]	; (8006f94 <findFlightState+0x2d8>)
 8006d66:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
						< siracUydu.sensorVerisi.irtifHizVerisi.PrevAltitude_m) {
 8006d6a:	4b8a      	ldr	r3, [pc, #552]	; (8006f94 <findFlightState+0x2d8>)
 8006d6c:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
				&& siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d78:	d400      	bmi.n	8006d7c <findFlightState+0xc0>
		break;
 8006d7a:	e186      	b.n	800708a <findFlightState+0x3ce>
			siracUydu.uyduDurumu = MU_INIS;
 8006d7c:	4b85      	ldr	r3, [pc, #532]	; (8006f94 <findFlightState+0x2d8>)
 8006d7e:	2203      	movs	r2, #3
 8006d80:	701a      	strb	r2, [r3, #0]
		break;
 8006d82:	e182      	b.n	800708a <findFlightState+0x3ce>

	case MU_INIS:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "MUinis");
 8006d84:	4a88      	ldr	r2, [pc, #544]	; (8006fa8 <findFlightState+0x2ec>)
 8006d86:	4985      	ldr	r1, [pc, #532]	; (8006f9c <findFlightState+0x2e0>)
 8006d88:	4885      	ldr	r0, [pc, #532]	; (8006fa0 <findFlightState+0x2e4>)
 8006d8a:	f01c f943 	bl	8023014 <siprintf>
		if (				siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m<AYRILMA_YUKSEKLIGI_MAX) {
 8006d8e:	4b81      	ldr	r3, [pc, #516]	; (8006f94 <findFlightState+0x2d8>)
 8006d90:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8006d94:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8006fac <findFlightState+0x2f0>
 8006d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da0:	d400      	bmi.n	8006da4 <findFlightState+0xe8>
			siracUydu.uyduDurumu = AYRILMA;
			CLEAR_FLAG(timersFlag, AyrilmaTimeoutFlag);
		}
		break;
 8006da2:	e172      	b.n	800708a <findFlightState+0x3ce>
			siracUydu.uyduDurumu = AYRILMA;
 8006da4:	4b7b      	ldr	r3, [pc, #492]	; (8006f94 <findFlightState+0x2d8>)
 8006da6:	2204      	movs	r2, #4
 8006da8:	701a      	strb	r2, [r3, #0]
			CLEAR_FLAG(timersFlag, AyrilmaTimeoutFlag);
 8006daa:	4b81      	ldr	r3, [pc, #516]	; (8006fb0 <findFlightState+0x2f4>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	4b7e      	ldr	r3, [pc, #504]	; (8006fb0 <findFlightState+0x2f4>)
 8006db6:	701a      	strb	r2, [r3, #0]
		break;
 8006db8:	e167      	b.n	800708a <findFlightState+0x3ce>

	case AYRILMA:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "Ayrilma");
 8006dba:	4a7e      	ldr	r2, [pc, #504]	; (8006fb4 <findFlightState+0x2f8>)
 8006dbc:	4977      	ldr	r1, [pc, #476]	; (8006f9c <findFlightState+0x2e0>)
 8006dbe:	4878      	ldr	r0, [pc, #480]	; (8006fa0 <findFlightState+0x2e4>)
 8006dc0:	f01c f928 	bl	8023014 <siprintf>
		servoTahrik(SERVO_KAPAT);
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	f002 fbcf 	bl	8009568 <servoTahrik>
		//startTimer
		if (!osTimerIsRunning(TimeoutTimerHandle)) {
 8006dca:	4b7b      	ldr	r3, [pc, #492]	; (8006fb8 <findFlightState+0x2fc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f017 fb3f 	bl	801e452 <osTimerIsRunning>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <findFlightState+0x132>
			selectedFlag = AyrilmaTimeoutFlag;
 8006dda:	4b78      	ldr	r3, [pc, #480]	; (8006fbc <findFlightState+0x300>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	701a      	strb	r2, [r3, #0]
			osTimerStart(TimeoutTimerHandle,
 8006de0:	4b75      	ldr	r3, [pc, #468]	; (8006fb8 <findFlightState+0x2fc>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f017 facd 	bl	801e388 <osTimerStart>
					pdMS_TO_TICKS(AYRILMA_SURESI_MAX_MS));
		}
		if (siracUydu.ayrilmaDurumu
 8006dee:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <findFlightState+0x2d8>)
 8006df0:	795b      	ldrb	r3, [r3, #5]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d017      	beq.n	8006e26 <findFlightState+0x16a>
				!= AYRILDI&& !CHECK_FLAG(timersFlag,AyrilmaTimeoutFlag)) //timer interrupt ile tetiklenecek
 8006df6:	4b6e      	ldr	r3, [pc, #440]	; (8006fb0 <findFlightState+0x2f4>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d111      	bne.n	8006e26 <findFlightState+0x16a>
				{
			if (HAL_GPIO_ReadPin(AYRILMA_BTN_GPIO_Port, AYRILMA_BTN_Pin)
 8006e02:	2180      	movs	r1, #128	; 0x80
 8006e04:	486e      	ldr	r0, [pc, #440]	; (8006fc0 <findFlightState+0x304>)
 8006e06:	f007 fee9 	bl	800ebdc <HAL_GPIO_ReadPin>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10a      	bne.n	8006e26 <findFlightState+0x16a>
					== GPIO_PIN_SET) {
				osTimerStop(TimeoutTimerHandle);
 8006e10:	4b69      	ldr	r3, [pc, #420]	; (8006fb8 <findFlightState+0x2fc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f017 fae5 	bl	801e3e4 <osTimerStop>
				siracUydu.ayrilmaDurumu = AYRILDI;
 8006e1a:	4b5e      	ldr	r3, [pc, #376]	; (8006f94 <findFlightState+0x2d8>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	715a      	strb	r2, [r3, #5]
				siracUydu.uyduDurumu = GY_INIS1;
 8006e20:	4b5c      	ldr	r3, [pc, #368]	; (8006f94 <findFlightState+0x2d8>)
 8006e22:	2205      	movs	r2, #5
 8006e24:	701a      	strb	r2, [r3, #0]
			}
		}
		if (CHECK_FLAG(timersFlag, AyrilmaTimeoutFlag)) {
 8006e26:	4b62      	ldr	r3, [pc, #392]	; (8006fb0 <findFlightState+0x2f4>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8126 	beq.w	8007080 <findFlightState+0x3c4>
			siracUydu.ayrilmaDurumu = MANUEL_AYRILMA_GEREKLI;
 8006e34:	4b57      	ldr	r3, [pc, #348]	; (8006f94 <findFlightState+0x2d8>)
 8006e36:	2202      	movs	r2, #2
 8006e38:	715a      	strb	r2, [r3, #5]
			servoTahrik(SERVO_KAPAT);
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	f002 fb94 	bl	8009568 <servoTahrik>
			_managedDelay(1000);
 8006e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e44:	f7fd fc16 	bl	8004674 <_managedDelay>
			servoTahrik(SERVO_AC);
 8006e48:	2000      	movs	r0, #0
 8006e4a:	f002 fb8d 	bl	8009568 <servoTahrik>
			CLEAR_FLAG(timersFlag, AyrilmaTimeoutFlag);
 8006e4e:	4b58      	ldr	r3, [pc, #352]	; (8006fb0 <findFlightState+0x2f4>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f023 0301 	bic.w	r3, r3, #1
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	4b55      	ldr	r3, [pc, #340]	; (8006fb0 <findFlightState+0x2f4>)
 8006e5a:	701a      	strb	r2, [r3, #0]
			_managedDelay(1000);
 8006e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e60:	f7fd fc08 	bl	8004674 <_managedDelay>
			if (HAL_GPIO_ReadPin(AYRILMA_BTN_GPIO_Port, AYRILMA_BTN_Pin)
 8006e64:	2180      	movs	r1, #128	; 0x80
 8006e66:	4856      	ldr	r0, [pc, #344]	; (8006fc0 <findFlightState+0x304>)
 8006e68:	f007 feb8 	bl	800ebdc <HAL_GPIO_ReadPin>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	f040 8106 	bne.w	8007080 <findFlightState+0x3c4>
					== GPIO_PIN_SET) {
				siracUydu.ayrilmaDurumu = AYRILDI;
 8006e74:	4b47      	ldr	r3, [pc, #284]	; (8006f94 <findFlightState+0x2d8>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	715a      	strb	r2, [r3, #5]
				siracUydu.uyduDurumu = GY_INIS1;
 8006e7a:	4b46      	ldr	r3, [pc, #280]	; (8006f94 <findFlightState+0x2d8>)
 8006e7c:	2205      	movs	r2, #5
 8006e7e:	701a      	strb	r2, [r3, #0]
				CLEAR_FLAG(timersFlag, AyrilmaTimeoutFlag);
 8006e80:	4b4b      	ldr	r3, [pc, #300]	; (8006fb0 <findFlightState+0x2f4>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b49      	ldr	r3, [pc, #292]	; (8006fb0 <findFlightState+0x2f4>)
 8006e8c:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006e8e:	e0f7      	b.n	8007080 <findFlightState+0x3c4>

	case GY_INIS1:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "GYinis");
 8006e90:	4a4c      	ldr	r2, [pc, #304]	; (8006fc4 <findFlightState+0x308>)
 8006e92:	4942      	ldr	r1, [pc, #264]	; (8006f9c <findFlightState+0x2e0>)
 8006e94:	4842      	ldr	r0, [pc, #264]	; (8006fa0 <findFlightState+0x2e4>)
 8006e96:	f01c f8bd 	bl	8023014 <siprintf>
		siracUydu.sensorVerisi.kararAraliklari.InisHizi_max =
 8006e9a:	4b3e      	ldr	r3, [pc, #248]	; (8006f94 <findFlightState+0x2d8>)
 8006e9c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8006ea0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
		ASKIDAN_ONCE_INIS_HIZI_MAX;
		siracUydu.sensorVerisi.kararAraliklari.InisHizi_min =
 8006ea4:	4b3b      	ldr	r3, [pc, #236]	; (8006f94 <findFlightState+0x2d8>)
 8006ea6:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8006eaa:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
		ASKIDAN_ONCE_INIS_HIZI_MIN;
		siracUydu.sensorVerisi.kararAraliklari.InisHizi =
 8006eae:	4b39      	ldr	r3, [pc, #228]	; (8006f94 <findFlightState+0x2d8>)
 8006eb0:	221e      	movs	r2, #30
 8006eb2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		ASKIDAN_ONCE_INIS_HIZI;
		HAL_Delay(1000);
 8006eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006eba:	f003 f88b 	bl	8009fd4 <HAL_Delay>
		siracUydu.motorKontrolDurumu = OTOMATIK_INIS;
 8006ebe:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <findFlightState+0x2d8>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	711a      	strb	r2, [r3, #4]

		if (siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006ec4:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <findFlightState+0x2d8>)
 8006ec6:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8006eca:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006fc8 <findFlightState+0x30c>
 8006ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed6:	d900      	bls.n	8006eda <findFlightState+0x21e>
			ASKIDA_INIS_HIZI_MAX;
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_min =
			ASKIDA_INIS_HIZI_MIN;
			siracUydu.sensorVerisi.kararAraliklari.InisHizi = ASKIDA_INIS_HIZI;
		}
		break;
 8006ed8:	e0d7      	b.n	800708a <findFlightState+0x3ce>
			siracUydu.uyduDurumu = ASKIDA;
 8006eda:	4b2e      	ldr	r3, [pc, #184]	; (8006f94 <findFlightState+0x2d8>)
 8006edc:	2206      	movs	r2, #6
 8006ede:	701a      	strb	r2, [r3, #0]
			CLEAR_FLAG(timersFlag, AskiTimeoutFlag);
 8006ee0:	4b33      	ldr	r3, [pc, #204]	; (8006fb0 <findFlightState+0x2f4>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	f023 0302 	bic.w	r3, r3, #2
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <findFlightState+0x2f4>)
 8006eec:	701a      	strb	r2, [r3, #0]
			selectedFlag = AskiTimeoutFlag;
 8006eee:	4b33      	ldr	r3, [pc, #204]	; (8006fbc <findFlightState+0x300>)
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	701a      	strb	r2, [r3, #0]
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_max =
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <findFlightState+0x2d8>)
 8006ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006efa:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_min =
 8006efe:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <findFlightState+0x2d8>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			siracUydu.sensorVerisi.kararAraliklari.InisHizi = ASKIDA_INIS_HIZI;
 8006f06:	4b23      	ldr	r3, [pc, #140]	; (8006f94 <findFlightState+0x2d8>)
 8006f08:	2222      	movs	r2, #34	; 0x22
 8006f0a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		break;
 8006f0e:	e0bc      	b.n	800708a <findFlightState+0x3ce>

	case ASKIDA:
		if (!osTimerIsRunning(
 8006f10:	4b29      	ldr	r3, [pc, #164]	; (8006fb8 <findFlightState+0x2fc>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f017 fa9c 	bl	801e452 <osTimerIsRunning>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10c      	bne.n	8006f3a <findFlightState+0x27e>
				TimeoutTimerHandle) && !CHECK_FLAG(timersFlag, AskiTimeoutFlag)) {
 8006f20:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <findFlightState+0x2f4>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <findFlightState+0x27e>
			osTimerStart(TimeoutTimerHandle, pdMS_TO_TICKS(10 * 1000));
 8006f2c:	4b22      	ldr	r3, [pc, #136]	; (8006fb8 <findFlightState+0x2fc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f242 7110 	movw	r1, #10000	; 0x2710
 8006f34:	4618      	mov	r0, r3
 8006f36:	f017 fa27 	bl	801e388 <osTimerStart>
		}
		if (CHECK_FLAG(timersFlag, AskiTimeoutFlag)) {
 8006f3a:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <findFlightState+0x2f4>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 809e 	beq.w	8007084 <findFlightState+0x3c8>
			siracUydu.uyduDurumu = GY_INIS2;
 8006f48:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <findFlightState+0x2d8>)
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	701a      	strb	r2, [r3, #0]
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_max =
 8006f4e:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <findFlightState+0x2d8>)
 8006f50:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006f54:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
			ASKIDAN_SONRA_INIS_HIZI_MAX;
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_min =
 8006f58:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <findFlightState+0x2d8>)
 8006f5a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8006f5e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			ASKIDAN_SONRA_INIS_HIZI_MIN;
			siracUydu.sensorVerisi.kararAraliklari.InisHizi =
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <findFlightState+0x2d8>)
 8006f64:	2223      	movs	r2, #35	; 0x23
 8006f66:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
			ASKIDAN_SONRA_INIS_HIZI;
		}
		break;
 8006f6a:	e08b      	b.n	8007084 <findFlightState+0x3c8>

	case GY_INIS2:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "GYinis");
 8006f6c:	4a15      	ldr	r2, [pc, #84]	; (8006fc4 <findFlightState+0x308>)
 8006f6e:	490b      	ldr	r1, [pc, #44]	; (8006f9c <findFlightState+0x2e0>)
 8006f70:	480b      	ldr	r0, [pc, #44]	; (8006fa0 <findFlightState+0x2e4>)
 8006f72:	f01c f84f 	bl	8023014 <siprintf>
		siracUydu.motorKontrolDurumu = OTOMATIK_INIS;
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <findFlightState+0x2d8>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	711a      	strb	r2, [r3, #4]
		if (siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <findFlightState+0x2d8>)
 8006f7e:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8006f82:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8e:	d41d      	bmi.n	8006fcc <findFlightState+0x310>
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_min =
			KONTROLLU_INIS_HIZI_MIN;
			siracUydu.sensorVerisi.kararAraliklari.InisHizi =
			KONTROLLU_INIS_HIZI;
		}
		break;
 8006f90:	e07b      	b.n	800708a <findFlightState+0x3ce>
 8006f92:	bf00      	nop
 8006f94:	24000018 	.word	0x24000018
 8006f98:	08027710 	.word	0x08027710
 8006f9c:	08027718 	.word	0x08027718
 8006fa0:	2400017a 	.word	0x2400017a
 8006fa4:	0802771c 	.word	0x0802771c
 8006fa8:	08027728 	.word	0x08027728
 8006fac:	43cf8000 	.word	0x43cf8000
 8006fb0:	2400292e 	.word	0x2400292e
 8006fb4:	08027730 	.word	0x08027730
 8006fb8:	240028d4 	.word	0x240028d4
 8006fbc:	240028c0 	.word	0x240028c0
 8006fc0:	58020000 	.word	0x58020000
 8006fc4:	08027738 	.word	0x08027738
 8006fc8:	43570000 	.word	0x43570000
			siracUydu.uyduDurumu = KONTROLLU_INIS;
 8006fcc:	4b30      	ldr	r3, [pc, #192]	; (8007090 <findFlightState+0x3d4>)
 8006fce:	2208      	movs	r2, #8
 8006fd0:	701a      	strb	r2, [r3, #0]
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_max =
 8006fd2:	4b2f      	ldr	r3, [pc, #188]	; (8007090 <findFlightState+0x3d4>)
 8006fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fd8:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
			siracUydu.sensorVerisi.kararAraliklari.InisHizi_min =
 8006fdc:	4b2c      	ldr	r3, [pc, #176]	; (8007090 <findFlightState+0x3d4>)
 8006fde:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8006fe2:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
			siracUydu.sensorVerisi.kararAraliklari.InisHizi =
 8006fe6:	4b2a      	ldr	r3, [pc, #168]	; (8007090 <findFlightState+0x3d4>)
 8006fe8:	2223      	movs	r2, #35	; 0x23
 8006fea:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		break;
 8006fee:	e04c      	b.n	800708a <findFlightState+0x3ce>

	case KONTROLLU_INIS:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "Kinis");
 8006ff0:	4a28      	ldr	r2, [pc, #160]	; (8007094 <findFlightState+0x3d8>)
 8006ff2:	4929      	ldr	r1, [pc, #164]	; (8007098 <findFlightState+0x3dc>)
 8006ff4:	4829      	ldr	r0, [pc, #164]	; (800709c <findFlightState+0x3e0>)
 8006ff6:	f01c f80d 	bl	8023014 <siprintf>
		if (siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m < 5) {
 8006ffa:	4b25      	ldr	r3, [pc, #148]	; (8007090 <findFlightState+0x3d4>)
 8006ffc:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8007000:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	d400      	bmi.n	8007010 <findFlightState+0x354>
			siracUydu.motorKontrolDurumu = DEVRE_DISI;
			siracUydu.uyduDurumu = KURTARMA;
		}
		break;
 800700e:	e03c      	b.n	800708a <findFlightState+0x3ce>
			siracUydu.motorKontrolDurumu = DEVRE_DISI;
 8007010:	4b1f      	ldr	r3, [pc, #124]	; (8007090 <findFlightState+0x3d4>)
 8007012:	2200      	movs	r2, #0
 8007014:	711a      	strb	r2, [r3, #4]
			siracUydu.uyduDurumu = KURTARMA;
 8007016:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <findFlightState+0x3d4>)
 8007018:	2209      	movs	r2, #9
 800701a:	701a      	strb	r2, [r3, #0]
		break;
 800701c:	e035      	b.n	800708a <findFlightState+0x3ce>

	case KURTARMA:
		sprintf(siracUydu.telemetri.uyduStatu, "%s", "Kurtarma");
 800701e:	4a20      	ldr	r2, [pc, #128]	; (80070a0 <findFlightState+0x3e4>)
 8007020:	491d      	ldr	r1, [pc, #116]	; (8007098 <findFlightState+0x3dc>)
 8007022:	481e      	ldr	r0, [pc, #120]	; (800709c <findFlightState+0x3e0>)
 8007024:	f01b fff6 	bl	8023014 <siprintf>
		selectedFlag = kurtarmaTelemetriTimeoutFlag;
 8007028:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <findFlightState+0x3e8>)
 800702a:	2208      	movs	r2, #8
 800702c:	701a      	strb	r2, [r3, #0]
		playRescue();
 800702e:	f001 fe0d 	bl	8008c4c <playRescue>
		if (!osTimerIsRunning(
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <findFlightState+0x3ec>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f017 fa0b 	bl	801e452 <osTimerIsRunning>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10c      	bne.n	800705c <findFlightState+0x3a0>
				TimeoutTimerHandle) && !CHECK_FLAG(timersFlag, kurtarmaTelemetriTimeoutFlag)) {
 8007042:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <findFlightState+0x3f0>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <findFlightState+0x3a0>
			osTimerStart(TimeoutTimerHandle, pdMS_TO_TICKS(60 * 1000));
 800704e:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <findFlightState+0x3ec>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f64e 2160 	movw	r1, #60000	; 0xea60
 8007056:	4618      	mov	r0, r3
 8007058:	f017 f996 	bl	801e388 <osTimerStart>
		}
		if (CHECK_FLAG(timersFlag, kurtarmaTelemetriTimeoutFlag)) {
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <findFlightState+0x3f0>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00f      	beq.n	8007088 <findFlightState+0x3cc>
			siracUydu.telemetri.GY_telemetriVeriDurumu =
 8007068:	4b09      	ldr	r3, [pc, #36]	; (8007090 <findFlightState+0x3d4>)
 800706a:	2203      	movs	r2, #3
 800706c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
					TELEMETRI_VERISI_GEREKLI_DEGIL;
			osTimerStop(TelemetriTimerHandle);
 8007070:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <findFlightState+0x3f4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f017 f9b5 	bl	801e3e4 <osTimerStop>
		}
		break;
 800707a:	e005      	b.n	8007088 <findFlightState+0x3cc>
		break;
 800707c:	bf00      	nop
 800707e:	e004      	b.n	800708a <findFlightState+0x3ce>
		break;
 8007080:	bf00      	nop
 8007082:	e002      	b.n	800708a <findFlightState+0x3ce>
		break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <findFlightState+0x3ce>
		break;
 8007088:	bf00      	nop
	}
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	24000018 	.word	0x24000018
 8007094:	08027740 	.word	0x08027740
 8007098:	08027718 	.word	0x08027718
 800709c:	2400017a 	.word	0x2400017a
 80070a0:	08027748 	.word	0x08027748
 80070a4:	240028c0 	.word	0x240028c0
 80070a8:	240028d4 	.word	0x240028d4
 80070ac:	2400292e 	.word	0x2400292e
 80070b0:	240028d0 	.word	0x240028d0

080070b4 <sendTelem>:

void sendTelem() {
 80070b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070b8:	ed2d 8b06 	vpush	{d8-d10}
 80070bc:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80070c0:	af26      	add	r7, sp, #152	; 0x98
	char telemPacket1[95] = { '\0' };
 80070c2:	2300      	movs	r3, #0
 80070c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80070cc:	225b      	movs	r2, #91	; 0x5b
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f01a ff2d 	bl	8021f30 <memset>
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80070d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070da:	2200      	movs	r2, #0
 80070dc:	4619      	mov	r1, r3
 80070de:	487c      	ldr	r0, [pc, #496]	; (80072d0 <sendTelem+0x21c>)
 80070e0:	f00c fe1c 	bl	8013d1c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80070e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80070e8:	2200      	movs	r2, #0
 80070ea:	4619      	mov	r1, r3
 80070ec:	4878      	ldr	r0, [pc, #480]	; (80072d0 <sendTelem+0x21c>)
 80070ee:	f00c fef9 	bl	8013ee4 <HAL_RTC_GetDate>
	char telemP[250] = { '\0' };
 80070f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80070f6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	3304      	adds	r3, #4
 8007100:	22f6      	movs	r2, #246	; 0xf6
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f01a ff13 	bl	8021f30 <memset>
	int siz = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	siz = snprintf((char*) telemPacket1, 90,
			"467710,%d,%02d/%02d/%d %02d:%02d:%02d",
			siracUydu.telemetri.paketNo, date.Date, date.Month, date.Year,
 8007110:	4b70      	ldr	r3, [pc, #448]	; (80072d4 <sendTelem+0x220>)
 8007112:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
	siz = snprintf((char*) telemPacket1, 90,
 8007116:	469c      	mov	ip, r3
			siracUydu.telemetri.paketNo, date.Date, date.Month, date.Year,
 8007118:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800711c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8007120:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
			time.Hours, time.Minutes, time.Seconds);
 8007124:	f897 0110 	ldrb.w	r0, [r7, #272]	; 0x110
	siz = snprintf((char*) telemPacket1, 90,
 8007128:	4604      	mov	r4, r0
			time.Hours, time.Minutes, time.Seconds);
 800712a:	f897 0111 	ldrb.w	r0, [r7, #273]	; 0x111
	siz = snprintf((char*) telemPacket1, 90,
 800712e:	4605      	mov	r5, r0
			time.Hours, time.Minutes, time.Seconds);
 8007130:	f897 0112 	ldrb.w	r0, [r7, #274]	; 0x112
	siz = snprintf((char*) telemPacket1, 90,
 8007134:	4606      	mov	r6, r0
 8007136:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800713a:	9605      	str	r6, [sp, #20]
 800713c:	9504      	str	r5, [sp, #16]
 800713e:	9403      	str	r4, [sp, #12]
 8007140:	9102      	str	r1, [sp, #8]
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4663      	mov	r3, ip
 8007148:	4a63      	ldr	r2, [pc, #396]	; (80072d8 <sendTelem+0x224>)
 800714a:	215a      	movs	r1, #90	; 0x5a
 800714c:	f01b ff2e 	bl	8022fac <sniprintf>
 8007150:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	LoRaE22_sendStruct((uint8_t*) telemPacket1, siz);
 8007154:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007158:	b29a      	uxth	r2, r3
 800715a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7fd faa3 	bl	80046ac <LoRaE22_sendStruct>

	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.2f",
			siracUydu.sensorVerisi.baro.avgPres_hpa * (float) 100.0f,
 8007166:	4b5b      	ldr	r3, [pc, #364]	; (80072d4 <sendTelem+0x220>)
 8007168:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800716c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80072dc <sendTelem+0x228>
 8007170:	ee67 7a87 	vmul.f32	s15, s15, s14
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.2f",
 8007174:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			siracUydu.telemetri.tasiyiciTelemetri.basinc,
 8007178:	4b56      	ldr	r3, [pc, #344]	; (80072d4 <sendTelem+0x220>)
 800717a:	edd3 6a9b 	vldr	s13, [r3, #620]	; 0x26c
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.2f",
 800717e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m,
 8007182:	4b54      	ldr	r3, [pc, #336]	; (80072d4 <sendTelem+0x220>)
 8007184:	edd3 5a4d 	vldr	s11, [r3, #308]	; 0x134
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.2f",
 8007188:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			siracUydu.telemetri.tasiyiciTelemetri.yukseklik);
 800718c:	4b51      	ldr	r3, [pc, #324]	; (80072d4 <sendTelem+0x220>)
 800718e:	edd3 4a9c 	vldr	s9, [r3, #624]	; 0x270
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.2f",
 8007192:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8007196:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800719a:	ed8d 4b06 	vstr	d4, [sp, #24]
 800719e:	ed8d 5b04 	vstr	d5, [sp, #16]
 80071a2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80071a6:	ed8d 7b00 	vstr	d7, [sp]
 80071aa:	4a4d      	ldr	r2, [pc, #308]	; (80072e0 <sendTelem+0x22c>)
 80071ac:	215a      	movs	r1, #90	; 0x5a
 80071ae:	4618      	mov	r0, r3
 80071b0:	f01b fefc 	bl	8022fac <sniprintf>
 80071b4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	LoRaE22_sendStruct((uint8_t*) telemPacket1, siz);
 80071b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80071c2:	4611      	mov	r1, r2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fd fa71 	bl	80046ac <LoRaE22_sendStruct>

	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.1f",
			fabs(
					siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 80071ca:	4b42      	ldr	r3, [pc, #264]	; (80072d4 <sendTelem+0x220>)
 80071cc:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
							- siracUydu.telemetri.tasiyiciTelemetri.yukseklik),
 80071d0:	4b40      	ldr	r3, [pc, #256]	; (80072d4 <sendTelem+0x220>)
 80071d2:	edd3 7a9c 	vldr	s15, [r3, #624]	; 0x270
 80071d6:	ee77 7a67 	vsub.f32	s15, s14, s15
			fabs(
 80071da:	eef0 7ae7 	vabs.f32	s15, s15
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.1f",
 80071de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateMps,
 80071e2:	4b3c      	ldr	r3, [pc, #240]	; (80072d4 <sendTelem+0x220>)
 80071e4:	edd3 6a55 	vldr	s13, [r3, #340]	; 0x154
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.1f",
 80071e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			siracUydu.sensorVerisi.baro.Temp_C, siracUydu.PilGerilimi);
 80071ec:	4b39      	ldr	r3, [pc, #228]	; (80072d4 <sendTelem+0x220>)
 80071ee:	edd3 5a19 	vldr	s11, [r3, #100]	; 0x64
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.1f",
 80071f2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			siracUydu.sensorVerisi.baro.Temp_C, siracUydu.PilGerilimi);
 80071f6:	4b37      	ldr	r3, [pc, #220]	; (80072d4 <sendTelem+0x220>)
 80071f8:	edd3 4a02 	vldr	s9, [r3, #8]
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%.1f",
 80071fc:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8007200:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007204:	ed8d 4b06 	vstr	d4, [sp, #24]
 8007208:	ed8d 5b04 	vstr	d5, [sp, #16]
 800720c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007210:	ed8d 7b00 	vstr	d7, [sp]
 8007214:	4a33      	ldr	r2, [pc, #204]	; (80072e4 <sendTelem+0x230>)
 8007216:	215a      	movs	r1, #90	; 0x5a
 8007218:	4618      	mov	r0, r3
 800721a:	f01b fec7 	bl	8022fac <sniprintf>
 800721e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	LoRaE22_sendStruct((uint8_t*) telemPacket1, siz);
 8007222:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007226:	b29a      	uxth	r2, r3
 8007228:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd fa3c 	bl	80046ac <LoRaE22_sendStruct>

	siz = snprintf((char*) telemPacket1, 90, ",%.8f,%.8f,%.2f",
 8007234:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <sendTelem+0x220>)
 8007236:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800723a:	4926      	ldr	r1, [pc, #152]	; (80072d4 <sendTelem+0x220>)
 800723c:	e9d1 011c 	ldrd	r0, r1, [r1, #112]	; 0x70
 8007240:	4c24      	ldr	r4, [pc, #144]	; (80072d4 <sendTelem+0x220>)
 8007242:	e9d4 451e 	ldrd	r4, r5, [r4, #120]	; 0x78
 8007246:	f507 7692 	add.w	r6, r7, #292	; 0x124
 800724a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800724e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007252:	e9cd 2300 	strd	r2, r3, [sp]
 8007256:	4a24      	ldr	r2, [pc, #144]	; (80072e8 <sendTelem+0x234>)
 8007258:	215a      	movs	r1, #90	; 0x5a
 800725a:	4630      	mov	r0, r6
 800725c:	f01b fea6 	bl	8022fac <sniprintf>
 8007260:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
			siracUydu.sensorVerisi.gps.latitude,
			siracUydu.sensorVerisi.gps.longitude,
			siracUydu.sensorVerisi.gps.altitude);
	LoRaE22_sendStruct((uint8_t*) telemPacket1, siz);
 8007264:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007268:	b29a      	uxth	r2, r3
 800726a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800726e:	4611      	mov	r1, r2
 8007270:	4618      	mov	r0, r3
 8007272:	f7fd fa1b 	bl	80046ac <LoRaE22_sendStruct>

	siz = snprintf((char*) telemPacket1, 90, ",%s,%s",
 8007276:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <sendTelem+0x238>)
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <sendTelem+0x23c>)
 8007280:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <sendTelem+0x240>)
 8007282:	215a      	movs	r1, #90	; 0x5a
 8007284:	f01b fe92 	bl	8022fac <sniprintf>
 8007288:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
			siracUydu.telemetri.tasiyiciTelemetri.gps2,
			siracUydu.telemetri.uyduStatu);
	LoRaE22_sendStruct((uint8_t*) telemPacket1, siz);
 800728c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007290:	b29a      	uxth	r2, r3
 8007292:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007296:	4611      	mov	r1, r2
 8007298:	4618      	mov	r0, r3
 800729a:	f7fd fa07 	bl	80046ac <LoRaE22_sendStruct>

	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%d,%s,",
			siracUydu.sensorVerisi.imu.pitch, siracUydu.sensorVerisi.imu.roll,
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <sendTelem+0x220>)
 80072a0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%d,%s,",
 80072a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			siracUydu.sensorVerisi.imu.pitch, siracUydu.sensorVerisi.imu.roll,
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <sendTelem+0x220>)
 80072aa:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%d,%s,",
 80072ae:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			siracUydu.sensorVerisi.imu.yaw, siracUydu.telemetri.donusSayisi,
 80072b2:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <sendTelem+0x220>)
 80072b4:	edd3 5a0f 	vldr	s11, [r3, #60]	; 0x3c
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%d,%s,",
 80072b8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <sendTelem+0x220>)
 80072be:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
			siracUydu.ESP32Durumu.videoPaketBilgisi.AktarilmaBilgisi ?
 80072c2:	4a04      	ldr	r2, [pc, #16]	; (80072d4 <sendTelem+0x220>)
 80072c4:	f892 22b8 	ldrb.w	r2, [r2, #696]	; 0x2b8
	siz = snprintf((char*) telemPacket1, 90, ",%.2f,%.2f,%.2f,%d,%s,",
 80072c8:	2a00      	cmp	r2, #0
 80072ca:	d017      	beq.n	80072fc <sendTelem+0x248>
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <sendTelem+0x244>)
 80072ce:	e016      	b.n	80072fe <sendTelem+0x24a>
 80072d0:	24003a64 	.word	0x24003a64
 80072d4:	24000018 	.word	0x24000018
 80072d8:	08027754 	.word	0x08027754
 80072dc:	42c80000 	.word	0x42c80000
 80072e0:	0802777c 	.word	0x0802777c
 80072e4:	08027794 	.word	0x08027794
 80072e8:	080277ac 	.word	0x080277ac
 80072ec:	2400017a 	.word	0x2400017a
 80072f0:	24000291 	.word	0x24000291
 80072f4:	080277bc 	.word	0x080277bc
 80072f8:	080277c4 	.word	0x080277c4
 80072fc:	4a74      	ldr	r2, [pc, #464]	; (80074d0 <sendTelem+0x41c>)
 80072fe:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8007302:	9207      	str	r2, [sp, #28]
 8007304:	9306      	str	r3, [sp, #24]
 8007306:	ed8d 5b04 	vstr	d5, [sp, #16]
 800730a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800730e:	ed8d 7b00 	vstr	d7, [sp]
 8007312:	4a70      	ldr	r2, [pc, #448]	; (80074d4 <sendTelem+0x420>)
 8007314:	215a      	movs	r1, #90	; 0x5a
 8007316:	f01b fe49 	bl	8022fac <sniprintf>
 800731a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
					"EVET" : "HAYIR");
	LoRaE22_sendStruct((uint8_t*) telemPacket1, siz);
 800731e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007322:	b29a      	uxth	r2, r3
 8007324:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007328:	4611      	mov	r1, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f7fd f9be 	bl	80046ac <LoRaE22_sendStruct>

	siz = snprintf((char*) telemPacket1, 90, "%.2f,%d,%d,%d,%d\n",
			siracUydu.sensorVerisi.UV_sensor,
 8007330:	4b69      	ldr	r3, [pc, #420]	; (80074d8 <sendTelem+0x424>)
 8007332:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
	siz = snprintf((char*) telemPacket1, 90, "%.2f,%d,%d,%d,%d\n",
 8007336:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			siracUydu.ESP32Durumu.WifiSinyalGucu, siracUydu.ArmDurumu,
 800733a:	4b67      	ldr	r3, [pc, #412]	; (80074d8 <sendTelem+0x424>)
 800733c:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
	siz = snprintf((char*) telemPacket1, 90, "%.2f,%d,%d,%d,%d\n",
 8007340:	461a      	mov	r2, r3
			siracUydu.ESP32Durumu.WifiSinyalGucu, siracUydu.ArmDurumu,
 8007342:	4b65      	ldr	r3, [pc, #404]	; (80074d8 <sendTelem+0x424>)
 8007344:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
	siz = snprintf((char*) telemPacket1, 90, "%.2f,%d,%d,%d,%d\n",
 8007348:	4619      	mov	r1, r3
			siracUydu.donanimDurumu, siracUydu.ayrilmaDurumu);
 800734a:	4b63      	ldr	r3, [pc, #396]	; (80074d8 <sendTelem+0x424>)
 800734c:	885b      	ldrh	r3, [r3, #2]
	siz = snprintf((char*) telemPacket1, 90, "%.2f,%d,%d,%d,%d\n",
 800734e:	4618      	mov	r0, r3
			siracUydu.donanimDurumu, siracUydu.ayrilmaDurumu);
 8007350:	4b61      	ldr	r3, [pc, #388]	; (80074d8 <sendTelem+0x424>)
 8007352:	795b      	ldrb	r3, [r3, #5]
	siz = snprintf((char*) telemPacket1, 90, "%.2f,%d,%d,%d,%d\n",
 8007354:	461c      	mov	r4, r3
 8007356:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800735a:	9405      	str	r4, [sp, #20]
 800735c:	9004      	str	r0, [sp, #16]
 800735e:	9103      	str	r1, [sp, #12]
 8007360:	9202      	str	r2, [sp, #8]
 8007362:	ed8d 7b00 	vstr	d7, [sp]
 8007366:	4a5d      	ldr	r2, [pc, #372]	; (80074dc <sendTelem+0x428>)
 8007368:	215a      	movs	r1, #90	; 0x5a
 800736a:	4618      	mov	r0, r3
 800736c:	f01b fe1e 	bl	8022fac <sniprintf>
 8007370:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	LoRaE22_sendStruct((uint8_t*) telemPacket1, siz);
 8007374:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007378:	b29a      	uxth	r2, r3
 800737a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd f993 	bl	80046ac <LoRaE22_sendStruct>

	sprintf(siracUydu.telemetri.telemetriPaketi,
			"467710,%d,%02d/%02d/%d %02d:%02d:%02d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.1f,%.8f,%.8f,%.2f,%s,%s,%.2f,%.2f,%.2f,%d,%s\n",
			siracUydu.telemetri.paketNo, date.Date, date.Month, date.Year,
 8007386:	4b54      	ldr	r3, [pc, #336]	; (80074d8 <sendTelem+0x424>)
 8007388:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
	sprintf(siracUydu.telemetri.telemetriPaketi,
 800738c:	469c      	mov	ip, r3
			siracUydu.telemetri.paketNo, date.Date, date.Month, date.Year,
 800738e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
	sprintf(siracUydu.telemetri.telemetriPaketi,
 8007392:	469e      	mov	lr, r3
			siracUydu.telemetri.paketNo, date.Date, date.Month, date.Year,
 8007394:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
	sprintf(siracUydu.telemetri.telemetriPaketi,
 8007398:	461e      	mov	r6, r3
			siracUydu.telemetri.paketNo, date.Date, date.Month, date.Year,
 800739a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
	sprintf(siracUydu.telemetri.telemetriPaketi,
 800739e:	60fb      	str	r3, [r7, #12]
			time.Hours, time.Minutes, time.Seconds,
 80073a0:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073a4:	60bb      	str	r3, [r7, #8]
			time.Hours, time.Minutes, time.Seconds,
 80073a6:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073aa:	607b      	str	r3, [r7, #4]
			time.Hours, time.Minutes, time.Seconds,
 80073ac:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073b0:	603b      	str	r3, [r7, #0]
			siracUydu.sensorVerisi.baro.avgPres_hpa * (float) 100.0f,
 80073b2:	4b49      	ldr	r3, [pc, #292]	; (80074d8 <sendTelem+0x424>)
 80073b4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80073b8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80074e0 <sendTelem+0x42c>
 80073bc:	ee67 7a87 	vmul.f32	s15, s15, s14
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			siracUydu.telemetri.tasiyiciTelemetri.basinc,
 80073c4:	4b44      	ldr	r3, [pc, #272]	; (80074d8 <sendTelem+0x424>)
 80073c6:	edd3 6a9b 	vldr	s13, [r3, #620]	; 0x26c
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073ca:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m,
 80073ce:	4b42      	ldr	r3, [pc, #264]	; (80074d8 <sendTelem+0x424>)
 80073d0:	edd3 5a4d 	vldr	s11, [r3, #308]	; 0x134
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073d4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			siracUydu.telemetri.tasiyiciTelemetri.yukseklik,
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <sendTelem+0x424>)
 80073da:	edd3 4a9c 	vldr	s9, [r3, #624]	; 0x270
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073de:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			fabs(
					siracUydu.sensorVerisi.irtifHizVerisi.RelativeAltitude_m
 80073e2:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <sendTelem+0x424>)
 80073e4:	ed93 3a4d 	vldr	s6, [r3, #308]	; 0x134
							- siracUydu.telemetri.tasiyiciTelemetri.yukseklik),
 80073e8:	4b3b      	ldr	r3, [pc, #236]	; (80074d8 <sendTelem+0x424>)
 80073ea:	edd3 3a9c 	vldr	s7, [r3, #624]	; 0x270
 80073ee:	ee73 3a63 	vsub.f32	s7, s6, s7
			fabs(
 80073f2:	eef0 3ae3 	vabs.f32	s7, s7
	sprintf(siracUydu.telemetri.telemetriPaketi,
 80073f6:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			siracUydu.sensorVerisi.irtifHizVerisi.KFClimbrateMps,
 80073fa:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <sendTelem+0x424>)
 80073fc:	edd3 2a55 	vldr	s5, [r3, #340]	; 0x154
	sprintf(siracUydu.telemetri.telemetriPaketi,
 8007400:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
			siracUydu.sensorVerisi.baro.Temp_C, siracUydu.PilGerilimi,
 8007404:	4b34      	ldr	r3, [pc, #208]	; (80074d8 <sendTelem+0x424>)
 8007406:	edd3 1a19 	vldr	s3, [r3, #100]	; 0x64
	sprintf(siracUydu.telemetri.telemetriPaketi,
 800740a:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
			siracUydu.sensorVerisi.baro.Temp_C, siracUydu.PilGerilimi,
 800740e:	4b32      	ldr	r3, [pc, #200]	; (80074d8 <sendTelem+0x424>)
 8007410:	edd3 0a02 	vldr	s1, [r3, #8]
	sprintf(siracUydu.telemetri.telemetriPaketi,
 8007414:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8007418:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <sendTelem+0x424>)
 800741a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <sendTelem+0x424>)
 8007420:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	; 0x70
 8007424:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <sendTelem+0x424>)
 8007426:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	; 0x78
			siracUydu.sensorVerisi.gps.latitude,
			siracUydu.sensorVerisi.gps.longitude,
			siracUydu.sensorVerisi.gps.altitude,
			siracUydu.telemetri.tasiyiciTelemetri.gps2,
			siracUydu.telemetri.uyduStatu, siracUydu.sensorVerisi.imu.pitch,
 800742a:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <sendTelem+0x424>)
 800742c:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
	sprintf(siracUydu.telemetri.telemetriPaketi,
 8007430:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
			siracUydu.sensorVerisi.imu.roll, siracUydu.sensorVerisi.imu.yaw,
 8007434:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <sendTelem+0x424>)
 8007436:	ed93 9a0e 	vldr	s18, [r3, #56]	; 0x38
	sprintf(siracUydu.telemetri.telemetriPaketi,
 800743a:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
			siracUydu.sensorVerisi.imu.roll, siracUydu.sensorVerisi.imu.yaw,
 800743e:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <sendTelem+0x424>)
 8007440:	ed93 aa0f 	vldr	s20, [r3, #60]	; 0x3c
	sprintf(siracUydu.telemetri.telemetriPaketi,
 8007444:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 8007448:	4b23      	ldr	r3, [pc, #140]	; (80074d8 <sendTelem+0x424>)
 800744a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			siracUydu.telemetri.donusSayisi,
			siracUydu.ESP32Durumu.videoPaketBilgisi.AktarilmaBilgisi ?
 800744e:	4b22      	ldr	r3, [pc, #136]	; (80074d8 <sendTelem+0x424>)
 8007450:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
	sprintf(siracUydu.telemetri.telemetriPaketi,
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <sendTelem+0x3a8>
 8007458:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <sendTelem+0x430>)
 800745a:	e000      	b.n	800745e <sendTelem+0x3aa>
 800745c:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <sendTelem+0x41c>)
 800745e:	9325      	str	r3, [sp, #148]	; 0x94
 8007460:	9224      	str	r2, [sp, #144]	; 0x90
 8007462:	ed8d ab22 	vstr	d10, [sp, #136]	; 0x88
 8007466:	ed8d 9b20 	vstr	d9, [sp, #128]	; 0x80
 800746a:	ed8d 8b1e 	vstr	d8, [sp, #120]	; 0x78
 800746e:	4b1e      	ldr	r3, [pc, #120]	; (80074e8 <sendTelem+0x434>)
 8007470:	931d      	str	r3, [sp, #116]	; 0x74
 8007472:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <sendTelem+0x438>)
 8007474:	931c      	str	r3, [sp, #112]	; 0x70
 8007476:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 800747a:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 800747e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8007482:	ed8d 0b14 	vstr	d0, [sp, #80]	; 0x50
 8007486:	ed8d 1b12 	vstr	d1, [sp, #72]	; 0x48
 800748a:	ed8d 2b10 	vstr	d2, [sp, #64]	; 0x40
 800748e:	ed8d 3b0e 	vstr	d3, [sp, #56]	; 0x38
 8007492:	ed8d 4b0c 	vstr	d4, [sp, #48]	; 0x30
 8007496:	ed8d 5b0a 	vstr	d5, [sp, #40]	; 0x28
 800749a:	ed8d 6b08 	vstr	d6, [sp, #32]
 800749e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	9302      	str	r3, [sp, #8]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	9600      	str	r6, [sp, #0]
 80074b4:	4673      	mov	r3, lr
 80074b6:	4662      	mov	r2, ip
 80074b8:	490d      	ldr	r1, [pc, #52]	; (80074f0 <sendTelem+0x43c>)
 80074ba:	480e      	ldr	r0, [pc, #56]	; (80074f4 <sendTelem+0x440>)
 80074bc:	f01b fdaa 	bl	8023014 <siprintf>
					"EVET" : "HAYIR");
	return;
 80074c0:	bf00      	nop
}
 80074c2:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 80074c6:	46bd      	mov	sp, r7
 80074c8:	ecbd 8b06 	vpop	{d8-d10}
 80074cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d0:	080277cc 	.word	0x080277cc
 80074d4:	080277d4 	.word	0x080277d4
 80074d8:	24000018 	.word	0x24000018
 80074dc:	080277ec 	.word	0x080277ec
 80074e0:	42c80000 	.word	0x42c80000
 80074e4:	080277c4 	.word	0x080277c4
 80074e8:	2400017a 	.word	0x2400017a
 80074ec:	24000291 	.word	0x24000291
 80074f0:	08027800 	.word	0x08027800
 80074f4:	24000188 	.word	0x24000188

080074f8 <saveToSD>:
uint8_t ilkAcilma = 1;
void saveToSD() {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
	uint32_t byteswritten;
	f_open(&fileSD, FILE_NAME, FA_OPEN_APPEND | FA_WRITE);
 80074fe:	2232      	movs	r2, #50	; 0x32
 8007500:	4912      	ldr	r1, [pc, #72]	; (800754c <saveToSD+0x54>)
 8007502:	4813      	ldr	r0, [pc, #76]	; (8007550 <saveToSD+0x58>)
 8007504:	f015 ff5a 	bl	801d3bc <f_open>
	if (ilkAcilma) {
 8007508:	4b12      	ldr	r3, [pc, #72]	; (8007554 <saveToSD+0x5c>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00d      	beq.n	800752c <saveToSD+0x34>
		char *a =
 8007510:	4b11      	ldr	r3, [pc, #68]	; (8007558 <saveToSD+0x60>)
 8007512:	607b      	str	r3, [r7, #4]
				"Takim no,Paket no,Gonderim saati,Basinc1,Basinc2,Yukseklik1,Yukseklik2,Irtifa farki,Inis hizi,Sicaklik,Pil gerilimi,GPS1 Latitude,GPS1 Longitude,GPS1 Altitude,GPS2 Latitude,GPS2 Longitude,GPS2 Altitude,Uydu statusu,Pitch,Roll,Yaw,Donus sayisi,Video aktarimi\n";
		f_write(&fileSD, a, strlen(a), (void*) &byteswritten);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7f8 feed 	bl	80002f4 <strlen>
 800751a:	4602      	mov	r2, r0
 800751c:	463b      	mov	r3, r7
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	480b      	ldr	r0, [pc, #44]	; (8007550 <saveToSD+0x58>)
 8007522:	f016 f91e 	bl	801d762 <f_write>
		ilkAcilma = 0;
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <saveToSD+0x5c>)
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]
	}
	f_write(&fileSD, siracUydu.telemetri.telemetriPaketi,
 800752c:	480b      	ldr	r0, [pc, #44]	; (800755c <saveToSD+0x64>)
 800752e:	f7f8 fee1 	bl	80002f4 <strlen>
 8007532:	4602      	mov	r2, r0
 8007534:	463b      	mov	r3, r7
 8007536:	4909      	ldr	r1, [pc, #36]	; (800755c <saveToSD+0x64>)
 8007538:	4805      	ldr	r0, [pc, #20]	; (8007550 <saveToSD+0x58>)
 800753a:	f016 f912 	bl	801d762 <f_write>
			strlen((char*) siracUydu.telemetri.telemetriPaketi),
			(void*) &byteswritten);
	f_close(&fileSD);
 800753e:	4804      	ldr	r0, [pc, #16]	; (8007550 <saveToSD+0x58>)
 8007540:	f016 fb5b 	bl	801dbfa <f_close>
	return;
 8007544:	bf00      	nop
}
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	0802787c 	.word	0x0802787c
 8007550:	240029e8 	.word	0x240029e8
 8007554:	240002d8 	.word	0x240002d8
 8007558:	08027884 	.word	0x08027884
 800755c:	24000188 	.word	0x24000188

08007560 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8007564:	f000 f940 	bl	80077e8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007568:	4b27      	ldr	r3, [pc, #156]	; (8007608 <main+0xa8>)
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11b      	bne.n	80075ac <main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007574:	f3bf 8f4f 	dsb	sy
}
 8007578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800757a:	f3bf 8f6f 	isb	sy
}
 800757e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <main+0xa8>)
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007588:	f3bf 8f4f 	dsb	sy
}
 800758c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800758e:	f3bf 8f6f 	isb	sy
}
 8007592:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007594:	4b1c      	ldr	r3, [pc, #112]	; (8007608 <main+0xa8>)
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <main+0xa8>)
 800759a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80075a0:	f3bf 8f4f 	dsb	sy
}
 80075a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80075a6:	f3bf 8f6f 	isb	sy
}
 80075aa:	e000      	b.n	80075ae <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80075ac:	bf00      	nop
	SCB_EnableICache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals , Initializes the Flash interface and the Systick. */
	HAL_Init();
 80075ae:	f002 fcb5 	bl	8009f1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80075b2:	f000 f82b 	bl	800760c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80075b6:	f000 f8e5 	bl	8007784 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80075ba:	f7ff f88b 	bl	80066d4 <MX_GPIO_Init>
	MX_DMA_Init();
 80075be:	f7fe fa59 	bl	8005a74 <MX_DMA_Init>
	MX_ADC3_Init();
 80075c2:	f7fe f96f 	bl	80058a4 <MX_ADC3_Init>
	MX_I2C2_Init();
 80075c6:	f7ff f94d 	bl	8006864 <MX_I2C2_Init>
	MX_QUADSPI_Init();
 80075ca:	f000 f951 	bl	8007870 <MX_QUADSPI_Init>
	MX_RTC_Init();
 80075ce:	f000 fa4b 	bl	8007a68 <MX_RTC_Init>
	MX_SDMMC1_SD_Init();
 80075d2:	f000 faa1 	bl	8007b18 <MX_SDMMC1_SD_Init>
	MX_TIM1_Init();
 80075d6:	f000 fd3f 	bl	8008058 <MX_TIM1_Init>
	MX_TIM2_Init();
 80075da:	f000 fdf5 	bl	80081c8 <MX_TIM2_Init>
	MX_TIM3_Init();
 80075de:	f000 fe69 	bl	80082b4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80075e2:	f001 f80b 	bl	80085fc <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80075e6:	f001 f857 	bl	8008698 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 80075ea:	f001 f8a1 	bl	8008730 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80075ee:	f013 fd19 	bl	801b024 <MX_FATFS_Init>
	MX_ADC2_Init();
 80075f2:	f7fe f8ef 	bl	80057d4 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	playStartSystem();
 80075f6:	f001 fa8f 	bl	8008b18 <playStartSystem>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 80075fa:	f016 fd05 	bl	801e008 <osKernelInitialize>
	MX_FREERTOS_Init();
 80075fe:	f7fe fcb5 	bl	8005f6c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8007602:	f016 fd47 	bl	801e094 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8007606:	e7fe      	b.n	8007606 <main+0xa6>
 8007608:	e000ed00 	.word	0xe000ed00

0800760c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b09e      	sub	sp, #120	; 0x78
 8007610:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007616:	224c      	movs	r2, #76	; 0x4c
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f01a fc88 	bl	8021f30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007620:	f107 030c 	add.w	r3, r7, #12
 8007624:	2220      	movs	r2, #32
 8007626:	2100      	movs	r1, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f01a fc81 	bl	8021f30 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800762e:	2002      	movs	r0, #2
 8007630:	f008 fa1c 	bl	800fa6c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]
 8007638:	4b4f      	ldr	r3, [pc, #316]	; (8007778 <SystemClock_Config+0x16c>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4a4e      	ldr	r2, [pc, #312]	; (8007778 <SystemClock_Config+0x16c>)
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007644:	4b4c      	ldr	r3, [pc, #304]	; (8007778 <SystemClock_Config+0x16c>)
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	60bb      	str	r3, [r7, #8]
 800764e:	4b4b      	ldr	r3, [pc, #300]	; (800777c <SystemClock_Config+0x170>)
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	4a4a      	ldr	r2, [pc, #296]	; (800777c <SystemClock_Config+0x170>)
 8007654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007658:	6193      	str	r3, [r2, #24]
 800765a:	4b48      	ldr	r3, [pc, #288]	; (800777c <SystemClock_Config+0x170>)
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007662:	60bb      	str	r3, [r7, #8]
 8007664:	68bb      	ldr	r3, [r7, #8]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8007666:	bf00      	nop
 8007668:	4b44      	ldr	r3, [pc, #272]	; (800777c <SystemClock_Config+0x170>)
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007674:	d1f8      	bne.n	8007668 <SystemClock_Config+0x5c>
	}

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8007676:	4b42      	ldr	r3, [pc, #264]	; (8007780 <SystemClock_Config+0x174>)
 8007678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800767c:	4a40      	ldr	r2, [pc, #256]	; (8007780 <SystemClock_Config+0x174>)
 800767e:	f043 0302 	orr.w	r3, r3, #2
 8007682:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007686:	4b3e      	ldr	r3, [pc, #248]	; (8007780 <SystemClock_Config+0x174>)
 8007688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	607b      	str	r3, [r7, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007694:	2300      	movs	r3, #0
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	4b38      	ldr	r3, [pc, #224]	; (800777c <SystemClock_Config+0x170>)
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	4a37      	ldr	r2, [pc, #220]	; (800777c <SystemClock_Config+0x170>)
 800769e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076a2:	6193      	str	r3, [r2, #24]
 80076a4:	4b35      	ldr	r3, [pc, #212]	; (800777c <SystemClock_Config+0x170>)
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4b32      	ldr	r3, [pc, #200]	; (8007778 <SystemClock_Config+0x16c>)
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	4a31      	ldr	r2, [pc, #196]	; (8007778 <SystemClock_Config+0x16c>)
 80076b4:	f043 0301 	orr.w	r3, r3, #1
 80076b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076ba:	4b2f      	ldr	r3, [pc, #188]	; (8007778 <SystemClock_Config+0x16c>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80076c6:	bf00      	nop
 80076c8:	4b2c      	ldr	r3, [pc, #176]	; (800777c <SystemClock_Config+0x170>)
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d4:	d1f8      	bne.n	80076c8 <SystemClock_Config+0xbc>
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <SystemClock_Config+0x174>)
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	4a28      	ldr	r2, [pc, #160]	; (8007780 <SystemClock_Config+0x174>)
 80076e0:	f043 0302 	orr.w	r3, r3, #2
 80076e4:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80076e6:	230b      	movs	r3, #11
 80076e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80076ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80076f0:	2301      	movs	r3, #1
 80076f2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80076f4:	2340      	movs	r3, #64	; 0x40
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80076f8:	2301      	movs	r3, #1
 80076fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076fc:	2302      	movs	r3, #2
 80076fe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007700:	2302      	movs	r3, #2
 8007702:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 2;
 8007704:	2302      	movs	r3, #2
 8007706:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 72;
 8007708:	2348      	movs	r3, #72	; 0x48
 800770a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 800770c:	2302      	movs	r3, #2
 800770e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8007710:	2306      	movs	r3, #6
 8007712:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLR = 2;
 8007714:	2302      	movs	r3, #2
 8007716:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007718:	230c      	movs	r3, #12
 800771a:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800771c:	2300      	movs	r3, #0
 800771e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007728:	4618      	mov	r0, r3
 800772a:	f009 f859 	bl	80107e0 <HAL_RCC_OscConfig>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <SystemClock_Config+0x12c>
		Error_Handler();
 8007734:	f000 f896 	bl	8007864 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007738:	233f      	movs	r3, #63	; 0x3f
 800773a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800773c:	2303      	movs	r3, #3
 800773e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007744:	2308      	movs	r3, #8
 8007746:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007756:	2340      	movs	r3, #64	; 0x40
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800775a:	f107 030c 	add.w	r3, r7, #12
 800775e:	2103      	movs	r1, #3
 8007760:	4618      	mov	r0, r3
 8007762:	f009 fc6b 	bl	801103c <HAL_RCC_ClockConfig>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <SystemClock_Config+0x164>
		Error_Handler();
 800776c:	f000 f87a 	bl	8007864 <Error_Handler>
	}
}
 8007770:	bf00      	nop
 8007772:	3778      	adds	r7, #120	; 0x78
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	58000400 	.word	0x58000400
 800777c:	58024800 	.word	0x58024800
 8007780:	58024400 	.word	0x58024400

08007784 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b0b0      	sub	sp, #192	; 0xc0
 8007788:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	22bc      	movs	r2, #188	; 0xbc
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f01a fbcd 	bl	8021f30 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <PeriphCommonClock_Config+0x60>)
 8007798:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_SDMMC | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART6;
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 800779a:	2302      	movs	r3, #2
 800779c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 800779e:	230c      	movs	r3, #12
 80077a0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 80077a2:	2304      	movs	r3, #4
 80077a4:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80077a6:	2302      	movs	r3, #2
 80077a8:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80077aa:	2302      	movs	r3, #2
 80077ac:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80077ae:	23c0      	movs	r3, #192	; 0xc0
 80077b0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80077b2:	2320      	movs	r3, #32
 80077b4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80077ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80077be:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 80077c0:	2308      	movs	r3, #8
 80077c2:	67fb      	str	r3, [r7, #124]	; 0x7c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80077ca:	1d3b      	adds	r3, r7, #4
 80077cc:	4618      	mov	r0, r3
 80077ce:	f00a f803 	bl	80117d8 <HAL_RCCEx_PeriphCLKConfig>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <PeriphCommonClock_Config+0x58>
		Error_Handler();
 80077d8:	f000 f844 	bl	8007864 <Error_Handler>
	}
}
 80077dc:	bf00      	nop
 80077de:	37c0      	adds	r7, #192	; 0xc0
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	00090001 	.word	0x00090001

080077e8 <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80077ee:	463b      	mov	r3, r7
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	605a      	str	r2, [r3, #4]
 80077f6:	609a      	str	r2, [r3, #8]
 80077f8:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80077fa:	f004 f97b 	bl	800baf4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80077fe:	2301      	movs	r3, #1
 8007800:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007802:	2300      	movs	r3, #0
 8007804:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 800780a:	230b      	movs	r3, #11
 800780c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 800780e:	2300      	movs	r3, #0
 8007810:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007812:	2300      	movs	r3, #0
 8007814:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007816:	2300      	movs	r3, #0
 8007818:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800781a:	2300      	movs	r3, #0
 800781c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800781e:	2300      	movs	r3, #0
 8007820:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007822:	2300      	movs	r3, #0
 8007824:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800782a:	463b      	mov	r3, r7
 800782c:	4618      	mov	r0, r3
 800782e:	f004 f999 	bl	800bb64 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007832:	2004      	movs	r0, #4
 8007834:	f004 f976 	bl	800bb24 <HAL_MPU_Enable>

}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM8) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a04      	ldr	r2, [pc, #16]	; (8007860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d101      	bne.n	8007856 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8007852:	f002 fb9f 	bl	8009f94 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	40010400 	.word	0x40010400

08007864 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007868:	b672      	cpsid	i
}
 800786a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800786c:	e7fe      	b.n	800786c <Error_Handler+0x8>
	...

08007870 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 8007876:	4a13      	ldr	r2, [pc, #76]	; (80078c4 <MX_QUADSPI_Init+0x54>)
 8007878:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 6;
 800787a:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 800787c:	2206      	movs	r2, #6
 800787e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 8007882:	2204      	movs	r2, #4
 8007884:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 8007888:	2210      	movs	r2, #16
 800788a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 800788e:	2216      	movs	r2, #22
 8007890:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 8007894:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007898:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800789a:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 800789c:	2200      	movs	r2, #0
 800789e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80078a6:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80078ac:	4804      	ldr	r0, [pc, #16]	; (80078c0 <MX_QUADSPI_Init+0x50>)
 80078ae:	f008 f917 	bl	800fae0 <HAL_QSPI_Init>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80078b8:	f7ff ffd4 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80078bc:	bf00      	nop
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	24003a18 	.word	0x24003a18
 80078c4:	52005000 	.word	0x52005000

080078c8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b0ba      	sub	sp, #232	; 0xe8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078e0:	f107 0318 	add.w	r3, r7, #24
 80078e4:	22bc      	movs	r2, #188	; 0xbc
 80078e6:	2100      	movs	r1, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	f01a fb21 	bl	8021f30 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a58      	ldr	r2, [pc, #352]	; (8007a54 <HAL_QSPI_MspInit+0x18c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	f040 80a8 	bne.w	8007a4a <HAL_QSPI_MspInit+0x182>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80078fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
 8007900:	2310      	movs	r3, #16
 8007902:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007904:	f107 0318 	add.w	r3, r7, #24
 8007908:	4618      	mov	r0, r3
 800790a:	f009 ff65 	bl	80117d8 <HAL_RCCEx_PeriphCLKConfig>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8007914:	f7ff ffa6 	bl	8007864 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007918:	4b4f      	ldr	r3, [pc, #316]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 800791a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800791e:	4a4e      	ldr	r2, [pc, #312]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 8007920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007924:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8007928:	4b4b      	ldr	r3, [pc, #300]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 800792a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800792e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007936:	4b48      	ldr	r3, [pc, #288]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 8007938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800793c:	4a46      	ldr	r2, [pc, #280]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 800793e:	f043 0310 	orr.w	r3, r3, #16
 8007942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007946:	4b44      	ldr	r3, [pc, #272]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 8007948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800794c:	f003 0310 	and.w	r3, r3, #16
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007954:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 8007956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007964:	4b3c      	ldr	r3, [pc, #240]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 8007966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007972:	4b39      	ldr	r3, [pc, #228]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 8007974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007978:	4a37      	ldr	r2, [pc, #220]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 800797a:	f043 0308 	orr.w	r3, r3, #8
 800797e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007982:	4b35      	ldr	r3, [pc, #212]	; (8007a58 <HAL_QSPI_MspInit+0x190>)
 8007984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007990:	2304      	movs	r3, #4
 8007992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007996:	2302      	movs	r3, #2
 8007998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799c:	2300      	movs	r3, #0
 800799e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80079a8:	2309      	movs	r3, #9
 80079aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80079ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80079b2:	4619      	mov	r1, r3
 80079b4:	4829      	ldr	r0, [pc, #164]	; (8007a5c <HAL_QSPI_MspInit+0x194>)
 80079b6:	f006 ff61 	bl	800e87c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80079ba:	2304      	movs	r3, #4
 80079bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c0:	2302      	movs	r3, #2
 80079c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80079d2:	2309      	movs	r3, #9
 80079d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80079dc:	4619      	mov	r1, r3
 80079de:	4820      	ldr	r0, [pc, #128]	; (8007a60 <HAL_QSPI_MspInit+0x198>)
 80079e0:	f006 ff4c 	bl	800e87c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80079e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80079e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ec:	2302      	movs	r3, #2
 80079ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079f8:	2300      	movs	r3, #0
 80079fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80079fe:	2309      	movs	r3, #9
 8007a00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4816      	ldr	r0, [pc, #88]	; (8007a64 <HAL_QSPI_MspInit+0x19c>)
 8007a0c:	f006 ff36 	bl	800e87c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007a10:	2340      	movs	r3, #64	; 0x40
 8007a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a16:	2302      	movs	r3, #2
 8007a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007a28:	230a      	movs	r3, #10
 8007a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007a32:	4619      	mov	r1, r3
 8007a34:	480a      	ldr	r0, [pc, #40]	; (8007a60 <HAL_QSPI_MspInit+0x198>)
 8007a36:	f006 ff21 	bl	800e87c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2105      	movs	r1, #5
 8007a3e:	205c      	movs	r0, #92	; 0x5c
 8007a40:	f004 f830 	bl	800baa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8007a44:	205c      	movs	r0, #92	; 0x5c
 8007a46:	f004 f847 	bl	800bad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	37e8      	adds	r7, #232	; 0xe8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	52005000 	.word	0x52005000
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	58021000 	.word	0x58021000
 8007a60:	58020400 	.word	0x58020400
 8007a64:	58020c00 	.word	0x58020c00

08007a68 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007a6c:	4b10      	ldr	r3, [pc, #64]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a6e:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <MX_RTC_Init+0x4c>)
 8007a70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a7a:	227f      	movs	r2, #127	; 0x7f
 8007a7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a80:	22ff      	movs	r2, #255	; 0xff
 8007a82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007a84:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007a96:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007a9c:	4804      	ldr	r0, [pc, #16]	; (8007ab0 <MX_RTC_Init+0x48>)
 8007a9e:	f00c f827 	bl	8013af0 <HAL_RTC_Init>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007aa8:	f7ff fedc 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007aac:	bf00      	nop
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	24003a64 	.word	0x24003a64
 8007ab4:	58004000 	.word	0x58004000

08007ab8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b0b2      	sub	sp, #200	; 0xc8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007ac0:	f107 030c 	add.w	r3, r7, #12
 8007ac4:	22bc      	movs	r2, #188	; 0xbc
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f01a fa31 	bl	8021f30 <memset>
  if(rtcHandle->Instance==RTC)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a0f      	ldr	r2, [pc, #60]	; (8007b10 <HAL_RTC_MspInit+0x58>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d116      	bne.n	8007b06 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007ad8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007adc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ae6:	f107 030c 	add.w	r3, r7, #12
 8007aea:	4618      	mov	r0, r3
 8007aec:	f009 fe74 	bl	80117d8 <HAL_RCCEx_PeriphCLKConfig>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007af6:	f7ff feb5 	bl	8007864 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <HAL_RTC_MspInit+0x5c>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a05      	ldr	r2, [pc, #20]	; (8007b14 <HAL_RTC_MspInit+0x5c>)
 8007b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b04:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007b06:	bf00      	nop
 8007b08:	37c8      	adds	r7, #200	; 0xc8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	58004000 	.word	0x58004000
 8007b14:	58024400 	.word	0x58024400

08007b18 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <MX_SDMMC1_SD_Init+0x34>)
 8007b1e:	4a0c      	ldr	r2, [pc, #48]	; (8007b50 <MX_SDMMC1_SD_Init+0x38>)
 8007b20:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007b22:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <MX_SDMMC1_SD_Init+0x34>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <MX_SDMMC1_SD_Init+0x34>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007b2e:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <MX_SDMMC1_SD_Init+0x34>)
 8007b30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b34:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <MX_SDMMC1_SD_Init+0x34>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8007b3c:	4b03      	ldr	r3, [pc, #12]	; (8007b4c <MX_SDMMC1_SD_Init+0x34>)
 8007b3e:	2204      	movs	r2, #4
 8007b40:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8007b42:	bf00      	nop
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	24003a88 	.word	0x24003a88
 8007b50:	52007000 	.word	0x52007000

08007b54 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	; 0x28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b5c:	f107 0314 	add.w	r3, r7, #20
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	609a      	str	r2, [r3, #8]
 8007b68:	60da      	str	r2, [r3, #12]
 8007b6a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a2e      	ldr	r2, [pc, #184]	; (8007c2c <HAL_SD_MspInit+0xd8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d155      	bne.n	8007c22 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007b78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007b7c:	4a2c      	ldr	r2, [pc, #176]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b82:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8007b86:	4b2a      	ldr	r3, [pc, #168]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007b88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b94:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b9a:	4a25      	ldr	r2, [pc, #148]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007b9c:	f043 0304 	orr.w	r3, r3, #4
 8007ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007bb2:	4b1f      	ldr	r3, [pc, #124]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007bba:	f043 0308 	orr.w	r3, r3, #8
 8007bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <HAL_SD_MspInit+0xdc>)
 8007bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	60bb      	str	r3, [r7, #8]
 8007bce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007bd0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007bd4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bde:	2303      	movs	r3, #3
 8007be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8007be2:	230c      	movs	r3, #12
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007be6:	f107 0314 	add.w	r3, r7, #20
 8007bea:	4619      	mov	r1, r3
 8007bec:	4811      	ldr	r0, [pc, #68]	; (8007c34 <HAL_SD_MspInit+0xe0>)
 8007bee:	f006 fe45 	bl	800e87c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8007c02:	230c      	movs	r3, #12
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c06:	f107 0314 	add.w	r3, r7, #20
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	480a      	ldr	r0, [pc, #40]	; (8007c38 <HAL_SD_MspInit+0xe4>)
 8007c0e:	f006 fe35 	bl	800e87c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8007c12:	2200      	movs	r2, #0
 8007c14:	2105      	movs	r1, #5
 8007c16:	2031      	movs	r0, #49	; 0x31
 8007c18:	f003 ff44 	bl	800baa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8007c1c:	2031      	movs	r0, #49	; 0x31
 8007c1e:	f003 ff5b 	bl	800bad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8007c22:	bf00      	nop
 8007c24:	3728      	adds	r7, #40	; 0x28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	52007000 	.word	0x52007000
 8007c30:	58024400 	.word	0x58024400
 8007c34:	58020800 	.word	0x58020800
 8007c38:	58020c00 	.word	0x58020c00

08007c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <HAL_MspInit+0x38>)
 8007c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c48:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <HAL_MspInit+0x38>)
 8007c4a:	f043 0302 	orr.w	r3, r3, #2
 8007c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c52:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <HAL_MspInit+0x38>)
 8007c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c60:	2200      	movs	r2, #0
 8007c62:	210f      	movs	r1, #15
 8007c64:	f06f 0001 	mvn.w	r0, #1
 8007c68:	f003 ff1c 	bl	800baa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	58024400 	.word	0x58024400

08007c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08e      	sub	sp, #56	; 0x38
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM8 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	d844      	bhi.n	8007d10 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8007c86:	2200      	movs	r2, #0
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	202c      	movs	r0, #44	; 0x2c
 8007c8c:	f003 ff0a 	bl	800baa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007c90:	202c      	movs	r0, #44	; 0x2c
 8007c92:	f003 ff21 	bl	800bad8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8007c96:	4a24      	ldr	r2, [pc, #144]	; (8007d28 <HAL_InitTick+0xb0>)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8007c9c:	4b23      	ldr	r3, [pc, #140]	; (8007d2c <HAL_InitTick+0xb4>)
 8007c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ca2:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <HAL_InitTick+0xb4>)
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007cac:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <HAL_InitTick+0xb4>)
 8007cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	60bb      	str	r3, [r7, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007cba:	f107 020c 	add.w	r2, r7, #12
 8007cbe:	f107 0310 	add.w	r3, r7, #16
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f009 fd45 	bl	8011754 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007cca:	f009 fd2d 	bl	8011728 <HAL_RCC_GetPCLK2Freq>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd6:	4a16      	ldr	r2, [pc, #88]	; (8007d30 <HAL_InitTick+0xb8>)
 8007cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cdc:	0c9b      	lsrs	r3, r3, #18
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <HAL_InitTick+0xbc>)
 8007ce4:	4a14      	ldr	r2, [pc, #80]	; (8007d38 <HAL_InitTick+0xc0>)
 8007ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8007ce8:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <HAL_InitTick+0xbc>)
 8007cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007cee:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8007cf0:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <HAL_InitTick+0xbc>)
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <HAL_InitTick+0xbc>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <HAL_InitTick+0xbc>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8007d02:	480c      	ldr	r0, [pc, #48]	; (8007d34 <HAL_InitTick+0xbc>)
 8007d04:	f00d fe9a 	bl	8015a3c <HAL_TIM_Base_Init>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d107      	bne.n	8007d1e <HAL_InitTick+0xa6>
 8007d0e:	e001      	b.n	8007d14 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e005      	b.n	8007d20 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8007d14:	4807      	ldr	r0, [pc, #28]	; (8007d34 <HAL_InitTick+0xbc>)
 8007d16:	f00d fee9 	bl	8015aec <HAL_TIM_Base_Start_IT>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	e000      	b.n	8007d20 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3738      	adds	r7, #56	; 0x38
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	240002ec 	.word	0x240002ec
 8007d2c:	58024400 	.word	0x58024400
 8007d30:	431bde83 	.word	0x431bde83
 8007d34:	24003b04 	.word	0x24003b04
 8007d38:	40010400 	.word	0x40010400

08007d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d40:	e7fe      	b.n	8007d40 <NMI_Handler+0x4>

08007d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d42:	b480      	push	{r7}
 8007d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d46:	e7fe      	b.n	8007d46 <HardFault_Handler+0x4>

08007d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d4c:	e7fe      	b.n	8007d4c <MemManage_Handler+0x4>

08007d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d52:	e7fe      	b.n	8007d52 <BusFault_Handler+0x4>

08007d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d58:	e7fe      	b.n	8007d58 <UsageFault_Handler+0x4>

08007d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d5e:	bf00      	nop
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007d6c:	4802      	ldr	r0, [pc, #8]	; (8007d78 <USART3_IRQHandler+0x10>)
 8007d6e:	f00f fecf 	bl	8017b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007d72:	bf00      	nop
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	24003cc8 	.word	0x24003cc8

08007d7c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007d80:	4802      	ldr	r0, [pc, #8]	; (8007d8c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8007d82:	f00e fb37 	bl	80163f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	24003b04 	.word	0x24003b04

08007d90 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8007d94:	4802      	ldr	r0, [pc, #8]	; (8007da0 <SDMMC1_IRQHandler+0x10>)
 8007d96:	f00c fc5d 	bl	8014654 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8007d9a:	bf00      	nop
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	24003a88 	.word	0x24003a88

08007da4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007da8:	4802      	ldr	r0, [pc, #8]	; (8007db4 <DMA2_Stream0_IRQHandler+0x10>)
 8007daa:	f005 fa49 	bl	800d240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	24003de8 	.word	0x24003de8

08007db8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007dbc:	4802      	ldr	r0, [pc, #8]	; (8007dc8 <DMA2_Stream1_IRQHandler+0x10>)
 8007dbe:	f005 fa3f 	bl	800d240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007dc2:	bf00      	nop
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	24003e60 	.word	0x24003e60

08007dcc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007dd0:	4802      	ldr	r0, [pc, #8]	; (8007ddc <USART6_IRQHandler+0x10>)
 8007dd2:	f00f fe9d 	bl	8017b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007dd6:	bf00      	nop
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	24003d58 	.word	0x24003d58

08007de0 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8007de4:	4802      	ldr	r0, [pc, #8]	; (8007df0 <QUADSPI_IRQHandler+0x10>)
 8007de6:	f007 feef 	bl	800fbc8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	24003a18 	.word	0x24003a18

08007df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
	return 1;
 8007df8:	2301      	movs	r3, #1
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <_kill>:

int _kill(int pid, int sig)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007e0e:	f019 ff55 	bl	8021cbc <__errno>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2216      	movs	r2, #22
 8007e16:	601a      	str	r2, [r3, #0]
	return -1;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <_exit>:

void _exit (int status)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ffe7 	bl	8007e04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007e36:	e7fe      	b.n	8007e36 <_exit+0x12>

08007e38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e00a      	b.n	8007e60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007e4a:	f3af 8000 	nop.w
 8007e4e:	4601      	mov	r1, r0
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	60ba      	str	r2, [r7, #8]
 8007e56:	b2ca      	uxtb	r2, r1
 8007e58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	dbf0      	blt.n	8007e4a <_read+0x12>
	}

return len;
 8007e68:	687b      	ldr	r3, [r7, #4]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
	return -1;
 8007e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e9a:	605a      	str	r2, [r3, #4]
	return 0;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <_isatty>:

int _isatty(int file)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
	return 1;
 8007eb2:	2301      	movs	r3, #1
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
	return 0;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ee4:	4a14      	ldr	r2, [pc, #80]	; (8007f38 <_sbrk+0x5c>)
 8007ee6:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <_sbrk+0x60>)
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ef0:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <_sbrk+0x64>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <_sbrk+0x64>)
 8007efa:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <_sbrk+0x68>)
 8007efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <_sbrk+0x64>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4413      	add	r3, r2
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d207      	bcs.n	8007f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f0c:	f019 fed6 	bl	8021cbc <__errno>
 8007f10:	4603      	mov	r3, r0
 8007f12:	220c      	movs	r2, #12
 8007f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f16:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1a:	e009      	b.n	8007f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f1c:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <_sbrk+0x64>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f22:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <_sbrk+0x64>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	4a05      	ldr	r2, [pc, #20]	; (8007f40 <_sbrk+0x64>)
 8007f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	24080000 	.word	0x24080000
 8007f3c:	00000800 	.word	0x00000800
 8007f40:	24003b50 	.word	0x24003b50
 8007f44:	24009048 	.word	0x24009048

08007f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007f4c:	4b37      	ldr	r3, [pc, #220]	; (800802c <SystemInit+0xe4>)
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f52:	4a36      	ldr	r2, [pc, #216]	; (800802c <SystemInit+0xe4>)
 8007f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007f5c:	4b34      	ldr	r3, [pc, #208]	; (8008030 <SystemInit+0xe8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	2b06      	cmp	r3, #6
 8007f66:	d807      	bhi.n	8007f78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007f68:	4b31      	ldr	r3, [pc, #196]	; (8008030 <SystemInit+0xe8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f023 030f 	bic.w	r3, r3, #15
 8007f70:	4a2f      	ldr	r2, [pc, #188]	; (8008030 <SystemInit+0xe8>)
 8007f72:	f043 0307 	orr.w	r3, r3, #7
 8007f76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007f78:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <SystemInit+0xec>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	; (8008034 <SystemInit+0xec>)
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007f84:	4b2b      	ldr	r3, [pc, #172]	; (8008034 <SystemInit+0xec>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <SystemInit+0xec>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	4929      	ldr	r1, [pc, #164]	; (8008034 <SystemInit+0xec>)
 8007f90:	4b29      	ldr	r3, [pc, #164]	; (8008038 <SystemInit+0xf0>)
 8007f92:	4013      	ands	r3, r2
 8007f94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007f96:	4b26      	ldr	r3, [pc, #152]	; (8008030 <SystemInit+0xe8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007fa2:	4b23      	ldr	r3, [pc, #140]	; (8008030 <SystemInit+0xe8>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f023 030f 	bic.w	r3, r3, #15
 8007faa:	4a21      	ldr	r2, [pc, #132]	; (8008030 <SystemInit+0xe8>)
 8007fac:	f043 0307 	orr.w	r3, r3, #7
 8007fb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007fb2:	4b20      	ldr	r3, [pc, #128]	; (8008034 <SystemInit+0xec>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007fb8:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <SystemInit+0xec>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007fbe:	4b1d      	ldr	r3, [pc, #116]	; (8008034 <SystemInit+0xec>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007fc4:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <SystemInit+0xec>)
 8007fc6:	4a1d      	ldr	r2, [pc, #116]	; (800803c <SystemInit+0xf4>)
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007fca:	4b1a      	ldr	r3, [pc, #104]	; (8008034 <SystemInit+0xec>)
 8007fcc:	4a1c      	ldr	r2, [pc, #112]	; (8008040 <SystemInit+0xf8>)
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007fd0:	4b18      	ldr	r3, [pc, #96]	; (8008034 <SystemInit+0xec>)
 8007fd2:	4a1c      	ldr	r2, [pc, #112]	; (8008044 <SystemInit+0xfc>)
 8007fd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007fd6:	4b17      	ldr	r3, [pc, #92]	; (8008034 <SystemInit+0xec>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007fdc:	4b15      	ldr	r3, [pc, #84]	; (8008034 <SystemInit+0xec>)
 8007fde:	4a19      	ldr	r2, [pc, #100]	; (8008044 <SystemInit+0xfc>)
 8007fe0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007fe2:	4b14      	ldr	r3, [pc, #80]	; (8008034 <SystemInit+0xec>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007fe8:	4b12      	ldr	r3, [pc, #72]	; (8008034 <SystemInit+0xec>)
 8007fea:	4a16      	ldr	r2, [pc, #88]	; (8008044 <SystemInit+0xfc>)
 8007fec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <SystemInit+0xec>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <SystemInit+0xec>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a0e      	ldr	r2, [pc, #56]	; (8008034 <SystemInit+0xec>)
 8007ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ffe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008000:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <SystemInit+0xec>)
 8008002:	2200      	movs	r2, #0
 8008004:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008006:	4b10      	ldr	r3, [pc, #64]	; (8008048 <SystemInit+0x100>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b10      	ldr	r3, [pc, #64]	; (800804c <SystemInit+0x104>)
 800800c:	4013      	ands	r3, r2
 800800e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008012:	d202      	bcs.n	800801a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008014:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <SystemInit+0x108>)
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <SystemInit+0x10c>)
 800801c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008020:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008022:	bf00      	nop
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	e000ed00 	.word	0xe000ed00
 8008030:	52002000 	.word	0x52002000
 8008034:	58024400 	.word	0x58024400
 8008038:	eaf6ed7f 	.word	0xeaf6ed7f
 800803c:	02020200 	.word	0x02020200
 8008040:	01ff0000 	.word	0x01ff0000
 8008044:	01010280 	.word	0x01010280
 8008048:	5c001000 	.word	0x5c001000
 800804c:	ffff0000 	.word	0xffff0000
 8008050:	51008108 	.word	0x51008108
 8008054:	52004000 	.word	0x52004000

08008058 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b09a      	sub	sp, #104	; 0x68
 800805c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800805e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	605a      	str	r2, [r3, #4]
 8008068:	609a      	str	r2, [r3, #8]
 800806a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800806c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	609a      	str	r2, [r3, #8]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	611a      	str	r2, [r3, #16]
 8008088:	615a      	str	r2, [r3, #20]
 800808a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	222c      	movs	r2, #44	; 0x2c
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f019 ff4c 	bl	8021f30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008098:	4b49      	ldr	r3, [pc, #292]	; (80081c0 <MX_TIM1_Init+0x168>)
 800809a:	4a4a      	ldr	r2, [pc, #296]	; (80081c4 <MX_TIM1_Init+0x16c>)
 800809c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800809e:	4b48      	ldr	r3, [pc, #288]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080a0:	2263      	movs	r2, #99	; 0x63
 80080a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080a4:	4b46      	ldr	r3, [pc, #280]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 80080aa:	4b45      	ldr	r3, [pc, #276]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080ac:	f241 3287 	movw	r2, #4999	; 0x1387
 80080b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080b2:	4b43      	ldr	r3, [pc, #268]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080b8:	4b41      	ldr	r3, [pc, #260]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080be:	4b40      	ldr	r3, [pc, #256]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080c0:	2280      	movs	r2, #128	; 0x80
 80080c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80080c4:	483e      	ldr	r0, [pc, #248]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080c6:	f00d fcb9 	bl	8015a3c <HAL_TIM_Base_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80080d0:	f7ff fbc8 	bl	8007864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80080da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080de:	4619      	mov	r1, r3
 80080e0:	4837      	ldr	r0, [pc, #220]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080e2:	f00e fc35 	bl	8016950 <HAL_TIM_ConfigClockSource>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80080ec:	f7ff fbba 	bl	8007864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80080f0:	4833      	ldr	r0, [pc, #204]	; (80081c0 <MX_TIM1_Init+0x168>)
 80080f2:	f00d ff79 	bl	8015fe8 <HAL_TIM_PWM_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80080fc:	f7ff fbb2 	bl	8007864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008100:	2300      	movs	r3, #0
 8008102:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008104:	2300      	movs	r3, #0
 8008106:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008108:	2300      	movs	r3, #0
 800810a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800810c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008110:	4619      	mov	r1, r3
 8008112:	482b      	ldr	r0, [pc, #172]	; (80081c0 <MX_TIM1_Init+0x168>)
 8008114:	f00f f970 	bl	80173f8 <HAL_TIMEx_MasterConfigSynchronization>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800811e:	f7ff fba1 	bl	8007864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008122:	2360      	movs	r3, #96	; 0x60
 8008124:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800812a:	2300      	movs	r3, #0
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008132:	2300      	movs	r3, #0
 8008134:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008136:	2300      	movs	r3, #0
 8008138:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800813a:	2300      	movs	r3, #0
 800813c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800813e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008142:	2200      	movs	r2, #0
 8008144:	4619      	mov	r1, r3
 8008146:	481e      	ldr	r0, [pc, #120]	; (80081c0 <MX_TIM1_Init+0x168>)
 8008148:	f00e faee 	bl	8016728 <HAL_TIM_PWM_ConfigChannel>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8008152:	f7ff fb87 	bl	8007864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800815a:	2204      	movs	r2, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4818      	ldr	r0, [pc, #96]	; (80081c0 <MX_TIM1_Init+0x168>)
 8008160:	f00e fae2 	bl	8016728 <HAL_TIM_PWM_ConfigChannel>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800816a:	f7ff fb7b 	bl	8007864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800816e:	2300      	movs	r3, #0
 8008170:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008186:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800818c:	2300      	movs	r3, #0
 800818e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800819a:	2300      	movs	r3, #0
 800819c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800819e:	1d3b      	adds	r3, r7, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4807      	ldr	r0, [pc, #28]	; (80081c0 <MX_TIM1_Init+0x168>)
 80081a4:	f00f f9b6 	bl	8017514 <HAL_TIMEx_ConfigBreakDeadTime>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80081ae:	f7ff fb59 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80081b2:	4803      	ldr	r0, [pc, #12]	; (80081c0 <MX_TIM1_Init+0x168>)
 80081b4:	f000 f978 	bl	80084a8 <HAL_TIM_MspPostInit>

}
 80081b8:	bf00      	nop
 80081ba:	3768      	adds	r7, #104	; 0x68
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	24003b54 	.word	0x24003b54
 80081c4:	40010000 	.word	0x40010000

080081c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	609a      	str	r2, [r3, #8]
 80081da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081dc:	f107 031c 	add.w	r3, r7, #28
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80081e8:	463b      	mov	r3, r7
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	605a      	str	r2, [r3, #4]
 80081f0:	609a      	str	r2, [r3, #8]
 80081f2:	60da      	str	r2, [r3, #12]
 80081f4:	611a      	str	r2, [r3, #16]
 80081f6:	615a      	str	r2, [r3, #20]
 80081f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80081fa:	4b2d      	ldr	r3, [pc, #180]	; (80082b0 <MX_TIM2_Init+0xe8>)
 80081fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 8008202:	4b2b      	ldr	r3, [pc, #172]	; (80082b0 <MX_TIM2_Init+0xe8>)
 8008204:	f244 624f 	movw	r2, #17999	; 0x464f
 8008208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800820a:	4b29      	ldr	r3, [pc, #164]	; (80082b0 <MX_TIM2_Init+0xe8>)
 800820c:	2200      	movs	r2, #0
 800820e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48-1;
 8008210:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <MX_TIM2_Init+0xe8>)
 8008212:	222f      	movs	r2, #47	; 0x2f
 8008214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008216:	4b26      	ldr	r3, [pc, #152]	; (80082b0 <MX_TIM2_Init+0xe8>)
 8008218:	2200      	movs	r2, #0
 800821a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800821c:	4b24      	ldr	r3, [pc, #144]	; (80082b0 <MX_TIM2_Init+0xe8>)
 800821e:	2280      	movs	r2, #128	; 0x80
 8008220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008222:	4823      	ldr	r0, [pc, #140]	; (80082b0 <MX_TIM2_Init+0xe8>)
 8008224:	f00d fc0a 	bl	8015a3c <HAL_TIM_Base_Init>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800822e:	f7ff fb19 	bl	8007864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008236:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800823c:	4619      	mov	r1, r3
 800823e:	481c      	ldr	r0, [pc, #112]	; (80082b0 <MX_TIM2_Init+0xe8>)
 8008240:	f00e fb86 	bl	8016950 <HAL_TIM_ConfigClockSource>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800824a:	f7ff fb0b 	bl	8007864 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800824e:	4818      	ldr	r0, [pc, #96]	; (80082b0 <MX_TIM2_Init+0xe8>)
 8008250:	f00d fcc4 	bl	8015bdc <HAL_TIM_OC_Init>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800825a:	f7ff fb03 	bl	8007864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800825e:	2300      	movs	r3, #0
 8008260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008262:	2300      	movs	r3, #0
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008266:	f107 031c 	add.w	r3, r7, #28
 800826a:	4619      	mov	r1, r3
 800826c:	4810      	ldr	r0, [pc, #64]	; (80082b0 <MX_TIM2_Init+0xe8>)
 800826e:	f00f f8c3 	bl	80173f8 <HAL_TIMEx_MasterConfigSynchronization>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8008278:	f7ff faf4 	bl	8007864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800827c:	2330      	movs	r3, #48	; 0x30
 800827e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008284:	2300      	movs	r3, #0
 8008286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800828c:	463b      	mov	r3, r7
 800828e:	2200      	movs	r2, #0
 8008290:	4619      	mov	r1, r3
 8008292:	4807      	ldr	r0, [pc, #28]	; (80082b0 <MX_TIM2_Init+0xe8>)
 8008294:	f00e f9ce 	bl	8016634 <HAL_TIM_OC_ConfigChannel>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800829e:	f7ff fae1 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80082a2:	4803      	ldr	r0, [pc, #12]	; (80082b0 <MX_TIM2_Init+0xe8>)
 80082a4:	f000 f900 	bl	80084a8 <HAL_TIM_MspPostInit>

}
 80082a8:	bf00      	nop
 80082aa:	3738      	adds	r7, #56	; 0x38
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	24003ba0 	.word	0x24003ba0

080082b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08e      	sub	sp, #56	; 0x38
 80082b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082be:	2200      	movs	r2, #0
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	605a      	str	r2, [r3, #4]
 80082c4:	609a      	str	r2, [r3, #8]
 80082c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082c8:	f107 031c 	add.w	r3, r7, #28
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80082d4:	463b      	mov	r3, r7
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	605a      	str	r2, [r3, #4]
 80082dc:	609a      	str	r2, [r3, #8]
 80082de:	60da      	str	r2, [r3, #12]
 80082e0:	611a      	str	r2, [r3, #16]
 80082e2:	615a      	str	r2, [r3, #20]
 80082e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80082e6:	4b33      	ldr	r3, [pc, #204]	; (80083b4 <MX_TIM3_Init+0x100>)
 80082e8:	4a33      	ldr	r2, [pc, #204]	; (80083b8 <MX_TIM3_Init+0x104>)
 80082ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 450-1;
 80082ec:	4b31      	ldr	r3, [pc, #196]	; (80083b4 <MX_TIM3_Init+0x100>)
 80082ee:	f240 12c1 	movw	r2, #449	; 0x1c1
 80082f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082f4:	4b2f      	ldr	r3, [pc, #188]	; (80083b4 <MX_TIM3_Init+0x100>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80082fa:	4b2e      	ldr	r3, [pc, #184]	; (80083b4 <MX_TIM3_Init+0x100>)
 80082fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8008300:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008302:	4b2c      	ldr	r3, [pc, #176]	; (80083b4 <MX_TIM3_Init+0x100>)
 8008304:	2200      	movs	r2, #0
 8008306:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008308:	4b2a      	ldr	r3, [pc, #168]	; (80083b4 <MX_TIM3_Init+0x100>)
 800830a:	2280      	movs	r2, #128	; 0x80
 800830c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800830e:	4829      	ldr	r0, [pc, #164]	; (80083b4 <MX_TIM3_Init+0x100>)
 8008310:	f00d fb94 	bl	8015a3c <HAL_TIM_Base_Init>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800831a:	f7ff faa3 	bl	8007864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800831e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008328:	4619      	mov	r1, r3
 800832a:	4822      	ldr	r0, [pc, #136]	; (80083b4 <MX_TIM3_Init+0x100>)
 800832c:	f00e fb10 	bl	8016950 <HAL_TIM_ConfigClockSource>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8008336:	f7ff fa95 	bl	8007864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800833a:	481e      	ldr	r0, [pc, #120]	; (80083b4 <MX_TIM3_Init+0x100>)
 800833c:	f00d fe54 	bl	8015fe8 <HAL_TIM_PWM_Init>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8008346:	f7ff fa8d 	bl	8007864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800834e:	2300      	movs	r3, #0
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008352:	f107 031c 	add.w	r3, r7, #28
 8008356:	4619      	mov	r1, r3
 8008358:	4816      	ldr	r0, [pc, #88]	; (80083b4 <MX_TIM3_Init+0x100>)
 800835a:	f00f f84d 	bl	80173f8 <HAL_TIMEx_MasterConfigSynchronization>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008364:	f7ff fa7e 	bl	8007864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008368:	2360      	movs	r3, #96	; 0x60
 800836a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008370:	2300      	movs	r3, #0
 8008372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008374:	2300      	movs	r3, #0
 8008376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008378:	463b      	mov	r3, r7
 800837a:	2200      	movs	r2, #0
 800837c:	4619      	mov	r1, r3
 800837e:	480d      	ldr	r0, [pc, #52]	; (80083b4 <MX_TIM3_Init+0x100>)
 8008380:	f00e f9d2 	bl	8016728 <HAL_TIM_PWM_ConfigChannel>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800838a:	f7ff fa6b 	bl	8007864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800838e:	463b      	mov	r3, r7
 8008390:	2204      	movs	r2, #4
 8008392:	4619      	mov	r1, r3
 8008394:	4807      	ldr	r0, [pc, #28]	; (80083b4 <MX_TIM3_Init+0x100>)
 8008396:	f00e f9c7 	bl	8016728 <HAL_TIM_PWM_ConfigChannel>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80083a0:	f7ff fa60 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80083a4:	4803      	ldr	r0, [pc, #12]	; (80083b4 <MX_TIM3_Init+0x100>)
 80083a6:	f000 f87f 	bl	80084a8 <HAL_TIM_MspPostInit>

}
 80083aa:	bf00      	nop
 80083ac:	3738      	adds	r7, #56	; 0x38
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	24003bec 	.word	0x24003bec
 80083b8:	40000400 	.word	0x40000400

080083bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08c      	sub	sp, #48	; 0x30
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c4:	f107 031c 	add.w	r3, r7, #28
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	609a      	str	r2, [r3, #8]
 80083d0:	60da      	str	r2, [r3, #12]
 80083d2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a2f      	ldr	r2, [pc, #188]	; (8008498 <HAL_TIM_Base_MspInit+0xdc>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d12f      	bne.n	800843e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80083de:	4b2f      	ldr	r3, [pc, #188]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 80083e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083e4:	4a2d      	ldr	r2, [pc, #180]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80083ee:	4b2b      	ldr	r3, [pc, #172]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 80083f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80083fc:	4b27      	ldr	r3, [pc, #156]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 80083fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008402:	4a26      	ldr	r2, [pc, #152]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 8008404:	f043 0310 	orr.w	r3, r3, #16
 8008408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800840c:	4b23      	ldr	r3, [pc, #140]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 800840e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800841a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800841e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008420:	2302      	movs	r3, #2
 8008422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008424:	2300      	movs	r3, #0
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008428:	2300      	movs	r3, #0
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800842c:	2301      	movs	r3, #1
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008430:	f107 031c 	add.w	r3, r7, #28
 8008434:	4619      	mov	r1, r3
 8008436:	481a      	ldr	r0, [pc, #104]	; (80084a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008438:	f006 fa20 	bl	800e87c <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800843c:	e028      	b.n	8008490 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008446:	d10f      	bne.n	8008468 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008448:	4b14      	ldr	r3, [pc, #80]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 800844a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800844e:	4a13      	ldr	r2, [pc, #76]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 8008450:	f043 0301 	orr.w	r3, r3, #1
 8008454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008458:	4b10      	ldr	r3, [pc, #64]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 800845a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	613b      	str	r3, [r7, #16]
 8008464:	693b      	ldr	r3, [r7, #16]
}
 8008466:	e013      	b.n	8008490 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM3)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a0d      	ldr	r2, [pc, #52]	; (80084a4 <HAL_TIM_Base_MspInit+0xe8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10e      	bne.n	8008490 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008472:	4b0a      	ldr	r3, [pc, #40]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 8008474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008478:	4a08      	ldr	r2, [pc, #32]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 800847a:	f043 0302 	orr.w	r3, r3, #2
 800847e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008482:	4b06      	ldr	r3, [pc, #24]	; (800849c <HAL_TIM_Base_MspInit+0xe0>)
 8008484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008488:	f003 0302 	and.w	r3, r3, #2
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	68fb      	ldr	r3, [r7, #12]
}
 8008490:	bf00      	nop
 8008492:	3730      	adds	r7, #48	; 0x30
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	40010000 	.word	0x40010000
 800849c:	58024400 	.word	0x58024400
 80084a0:	58021000 	.word	0x58021000
 80084a4:	40000400 	.word	0x40000400

080084a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08c      	sub	sp, #48	; 0x30
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b0:	f107 031c 	add.w	r3, r7, #28
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	609a      	str	r2, [r3, #8]
 80084bc:	60da      	str	r2, [r3, #12]
 80084be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a47      	ldr	r2, [pc, #284]	; (80085e4 <HAL_TIM_MspPostInit+0x13c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d120      	bne.n	800850c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80084ca:	4b47      	ldr	r3, [pc, #284]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 80084cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084d0:	4a45      	ldr	r2, [pc, #276]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 80084d2:	f043 0310 	orr.w	r3, r3, #16
 80084d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084da:	4b43      	ldr	r3, [pc, #268]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 80084dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ESC1_PWM_Pin|ESC2_PWM_Pin;
 80084e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80084ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ee:	2302      	movs	r3, #2
 80084f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084f6:	2300      	movs	r3, #0
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80084fa:	2301      	movs	r3, #1
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084fe:	f107 031c 	add.w	r3, r7, #28
 8008502:	4619      	mov	r1, r3
 8008504:	4839      	ldr	r0, [pc, #228]	; (80085ec <HAL_TIM_MspPostInit+0x144>)
 8008506:	f006 f9b9 	bl	800e87c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800850a:	e067      	b.n	80085dc <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM2)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008514:	d11f      	bne.n	8008556 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008516:	4b34      	ldr	r3, [pc, #208]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800851c:	4a32      	ldr	r2, [pc, #200]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008526:	4b30      	ldr	r3, [pc, #192]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_PWM_Pin;
 8008534:	2301      	movs	r3, #1
 8008536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008538:	2302      	movs	r3, #2
 800853a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853c:	2300      	movs	r3, #0
 800853e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008540:	2300      	movs	r3, #0
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008544:	2301      	movs	r3, #1
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_PWM_GPIO_Port, &GPIO_InitStruct);
 8008548:	f107 031c 	add.w	r3, r7, #28
 800854c:	4619      	mov	r1, r3
 800854e:	4828      	ldr	r0, [pc, #160]	; (80085f0 <HAL_TIM_MspPostInit+0x148>)
 8008550:	f006 f994 	bl	800e87c <HAL_GPIO_Init>
}
 8008554:	e042      	b.n	80085dc <HAL_TIM_MspPostInit+0x134>
  else if(timHandle->Instance==TIM3)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a26      	ldr	r2, [pc, #152]	; (80085f4 <HAL_TIM_MspPostInit+0x14c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d13d      	bne.n	80085dc <HAL_TIM_MspPostInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008560:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008566:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008568:	f043 0301 	orr.w	r3, r3, #1
 800856c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008570:	4b1d      	ldr	r3, [pc, #116]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800857e:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008586:	f043 0302 	orr.w	r3, r3, #2
 800858a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800858e:	4b16      	ldr	r3, [pc, #88]	; (80085e8 <HAL_TIM_MspPostInit+0x140>)
 8008590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800859c:	2340      	movs	r3, #64	; 0x40
 800859e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a0:	2302      	movs	r3, #2
 80085a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085a8:	2300      	movs	r3, #0
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80085ac:	2302      	movs	r3, #2
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80085b0:	f107 031c 	add.w	r3, r7, #28
 80085b4:	4619      	mov	r1, r3
 80085b6:	480e      	ldr	r0, [pc, #56]	; (80085f0 <HAL_TIM_MspPostInit+0x148>)
 80085b8:	f006 f960 	bl	800e87c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SERVO2_PWM_Pin;
 80085bc:	2320      	movs	r3, #32
 80085be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c0:	2302      	movs	r3, #2
 80085c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c8:	2300      	movs	r3, #0
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80085cc:	2302      	movs	r3, #2
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO2_PWM_GPIO_Port, &GPIO_InitStruct);
 80085d0:	f107 031c 	add.w	r3, r7, #28
 80085d4:	4619      	mov	r1, r3
 80085d6:	4808      	ldr	r0, [pc, #32]	; (80085f8 <HAL_TIM_MspPostInit+0x150>)
 80085d8:	f006 f950 	bl	800e87c <HAL_GPIO_Init>
}
 80085dc:	bf00      	nop
 80085de:	3730      	adds	r7, #48	; 0x30
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40010000 	.word	0x40010000
 80085e8:	58024400 	.word	0x58024400
 80085ec:	58021000 	.word	0x58021000
 80085f0:	58020000 	.word	0x58020000
 80085f4:	40000400 	.word	0x40000400
 80085f8:	58020400 	.word	0x58020400

080085fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008600:	4b22      	ldr	r3, [pc, #136]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008602:	4a23      	ldr	r2, [pc, #140]	; (8008690 <MX_USART1_UART_Init+0x94>)
 8008604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8008606:	4b21      	ldr	r3, [pc, #132]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008608:	4a22      	ldr	r2, [pc, #136]	; (8008694 <MX_USART1_UART_Init+0x98>)
 800860a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800860c:	4b1f      	ldr	r3, [pc, #124]	; (800868c <MX_USART1_UART_Init+0x90>)
 800860e:	2200      	movs	r2, #0
 8008610:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008612:	4b1e      	ldr	r3, [pc, #120]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008614:	2200      	movs	r2, #0
 8008616:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008618:	4b1c      	ldr	r3, [pc, #112]	; (800868c <MX_USART1_UART_Init+0x90>)
 800861a:	2200      	movs	r2, #0
 800861c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800861e:	4b1b      	ldr	r3, [pc, #108]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008620:	220c      	movs	r2, #12
 8008622:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008624:	4b19      	ldr	r3, [pc, #100]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008626:	2200      	movs	r2, #0
 8008628:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800862a:	4b18      	ldr	r3, [pc, #96]	; (800868c <MX_USART1_UART_Init+0x90>)
 800862c:	2200      	movs	r2, #0
 800862e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008630:	4b16      	ldr	r3, [pc, #88]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008632:	2200      	movs	r2, #0
 8008634:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008636:	4b15      	ldr	r3, [pc, #84]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008638:	2200      	movs	r2, #0
 800863a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800863c:	4b13      	ldr	r3, [pc, #76]	; (800868c <MX_USART1_UART_Init+0x90>)
 800863e:	2200      	movs	r2, #0
 8008640:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008642:	4812      	ldr	r0, [pc, #72]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008644:	f00f f802 	bl	801764c <HAL_UART_Init>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800864e:	f7ff f909 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008652:	2100      	movs	r1, #0
 8008654:	480d      	ldr	r0, [pc, #52]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008656:	f011 fdf4 	bl	801a242 <HAL_UARTEx_SetTxFifoThreshold>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8008660:	f7ff f900 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008664:	2100      	movs	r1, #0
 8008666:	4809      	ldr	r0, [pc, #36]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008668:	f011 fe29 	bl	801a2be <HAL_UARTEx_SetRxFifoThreshold>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8008672:	f7ff f8f7 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008676:	4805      	ldr	r0, [pc, #20]	; (800868c <MX_USART1_UART_Init+0x90>)
 8008678:	f011 fdaa 	bl	801a1d0 <HAL_UARTEx_DisableFifoMode>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8008682:	f7ff f8ef 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	24003c38 	.word	0x24003c38
 8008690:	40011000 	.word	0x40011000
 8008694:	000f4240 	.word	0x000f4240

08008698 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <MX_USART3_UART_Init+0x90>)
 800869e:	4a23      	ldr	r2, [pc, #140]	; (800872c <MX_USART3_UART_Init+0x94>)
 80086a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80086a2:	4b21      	ldr	r3, [pc, #132]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80086a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80086aa:	4b1f      	ldr	r3, [pc, #124]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80086b0:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80086b6:	4b1c      	ldr	r3, [pc, #112]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 80086bc:	4b1a      	ldr	r3, [pc, #104]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086be:	2204      	movs	r2, #4
 80086c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086c2:	4b19      	ldr	r3, [pc, #100]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80086c8:	4b17      	ldr	r3, [pc, #92]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80086ce:	4b16      	ldr	r3, [pc, #88]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80086d4:	4b14      	ldr	r3, [pc, #80]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80086da:	4b13      	ldr	r3, [pc, #76]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086dc:	2200      	movs	r2, #0
 80086de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80086e0:	4811      	ldr	r0, [pc, #68]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086e2:	f00e ffb3 	bl	801764c <HAL_UART_Init>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80086ec:	f7ff f8ba 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086f0:	2100      	movs	r1, #0
 80086f2:	480d      	ldr	r0, [pc, #52]	; (8008728 <MX_USART3_UART_Init+0x90>)
 80086f4:	f011 fda5 	bl	801a242 <HAL_UARTEx_SetTxFifoThreshold>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80086fe:	f7ff f8b1 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008702:	2100      	movs	r1, #0
 8008704:	4808      	ldr	r0, [pc, #32]	; (8008728 <MX_USART3_UART_Init+0x90>)
 8008706:	f011 fdda 	bl	801a2be <HAL_UARTEx_SetRxFifoThreshold>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8008710:	f7ff f8a8 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008714:	4804      	ldr	r0, [pc, #16]	; (8008728 <MX_USART3_UART_Init+0x90>)
 8008716:	f011 fd5b 	bl	801a1d0 <HAL_UARTEx_DisableFifoMode>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8008720:	f7ff f8a0 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008724:	bf00      	nop
 8008726:	bd80      	pop	{r7, pc}
 8008728:	24003cc8 	.word	0x24003cc8
 800872c:	40004800 	.word	0x40004800

08008730 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008734:	4b22      	ldr	r3, [pc, #136]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 8008736:	4a23      	ldr	r2, [pc, #140]	; (80087c4 <MX_USART6_UART_Init+0x94>)
 8008738:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800873a:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 800873c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008740:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008742:	4b1f      	ldr	r3, [pc, #124]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008748:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800874e:	4b1c      	ldr	r3, [pc, #112]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 8008750:	2200      	movs	r2, #0
 8008752:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008754:	4b1a      	ldr	r3, [pc, #104]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 8008756:	220c      	movs	r2, #12
 8008758:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800875a:	4b19      	ldr	r3, [pc, #100]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 800875c:	2200      	movs	r2, #0
 800875e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008760:	4b17      	ldr	r3, [pc, #92]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 8008762:	2200      	movs	r2, #0
 8008764:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008766:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 8008768:	2200      	movs	r2, #0
 800876a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800876c:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 800876e:	2200      	movs	r2, #0
 8008770:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 8008774:	2200      	movs	r2, #0
 8008776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008778:	4811      	ldr	r0, [pc, #68]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 800877a:	f00e ff67 	bl	801764c <HAL_UART_Init>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8008784:	f7ff f86e 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008788:	2100      	movs	r1, #0
 800878a:	480d      	ldr	r0, [pc, #52]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 800878c:	f011 fd59 	bl	801a242 <HAL_UARTEx_SetTxFifoThreshold>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8008796:	f7ff f865 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800879a:	2100      	movs	r1, #0
 800879c:	4808      	ldr	r0, [pc, #32]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 800879e:	f011 fd8e 	bl	801a2be <HAL_UARTEx_SetRxFifoThreshold>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80087a8:	f7ff f85c 	bl	8007864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80087ac:	4804      	ldr	r0, [pc, #16]	; (80087c0 <MX_USART6_UART_Init+0x90>)
 80087ae:	f011 fd0f 	bl	801a1d0 <HAL_UARTEx_DisableFifoMode>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80087b8:	f7ff f854 	bl	8007864 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80087bc:	bf00      	nop
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	24003d58 	.word	0x24003d58
 80087c4:	40011400 	.word	0x40011400

080087c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b0bc      	sub	sp, #240	; 0xf0
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	605a      	str	r2, [r3, #4]
 80087da:	609a      	str	r2, [r3, #8]
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80087e0:	f107 0320 	add.w	r3, r7, #32
 80087e4:	22bc      	movs	r2, #188	; 0xbc
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f019 fba1 	bl	8021f30 <memset>
  if(uartHandle->Instance==USART1)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a9e      	ldr	r2, [pc, #632]	; (8008a6c <HAL_UART_MspInit+0x2a4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d134      	bne.n	8008862 <HAL_UART_MspInit+0x9a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80087f8:	4b9d      	ldr	r3, [pc, #628]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 80087fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087fe:	4a9c      	ldr	r2, [pc, #624]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008800:	f043 0310 	orr.w	r3, r3, #16
 8008804:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008808:	4b99      	ldr	r3, [pc, #612]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 800880a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800880e:	f003 0310 	and.w	r3, r3, #16
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008816:	4b96      	ldr	r3, [pc, #600]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800881c:	4a94      	ldr	r2, [pc, #592]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008826:	4b92      	ldr	r3, [pc, #584]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008834:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800883c:	2302      	movs	r3, #2
 800883e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008842:	2300      	movs	r3, #0
 8008844:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008848:	2300      	movs	r3, #0
 800884a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800884e:	2307      	movs	r3, #7
 8008850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008854:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008858:	4619      	mov	r1, r3
 800885a:	4886      	ldr	r0, [pc, #536]	; (8008a74 <HAL_UART_MspInit+0x2ac>)
 800885c:	f006 f80e 	bl	800e87c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008860:	e0ff      	b.n	8008a62 <HAL_UART_MspInit+0x29a>
  else if(uartHandle->Instance==USART3)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a84      	ldr	r2, [pc, #528]	; (8008a78 <HAL_UART_MspInit+0x2b0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d15c      	bne.n	8008926 <HAL_UART_MspInit+0x15e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800886c:	2302      	movs	r3, #2
 800886e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 21;
 8008870:	2315      	movs	r3, #21
 8008872:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 126;
 8008874:	237e      	movs	r3, #126	; 0x7e
 8008876:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8008878:	2302      	movs	r3, #2
 800887a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800887c:	2302      	movs	r3, #2
 800887e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8008880:	2302      	movs	r3, #2
 8008882:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8008884:	2300      	movs	r3, #0
 8008886:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8008888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800888c:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8008892:	2302      	movs	r3, #2
 8008894:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008898:	f107 0320 	add.w	r3, r7, #32
 800889c:	4618      	mov	r0, r3
 800889e:	f008 ff9b 	bl	80117d8 <HAL_RCCEx_PeriphCLKConfig>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80088a8:	f7fe ffdc 	bl	8007864 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80088ac:	4b70      	ldr	r3, [pc, #448]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 80088ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088b2:	4a6f      	ldr	r2, [pc, #444]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 80088b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80088bc:	4b6c      	ldr	r3, [pc, #432]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 80088be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80088ca:	4b69      	ldr	r3, [pc, #420]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 80088cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088d0:	4a67      	ldr	r2, [pc, #412]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 80088d2:	f043 0308 	orr.w	r3, r3, #8
 80088d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088da:	4b65      	ldr	r3, [pc, #404]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 80088dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESP32_TX_Pin|ESP32_RX_Pin;
 80088e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80088ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f0:	2302      	movs	r3, #2
 80088f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008902:	2307      	movs	r3, #7
 8008904:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008908:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800890c:	4619      	mov	r1, r3
 800890e:	485b      	ldr	r0, [pc, #364]	; (8008a7c <HAL_UART_MspInit+0x2b4>)
 8008910:	f005 ffb4 	bl	800e87c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8008914:	2200      	movs	r2, #0
 8008916:	2105      	movs	r1, #5
 8008918:	2027      	movs	r0, #39	; 0x27
 800891a:	f003 f8c3 	bl	800baa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800891e:	2027      	movs	r0, #39	; 0x27
 8008920:	f003 f8da 	bl	800bad8 <HAL_NVIC_EnableIRQ>
}
 8008924:	e09d      	b.n	8008a62 <HAL_UART_MspInit+0x29a>
  else if(uartHandle->Instance==USART6)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a55      	ldr	r2, [pc, #340]	; (8008a80 <HAL_UART_MspInit+0x2b8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	f040 8098 	bne.w	8008a62 <HAL_UART_MspInit+0x29a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008932:	4b4f      	ldr	r3, [pc, #316]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008938:	4a4d      	ldr	r2, [pc, #308]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 800893a:	f043 0320 	orr.w	r3, r3, #32
 800893e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008942:	4b4b      	ldr	r3, [pc, #300]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008948:	f003 0320 	and.w	r3, r3, #32
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008950:	4b47      	ldr	r3, [pc, #284]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008956:	4a46      	ldr	r2, [pc, #280]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008958:	f043 0304 	orr.w	r3, r3, #4
 800895c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008960:	4b43      	ldr	r3, [pc, #268]	; (8008a70 <HAL_UART_MspInit+0x2a8>)
 8008962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	60bb      	str	r3, [r7, #8]
 800896c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 800896e:	23c0      	movs	r3, #192	; 0xc0
 8008970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008974:	2302      	movs	r3, #2
 8008976:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897a:	2300      	movs	r3, #0
 800897c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008980:	2300      	movs	r3, #0
 8008982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8008986:	2307      	movs	r3, #7
 8008988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800898c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008990:	4619      	mov	r1, r3
 8008992:	483c      	ldr	r0, [pc, #240]	; (8008a84 <HAL_UART_MspInit+0x2bc>)
 8008994:	f005 ff72 	bl	800e87c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream0;
 8008998:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 800899a:	4a3c      	ldr	r2, [pc, #240]	; (8008a8c <HAL_UART_MspInit+0x2c4>)
 800899c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 800899e:	4b3a      	ldr	r3, [pc, #232]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089a0:	2247      	movs	r2, #71	; 0x47
 80089a2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80089a4:	4b38      	ldr	r3, [pc, #224]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089aa:	4b37      	ldr	r3, [pc, #220]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80089b0:	4b35      	ldr	r3, [pc, #212]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089b6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089b8:	4b33      	ldr	r3, [pc, #204]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089be:	4b32      	ldr	r3, [pc, #200]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80089c4:	4b30      	ldr	r3, [pc, #192]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089ca:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80089cc:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80089d2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089d4:	4b2c      	ldr	r3, [pc, #176]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80089da:	482b      	ldr	r0, [pc, #172]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089dc:	f003 f906 	bl	800bbec <HAL_DMA_Init>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_UART_MspInit+0x222>
      Error_Handler();
 80089e6:	f7fe ff3d 	bl	8007864 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a26      	ldr	r2, [pc, #152]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089ee:	67da      	str	r2, [r3, #124]	; 0x7c
 80089f0:	4a25      	ldr	r2, [pc, #148]	; (8008a88 <HAL_UART_MspInit+0x2c0>)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream1;
 80089f6:	4b26      	ldr	r3, [pc, #152]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 80089f8:	4a26      	ldr	r2, [pc, #152]	; (8008a94 <HAL_UART_MspInit+0x2cc>)
 80089fa:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80089fc:	4b24      	ldr	r3, [pc, #144]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 80089fe:	2248      	movs	r2, #72	; 0x48
 8008a00:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a02:	4b23      	ldr	r3, [pc, #140]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a04:	2240      	movs	r2, #64	; 0x40
 8008a06:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a08:	4b21      	ldr	r3, [pc, #132]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a0e:	4b20      	ldr	r3, [pc, #128]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a14:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a16:	4b1e      	ldr	r3, [pc, #120]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8008a22:	4b1b      	ldr	r3, [pc, #108]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008a28:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a2e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a30:	4b17      	ldr	r3, [pc, #92]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8008a36:	4816      	ldr	r0, [pc, #88]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a38:	f003 f8d8 	bl	800bbec <HAL_DMA_Init>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_UART_MspInit+0x27e>
      Error_Handler();
 8008a42:	f7fe ff0f 	bl	8007864 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a11      	ldr	r2, [pc, #68]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a4a:	679a      	str	r2, [r3, #120]	; 0x78
 8008a4c:	4a10      	ldr	r2, [pc, #64]	; (8008a90 <HAL_UART_MspInit+0x2c8>)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2105      	movs	r1, #5
 8008a56:	2047      	movs	r0, #71	; 0x47
 8008a58:	f003 f824 	bl	800baa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008a5c:	2047      	movs	r0, #71	; 0x47
 8008a5e:	f003 f83b 	bl	800bad8 <HAL_NVIC_EnableIRQ>
}
 8008a62:	bf00      	nop
 8008a64:	37f0      	adds	r7, #240	; 0xf0
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40011000 	.word	0x40011000
 8008a70:	58024400 	.word	0x58024400
 8008a74:	58020000 	.word	0x58020000
 8008a78:	40004800 	.word	0x40004800
 8008a7c:	58020c00 	.word	0x58020c00
 8008a80:	40011400 	.word	0x40011400
 8008a84:	58020800 	.word	0x58020800
 8008a88:	24003de8 	.word	0x24003de8
 8008a8c:	40020410 	.word	0x40020410
 8008a90:	24003e60 	.word	0x24003e60
 8008a94:	40020428 	.word	0x40020428

08008a98 <playMusic>:
 *
 *  Created on: Aug 2, 2022
 *      Author: Naim
 */
#include "userDef/userDef.h"
void playMusic(int *Melody, int dim, int *Time) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
	int i = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	617b      	str	r3, [r7, #20]

	while (i < dim) {
 8008aa8:	e024      	b.n	8008af4 <playMusic+0x5c>
		HAL_TIM_OC_Start(&BUZZER_HTIM, BUZZER_CHN);
 8008aaa:	2100      	movs	r1, #0
 8008aac:	4819      	ldr	r0, [pc, #100]	; (8008b14 <playMusic+0x7c>)
 8008aae:	f00d f8f7 	bl	8015ca0 <HAL_TIM_OC_Start>
		htim2.Instance->ARR = Melody[i];
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	4b15      	ldr	r3, [pc, #84]	; (8008b14 <playMusic+0x7c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	62da      	str	r2, [r3, #44]	; 0x2c
		_managedDelay(Time[i] / 2);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da00      	bge.n	8008ad2 <playMusic+0x3a>
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	105b      	asrs	r3, r3, #1
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fb fdcd 	bl	8004674 <_managedDelay>
		_managedDelay(5);
 8008ada:	2005      	movs	r0, #5
 8008adc:	f7fb fdca 	bl	8004674 <_managedDelay>
		HAL_TIM_OC_Stop(&BUZZER_HTIM, BUZZER_CHN);
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	480c      	ldr	r0, [pc, #48]	; (8008b14 <playMusic+0x7c>)
 8008ae4:	f00d f9ea 	bl	8015ebc <HAL_TIM_OC_Stop>
		_managedDelay(5);
 8008ae8:	2005      	movs	r0, #5
 8008aea:	f7fb fdc3 	bl	8004674 <_managedDelay>
		i++;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	3301      	adds	r3, #1
 8008af2:	617b      	str	r3, [r7, #20]
	while (i < dim) {
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	dbd6      	blt.n	8008aaa <playMusic+0x12>
	}
	HAL_TIM_PWM_Stop(&BUZZER_HTIM, BUZZER_CHN);
 8008afc:	2100      	movs	r1, #0
 8008afe:	4805      	ldr	r0, [pc, #20]	; (8008b14 <playMusic+0x7c>)
 8008b00:	f00d fbe2 	bl	80162c8 <HAL_TIM_PWM_Stop>
	HAL_TIM_OC_Stop(&BUZZER_HTIM, BUZZER_CHN);
 8008b04:	2100      	movs	r1, #0
 8008b06:	4803      	ldr	r0, [pc, #12]	; (8008b14 <playMusic+0x7c>)
 8008b08:	f00d f9d8 	bl	8015ebc <HAL_TIM_OC_Stop>
}
 8008b0c:	bf00      	nop
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	24003ba0 	.word	0x24003ba0

08008b18 <playStartSystem>:
void playStartSystem() {
 8008b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	b097      	sub	sp, #92	; 0x5c
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	466b      	mov	r3, sp
 8008b22:	461e      	mov	r6, r3

	int m[] = { NOTE_FS5, NOTE_FS5, NOTE_D5, NOTE_B4, REST, NOTE_B4, REST,
 8008b24:	4a26      	ldr	r2, [pc, #152]	; (8008bc0 <playStartSystem+0xa8>)
 8008b26:	463b      	mov	r3, r7
 8008b28:	4611      	mov	r1, r2
 8008b2a:	2248      	movs	r2, #72	; 0x48
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f019 f9f1 	bl	8021f14 <memcpy>
			NOTE_E5,
			REST, NOTE_E5, REST, NOTE_E5, NOTE_GS5, NOTE_GS5, NOTE_A5, NOTE_B5,
			NOTE_A5, NOTE_A5 };
	int dim = sizeof(m) / sizeof(int);
 8008b32:	2312      	movs	r3, #18
 8008b34:	653b      	str	r3, [r7, #80]	; 0x50
	int t[dim];
 8008b36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b38:	1e4b      	subs	r3, r1, #1
 8008b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b3c:	460a      	mov	r2, r1
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4690      	mov	r8, r2
 8008b42:	4699      	mov	r9, r3
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	f04f 0300 	mov.w	r3, #0
 8008b4c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8008b50:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8008b54:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8008b58:	460a      	mov	r2, r1
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	461d      	mov	r5, r3
 8008b60:	f04f 0200 	mov.w	r2, #0
 8008b64:	f04f 0300 	mov.w	r3, #0
 8008b68:	016b      	lsls	r3, r5, #5
 8008b6a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8008b6e:	0162      	lsls	r2, r4, #5
 8008b70:	460b      	mov	r3, r1
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	3307      	adds	r3, #7
 8008b76:	08db      	lsrs	r3, r3, #3
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	ebad 0d03 	sub.w	sp, sp, r3
 8008b7e:	466b      	mov	r3, sp
 8008b80:	3303      	adds	r3, #3
 8008b82:	089b      	lsrs	r3, r3, #2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	64bb      	str	r3, [r7, #72]	; 0x48
	for (int i = 0; i < dim; i++) {
 8008b88:	2300      	movs	r3, #0
 8008b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008b8c:	e007      	b.n	8008b9e <playStartSystem+0x86>
		t[i] = 95;
 8008b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b92:	215f      	movs	r1, #95	; 0x5f
 8008b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < dim; i++) {
 8008b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	dbf3      	blt.n	8008b8e <playStartSystem+0x76>
	}
	playMusic(m, dim, t);
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff ff73 	bl	8008a98 <playMusic>
 8008bb2:	46b5      	mov	sp, r6
}
 8008bb4:	bf00      	nop
 8008bb6:	375c      	adds	r7, #92	; 0x5c
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bbe:	bf00      	nop
 8008bc0:	08027988 	.word	0x08027988

08008bc4 <playStartCalib>:

void playStartCalib() {
 8008bc4:	b5b0      	push	{r4, r5, r7, lr}
 8008bc6:	b08a      	sub	sp, #40	; 0x28
 8008bc8:	af00      	add	r7, sp, #0
	int m[5] = { NOTE_A6, NOTE_AS5, NOTE_A1, NOTE_CS5, NOTE_F1 };
 8008bca:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <playStartCalib+0x3c>)
 8008bcc:	f107 0414 	add.w	r4, r7, #20
 8008bd0:	461d      	mov	r5, r3
 8008bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	6023      	str	r3, [r4, #0]
	int t[5] = { 100, 100, 100, 50, 75 };
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <playStartCalib+0x40>)
 8008bdc:	463c      	mov	r4, r7
 8008bde:	461d      	mov	r5, r3
 8008be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	6023      	str	r3, [r4, #0]
	playMusic(m, 5, t);
 8008be8:	463a      	mov	r2, r7
 8008bea:	f107 0314 	add.w	r3, r7, #20
 8008bee:	2105      	movs	r1, #5
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff ff51 	bl	8008a98 <playMusic>
}
 8008bf6:	bf00      	nop
 8008bf8:	3728      	adds	r7, #40	; 0x28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	080279d0 	.word	0x080279d0
 8008c04:	080279e4 	.word	0x080279e4

08008c08 <playEndCalib>:

void playEndCalib() {
 8008c08:	b5b0      	push	{r4, r5, r7, lr}
 8008c0a:	b08a      	sub	sp, #40	; 0x28
 8008c0c:	af00      	add	r7, sp, #0
	int m[5] = { NOTE_C6, NOTE_CS5, NOTE_C1,NOTE_A6, NOTE_AS5, };
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <playEndCalib+0x3c>)
 8008c10:	f107 0414 	add.w	r4, r7, #20
 8008c14:	461d      	mov	r5, r3
 8008c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	6023      	str	r3, [r4, #0]
	int t[5] = { 75, 50, 100, 100, 100 };
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <playEndCalib+0x40>)
 8008c20:	463c      	mov	r4, r7
 8008c22:	461d      	mov	r5, r3
 8008c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	6023      	str	r3, [r4, #0]
	playMusic(m, 5, t);
 8008c2c:	463a      	mov	r2, r7
 8008c2e:	f107 0314 	add.w	r3, r7, #20
 8008c32:	2105      	movs	r1, #5
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff ff2f 	bl	8008a98 <playMusic>
}
 8008c3a:	bf00      	nop
 8008c3c:	3728      	adds	r7, #40	; 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bdb0      	pop	{r4, r5, r7, pc}
 8008c42:	bf00      	nop
 8008c44:	080279f8 	.word	0x080279f8
 8008c48:	08027a0c 	.word	0x08027a0c

08008c4c <playRescue>:
void playDisarm() {
	int m[3] = { NOTE_FS6, NOTE_FS5, NOTE_AS6 };
	int t[3] = { 400, 300, 250 };
	playMusic(m, 3, t);
}
void playRescue() {
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	b095      	sub	sp, #84	; 0x54
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	466b      	mov	r3, sp
 8008c56:	461e      	mov	r6, r3
	int m[] = { NOTE_FS5, NOTE_FS5, NOTE_D5, NOTE_B4, REST, NOTE_B4,NOTE_E5, NOTE_GS5, NOTE_GS5, NOTE_A5, NOTE_B5,
 8008c58:	4b2a      	ldr	r3, [pc, #168]	; (8008d04 <playRescue+0xb8>)
 8008c5a:	463c      	mov	r4, r7
 8008c5c:	461d      	mov	r5, r3
 8008c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			NOTE_A5, NOTE_A5,NOTE_FS5, NOTE_FS5, NOTE_D5 };
	int dim = sizeof(m) / sizeof(int);
 8008c72:	2310      	movs	r3, #16
 8008c74:	64bb      	str	r3, [r7, #72]	; 0x48
		int t[dim];
 8008c76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008c78:	1e4b      	subs	r3, r1, #1
 8008c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c7c:	460a      	mov	r2, r1
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4692      	mov	sl, r2
 8008c82:	469b      	mov	fp, r3
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8008c90:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8008c94:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8008c98:	460a      	mov	r2, r1
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	4699      	mov	r9, r3
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8008cac:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8008cb0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	3307      	adds	r3, #7
 8008cba:	08db      	lsrs	r3, r3, #3
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	ebad 0d03 	sub.w	sp, sp, r3
 8008cc2:	466b      	mov	r3, sp
 8008cc4:	3303      	adds	r3, #3
 8008cc6:	089b      	lsrs	r3, r3, #2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	643b      	str	r3, [r7, #64]	; 0x40
		for (int i = 0; i < dim; i++) {
 8008ccc:	2300      	movs	r3, #0
 8008cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cd0:	e008      	b.n	8008ce4 <playRescue+0x98>
			t[i] = 500;
 8008cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 0; i < dim; i++) {
 8008cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	dbf2      	blt.n	8008cd2 <playRescue+0x86>
		}
		playMusic(m, dim, t);
 8008cec:	463b      	mov	r3, r7
 8008cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cf0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fed0 	bl	8008a98 <playMusic>
 8008cf8:	46b5      	mov	sp, r6
}
 8008cfa:	bf00      	nop
 8008cfc:	3754      	adds	r7, #84	; 0x54
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d04:	08027a40 	.word	0x08027a40

08008d08 <setRTC>:
float V_SENSOR_MULTIPLIER = 11.039525f;
float tempBat = 0.0f, tempAdc = 0.0f, prevBatV = 0.0f;

/****************************RTC CONFIG*************************************/
void setRTC(uint8_t h, uint8_t m, uint8_t s, uint8_t day, uint8_t month,
		uint8_t date) {
 8008d08:	b590      	push	{r4, r7, lr}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af04      	add	r7, sp, #16
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4608      	mov	r0, r1
 8008d12:	4611      	mov	r1, r2
 8008d14:	461a      	mov	r2, r3
 8008d16:	4623      	mov	r3, r4
 8008d18:	71fb      	strb	r3, [r7, #7]
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71bb      	strb	r3, [r7, #6]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	717b      	strb	r3, [r7, #5]
 8008d22:	4613      	mov	r3, r2
 8008d24:	713b      	strb	r3, [r7, #4]
	set_time(h, m, s, day, month, date, 1);
 8008d26:	793c      	ldrb	r4, [r7, #4]
 8008d28:	797a      	ldrb	r2, [r7, #5]
 8008d2a:	79b9      	ldrb	r1, [r7, #6]
 8008d2c:	79f8      	ldrb	r0, [r7, #7]
 8008d2e:	2301      	movs	r3, #1
 8008d30:	9302      	str	r3, [sp, #8]
 8008d32:	7f3b      	ldrb	r3, [r7, #28]
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	7e3b      	ldrb	r3, [r7, #24]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	f000 f804 	bl	8008d48 <set_time>
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd90      	pop	{r4, r7, pc}

08008d48 <set_time>:
void set_time(uint8_t h, uint8_t m, uint8_t s, uint8_t day, uint8_t month,
		uint8_t date, uint8_t setTimeFlag) {
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b089      	sub	sp, #36	; 0x24
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	461a      	mov	r2, r3
 8008d56:	4623      	mov	r3, r4
 8008d58:	71fb      	strb	r3, [r7, #7]
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	71bb      	strb	r3, [r7, #6]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	717b      	strb	r3, [r7, #5]
 8008d62:	4613      	mov	r3, r2
 8008d64:	713b      	strb	r3, [r7, #4]
	 *											  *
	 * ********** RTC Function EDITED *********** *
	 * 											  *
	 *											  */

	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32f2 || setTimeFlag) {
 8008d66:	2101      	movs	r1, #1
 8008d68:	4821      	ldr	r0, [pc, #132]	; (8008df0 <set_time+0xa8>)
 8008d6a:	f00b f9f3 	bl	8014154 <HAL_RTCEx_BKUPRead>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d103      	bne.n	8008d80 <set_time+0x38>
 8008d78:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d032      	beq.n	8008de6 <set_time+0x9e>
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;

		/** Initialize RTC and set the Time and Date**/

		sTime.Hours = h;
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	733b      	strb	r3, [r7, #12]
		sTime.Minutes = m;
 8008d84:	79bb      	ldrb	r3, [r7, #6]
 8008d86:	737b      	strb	r3, [r7, #13]
		sTime.Seconds = s;
 8008d88:	797b      	ldrb	r3, [r7, #5]
 8008d8a:	73bb      	strb	r3, [r7, #14]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61bb      	str	r3, [r7, #24]
		sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8008d90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d94:	61fb      	str	r3, [r7, #28]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8008d96:	f107 030c 	add.w	r3, r7, #12
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4814      	ldr	r0, [pc, #80]	; (8008df0 <set_time+0xa8>)
 8008da0:	f00a ff1e 	bl	8013be0 <HAL_RTC_SetTime>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <set_time+0x66>
			Error_Handler();
 8008daa:	f7fe fd5b 	bl	8007864 <Error_Handler>
		}
		sDate.WeekDay = day;
 8008dae:	793b      	ldrb	r3, [r7, #4]
 8008db0:	723b      	strb	r3, [r7, #8]
		sDate.Month = month;
 8008db2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008db6:	727b      	strb	r3, [r7, #9]
		sDate.Date = date;
 8008db8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008dbc:	72bb      	strb	r3, [r7, #10]
		sDate.Year = 22;
 8008dbe:	2316      	movs	r3, #22
 8008dc0:	72fb      	strb	r3, [r7, #11]

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8008dc2:	f107 0308 	add.w	r3, r7, #8
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4809      	ldr	r0, [pc, #36]	; (8008df0 <set_time+0xa8>)
 8008dcc:	f00b f802 	bl	8013dd4 <HAL_RTC_SetDate>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <set_time+0x92>
			Error_Handler();
 8008dd6:	f7fe fd45 	bl	8007864 <Error_Handler>
		}
		/* rtc register backup to save rtc settings and not reset on cpu reset */
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32f2);
 8008dda:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8008dde:	2101      	movs	r1, #1
 8008de0:	4803      	ldr	r0, [pc, #12]	; (8008df0 <set_time+0xa8>)
 8008de2:	f00b f99f 	bl	8014124 <HAL_RTCEx_BKUPWrite>
	}

}
 8008de6:	bf00      	nop
 8008de8:	3724      	adds	r7, #36	; 0x24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd90      	pop	{r4, r7, pc}
 8008dee:	bf00      	nop
 8008df0:	24003a64 	.word	0x24003a64

08008df4 <enableIMU>:

void enableIMU() {
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
	if (MPU9255_Init(IMU_I2C, 0)) {
 8008df8:	2100      	movs	r1, #0
 8008dfa:	480c      	ldr	r0, [pc, #48]	; (8008e2c <enableIMU+0x38>)
 8008dfc:	f7f7 fe5c 	bl	8000ab8 <MPU9255_Init>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <enableIMU+0x28>
#ifdef LCD_EN
		lcd_send_string(0, 0, "IMU ERR", &lcd1);
#endif
		CLEAR_SENS_ERR(siracUydu.donanimDurumu, IMU_ERROR);
 8008e06:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <enableIMU+0x3c>)
 8008e08:	885b      	ldrh	r3, [r3, #2]
 8008e0a:	f023 0302 	bic.w	r3, r3, #2
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <enableIMU+0x3c>)
 8008e12:	805a      	strh	r2, [r3, #2]
		ringbuf_init(&AccRingBuf);
 8008e14:	4807      	ldr	r0, [pc, #28]	; (8008e34 <enableIMU+0x40>)
 8008e16:	f7fc fc6f 	bl	80056f8 <ringbuf_init>
		return;
 8008e1a:	e006      	b.n	8008e2a <enableIMU+0x36>
	}

	//static RINGBUF imuRingBuf;
	SET_SENS_ERR(siracUydu.donanimDurumu, IMU_ERROR);
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <enableIMU+0x3c>)
 8008e1e:	885b      	ldrh	r3, [r3, #2]
 8008e20:	f043 0302 	orr.w	r3, r3, #2
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <enableIMU+0x3c>)
 8008e28:	805a      	strh	r2, [r3, #2]
}
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	240028e0 	.word	0x240028e0
 8008e30:	24000018 	.word	0x24000018
 8008e34:	24003f2c 	.word	0x24003f2c

08008e38 <enableBaro>:

void enableBaro() {
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
	if (MS5611_Init(&siracUydu.sensorVerisi.baro, BARO_I2C)
 8008e3c:	492c      	ldr	r1, [pc, #176]	; (8008ef0 <enableBaro+0xb8>)
 8008e3e:	482d      	ldr	r0, [pc, #180]	; (8008ef4 <enableBaro+0xbc>)
 8008e40:	f7fc f8a0 	bl	8004f84 <MS5611_Init>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d007      	beq.n	8008e5a <enableBaro+0x22>
			!= MS5611_SENSOR_OK) {
#ifdef LCD_EN
		lcd_send_string(1, 0, "MS5611 ERR", &lcd1);
#endif
		SET_SENS_ERR(siracUydu.donanimDurumu, BARO_ERROR);
 8008e4a:	4b2b      	ldr	r3, [pc, #172]	; (8008ef8 <enableBaro+0xc0>)
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <enableBaro+0xc0>)
 8008e56:	805a      	strh	r2, [r3, #2]
		return;
 8008e58:	e044      	b.n	8008ee4 <enableBaro+0xac>
	}

	MS5611_AveragedSample(&siracUydu.sensorVerisi.baro, 100, 0);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2164      	movs	r1, #100	; 0x64
 8008e5e:	4825      	ldr	r0, [pc, #148]	; (8008ef4 <enableBaro+0xbc>)
 8008e60:	f7fc f8de 	bl	8005020 <MS5611_AveragedSample>
	siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm = __getAlt(
 8008e64:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <enableBaro+0xc0>)
 8008e66:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <enableBaro+0xc0>)
 8008e6c:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8008e70:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8008efc <enableBaro+0xc4>
 8008e74:	eef0 0a47 	vmov.f32	s1, s14
 8008e78:	eeb0 0a67 	vmov.f32	s0, s15
 8008e7c:	f7fc f978 	bl	8005170 <__getAlt>
 8008e80:	eef0 7a40 	vmov.f32	s15, s0
 8008e84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			siracUydu.sensorVerisi.baro.avgPres_hpa,
			siracUydu.sensorVerisi.baro.Temp_C, ALTITUDE_REFERENCE_PRESSURE)
			* 100.0;
 8008e88:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8008ee8 <enableBaro+0xb0>
 8008e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm = __getAlt(
 8008e94:	4b18      	ldr	r3, [pc, #96]	; (8008ef8 <enableBaro+0xc0>)
 8008e96:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
	MS5611_InitializeSampleStateMachine(&siracUydu.sensorVerisi.baro);
 8008e9a:	4816      	ldr	r0, [pc, #88]	; (8008ef4 <enableBaro+0xbc>)
 8008e9c:	f7fc fbbc 	bl	8005618 <MS5611_InitializeSampleStateMachine>
	siracUydu.sensorVerisi.irtifHizVerisi.GroundAltitude_cm =
			siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm;
 8008ea0:	4b15      	ldr	r3, [pc, #84]	; (8008ef8 <enableBaro+0xc0>)
 8008ea2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	siracUydu.sensorVerisi.irtifHizVerisi.GroundAltitude_cm =
 8008ea6:	4a14      	ldr	r2, [pc, #80]	; (8008ef8 <enableBaro+0xc0>)
 8008ea8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	siracUydu.sensorVerisi.irtifHizVerisi.PrevAltitude_m =
			siracUydu.sensorVerisi.irtifHizVerisi.Altitude_cm * 100.0;
 8008eac:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <enableBaro+0xc0>)
 8008eae:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8008eb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008eb6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8008ee8 <enableBaro+0xb0>
 8008eba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ebe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	siracUydu.sensorVerisi.irtifHizVerisi.PrevAltitude_m =
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <enableBaro+0xc0>)
 8008ec4:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
	ringbuf_init(&BaroRingBuf);
 8008ec8:	480d      	ldr	r0, [pc, #52]	; (8008f00 <enableBaro+0xc8>)
 8008eca:	f7fc fc15 	bl	80056f8 <ringbuf_init>
	ringbuf_init(&AltRingBuf);
 8008ece:	480d      	ldr	r0, [pc, #52]	; (8008f04 <enableBaro+0xcc>)
 8008ed0:	f7fc fc12 	bl	80056f8 <ringbuf_init>
	CLEAR_SENS_ERR(siracUydu.donanimDurumu, BARO_ERROR);
 8008ed4:	4b08      	ldr	r3, [pc, #32]	; (8008ef8 <enableBaro+0xc0>)
 8008ed6:	885b      	ldrh	r3, [r3, #2]
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <enableBaro+0xc0>)
 8008ee0:	805a      	strh	r2, [r3, #2]
	return;
 8008ee2:	bf00      	nop
}
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	00000000 	.word	0x00000000
 8008eec:	40590000 	.word	0x40590000
 8008ef0:	240028e0 	.word	0x240028e0
 8008ef4:	2400006c 	.word	0x2400006c
 8008ef8:	24000018 	.word	0x24000018
 8008efc:	447d5000 	.word	0x447d5000
 8008f00:	24003ed8 	.word	0x24003ed8
 8008f04:	24003f80 	.word	0x24003f80

08008f08 <enableGPS>:

void enableGPS() {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
	lwgps_init(&siracUydu.sensorVerisi.gps);
 8008f0c:	480d      	ldr	r0, [pc, #52]	; (8008f44 <enableGPS+0x3c>)
 8008f0e:	f7f7 fdc5 	bl	8000a9c <lwgps_init>
	_managedDelay(200);
 8008f12:	20c8      	movs	r0, #200	; 0xc8
 8008f14:	f7fb fbae 	bl	8004674 <_managedDelay>
	if (siracUydu.sensorVerisi.gps.p.star == 0) {
 8008f18:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <enableGPS+0x40>)
 8008f1a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <enableGPS+0x2a>
		SET_SENS_ERR(siracUydu.donanimDurumu, GPS_ERROR);
 8008f22:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <enableGPS+0x40>)
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	f043 0310 	orr.w	r3, r3, #16
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <enableGPS+0x40>)
 8008f2e:	805a      	strh	r2, [r3, #2]
		return;
 8008f30:	e006      	b.n	8008f40 <enableGPS+0x38>
	}
	CLEAR_SENS_ERR(siracUydu.donanimDurumu, GPS_ERROR);
 8008f32:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <enableGPS+0x40>)
 8008f34:	885b      	ldrh	r3, [r3, #2]
 8008f36:	f023 0310 	bic.w	r3, r3, #16
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <enableGPS+0x40>)
 8008f3e:	805a      	strh	r2, [r3, #2]
}
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	24000080 	.word	0x24000080
 8008f48:	24000018 	.word	0x24000018

08008f4c <enableUV>:

void enableUV() {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
	SET_SENS_ERR(siracUydu.donanimDurumu, UV_ERROR);
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <enableUV+0x64>)
 8008f54:	885b      	ldrh	r3, [r3, #2]
 8008f56:	f043 0304 	orr.w	r3, r3, #4
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <enableUV+0x64>)
 8008f5e:	805a      	strh	r2, [r3, #2]
	HAL_StatusTypeDef ret = HAL_ADC_Stop(UV_ADC);
 8008f60:	4814      	ldr	r0, [pc, #80]	; (8008fb4 <enableUV+0x68>)
 8008f62:	f001 fd1b 	bl	800a99c <HAL_ADC_Stop>
 8008f66:	4603      	mov	r3, r0
 8008f68:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <enableUV+0x28>
		Error_Handler();
 8008f70:	f7fe fc78 	bl	8007864 <Error_Handler>
	}

	HAL_Delay(10);
 8008f74:	200a      	movs	r0, #10
 8008f76:	f001 f82d 	bl	8009fd4 <HAL_Delay>

	/* Choose type of measurement
	 ADC_SINGLE_ENDED
	 ADC_DIFFERENTIAL_ENDED
	 */
	ret = HAL_ADCEx_Calibration_Start(UV_ADC, ADC_CALIB_OFFSET,
 8008f7a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008f7e:	2100      	movs	r1, #0
 8008f80:	480c      	ldr	r0, [pc, #48]	; (8008fb4 <enableUV+0x68>)
 8008f82:	f002 fc73 	bl	800b86c <HAL_ADCEx_Calibration_Start>
 8008f86:	4603      	mov	r3, r0
 8008f88:	71fb      	strb	r3, [r7, #7]
	ADC_SINGLE_ENDED);
	if (ret != HAL_OK) {
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <enableUV+0x48>
		Error_Handler();
 8008f90:	f7fe fc68 	bl	8007864 <Error_Handler>
	}
	// Small delay to ensure end of calibration procedure
	CLEAR_SENS_ERR(siracUydu.donanimDurumu, UV_ERROR);
 8008f94:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <enableUV+0x64>)
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	f023 0304 	bic.w	r3, r3, #4
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <enableUV+0x64>)
 8008fa0:	805a      	strh	r2, [r3, #2]
	HAL_Delay(100);
 8008fa2:	2064      	movs	r0, #100	; 0x64
 8008fa4:	f001 f816 	bl	8009fd4 <HAL_Delay>
	return;
 8008fa8:	bf00      	nop
}
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	24000018 	.word	0x24000018
 8008fb4:	24000670 	.word	0x24000670

08008fb8 <enableFlash>:

void enableFlash() {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
	if (w25qxx_Init()) {
 8008fbc:	f000 fb0e 	bl	80095dc <w25qxx_Init>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d014      	beq.n	8008ff0 <enableFlash+0x38>
		HAL_Delay(5);
 8008fc6:	2005      	movs	r0, #5
 8008fc8:	f001 f804 	bl	8009fd4 <HAL_Delay>
		printf("FLASH CHIP ID: %d\n", w25qxx_GetID());
 8008fcc:	f000 fb28 	bl	8009620 <w25qxx_GetID>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	480a      	ldr	r0, [pc, #40]	; (8009000 <enableFlash+0x48>)
 8008fd6:	f019 fedb 	bl	8022d90 <iprintf>
		HAL_Delay(25);
 8008fda:	2019      	movs	r0, #25
 8008fdc:	f000 fffa 	bl	8009fd4 <HAL_Delay>
		CLEAR_SENS_ERR(siracUydu.donanimDurumu, FLASH_ERROR);
 8008fe0:	4b08      	ldr	r3, [pc, #32]	; (8009004 <enableFlash+0x4c>)
 8008fe2:	885b      	ldrh	r3, [r3, #2]
 8008fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	4b06      	ldr	r3, [pc, #24]	; (8009004 <enableFlash+0x4c>)
 8008fec:	805a      	strh	r2, [r3, #2]
		return;
 8008fee:	e006      	b.n	8008ffe <enableFlash+0x46>
	}
	SET_SENS_ERR(siracUydu.donanimDurumu, FLASH_ERROR);
 8008ff0:	4b04      	ldr	r3, [pc, #16]	; (8009004 <enableFlash+0x4c>)
 8008ff2:	885b      	ldrh	r3, [r3, #2]
 8008ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	4b02      	ldr	r3, [pc, #8]	; (8009004 <enableFlash+0x4c>)
 8008ffc:	805a      	strh	r2, [r3, #2]
}
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	08027a80 	.word	0x08027a80
 8009004:	24000018 	.word	0x24000018

08009008 <EraseFlash>:

void EraseFlash(uint8_t withFormat) {
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	71fb      	strb	r3, [r7, #7]
	if (withFormat) {
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00d      	beq.n	8009034 <EraseFlash+0x2c>
		printf("ERASING CHIP AFTER 2Sec...\n");
 8009018:	4810      	ldr	r0, [pc, #64]	; (800905c <EraseFlash+0x54>)
 800901a:	f019 ff3f 	bl	8022e9c <puts>
		HAL_Delay(2000);
 800901e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009022:	f000 ffd7 	bl	8009fd4 <HAL_Delay>
		printf("ERASE CHIP VAL: %d\n", W25qxx_EraseChip()); // approx 13 second to execute
 8009026:	f000 fc07 	bl	8009838 <W25qxx_EraseChip>
 800902a:	4603      	mov	r3, r0
 800902c:	4619      	mov	r1, r3
 800902e:	480c      	ldr	r0, [pc, #48]	; (8009060 <EraseFlash+0x58>)
 8009030:	f019 feae 	bl	8022d90 <iprintf>
	}
	uint8_t datatemp[FLASH_SIZE_OF_PACKET_BYTE];
	sprintf((char*) datatemp, "%d", 0);
 8009034:	f107 030c 	add.w	r3, r7, #12
 8009038:	2200      	movs	r2, #0
 800903a:	490a      	ldr	r1, [pc, #40]	; (8009064 <EraseFlash+0x5c>)
 800903c:	4618      	mov	r0, r3
 800903e:	f019 ffe9 	bl	8023014 <siprintf>
	W25qxx_Write(datatemp, FLASH_ADD_STARTING_FOR_PACKET,
 8009042:	f107 030c 	add.w	r3, r7, #12
 8009046:	220a      	movs	r2, #10
 8009048:	2100      	movs	r1, #0
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fd16 	bl	8009a7c <W25qxx_Write>
	FLASH_SIZE_OF_PACKET_BYTE);
	getPacketNum();
 8009050:	f000 f81e 	bl	8009090 <getPacketNum>
}
 8009054:	bf00      	nop
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	08027a94 	.word	0x08027a94
 8009060:	08027ab0 	.word	0x08027ab0
 8009064:	08027ac4 	.word	0x08027ac4

08009068 <saveFlightState>:
void saveFlightState() {
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
//	uint8_t datatemp[FLASH_SIZE_OF_FLIGHT_STATE_BYTE];
//	sprintf((char*) datatemp, "%d", siracUydu.uyduDurumu);
//	W25qxx_Write(datatemp, FLASH_ADD_STARTING_FOR_FLIGHT_STATE,
//	FLASH_SIZE_OF_FLIGHT_STATE_BYTE);
	return;
 800906c:	bf00      	nop
}
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <getFlightState>:
void getFlightState() {
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
//	FLASH_SIZE_OF_FLIGHT_STATE_BYTE);
//	siracUydu.uyduDurumu = atoi((char*) recFlash);
//	if (siracUydu.uyduDurumu > 0) { //printf("%d\n", paket);
//		return;
//	}
	siracUydu.uyduDurumu = BEKLEME;
 800907c:	4b03      	ldr	r3, [pc, #12]	; (800908c <getFlightState+0x14>)
 800907e:	2201      	movs	r2, #1
 8009080:	701a      	strb	r2, [r3, #0]
}
 8009082:	bf00      	nop
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	24000018 	.word	0x24000018

08009090 <getPacketNum>:
void getPacketNum() {
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
	uint8_t recFlash[FLASH_SIZE_OF_PACKET_BYTE];
	W25qxx_Read(recFlash, FLASH_ADD_STARTING_FOR_PACKET,
 8009096:	1d3b      	adds	r3, r7, #4
 8009098:	220a      	movs	r2, #10
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fc5d 	bl	800995c <W25qxx_Read>
	FLASH_SIZE_OF_PACKET_BYTE);
	siracUydu.telemetri.paketNo = atoi((char*) recFlash);
 80090a2:	1d3b      	adds	r3, r7, #4
 80090a4:	4618      	mov	r0, r3
 80090a6:	f018 fe04 	bl	8021cb2 <atoi>
 80090aa:	4603      	mov	r3, r0
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	4b08      	ldr	r3, [pc, #32]	; (80090d0 <getPacketNum+0x40>)
 80090b0:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	if (siracUydu.telemetri.paketNo > 0) { //printf("%d\n", paket);
 80090b4:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <getPacketNum+0x40>)
 80090b6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <getPacketNum+0x38>
		return;
	}
	siracUydu.telemetri.paketNo = 1;
 80090be:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <getPacketNum+0x40>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
 80090c6:	e000      	b.n	80090ca <getPacketNum+0x3a>
		return;
 80090c8:	bf00      	nop
}
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	24000018 	.word	0x24000018

080090d4 <savePacketNum>:
void savePacketNum() {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
	uint8_t datatemp[FLASH_SIZE_OF_PACKET_BYTE];
	sprintf((char*) datatemp, "%d", siracUydu.telemetri.paketNo);
 80090da:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <savePacketNum+0x3c>)
 80090dc:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80090e0:	461a      	mov	r2, r3
 80090e2:	1d3b      	adds	r3, r7, #4
 80090e4:	490b      	ldr	r1, [pc, #44]	; (8009114 <savePacketNum+0x40>)
 80090e6:	4618      	mov	r0, r3
 80090e8:	f019 ff94 	bl	8023014 <siprintf>
	W25qxx_Write(datatemp, FLASH_ADD_STARTING_FOR_PACKET,
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	220a      	movs	r2, #10
 80090f0:	2100      	movs	r1, #0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fcc2 	bl	8009a7c <W25qxx_Write>
	FLASH_SIZE_OF_PACKET_BYTE);
	siracUydu.telemetri.paketNo++;
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <savePacketNum+0x3c>)
 80090fa:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80090fe:	3301      	adds	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	4b03      	ldr	r3, [pc, #12]	; (8009110 <savePacketNum+0x3c>)
 8009104:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	24000018 	.word	0x24000018
 8009114:	08027ac4 	.word	0x08027ac4

08009118 <enableSD>:
	lcd_send_string(0, 0, "YTG-Sirac", &lcd1);
	HAL_Delay(1000);
	lcd_clear(&lcd1);
}

void enableSD() {
 8009118:	b5b0      	push	{r4, r5, r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af02      	add	r7, sp, #8
	BSP_SD_Init();
 800911e:	f011 ff9b 	bl	801b058 <BSP_SD_Init>
	if ((SDMMC_Init(hsd1.Instance, hsd1.Init) != HAL_OK) | (!mount_sd())) {
 8009122:	4b2a      	ldr	r3, [pc, #168]	; (80091cc <enableSD+0xb4>)
 8009124:	681c      	ldr	r4, [r3, #0]
 8009126:	4b29      	ldr	r3, [pc, #164]	; (80091cc <enableSD+0xb4>)
 8009128:	466d      	mov	r5, sp
 800912a:	f103 0210 	add.w	r2, r3, #16
 800912e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009132:	e885 0003 	stmia.w	r5, {r0, r1}
 8009136:	3304      	adds	r3, #4
 8009138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800913a:	4620      	mov	r0, r4
 800913c:	f011 f9a8 	bl	801a490 <SDMMC_Init>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	bf14      	ite	ne
 8009146:	2301      	movne	r3, #1
 8009148:	2300      	moveq	r3, #0
 800914a:	b2dc      	uxtb	r4, r3
 800914c:	f7fc fcec 	bl	8005b28 <mount_sd>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	bf0c      	ite	eq
 8009156:	2301      	moveq	r3, #1
 8009158:	2300      	movne	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	4323      	orrs	r3, r4
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <enableSD+0x62>
		printf("SDMMC ERROR.");
 8009164:	481a      	ldr	r0, [pc, #104]	; (80091d0 <enableSD+0xb8>)
 8009166:	f019 fe13 	bl	8022d90 <iprintf>
		SET_SENS_ERR(siracUydu.donanimDurumu, SD_ERROR);
 800916a:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <enableSD+0xbc>)
 800916c:	885b      	ldrh	r3, [r3, #2]
 800916e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009172:	b29a      	uxth	r2, r3
 8009174:	4b17      	ldr	r3, [pc, #92]	; (80091d4 <enableSD+0xbc>)
 8009176:	805a      	strh	r2, [r3, #2]
		return;
 8009178:	e025      	b.n	80091c6 <enableSD+0xae>
	}
	if (check_file(FILE_NAME) == FILE_EXIST) {
 800917a:	4817      	ldr	r0, [pc, #92]	; (80091d8 <enableSD+0xc0>)
 800917c:	f7fc fe4e 	bl	8005e1c <check_file>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <enableSD+0x74>
		remove_file(FILE_NAME);
 8009186:	4814      	ldr	r0, [pc, #80]	; (80091d8 <enableSD+0xc0>)
 8009188:	f7fc fe00 	bl	8005d8c <remove_file>
	}
	if (create_file(FILE_NAME) != FILE_CREATED) {
 800918c:	4812      	ldr	r0, [pc, #72]	; (80091d8 <enableSD+0xc0>)
 800918e:	f7fc fd8b 	bl	8005ca8 <create_file>
 8009192:	4603      	mov	r3, r0
 8009194:	2b04      	cmp	r3, #4
 8009196:	d007      	beq.n	80091a8 <enableSD+0x90>
		SET_SENS_ERR(siracUydu.donanimDurumu, SD_ERROR);
 8009198:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <enableSD+0xbc>)
 800919a:	885b      	ldrh	r3, [r3, #2]
 800919c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <enableSD+0xbc>)
 80091a4:	805a      	strh	r2, [r3, #2]
		return;
 80091a6:	e00e      	b.n	80091c6 <enableSD+0xae>
	} else {
		if (write_file(FILE_NAME, "") == FILE_WRITTEN) {
 80091a8:	490c      	ldr	r1, [pc, #48]	; (80091dc <enableSD+0xc4>)
 80091aa:	480b      	ldr	r0, [pc, #44]	; (80091d8 <enableSD+0xc0>)
 80091ac:	f7fc fce0 	bl	8005b70 <write_file>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d107      	bne.n	80091c6 <enableSD+0xae>
			CLEAR_SENS_ERR(siracUydu.donanimDurumu, SD_ERROR);
 80091b6:	4b07      	ldr	r3, [pc, #28]	; (80091d4 <enableSD+0xbc>)
 80091b8:	885b      	ldrh	r3, [r3, #2]
 80091ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091be:	b29a      	uxth	r2, r3
 80091c0:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <enableSD+0xbc>)
 80091c2:	805a      	strh	r2, [r3, #2]
			return;
 80091c4:	bf00      	nop
		}
	}
}
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bdb0      	pop	{r4, r5, r7, pc}
 80091ca:	bf00      	nop
 80091cc:	24003a88 	.word	0x24003a88
 80091d0:	08027ad4 	.word	0x08027ad4
 80091d4:	24000018 	.word	0x24000018
 80091d8:	08027ae4 	.word	0x08027ae4
 80091dc:	08027aec 	.word	0x08027aec

080091e0 <enableTelemetry>:

void enableTelemetry() {
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af04      	add	r7, sp, #16
	LoRaE22_Init(&huart6, LORA_AUX_GPIO_Port, LORA_M0_GPIO_Port,
 80091e6:	2320      	movs	r3, #32
 80091e8:	9302      	str	r3, [sp, #8]
 80091ea:	2340      	movs	r3, #64	; 0x40
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	2310      	movs	r3, #16
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	4b04      	ldr	r3, [pc, #16]	; (8009204 <enableTelemetry+0x24>)
 80091f4:	4a03      	ldr	r2, [pc, #12]	; (8009204 <enableTelemetry+0x24>)
 80091f6:	4903      	ldr	r1, [pc, #12]	; (8009204 <enableTelemetry+0x24>)
 80091f8:	4803      	ldr	r0, [pc, #12]	; (8009208 <enableTelemetry+0x28>)
 80091fa:	f7fb f975 	bl	80044e8 <LoRaE22_Init>
	LORA_M1_GPIO_Port, LORA_AUX_Pin, LORA_M0_Pin, LORA_M1_Pin);
	return;
 80091fe:	bf00      	nop
}
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	58021000 	.word	0x58021000
 8009208:	24003d58 	.word	0x24003d58
 800920c:	00000000 	.word	0x00000000

08009210 <getBatVolt>:
#define VBAT_IIR 95

void getBatVolt() {
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
	HAL_ADC_Start(VBAT_ADC);
 8009216:	4834      	ldr	r0, [pc, #208]	; (80092e8 <getBatVolt+0xd8>)
 8009218:	f001 faf6 	bl	800a808 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(VBAT_ADC, 1000);
 800921c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009220:	4831      	ldr	r0, [pc, #196]	; (80092e8 <getBatVolt+0xd8>)
 8009222:	f001 fbef 	bl	800aa04 <HAL_ADC_PollForConversion>
	float adcVal = 0.0;
 8009226:	f04f 0300 	mov.w	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 20; i++) {
 800922c:	2300      	movs	r3, #0
 800922e:	60bb      	str	r3, [r7, #8]
 8009230:	e01d      	b.n	800926e <getBatVolt+0x5e>
		adcVal += (((float) HAL_ADC_GetValue(VBAT_ADC)) * 3.295 / 65535);
 8009232:	482d      	ldr	r0, [pc, #180]	; (80092e8 <getBatVolt+0xd8>)
 8009234:	f001 fcda 	bl	800abec <HAL_ADC_GetValue>
 8009238:	ee07 0a90 	vmov	s15, r0
 800923c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009244:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80092d8 <getBatVolt+0xc8>
 8009248:	ee27 7b06 	vmul.f64	d7, d7, d6
 800924c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 80092e0 <getBatVolt+0xd0>
 8009250:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8009254:	edd7 7a03 	vldr	s15, [r7, #12]
 8009258:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800925c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009260:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009264:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < 20; i++) {
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	3301      	adds	r3, #1
 800926c:	60bb      	str	r3, [r7, #8]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b13      	cmp	r3, #19
 8009272:	ddde      	ble.n	8009232 <getBatVolt+0x22>
	}
	HAL_ADC_Stop(VBAT_ADC);
 8009274:	481c      	ldr	r0, [pc, #112]	; (80092e8 <getBatVolt+0xd8>)
 8009276:	f001 fb91 	bl	800a99c <HAL_ADC_Stop>
	adcVal /= 20;
 800927a:	ed97 7a03 	vldr	s14, [r7, #12]
 800927e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8009282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009286:	edc7 7a03 	vstr	s15, [r7, #12]
	float BatVal = (adcVal * V_SENSOR_MULTIPLIER);
 800928a:	4b18      	ldr	r3, [pc, #96]	; (80092ec <getBatVolt+0xdc>)
 800928c:	edd3 7a00 	vldr	s15, [r3]
 8009290:	ed97 7a03 	vldr	s14, [r7, #12]
 8009294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009298:	edc7 7a01 	vstr	s15, [r7, #4]

	/********LOW PASS FILTER 1st***********/
	//vBat = 0.99023048 * tempBat + 0.00488476 * BatVal + 0.00488476 * prevBatV;
	siracUydu.PilGerilimi = (tempBat * (float) VBAT_IIR
 800929c:	4b14      	ldr	r3, [pc, #80]	; (80092f0 <getBatVolt+0xe0>)
 800929e:	edd3 7a00 	vldr	s15, [r3]
 80092a2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80092f4 <getBatVolt+0xe4>
 80092a6:	ee27 7a87 	vmul.f32	s14, s15, s14
			+ BatVal * (100.0f - (float) VBAT_IIR)) / 100.0f;
 80092aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80092ae:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80092b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092ba:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80092f8 <getBatVolt+0xe8>
 80092be:	eec7 7a26 	vdiv.f32	s15, s14, s13
	siracUydu.PilGerilimi = (tempBat * (float) VBAT_IIR
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <getBatVolt+0xec>)
 80092c4:	edc3 7a02 	vstr	s15, [r3, #8]
	tempBat = siracUydu.PilGerilimi;
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <getBatVolt+0xec>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <getBatVolt+0xe0>)
 80092ce:	6013      	str	r3, [r2, #0]
	return;
 80092d0:	bf00      	nop
}
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	f5c28f5c 	.word	0xf5c28f5c
 80092dc:	400a5c28 	.word	0x400a5c28
 80092e0:	00000000 	.word	0x00000000
 80092e4:	40efffe0 	.word	0x40efffe0
 80092e8:	240006d4 	.word	0x240006d4
 80092ec:	240002e4 	.word	0x240002e4
 80092f0:	24003fd4 	.word	0x24003fd4
 80092f4:	42be0000 	.word	0x42be0000
 80092f8:	42c80000 	.word	0x42c80000
 80092fc:	24000018 	.word	0x24000018

08009300 <getUVSensor>:

void getUVSensor() {
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
	HAL_ADC_Start(UV_ADC);
 8009306:	482c      	ldr	r0, [pc, #176]	; (80093b8 <getUVSensor+0xb8>)
 8009308:	f001 fa7e 	bl	800a808 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(UV_ADC, 1000);
 800930c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009310:	4829      	ldr	r0, [pc, #164]	; (80093b8 <getUVSensor+0xb8>)
 8009312:	f001 fb77 	bl	800aa04 <HAL_ADC_PollForConversion>
	float adcVal = 0.0;
 8009316:	f04f 0300 	mov.w	r3, #0
 800931a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 20; i++) {
 800931c:	2300      	movs	r3, #0
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	e01d      	b.n	800935e <getUVSensor+0x5e>
		adcVal += (((float) HAL_ADC_GetValue(UV_ADC)) * 3.295 / 65535);
 8009322:	4825      	ldr	r0, [pc, #148]	; (80093b8 <getUVSensor+0xb8>)
 8009324:	f001 fc62 	bl	800abec <HAL_ADC_GetValue>
 8009328:	ee07 0a90 	vmov	s15, r0
 800932c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009330:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009334:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80093a8 <getUVSensor+0xa8>
 8009338:	ee27 7b06 	vmul.f64	d7, d7, d6
 800933c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80093b0 <getUVSensor+0xb0>
 8009340:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8009344:	edd7 7a01 	vldr	s15, [r7, #4]
 8009348:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800934c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009350:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009354:	edc7 7a01 	vstr	s15, [r7, #4]
	for (int i = 0; i < 20; i++) {
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	603b      	str	r3, [r7, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b13      	cmp	r3, #19
 8009362:	ddde      	ble.n	8009322 <getUVSensor+0x22>
	}
	HAL_ADC_Stop(UV_ADC);
 8009364:	4814      	ldr	r0, [pc, #80]	; (80093b8 <getUVSensor+0xb8>)
 8009366:	f001 fb19 	bl	800a99c <HAL_ADC_Stop>
	adcVal /= 20;
 800936a:	ed97 7a01 	vldr	s14, [r7, #4]
 800936e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8009372:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009376:	edc7 7a01 	vstr	s15, [r7, #4]
	siracUydu.sensorVerisi.UV_sensor = mapfloat(adcVal, 0.99, 2.8, 0.0, 15.0);
 800937a:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 800937e:	eddf 1a0f 	vldr	s3, [pc, #60]	; 80093bc <getUVSensor+0xbc>
 8009382:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 80093c0 <getUVSensor+0xc0>
 8009386:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80093c4 <getUVSensor+0xc4>
 800938a:	ed97 0a01 	vldr	s0, [r7, #4]
 800938e:	f000 f81d 	bl	80093cc <mapfloat>
 8009392:	eef0 7a40 	vmov.f32	s15, s0
 8009396:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <getUVSensor+0xc8>)
 8009398:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	/***
	 * geriye kalan hesaplamalar eklenece
	 */
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	f3af 8000 	nop.w
 80093a8:	f5c28f5c 	.word	0xf5c28f5c
 80093ac:	400a5c28 	.word	0x400a5c28
 80093b0:	00000000 	.word	0x00000000
 80093b4:	40efffe0 	.word	0x40efffe0
 80093b8:	24000670 	.word	0x24000670
 80093bc:	00000000 	.word	0x00000000
 80093c0:	40333333 	.word	0x40333333
 80093c4:	3f7d70a4 	.word	0x3f7d70a4
 80093c8:	24000018 	.word	0x24000018

080093cc <mapfloat>:
float mapfloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	ed87 0a05 	vstr	s0, [r7, #20]
 80093d6:	edc7 0a04 	vstr	s1, [r7, #16]
 80093da:	ed87 1a03 	vstr	s2, [r7, #12]
 80093de:	edc7 1a02 	vstr	s3, [r7, #8]
 80093e2:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80093e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80093ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80093ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093f2:	edd7 6a01 	vldr	s13, [r7, #4]
 80093f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80093fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80093fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009402:	ed97 7a03 	vldr	s14, [r7, #12]
 8009406:	edd7 7a04 	vldr	s15, [r7, #16]
 800940a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800940e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009412:	edd7 7a02 	vldr	s15, [r7, #8]
 8009416:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800941a:	eeb0 0a67 	vmov.f32	s0, s15
 800941e:	371c      	adds	r7, #28
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <vbat_ADC_Calibrate>:
void vbat_ADC_Calibrate() {
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
	// Make sure ADC peripheral is stopped
	HAL_StatusTypeDef ret = HAL_ADC_Stop(VBAT_ADC);
 800942e:	4840      	ldr	r0, [pc, #256]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 8009430:	f001 fab4 	bl	800a99c <HAL_ADC_Stop>
 8009434:	4603      	mov	r3, r0
 8009436:	717b      	strb	r3, [r7, #5]
	if (ret != HAL_OK) {
 8009438:	797b      	ldrb	r3, [r7, #5]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <vbat_ADC_Calibrate+0x1a>
		Error_Handler();
 800943e:	f7fe fa11 	bl	8007864 <Error_Handler>
	}

	HAL_Delay(10);
 8009442:	200a      	movs	r0, #10
 8009444:	f000 fdc6 	bl	8009fd4 <HAL_Delay>

	/* Choose type of measurement
	 ADC_SINGLE_ENDED
	 ADC_DIFFERENTIAL_ENDED
	 */
	ret = HAL_ADCEx_Calibration_Start(VBAT_ADC, ADC_CALIB_OFFSET,
 8009448:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800944c:	2100      	movs	r1, #0
 800944e:	4838      	ldr	r0, [pc, #224]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 8009450:	f002 fa0c 	bl	800b86c <HAL_ADCEx_Calibration_Start>
 8009454:	4603      	mov	r3, r0
 8009456:	717b      	strb	r3, [r7, #5]
	ADC_SINGLE_ENDED);
	if (ret != HAL_OK) {
 8009458:	797b      	ldrb	r3, [r7, #5]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <vbat_ADC_Calibrate+0x3a>
		Error_Handler();
 800945e:	f7fe fa01 	bl	8007864 <Error_Handler>
	}

	// Small delay to ensure end of calibration procedure
	HAL_Delay(100);
 8009462:	2064      	movs	r0, #100	; 0x64
 8009464:	f000 fdb6 	bl	8009fd4 <HAL_Delay>

	/****************Average for best result****************/
	float t;

	for (uint8_t i = 0; i < 100; i++) {
 8009468:	2300      	movs	r3, #0
 800946a:	71fb      	strb	r3, [r7, #7]
 800946c:	e010      	b.n	8009490 <vbat_ADC_Calibrate+0x68>
		HAL_ADC_Start(VBAT_ADC);
 800946e:	4830      	ldr	r0, [pc, #192]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 8009470:	f001 f9ca 	bl	800a808 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(VBAT_ADC, HAL_MAX_DELAY);
 8009474:	f04f 31ff 	mov.w	r1, #4294967295
 8009478:	482d      	ldr	r0, [pc, #180]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 800947a:	f001 fac3 	bl	800aa04 <HAL_ADC_PollForConversion>
		HAL_ADC_GetValue(VBAT_ADC);
 800947e:	482c      	ldr	r0, [pc, #176]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 8009480:	f001 fbb4 	bl	800abec <HAL_ADC_GetValue>
		HAL_ADC_Stop(VBAT_ADC);
 8009484:	482a      	ldr	r0, [pc, #168]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 8009486:	f001 fa89 	bl	800a99c <HAL_ADC_Stop>
	for (uint8_t i = 0; i < 100; i++) {
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	3301      	adds	r3, #1
 800948e:	71fb      	strb	r3, [r7, #7]
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b63      	cmp	r3, #99	; 0x63
 8009494:	d9eb      	bls.n	800946e <vbat_ADC_Calibrate+0x46>
	}

	for (uint8_t i = 0; i < 150; i++) {
 8009496:	2300      	movs	r3, #0
 8009498:	71bb      	strb	r3, [r7, #6]
 800949a:	e02f      	b.n	80094fc <vbat_ADC_Calibrate+0xd4>
		HAL_ADC_Start(VBAT_ADC);
 800949c:	4824      	ldr	r0, [pc, #144]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 800949e:	f001 f9b3 	bl	800a808 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(VBAT_ADC, HAL_MAX_DELAY);
 80094a2:	f04f 31ff 	mov.w	r1, #4294967295
 80094a6:	4822      	ldr	r0, [pc, #136]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 80094a8:	f001 faac 	bl	800aa04 <HAL_ADC_PollForConversion>
		t = (((float) HAL_ADC_GetValue(VBAT_ADC)) * 3.295 / 65535);
 80094ac:	4820      	ldr	r0, [pc, #128]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 80094ae:	f001 fb9d 	bl	800abec <HAL_ADC_GetValue>
 80094b2:	ee07 0a90 	vmov	s15, r0
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80094be:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8009520 <vbat_ADC_Calibrate+0xf8>
 80094c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80094c6:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8009528 <vbat_ADC_Calibrate+0x100>
 80094ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80094ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80094d2:	edc7 7a00 	vstr	s15, [r7]
		tempAdc += t;
 80094d6:	4b17      	ldr	r3, [pc, #92]	; (8009534 <vbat_ADC_Calibrate+0x10c>)
 80094d8:	ed93 7a00 	vldr	s14, [r3]
 80094dc:	edd7 7a00 	vldr	s15, [r7]
 80094e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e4:	4b13      	ldr	r3, [pc, #76]	; (8009534 <vbat_ADC_Calibrate+0x10c>)
 80094e6:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(VBAT_ADC);
 80094ea:	4811      	ldr	r0, [pc, #68]	; (8009530 <vbat_ADC_Calibrate+0x108>)
 80094ec:	f001 fa56 	bl	800a99c <HAL_ADC_Stop>
		HAL_Delay(10);
 80094f0:	200a      	movs	r0, #10
 80094f2:	f000 fd6f 	bl	8009fd4 <HAL_Delay>
	for (uint8_t i = 0; i < 150; i++) {
 80094f6:	79bb      	ldrb	r3, [r7, #6]
 80094f8:	3301      	adds	r3, #1
 80094fa:	71bb      	strb	r3, [r7, #6]
 80094fc:	79bb      	ldrb	r3, [r7, #6]
 80094fe:	2b95      	cmp	r3, #149	; 0x95
 8009500:	d9cc      	bls.n	800949c <vbat_ADC_Calibrate+0x74>
	}
	tempAdc /= 150;
 8009502:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <vbat_ADC_Calibrate+0x10c>)
 8009504:	ed93 7a00 	vldr	s14, [r3]
 8009508:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8009538 <vbat_ADC_Calibrate+0x110>
 800950c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009510:	4b08      	ldr	r3, [pc, #32]	; (8009534 <vbat_ADC_Calibrate+0x10c>)
 8009512:	edc3 7a00 	vstr	s15, [r3]
	//V_SENSOR_MULTIPLIER = AVO_READ / tempAdc;
	return;
 8009516:	bf00      	nop
}
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	f5c28f5c 	.word	0xf5c28f5c
 8009524:	400a5c28 	.word	0x400a5c28
 8009528:	00000000 	.word	0x00000000
 800952c:	40efffe0 	.word	0x40efffe0
 8009530:	240006d4 	.word	0x240006d4
 8009534:	24003fd8 	.word	0x24003fd8
 8009538:	43160000 	.word	0x43160000

0800953c <motorTahrik>:
void motorTahrik(uint16_t hiz1, uint16_t hiz2) {
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	460a      	mov	r2, r1
 8009546:	80fb      	strh	r3, [r7, #6]
 8009548:	4613      	mov	r3, r2
 800954a:	80bb      	strh	r3, [r7, #4]
	ESC1_DUTY = hiz1;
 800954c:	4a05      	ldr	r2, [pc, #20]	; (8009564 <motorTahrik+0x28>)
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	6353      	str	r3, [r2, #52]	; 0x34
	ESC2_DUTY = hiz2;
 8009552:	4a04      	ldr	r2, [pc, #16]	; (8009564 <motorTahrik+0x28>)
 8009554:	88bb      	ldrh	r3, [r7, #4]
 8009556:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	40010000 	.word	0x40010000

08009568 <servoTahrik>:

void servoTahrik(uint8_t komut) {
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	71fb      	strb	r3, [r7, #7]
	switch (komut) {
 8009572:	79fb      	ldrb	r3, [r7, #7]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <servoTahrik+0x16>
 8009578:	2b01      	cmp	r3, #1
 800957a:	d005      	beq.n	8009588 <servoTahrik+0x20>
 800957c:	e009      	b.n	8009592 <servoTahrik+0x2a>
	case SERVO_AC:
		SERVO2_DUTY = 950;
 800957e:	4b07      	ldr	r3, [pc, #28]	; (800959c <servoTahrik+0x34>)
 8009580:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009584:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 8009586:	e004      	b.n	8009592 <servoTahrik+0x2a>
	case SERVO_KAPAT:
		SERVO2_DUTY = 1100;
 8009588:	4b04      	ldr	r3, [pc, #16]	; (800959c <servoTahrik+0x34>)
 800958a:	f240 424c 	movw	r2, #1100	; 0x44c
 800958e:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 8009590:	bf00      	nop
	}
}
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	40000400 	.word	0x40000400

080095a0 <ESCcalibration>:

void ESCcalibration() {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
	ESC1_DUTY = PWM_MAX;
 80095a4:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <ESCcalibration+0x38>)
 80095a6:	f241 1294 	movw	r2, #4500	; 0x1194
 80095aa:	635a      	str	r2, [r3, #52]	; 0x34
	ESC2_DUTY = PWM_MAX;
 80095ac:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <ESCcalibration+0x38>)
 80095ae:	f241 1294 	movw	r2, #4500	; 0x1194
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(10000);
 80095b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80095b8:	f014 fe3a 	bl	801e230 <osDelay>
	ESC1_DUTY = PWM_MIN;
 80095bc:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <ESCcalibration+0x38>)
 80095be:	f640 1292 	movw	r2, #2450	; 0x992
 80095c2:	635a      	str	r2, [r3, #52]	; 0x34
	ESC2_DUTY = PWM_MIN;
 80095c4:	4b04      	ldr	r3, [pc, #16]	; (80095d8 <ESCcalibration+0x38>)
 80095c6:	f640 1292 	movw	r2, #2450	; 0x992
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(2000);
 80095cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80095d0:	f014 fe2e 	bl	801e230 <osDelay>
}
 80095d4:	bf00      	nop
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	40010000 	.word	0x40010000

080095dc <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

uint8_t w25qxx_Init(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
//	HAL_Delay(5);
//	MX_QUADSPI_Init();
	if(QSPI_ResetDevice(&hqspi) != w25qxx_OK)
 80095e0:	480d      	ldr	r0, [pc, #52]	; (8009618 <w25qxx_Init+0x3c>)
 80095e2:	f000 fb87 	bl	8009cf4 <QSPI_ResetDevice>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <w25qxx_Init+0x14>
		return 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	e011      	b.n	8009614 <w25qxx_Init+0x38>
	HAL_Delay(5); // 1ms wait device stable
 80095f0:	2005      	movs	r0, #5
 80095f2:	f000 fcef 	bl	8009fd4 <HAL_Delay>
	w25qxx_ID = w25qxx_GetID();
 80095f6:	f000 f813 	bl	8009620 <w25qxx_GetID>
 80095fa:	4603      	mov	r3, r0
 80095fc:	461a      	mov	r2, r3
 80095fe:	4b07      	ldr	r3, [pc, #28]	; (800961c <w25qxx_Init+0x40>)
 8009600:	801a      	strh	r2, [r3, #0]
	if(w25qxx_ID == w25qxx_ERROR)
 8009602:	4b06      	ldr	r3, [pc, #24]	; (800961c <w25qxx_Init+0x40>)
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d101      	bne.n	800960e <w25qxx_Init+0x32>
		return 0;
 800960a:	2300      	movs	r3, #0
 800960c:	e002      	b.n	8009614 <w25qxx_Init+0x38>
	w25qxx_ReadAllStatusReg();
 800960e:	f000 f897 	bl	8009740 <w25qxx_ReadAllStatusReg>
	return 1;
 8009612:	2301      	movs	r3, #1
}
 8009614:	4618      	mov	r0, r3
 8009616:	bd80      	pop	{r7, pc}
 8009618:	24003a18 	.word	0x24003a18
 800961c:	24003fe0 	.word	0x24003fe0

08009620 <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8009626:	4b23      	ldr	r3, [pc, #140]	; (80096b4 <w25qxx_GetID+0x94>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b05      	cmp	r3, #5
 800962c:	d114      	bne.n	8009658 <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 800962e:	2306      	movs	r3, #6
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800963c:	9302      	str	r3, [sp, #8]
 800963e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	2306      	movs	r3, #6
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800964c:	2200      	movs	r2, #0
 800964e:	2194      	movs	r1, #148	; 0x94
 8009650:	4819      	ldr	r0, [pc, #100]	; (80096b8 <w25qxx_GetID+0x98>)
 8009652:	f000 fba8 	bl	8009da6 <QSPI_Send_CMD>
 8009656:	e013      	b.n	8009680 <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8009658:	2306      	movs	r3, #6
 800965a:	9304      	str	r3, [sp, #16]
 800965c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009660:	9303      	str	r3, [sp, #12]
 8009662:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	2300      	movs	r3, #0
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009676:	2200      	movs	r2, #0
 8009678:	2190      	movs	r1, #144	; 0x90
 800967a:	480f      	ldr	r0, [pc, #60]	; (80096b8 <w25qxx_GetID+0x98>)
 800967c:	f000 fb93 	bl	8009da6 <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009680:	463b      	mov	r3, r7
 8009682:	f241 3288 	movw	r2, #5000	; 0x1388
 8009686:	4619      	mov	r1, r3
 8009688:	480b      	ldr	r0, [pc, #44]	; (80096b8 <w25qxx_GetID+0x98>)
 800968a:	f006 fd47 	bl	801011c <HAL_QSPI_Receive>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e008      	b.n	80096aa <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 8009698:	783b      	ldrb	r3, [r7, #0]
 800969a:	021b      	lsls	r3, r3, #8
 800969c:	b21a      	sxth	r2, r3
 800969e:	787b      	ldrb	r3, [r7, #1]
 80096a0:	b21b      	sxth	r3, r3
 80096a2:	4313      	orrs	r3, r2
 80096a4:	b21b      	sxth	r3, r3
 80096a6:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 80096a8:	88fb      	ldrh	r3, [r7, #6]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	240002e8 	.word	0x240002e8
 80096b8:	24003a18 	.word	0x24003a18

080096bc <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08a      	sub	sp, #40	; 0x28
 80096c0:	af06      	add	r7, sp, #24
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <w25qxx_ReadSR+0x7c>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2b05      	cmp	r3, #5
 80096d0:	d112      	bne.n	80096f8 <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 80096d2:	79f9      	ldrb	r1, [r7, #7]
 80096d4:	2301      	movs	r3, #1
 80096d6:	9304      	str	r3, [sp, #16]
 80096d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096dc:	9303      	str	r3, [sp, #12]
 80096de:	2300      	movs	r3, #0
 80096e0:	9302      	str	r3, [sp, #8]
 80096e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	2300      	movs	r3, #0
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	2300      	movs	r3, #0
 80096ee:	2200      	movs	r2, #0
 80096f0:	4812      	ldr	r0, [pc, #72]	; (800973c <w25qxx_ReadSR+0x80>)
 80096f2:	f000 fb58 	bl	8009da6 <QSPI_Send_CMD>
 80096f6:	e011      	b.n	800971c <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 80096f8:	79f9      	ldrb	r1, [r7, #7]
 80096fa:	2301      	movs	r3, #1
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009702:	9303      	str	r3, [sp, #12]
 8009704:	2300      	movs	r3, #0
 8009706:	9302      	str	r3, [sp, #8]
 8009708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	2300      	movs	r3, #0
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	2300      	movs	r3, #0
 8009714:	2200      	movs	r2, #0
 8009716:	4809      	ldr	r0, [pc, #36]	; (800973c <w25qxx_ReadSR+0x80>)
 8009718:	f000 fb45 	bl	8009da6 <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800971c:	f107 030f 	add.w	r3, r7, #15
 8009720:	f241 3288 	movw	r2, #5000	; 0x1388
 8009724:	4619      	mov	r1, r3
 8009726:	4805      	ldr	r0, [pc, #20]	; (800973c <w25qxx_ReadSR+0x80>)
 8009728:	f006 fcf8 	bl	801011c <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	240002e8 	.word	0x240002e8
 800973c:	24003a18 	.word	0x24003a18

08009740 <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 8009744:	2005      	movs	r0, #5
 8009746:	f7ff ffb9 	bl	80096bc <w25qxx_ReadSR>
 800974a:	4603      	mov	r3, r0
 800974c:	461a      	mov	r2, r3
 800974e:	4b09      	ldr	r3, [pc, #36]	; (8009774 <w25qxx_ReadAllStatusReg+0x34>)
 8009750:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 8009752:	2035      	movs	r0, #53	; 0x35
 8009754:	f7ff ffb2 	bl	80096bc <w25qxx_ReadSR>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	4b05      	ldr	r3, [pc, #20]	; (8009774 <w25qxx_ReadAllStatusReg+0x34>)
 800975e:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 8009760:	2015      	movs	r0, #21
 8009762:	f7ff ffab 	bl	80096bc <w25qxx_ReadSR>
 8009766:	4603      	mov	r3, r0
 8009768:	461a      	mov	r2, r3
 800976a:	4b02      	ldr	r3, [pc, #8]	; (8009774 <w25qxx_ReadAllStatusReg+0x34>)
 800976c:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	24003fdc 	.word	0x24003fdc

08009778 <W25QXX_Wait_Busy>:

void W25QXX_Wait_Busy(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 800977c:	bf00      	nop
 800977e:	2005      	movs	r0, #5
 8009780:	f7ff ff9c 	bl	80096bc <w25qxx_ReadSR>
 8009784:	4603      	mov	r3, r0
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b01      	cmp	r3, #1
 800978c:	d0f7      	beq.n	800977e <W25QXX_Wait_Busy+0x6>
}
 800978e:	bf00      	nop
 8009790:	bf00      	nop
 8009792:	bd80      	pop	{r7, pc}

08009794 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 8009798:	4803      	ldr	r0, [pc, #12]	; (80097a8 <W25qxx_WriteEnable+0x14>)
 800979a:	f000 fb39 	bl	8009e10 <QSPI_WriteEnable>
 800979e:	4603      	mov	r3, r0
 80097a0:	b2db      	uxtb	r3, r3
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	24003a18 	.word	0x24003a18

080097ac <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	; 0x28
 80097b0:	af06      	add	r7, sp, #24
 80097b2:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 80097b4:	f7ff ffee 	bl	8009794 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 80097b8:	f7ff ffde 	bl	8009778 <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 80097bc:	4b1c      	ldr	r3, [pc, #112]	; (8009830 <W25qxx_EraseSector+0x84>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b05      	cmp	r3, #5
 80097c2:	d115      	bne.n	80097f0 <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 80097c4:	2300      	movs	r3, #0
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	2300      	movs	r3, #0
 80097ca:	9303      	str	r3, [sp, #12]
 80097cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d0:	9302      	str	r3, [sp, #8]
 80097d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	2120      	movs	r1, #32
 80097e4:	4813      	ldr	r0, [pc, #76]	; (8009834 <W25qxx_EraseSector+0x88>)
 80097e6:	f000 fade 	bl	8009da6 <QSPI_Send_CMD>
 80097ea:	4603      	mov	r3, r0
 80097ec:	73fb      	strb	r3, [r7, #15]
 80097ee:	e014      	b.n	800981a <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 80097f0:	2300      	movs	r3, #0
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	2300      	movs	r3, #0
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80097fc:	9302      	str	r3, [sp, #8]
 80097fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	2300      	movs	r3, #0
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	2120      	movs	r1, #32
 8009810:	4808      	ldr	r0, [pc, #32]	; (8009834 <W25qxx_EraseSector+0x88>)
 8009812:	f000 fac8 	bl	8009da6 <QSPI_Send_CMD>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]
	

	if(result == w25qxx_OK)
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 8009820:	f7ff ffaa 	bl	8009778 <W25QXX_Wait_Busy>

	return result;
 8009824:	7bfb      	ldrb	r3, [r7, #15]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	240002e8 	.word	0x240002e8
 8009834:	24003a18 	.word	0x24003a18

08009838 <W25qxx_EraseChip>:
  * @brief  Whole chip erase.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseChip(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af06      	add	r7, sp, #24
	uint8_t result;
	
	W25qxx_WriteEnable();
 800983e:	f7ff ffa9 	bl	8009794 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 8009842:	f7ff ff99 	bl	8009778 <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8009846:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <W25qxx_EraseChip+0x78>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b05      	cmp	r3, #5
 800984c:	d113      	bne.n	8009876 <W25qxx_EraseChip+0x3e>
		result = QSPI_Send_CMD(&hqspi,W25X_ChipErase,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE,QSPI_DATA_NONE,0);
 800984e:	2300      	movs	r3, #0
 8009850:	9304      	str	r3, [sp, #16]
 8009852:	2300      	movs	r3, #0
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	2300      	movs	r3, #0
 8009858:	9302      	str	r3, [sp, #8]
 800985a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	2300      	movs	r3, #0
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	2300      	movs	r3, #0
 8009866:	2200      	movs	r2, #0
 8009868:	21c7      	movs	r1, #199	; 0xc7
 800986a:	4812      	ldr	r0, [pc, #72]	; (80098b4 <W25qxx_EraseChip+0x7c>)
 800986c:	f000 fa9b 	bl	8009da6 <QSPI_Send_CMD>
 8009870:	4603      	mov	r3, r0
 8009872:	71fb      	strb	r3, [r7, #7]
 8009874:	e012      	b.n	800989c <W25qxx_EraseChip+0x64>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_ChipErase,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE,QSPI_DATA_NONE,0);
 8009876:	2300      	movs	r3, #0
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	2300      	movs	r3, #0
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	2300      	movs	r3, #0
 8009880:	9302      	str	r3, [sp, #8]
 8009882:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	2300      	movs	r3, #0
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2300      	movs	r3, #0
 800988e:	2200      	movs	r2, #0
 8009890:	21c7      	movs	r1, #199	; 0xc7
 8009892:	4808      	ldr	r0, [pc, #32]	; (80098b4 <W25qxx_EraseChip+0x7c>)
 8009894:	f000 fa87 	bl	8009da6 <QSPI_Send_CMD>
 8009898:	4603      	mov	r3, r0
 800989a:	71fb      	strb	r3, [r7, #7]
	

	if(result == w25qxx_OK)
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <W25qxx_EraseChip+0x6e>
		W25QXX_Wait_Busy();
 80098a2:	f7ff ff69 	bl	8009778 <W25QXX_Wait_Busy>
	
	return result;
 80098a6:	79fb      	ldrb	r3, [r7, #7]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	240002e8 	.word	0x240002e8
 80098b4:	24003a18 	.word	0x24003a18

080098b8 <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08c      	sub	sp, #48	; 0x30
 80098bc:	af06      	add	r7, sp, #24
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 80098c4:	f7ff ff66 	bl	8009794 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 80098c8:	4b22      	ldr	r3, [pc, #136]	; (8009954 <W25qxx_PageProgram+0x9c>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b05      	cmp	r3, #5
 80098ce:	d116      	bne.n	80098fe <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	2300      	movs	r3, #0
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	2132      	movs	r1, #50	; 0x32
 80098f2:	4819      	ldr	r0, [pc, #100]	; (8009958 <W25qxx_PageProgram+0xa0>)
 80098f4:	f000 fa57 	bl	8009da6 <QSPI_Send_CMD>
 80098f8:	4603      	mov	r3, r0
 80098fa:	75fb      	strb	r3, [r7, #23]
 80098fc:	e015      	b.n	800992a <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009906:	9303      	str	r3, [sp, #12]
 8009908:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800990c:	9302      	str	r3, [sp, #8]
 800990e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	2300      	movs	r3, #0
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	2102      	movs	r1, #2
 8009920:	480d      	ldr	r0, [pc, #52]	; (8009958 <W25qxx_PageProgram+0xa0>)
 8009922:	f000 fa40 	bl	8009da6 <QSPI_Send_CMD>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d107      	bne.n	8009940 <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8009930:	f241 3288 	movw	r2, #5000	; 0x1388
 8009934:	68f9      	ldr	r1, [r7, #12]
 8009936:	4808      	ldr	r0, [pc, #32]	; (8009958 <W25qxx_PageProgram+0xa0>)
 8009938:	f006 fb5e 	bl	800fff8 <HAL_QSPI_Transmit>
 800993c:	4603      	mov	r3, r0
 800993e:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 8009946:	f7ff ff17 	bl	8009778 <W25QXX_Wait_Busy>
	
  return result;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	240002e8 	.word	0x240002e8
 8009958:	24003a18 	.word	0x24003a18

0800995c <W25qxx_Read>:


uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b094      	sub	sp, #80	; 0x50
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8009968:	4b25      	ldr	r3, [pc, #148]	; (8009a00 <W25qxx_Read+0xa4>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b04      	cmp	r3, #4
 800996e:	d107      	bne.n	8009980 <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8009970:	23eb      	movs	r3, #235	; 0xeb
 8009972:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8009974:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009978:	62fb      	str	r3, [r7, #44]	; 0x2c
	  s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 800997a:	2306      	movs	r3, #6
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
 800997e:	e006      	b.n	800998e <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8009980:	23eb      	movs	r3, #235	; 0xeb
 8009982:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8009984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 800998a:	2304      	movs	r3, #4
 800998c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
	
	s_command.Address           = ReadAddr;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009996:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8009998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800999c:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 800999e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80099a2:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 80099a4:	23ff      	movs	r3, #255	; 0xff
 80099a6:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80099a8:	2300      	movs	r3, #0
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 80099ac:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80099b0:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80099ba:	2300      	movs	r3, #0
 80099bc:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80099be:	2300      	movs	r3, #0
 80099c0:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80099c2:	f107 0314 	add.w	r3, r7, #20
 80099c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ca:	4619      	mov	r1, r3
 80099cc:	480d      	ldr	r0, [pc, #52]	; (8009a04 <W25qxx_Read+0xa8>)
 80099ce:	f006 fab5 	bl	800ff3c <HAL_QSPI_Command>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 80099d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d108      	bne.n	80099f2 <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80099e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e4:	68f9      	ldr	r1, [r7, #12]
 80099e6:	4807      	ldr	r0, [pc, #28]	; (8009a04 <W25qxx_Read+0xa8>)
 80099e8:	f006 fb98 	bl	801011c <HAL_QSPI_Receive>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 80099f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3750      	adds	r7, #80	; 0x50
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	240002e8 	.word	0x240002e8
 8009a04:	24003a18 	.word	0x24003a18

08009a08 <W25qxx_WriteNoCheck>:


void W25qxx_WriteNoCheck(uint8_t *pBuffer,uint32_t WriteAddr,uint32_t NumByteToWrite)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
	uint16_t pageremain;	   
	pageremain = 256 - WriteAddr % 256;
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009a20:	82fb      	strh	r3, [r7, #22]
	if (NumByteToWrite <= pageremain)
 8009a22:	8afb      	ldrh	r3, [r7, #22]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d801      	bhi.n	8009a2e <W25qxx_WriteNoCheck+0x26>
	{
		pageremain = NumByteToWrite;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	82fb      	strh	r3, [r7, #22]
	}
	while(1)
	{
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8009a2e:	8afb      	ldrh	r3, [r7, #22]
 8009a30:	461a      	mov	r2, r3
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff ff3f 	bl	80098b8 <W25qxx_PageProgram>
		if (NumByteToWrite == pageremain)
 8009a3a:	8afb      	ldrh	r3, [r7, #22]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d016      	beq.n	8009a70 <W25qxx_WriteNoCheck+0x68>
		{
			break;
		}
	 	else //NumByteToWrite>pageremain
		{
			pBuffer += pageremain;
 8009a42:	8afb      	ldrh	r3, [r7, #22]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]
			WriteAddr += pageremain;
 8009a4a:	8afb      	ldrh	r3, [r7, #22]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	4413      	add	r3, r2
 8009a50:	60bb      	str	r3, [r7, #8]

			NumByteToWrite -= pageremain;
 8009a52:	8afb      	ldrh	r3, [r7, #22]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	607b      	str	r3, [r7, #4]
			if (NumByteToWrite > 256)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a60:	d903      	bls.n	8009a6a <W25qxx_WriteNoCheck+0x62>
				pageremain = 256;
 8009a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a66:	82fb      	strh	r3, [r7, #22]
 8009a68:	e7e1      	b.n	8009a2e <W25qxx_WriteNoCheck+0x26>
			else
				pageremain = NumByteToWrite;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	82fb      	strh	r3, [r7, #22]
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8009a6e:	e7de      	b.n	8009a2e <W25qxx_WriteNoCheck+0x26>
			break;
 8009a70:	bf00      	nop
		}
	}
}
 8009a72:	bf00      	nop
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <W25qxx_Write>:


void W25qxx_Write(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	f107 0320 	add.w	r3, r7, #32
 8009a88:	f843 0c14 	str.w	r0, [r3, #-20]
 8009a8c:	f107 0320 	add.w	r3, r7, #32
 8009a90:	f843 1c18 	str.w	r1, [r3, #-24]
 8009a94:	f107 0320 	add.w	r3, r7, #32
 8009a98:	f823 2c1a 	strh.w	r2, [r3, #-26]
	uint16_t secoff;
	uint16_t secremain;
 	uint16_t i;
	uint8_t W25QXX_BUF[4096];

 	secpos = WriteAddr / 4096;
 8009a9c:	f107 0320 	add.w	r3, r7, #32
 8009aa0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009aa4:	0b1b      	lsrs	r3, r3, #12
 8009aa6:	f241 021c 	movw	r2, #4124	; 0x101c
 8009aaa:	443a      	add	r2, r7
 8009aac:	6013      	str	r3, [r2, #0]
	secoff = WriteAddr % 4096;
 8009aae:	f107 0320 	add.w	r3, r7, #32
 8009ab2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009abc:	f241 021a 	movw	r2, #4122	; 0x101a
 8009ac0:	443a      	add	r2, r7
 8009ac2:	8013      	strh	r3, [r2, #0]
	secremain = 4096 - secoff;
 8009ac4:	f241 031a 	movw	r3, #4122	; 0x101a
 8009ac8:	443b      	add	r3, r7
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8009ad0:	f241 0218 	movw	r2, #4120	; 0x1018
 8009ad4:	443a      	add	r2, r7
 8009ad6:	8013      	strh	r3, [r2, #0]

 	if (NumByteToWrite <= secremain) secremain = NumByteToWrite;
 8009ad8:	f107 0320 	add.w	r3, r7, #32
 8009adc:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8009ae0:	f241 0318 	movw	r3, #4120	; 0x1018
 8009ae4:	443b      	add	r3, r7
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d807      	bhi.n	8009afc <W25qxx_Write+0x80>
 8009aec:	f107 0320 	add.w	r3, r7, #32
 8009af0:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8009af4:	f241 0218 	movw	r2, #4120	; 0x1018
 8009af8:	443a      	add	r2, r7
 8009afa:	8013      	strh	r3, [r2, #0]
	while(1)
	{
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 8009afc:	f241 031c 	movw	r3, #4124	; 0x101c
 8009b00:	443b      	add	r3, r7
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	0319      	lsls	r1, r3, #12
 8009b06:	4b7a      	ldr	r3, [pc, #488]	; (8009cf0 <W25qxx_Write+0x274>)
 8009b08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009b0c:	443b      	add	r3, r7
 8009b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff ff22 	bl	800995c <W25qxx_Read>
		for (i = 0;i < secremain; i++)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f241 0216 	movw	r2, #4118	; 0x1016
 8009b1e:	443a      	add	r2, r7
 8009b20:	8013      	strh	r3, [r2, #0]
 8009b22:	e018      	b.n	8009b56 <W25qxx_Write+0xda>
		{
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8009b24:	f241 031a 	movw	r3, #4122	; 0x101a
 8009b28:	443b      	add	r3, r7
 8009b2a:	881a      	ldrh	r2, [r3, #0]
 8009b2c:	f241 0316 	movw	r3, #4118	; 0x1016
 8009b30:	443b      	add	r3, r7
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	4413      	add	r3, r2
 8009b36:	f107 0220 	add.w	r2, r7, #32
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8009b40:	2bff      	cmp	r3, #255	; 0xff
 8009b42:	d113      	bne.n	8009b6c <W25qxx_Write+0xf0>
		for (i = 0;i < secremain; i++)
 8009b44:	f241 0316 	movw	r3, #4118	; 0x1016
 8009b48:	443b      	add	r3, r7
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	f241 0216 	movw	r2, #4118	; 0x1016
 8009b52:	443a      	add	r2, r7
 8009b54:	8013      	strh	r3, [r2, #0]
 8009b56:	f241 0316 	movw	r3, #4118	; 0x1016
 8009b5a:	443b      	add	r3, r7
 8009b5c:	881a      	ldrh	r2, [r3, #0]
 8009b5e:	f241 0318 	movw	r3, #4120	; 0x1018
 8009b62:	443b      	add	r3, r7
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d3dc      	bcc.n	8009b24 <W25qxx_Write+0xa8>
 8009b6a:	e000      	b.n	8009b6e <W25qxx_Write+0xf2>
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8009b6c:	bf00      	nop
		}
		if (i < secremain)
 8009b6e:	f241 0316 	movw	r3, #4118	; 0x1016
 8009b72:	443b      	add	r3, r7
 8009b74:	881a      	ldrh	r2, [r3, #0]
 8009b76:	f241 0318 	movw	r3, #4120	; 0x1018
 8009b7a:	443b      	add	r3, r7
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d245      	bcs.n	8009c0e <W25qxx_Write+0x192>
		{
			W25qxx_EraseSector(secpos);
 8009b82:	f241 031c 	movw	r3, #4124	; 0x101c
 8009b86:	443b      	add	r3, r7
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	f7ff fe0f 	bl	80097ac <W25qxx_EraseSector>
			for (i = 0; i < secremain; i++)
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f241 0216 	movw	r2, #4118	; 0x1016
 8009b94:	443a      	add	r2, r7
 8009b96:	8013      	strh	r3, [r2, #0]
 8009b98:	e020      	b.n	8009bdc <W25qxx_Write+0x160>
			{
				W25QXX_BUF[i + secoff] = pBuffer[i];
 8009b9a:	f241 0316 	movw	r3, #4118	; 0x1016
 8009b9e:	443b      	add	r3, r7
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	f107 0220 	add.w	r2, r7, #32
 8009ba6:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8009baa:	441a      	add	r2, r3
 8009bac:	f241 0316 	movw	r3, #4118	; 0x1016
 8009bb0:	443b      	add	r3, r7
 8009bb2:	8819      	ldrh	r1, [r3, #0]
 8009bb4:	f241 031a 	movw	r3, #4122	; 0x101a
 8009bb8:	443b      	add	r3, r7
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	440b      	add	r3, r1
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	f107 0120 	add.w	r1, r7, #32
 8009bc4:	440b      	add	r3, r1
 8009bc6:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < secremain; i++)
 8009bca:	f241 0316 	movw	r3, #4118	; 0x1016
 8009bce:	443b      	add	r3, r7
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	f241 0216 	movw	r2, #4118	; 0x1016
 8009bd8:	443a      	add	r2, r7
 8009bda:	8013      	strh	r3, [r2, #0]
 8009bdc:	f241 0316 	movw	r3, #4118	; 0x1016
 8009be0:	443b      	add	r3, r7
 8009be2:	881a      	ldrh	r2, [r3, #0]
 8009be4:	f241 0318 	movw	r3, #4120	; 0x1018
 8009be8:	443b      	add	r3, r7
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d3d4      	bcc.n	8009b9a <W25qxx_Write+0x11e>
			}
			W25qxx_WriteNoCheck(W25QXX_BUF, secpos * 4096, 4096);
 8009bf0:	f241 031c 	movw	r3, #4124	; 0x101c
 8009bf4:	443b      	add	r3, r7
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	0319      	lsls	r1, r3, #12
 8009bfa:	4b3d      	ldr	r3, [pc, #244]	; (8009cf0 <W25qxx_Write+0x274>)
 8009bfc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8009c00:	443b      	add	r3, r7
 8009c02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fefe 	bl	8009a08 <W25qxx_WriteNoCheck>
 8009c0c:	e010      	b.n	8009c30 <W25qxx_Write+0x1b4>
		}
		else
		{
			W25qxx_WriteNoCheck(pBuffer, WriteAddr, secremain);
 8009c0e:	f241 0318 	movw	r3, #4120	; 0x1018
 8009c12:	443b      	add	r3, r7
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	f107 0220 	add.w	r2, r7, #32
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	f107 0220 	add.w	r2, r7, #32
 8009c20:	4610      	mov	r0, r2
 8009c22:	461a      	mov	r2, r3
 8009c24:	f851 1c18 	ldr.w	r1, [r1, #-24]
 8009c28:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8009c2c:	f7ff feec 	bl	8009a08 <W25qxx_WriteNoCheck>
		}
		if (NumByteToWrite == secremain)
 8009c30:	f107 0320 	add.w	r3, r7, #32
 8009c34:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8009c38:	f241 0318 	movw	r3, #4120	; 0x1018
 8009c3c:	443b      	add	r3, r7
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d04e      	beq.n	8009ce2 <W25qxx_Write+0x266>
		{
			break;
		}
		else
		{
			secpos++;
 8009c44:	f241 031c 	movw	r3, #4124	; 0x101c
 8009c48:	443b      	add	r3, r7
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	f241 021c 	movw	r2, #4124	; 0x101c
 8009c52:	443a      	add	r2, r7
 8009c54:	6013      	str	r3, [r2, #0]
			secoff = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	f241 021a 	movw	r2, #4122	; 0x101a
 8009c5c:	443a      	add	r2, r7
 8009c5e:	8013      	strh	r3, [r2, #0]

			pBuffer += secremain;
 8009c60:	f241 0318 	movw	r3, #4120	; 0x1018
 8009c64:	443b      	add	r3, r7
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	f107 0220 	add.w	r2, r7, #32
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	f107 0220 	add.w	r2, r7, #32
 8009c72:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8009c76:	4413      	add	r3, r2
 8009c78:	f841 3c14 	str.w	r3, [r1, #-20]
			WriteAddr += secremain;
 8009c7c:	f241 0318 	movw	r3, #4120	; 0x1018
 8009c80:	443b      	add	r3, r7
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	f107 0220 	add.w	r2, r7, #32
 8009c88:	4611      	mov	r1, r2
 8009c8a:	f107 0220 	add.w	r2, r7, #32
 8009c8e:	f852 2c18 	ldr.w	r2, [r2, #-24]
 8009c92:	4413      	add	r3, r2
 8009c94:	f841 3c18 	str.w	r3, [r1, #-24]
			NumByteToWrite -= secremain;
 8009c98:	f107 0320 	add.w	r3, r7, #32
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f107 0320 	add.w	r3, r7, #32
 8009ca2:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8009ca6:	f241 0318 	movw	r3, #4120	; 0x1018
 8009caa:	443b      	add	r3, r7
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	f821 3c1a 	strh.w	r3, [r1, #-26]
			if (NumByteToWrite > 4096)
 8009cb4:	f107 0320 	add.w	r3, r7, #32
 8009cb8:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8009cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc0:	d906      	bls.n	8009cd0 <W25qxx_Write+0x254>
				secremain = 4096;
 8009cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cc6:	f241 0218 	movw	r2, #4120	; 0x1018
 8009cca:	443a      	add	r2, r7
 8009ccc:	8013      	strh	r3, [r2, #0]
 8009cce:	e715      	b.n	8009afc <W25qxx_Write+0x80>
			else
				secremain = NumByteToWrite;
 8009cd0:	f107 0320 	add.w	r3, r7, #32
 8009cd4:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8009cd8:	f241 0218 	movw	r2, #4120	; 0x1018
 8009cdc:	443a      	add	r2, r7
 8009cde:	8013      	strh	r3, [r2, #0]
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 8009ce0:	e70c      	b.n	8009afc <W25qxx_Write+0x80>
			break;
 8009ce2:	bf00      	nop
		}
	}
}
 8009ce4:	bf00      	nop
 8009ce6:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	ffffeff4 	.word	0xffffeff4

08009cf4 <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b090      	sub	sp, #64	; 0x40
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d00:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8009d02:	2366      	movs	r3, #102	; 0x66
 8009d04:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d22:	f107 0308 	add.w	r3, r7, #8
 8009d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f006 f905 	bl	800ff3c <HAL_QSPI_Command>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e030      	b.n	8009d9e <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 8009d3c:	2399      	movs	r3, #153	; 0x99
 8009d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d40:	f107 0308 	add.w	r3, r7, #8
 8009d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f006 f8f6 	bl	800ff3c <HAL_QSPI_Command>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e021      	b.n	8009d9e <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d5e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8009d60:	2366      	movs	r3, #102	; 0x66
 8009d62:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d64:	f107 0308 	add.w	r3, r7, #8
 8009d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f006 f8e4 	bl	800ff3c <HAL_QSPI_Command>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e00f      	b.n	8009d9e <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command*/
  s_command.Instruction = W25X_ResetDevice;
 8009d7e:	2399      	movs	r3, #153	; 0x99
 8009d80:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f006 f8d5 	bl	800ff3c <HAL_QSPI_Command>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e000      	b.n	8009d9e <QSPI_ResetDevice+0xaa>
  }

  return w25qxx_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3740      	adds	r7, #64	; 0x40
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <QSPI_Send_CMD>:


static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b092      	sub	sp, #72	; 0x48
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 8009db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 8009dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 8009dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 8009dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 8009ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dde:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 8009de0:	2300      	movs	r3, #0
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8009de4:	2300      	movs	r3, #0
 8009de6:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8009de8:	2300      	movs	r3, #0
 8009dea:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009dec:	f107 0310 	add.w	r3, r7, #16
 8009df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df4:	4619      	mov	r1, r3
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f006 f8a0 	bl	800ff3c <HAL_QSPI_Command>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3748      	adds	r7, #72	; 0x48
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b096      	sub	sp, #88	; 0x58
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 8009e18:	4b2a      	ldr	r3, [pc, #168]	; (8009ec4 <QSPI_WriteEnable+0xb4>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d103      	bne.n	8009e28 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8009e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e26:	e002      	b.n	8009e2e <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8009e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e2c:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 8009e2e:	2306      	movs	r3, #6
 8009e30:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009e42:	2300      	movs	r3, #0
 8009e44:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009e46:	2300      	movs	r3, #0
 8009e48:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e4e:	f107 0320 	add.w	r3, r7, #32
 8009e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f006 f86f 	bl	800ff3c <HAL_QSPI_Command>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e028      	b.n	8009eba <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8009e74:	2301      	movs	r3, #1
 8009e76:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8009e78:	2310      	movs	r3, #16
 8009e7a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009e7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e80:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 8009e82:	2305      	movs	r3, #5
 8009e84:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8009e86:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <QSPI_WriteEnable+0xb4>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d103      	bne.n	8009e96 <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 8009e8e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009e92:	647b      	str	r3, [r7, #68]	; 0x44
 8009e94:	e002      	b.n	8009e9c <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 8009e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e9a:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e9c:	f107 0208 	add.w	r2, r7, #8
 8009ea0:	f107 0120 	add.w	r1, r7, #32
 8009ea4:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f006 f9d4 	bl	8010256 <HAL_QSPI_AutoPolling>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e000      	b.n	8009eba <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3758      	adds	r7, #88	; 0x58
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	240002e8 	.word	0x240002e8

08009ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009f00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009ecc:	f7fe f83c 	bl	8007f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009ed0:	480c      	ldr	r0, [pc, #48]	; (8009f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009ed2:	490d      	ldr	r1, [pc, #52]	; (8009f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009ed4:	4a0d      	ldr	r2, [pc, #52]	; (8009f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ed8:	e002      	b.n	8009ee0 <LoopCopyDataInit>

08009eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009ede:	3304      	adds	r3, #4

08009ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009ee4:	d3f9      	bcc.n	8009eda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ee6:	4a0a      	ldr	r2, [pc, #40]	; (8009f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009ee8:	4c0a      	ldr	r4, [pc, #40]	; (8009f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009eec:	e001      	b.n	8009ef2 <LoopFillZerobss>

08009eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ef0:	3204      	adds	r2, #4

08009ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ef4:	d3fb      	bcc.n	8009eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009ef6:	f017 ffdd 	bl	8021eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009efa:	f7fd fb31 	bl	8007560 <main>
  bx  lr
 8009efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009f00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8009f04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009f08:	240004cc 	.word	0x240004cc
  ldr r2, =_sidata
 8009f0c:	08029ad0 	.word	0x08029ad0
  ldr r2, =_sbss
 8009f10:	240004d0 	.word	0x240004d0
  ldr r4, =_ebss
 8009f14:	24009048 	.word	0x24009048

08009f18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f18:	e7fe      	b.n	8009f18 <ADC3_IRQHandler>
	...

08009f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f22:	2003      	movs	r0, #3
 8009f24:	f001 fdb3 	bl	800ba8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f28:	f007 fa3e 	bl	80113a8 <HAL_RCC_GetSysClockFreq>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	4b15      	ldr	r3, [pc, #84]	; (8009f84 <HAL_Init+0x68>)
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	0a1b      	lsrs	r3, r3, #8
 8009f34:	f003 030f 	and.w	r3, r3, #15
 8009f38:	4913      	ldr	r1, [pc, #76]	; (8009f88 <HAL_Init+0x6c>)
 8009f3a:	5ccb      	ldrb	r3, [r1, r3]
 8009f3c:	f003 031f 	and.w	r3, r3, #31
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f46:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <HAL_Init+0x68>)
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	f003 030f 	and.w	r3, r3, #15
 8009f4e:	4a0e      	ldr	r2, [pc, #56]	; (8009f88 <HAL_Init+0x6c>)
 8009f50:	5cd3      	ldrb	r3, [r2, r3]
 8009f52:	f003 031f 	and.w	r3, r3, #31
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	fa22 f303 	lsr.w	r3, r2, r3
 8009f5c:	4a0b      	ldr	r2, [pc, #44]	; (8009f8c <HAL_Init+0x70>)
 8009f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f60:	4a0b      	ldr	r2, [pc, #44]	; (8009f90 <HAL_Init+0x74>)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009f66:	200f      	movs	r0, #15
 8009f68:	f7fd fe86 	bl	8007c78 <HAL_InitTick>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e002      	b.n	8009f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009f76:	f7fd fe61 	bl	8007c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	58024400 	.word	0x58024400
 8009f88:	08027bf8 	.word	0x08027bf8
 8009f8c:	240002e0 	.word	0x240002e0
 8009f90:	240002dc 	.word	0x240002dc

08009f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009f98:	4b06      	ldr	r3, [pc, #24]	; (8009fb4 <HAL_IncTick+0x20>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4b06      	ldr	r3, [pc, #24]	; (8009fb8 <HAL_IncTick+0x24>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	4a04      	ldr	r2, [pc, #16]	; (8009fb8 <HAL_IncTick+0x24>)
 8009fa6:	6013      	str	r3, [r2, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	240002f0 	.word	0x240002f0
 8009fb8:	24003fe4 	.word	0x24003fe4

08009fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8009fc0:	4b03      	ldr	r3, [pc, #12]	; (8009fd0 <HAL_GetTick+0x14>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	24003fe4 	.word	0x24003fe4

08009fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009fdc:	f7ff ffee 	bl	8009fbc <HAL_GetTick>
 8009fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fec:	d005      	beq.n	8009ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <HAL_Delay+0x44>)
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009ffa:	bf00      	nop
 8009ffc:	f7ff ffde 	bl	8009fbc <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d8f7      	bhi.n	8009ffc <HAL_Delay+0x28>
  {
  }
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	240002f0 	.word	0x240002f0

0800a01c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800a020:	4b03      	ldr	r3, [pc, #12]	; (800a030 <HAL_GetREVID+0x14>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	0c1b      	lsrs	r3, r3, #16
}
 800a026:	4618      	mov	r0, r3
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	5c001000 	.word	0x5c001000

0800a034 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800a03e:	4b07      	ldr	r3, [pc, #28]	; (800a05c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	43db      	mvns	r3, r3
 800a046:	401a      	ands	r2, r3
 800a048:	4904      	ldr	r1, [pc, #16]	; (800a05c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	604b      	str	r3, [r1, #4]
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	58000400 	.word	0x58000400

0800a060 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	609a      	str	r2, [r3, #8]
}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	431a      	orrs	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	609a      	str	r2, [r3, #8]
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3360      	adds	r3, #96	; 0x60
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	430b      	orrs	r3, r1
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800a0fc:	bf00      	nop
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 031f 	and.w	r3, r3, #31
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	fa01 f303 	lsl.w	r3, r1, r3
 800a128:	431a      	orrs	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	611a      	str	r2, [r3, #16]
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b087      	sub	sp, #28
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3360      	adds	r3, #96	; 0x60
 800a14a:	461a      	mov	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	431a      	orrs	r2, r3
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	601a      	str	r2, [r3, #0]
  }
}
 800a164:	bf00      	nop
 800a166:	371c      	adds	r7, #28
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a196:	b480      	push	{r7}
 800a198:	b087      	sub	sp, #28
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3330      	adds	r3, #48	; 0x30
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	0a1b      	lsrs	r3, r3, #8
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	f003 030c 	and.w	r3, r3, #12
 800a1b2:	4413      	add	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f003 031f 	and.w	r3, r3, #31
 800a1c0:	211f      	movs	r1, #31
 800a1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c6:	43db      	mvns	r3, r3
 800a1c8:	401a      	ands	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	0e9b      	lsrs	r3, r3, #26
 800a1ce:	f003 011f 	and.w	r1, r3, #31
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	f003 031f 	and.w	r3, r3, #31
 800a1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a1e2:	bf00      	nop
 800a1e4:	371c      	adds	r7, #28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b087      	sub	sp, #28
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3314      	adds	r3, #20
 800a1fe:	461a      	mov	r2, r3
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	0e5b      	lsrs	r3, r3, #25
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	4413      	add	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	0d1b      	lsrs	r3, r3, #20
 800a216:	f003 031f 	and.w	r3, r3, #31
 800a21a:	2107      	movs	r1, #7
 800a21c:	fa01 f303 	lsl.w	r3, r1, r3
 800a220:	43db      	mvns	r3, r3
 800a222:	401a      	ands	r2, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	0d1b      	lsrs	r3, r3, #20
 800a228:	f003 031f 	and.w	r3, r3, #31
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	fa01 f303 	lsl.w	r3, r1, r3
 800a232:	431a      	orrs	r2, r3
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a238:	bf00      	nop
 800a23a:	371c      	adds	r7, #28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a25c:	43db      	mvns	r3, r3
 800a25e:	401a      	ands	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f003 0318 	and.w	r3, r3, #24
 800a266:	4908      	ldr	r1, [pc, #32]	; (800a288 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a268:	40d9      	lsrs	r1, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	400b      	ands	r3, r1
 800a26e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a272:	431a      	orrs	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	000fffff 	.word	0x000fffff

0800a28c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f003 031f 	and.w	r3, r3, #31
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	4b04      	ldr	r3, [pc, #16]	; (800a2e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6093      	str	r3, [r2, #8]
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	5fffffc0 	.word	0x5fffffc0

0800a2e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2fc:	d101      	bne.n	800a302 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <LL_ADC_EnableInternalRegulator+0x24>)
 800a31e:	4013      	ands	r3, r2
 800a320:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	6fffffc0 	.word	0x6fffffc0

0800a338 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a34c:	d101      	bne.n	800a352 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a34e:	2301      	movs	r3, #1
 800a350:	e000      	b.n	800a354 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <LL_ADC_Enable+0x24>)
 800a36e:	4013      	ands	r3, r2
 800a370:	f043 0201 	orr.w	r2, r3, #1
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	7fffffc0 	.word	0x7fffffc0

0800a388 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <LL_ADC_Disable+0x24>)
 800a396:	4013      	ands	r3, r2
 800a398:	f043 0202 	orr.w	r2, r3, #2
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	7fffffc0 	.word	0x7fffffc0

0800a3b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d101      	bne.n	800a3c8 <LL_ADC_IsEnabled+0x18>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e000      	b.n	800a3ca <LL_ADC_IsEnabled+0x1a>
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b083      	sub	sp, #12
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d101      	bne.n	800a3ee <LL_ADC_IsDisableOngoing+0x18>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e000      	b.n	800a3f0 <LL_ADC_IsDisableOngoing+0x1a>
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	689a      	ldr	r2, [r3, #8]
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <LL_ADC_REG_StartConversion+0x24>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	f043 0204 	orr.w	r2, r3, #4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	7fffffc0 	.word	0x7fffffc0

0800a424 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <LL_ADC_REG_StopConversion+0x24>)
 800a432:	4013      	ands	r3, r2
 800a434:	f043 0210 	orr.w	r2, r3, #16
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	7fffffc0 	.word	0x7fffffc0

0800a44c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f003 0304 	and.w	r3, r3, #4
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	d101      	bne.n	800a464 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a460:	2301      	movs	r3, #1
 800a462:	e000      	b.n	800a466 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
	...

0800a474 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689a      	ldr	r2, [r3, #8]
 800a480:	4b05      	ldr	r3, [pc, #20]	; (800a498 <LL_ADC_INJ_StopConversion+0x24>)
 800a482:	4013      	ands	r3, r2
 800a484:	f043 0220 	orr.w	r2, r3, #32
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	7fffffc0 	.word	0x7fffffc0

0800a49c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d101      	bne.n	800a4b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e000      	b.n	800a4b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a4c4:	b590      	push	{r4, r7, lr}
 800a4c6:	b089      	sub	sp, #36	; 0x24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e18f      	b.n	800a7fe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7fb fa49 	bl	8005984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff feef 	bl	800a2e8 <LL_ADC_IsDeepPowerDownEnabled>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d004      	beq.n	800a51a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4618      	mov	r0, r3
 800a516:	f7ff fed5 	bl	800a2c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff ff0a 	bl	800a338 <LL_ADC_IsInternalRegulatorEnabled>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d114      	bne.n	800a554 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff feee 	bl	800a310 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a534:	4b87      	ldr	r3, [pc, #540]	; (800a754 <HAL_ADC_Init+0x290>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	099b      	lsrs	r3, r3, #6
 800a53a:	4a87      	ldr	r2, [pc, #540]	; (800a758 <HAL_ADC_Init+0x294>)
 800a53c:	fba2 2303 	umull	r2, r3, r2, r3
 800a540:	099b      	lsrs	r3, r3, #6
 800a542:	3301      	adds	r3, #1
 800a544:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a546:	e002      	b.n	800a54e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f9      	bne.n	800a548 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f7ff feed 	bl	800a338 <LL_ADC_IsInternalRegulatorEnabled>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10d      	bne.n	800a580 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a568:	f043 0210 	orr.w	r2, r3, #16
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a574:	f043 0201 	orr.w	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff ff61 	bl	800a44c <LL_ADC_REG_IsConversionOngoing>
 800a58a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a590:	f003 0310 	and.w	r3, r3, #16
 800a594:	2b00      	cmp	r3, #0
 800a596:	f040 8129 	bne.w	800a7ec <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f040 8125 	bne.w	800a7ec <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a5aa:	f043 0202 	orr.w	r2, r3, #2
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fefa 	bl	800a3b0 <LL_ADC_IsEnabled>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d136      	bne.n	800a630 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a65      	ldr	r2, [pc, #404]	; (800a75c <HAL_ADC_Init+0x298>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d004      	beq.n	800a5d6 <HAL_ADC_Init+0x112>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a63      	ldr	r2, [pc, #396]	; (800a760 <HAL_ADC_Init+0x29c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d10e      	bne.n	800a5f4 <HAL_ADC_Init+0x130>
 800a5d6:	4861      	ldr	r0, [pc, #388]	; (800a75c <HAL_ADC_Init+0x298>)
 800a5d8:	f7ff feea 	bl	800a3b0 <LL_ADC_IsEnabled>
 800a5dc:	4604      	mov	r4, r0
 800a5de:	4860      	ldr	r0, [pc, #384]	; (800a760 <HAL_ADC_Init+0x29c>)
 800a5e0:	f7ff fee6 	bl	800a3b0 <LL_ADC_IsEnabled>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4323      	orrs	r3, r4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	e008      	b.n	800a606 <HAL_ADC_Init+0x142>
 800a5f4:	485b      	ldr	r0, [pc, #364]	; (800a764 <HAL_ADC_Init+0x2a0>)
 800a5f6:	f7ff fedb 	bl	800a3b0 <LL_ADC_IsEnabled>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	bf0c      	ite	eq
 800a600:	2301      	moveq	r3, #1
 800a602:	2300      	movne	r3, #0
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d012      	beq.n	800a630 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a53      	ldr	r2, [pc, #332]	; (800a75c <HAL_ADC_Init+0x298>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d004      	beq.n	800a61e <HAL_ADC_Init+0x15a>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a51      	ldr	r2, [pc, #324]	; (800a760 <HAL_ADC_Init+0x29c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d101      	bne.n	800a622 <HAL_ADC_Init+0x15e>
 800a61e:	4a52      	ldr	r2, [pc, #328]	; (800a768 <HAL_ADC_Init+0x2a4>)
 800a620:	e000      	b.n	800a624 <HAL_ADC_Init+0x160>
 800a622:	4a52      	ldr	r2, [pc, #328]	; (800a76c <HAL_ADC_Init+0x2a8>)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f7ff fd18 	bl	800a060 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800a630:	f7ff fcf4 	bl	800a01c <HAL_GetREVID>
 800a634:	4603      	mov	r3, r0
 800a636:	f241 0203 	movw	r2, #4099	; 0x1003
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d914      	bls.n	800a668 <HAL_ADC_Init+0x1a4>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	2b10      	cmp	r3, #16
 800a644:	d110      	bne.n	800a668 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	7d5b      	ldrb	r3, [r3, #21]
 800a64a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a650:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800a656:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	7f1b      	ldrb	r3, [r3, #28]
 800a65c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800a65e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a660:	f043 030c 	orr.w	r3, r3, #12
 800a664:	61bb      	str	r3, [r7, #24]
 800a666:	e00d      	b.n	800a684 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	7d5b      	ldrb	r3, [r3, #21]
 800a66c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a672:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800a678:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	7f1b      	ldrb	r3, [r3, #28]
 800a67e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a680:	4313      	orrs	r3, r2
 800a682:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7f1b      	ldrb	r3, [r3, #28]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d106      	bne.n	800a69a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	3b01      	subs	r3, #1
 800a692:	045b      	lsls	r3, r3, #17
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	4313      	orrs	r3, r2
 800a698:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d009      	beq.n	800a6b6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	4b2c      	ldr	r3, [pc, #176]	; (800a770 <HAL_ADC_Init+0x2ac>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6812      	ldr	r2, [r2, #0]
 800a6c4:	69b9      	ldr	r1, [r7, #24]
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7ff febc 	bl	800a44c <LL_ADC_REG_IsConversionOngoing>
 800a6d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff fede 	bl	800a49c <LL_ADC_INJ_IsConversionOngoing>
 800a6e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d15f      	bne.n	800a7a8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d15c      	bne.n	800a7a8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7d1b      	ldrb	r3, [r3, #20]
 800a6f2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <HAL_ADC_Init+0x2b0>)
 800a704:	4013      	ands	r3, r2
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	69b9      	ldr	r1, [r7, #24]
 800a70c:	430b      	orrs	r3, r1
 800a70e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a716:	2b01      	cmp	r3, #1
 800a718:	d130      	bne.n	800a77c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	4b14      	ldr	r3, [pc, #80]	; (800a778 <HAL_ADC_Init+0x2b4>)
 800a728:	4013      	ands	r3, r2
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a72e:	3a01      	subs	r2, #1
 800a730:	0411      	lsls	r1, r2, #16
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a736:	4311      	orrs	r1, r2
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a73c:	4311      	orrs	r1, r2
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a742:	430a      	orrs	r2, r1
 800a744:	431a      	orrs	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	611a      	str	r2, [r3, #16]
 800a750:	e01c      	b.n	800a78c <HAL_ADC_Init+0x2c8>
 800a752:	bf00      	nop
 800a754:	240002dc 	.word	0x240002dc
 800a758:	053e2d63 	.word	0x053e2d63
 800a75c:	40022000 	.word	0x40022000
 800a760:	40022100 	.word	0x40022100
 800a764:	58026000 	.word	0x58026000
 800a768:	40022300 	.word	0x40022300
 800a76c:	58026300 	.word	0x58026300
 800a770:	fff0c003 	.word	0xfff0c003
 800a774:	ffffbffc 	.word	0xffffbffc
 800a778:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	691a      	ldr	r2, [r3, #16]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f022 0201 	bic.w	r2, r2, #1
 800a78a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 ff26 	bl	800b5f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d10c      	bne.n	800a7ca <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	f023 010f 	bic.w	r1, r3, #15
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	1e5a      	subs	r2, r3, #1
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30
 800a7c8:	e007      	b.n	800a7da <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f022 020f 	bic.w	r2, r2, #15
 800a7d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	f023 0303 	bic.w	r3, r3, #3
 800a7e2:	f043 0201 	orr.w	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	655a      	str	r2, [r3, #84]	; 0x54
 800a7ea:	e007      	b.n	800a7fc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f0:	f043 0210 	orr.w	r2, r3, #16
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a7fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3724      	adds	r7, #36	; 0x24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd90      	pop	{r4, r7, pc}
 800a806:	bf00      	nop

0800a808 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a5c      	ldr	r2, [pc, #368]	; (800a988 <HAL_ADC_Start+0x180>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d004      	beq.n	800a824 <HAL_ADC_Start+0x1c>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a5b      	ldr	r2, [pc, #364]	; (800a98c <HAL_ADC_Start+0x184>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d101      	bne.n	800a828 <HAL_ADC_Start+0x20>
 800a824:	4b5a      	ldr	r3, [pc, #360]	; (800a990 <HAL_ADC_Start+0x188>)
 800a826:	e000      	b.n	800a82a <HAL_ADC_Start+0x22>
 800a828:	4b5a      	ldr	r3, [pc, #360]	; (800a994 <HAL_ADC_Start+0x18c>)
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff fd2e 	bl	800a28c <LL_ADC_GetMultimode>
 800a830:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f7ff fe08 	bl	800a44c <LL_ADC_REG_IsConversionOngoing>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 809a 	bne.w	800a978 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d101      	bne.n	800a852 <HAL_ADC_Start+0x4a>
 800a84e:	2302      	movs	r3, #2
 800a850:	e095      	b.n	800a97e <HAL_ADC_Start+0x176>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fde0 	bl	800b420 <ADC_Enable>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	2b00      	cmp	r3, #0
 800a868:	f040 8081 	bne.w	800a96e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a870:	4b49      	ldr	r3, [pc, #292]	; (800a998 <HAL_ADC_Start+0x190>)
 800a872:	4013      	ands	r3, r2
 800a874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a42      	ldr	r2, [pc, #264]	; (800a98c <HAL_ADC_Start+0x184>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d002      	beq.n	800a88c <HAL_ADC_Start+0x84>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	e000      	b.n	800a88e <HAL_ADC_Start+0x86>
 800a88c:	4b3e      	ldr	r3, [pc, #248]	; (800a988 <HAL_ADC_Start+0x180>)
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	4293      	cmp	r3, r2
 800a894:	d002      	beq.n	800a89c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d105      	bne.n	800a8a8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b4:	d106      	bne.n	800a8c4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ba:	f023 0206 	bic.w	r2, r3, #6
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	659a      	str	r2, [r3, #88]	; 0x58
 800a8c2:	e002      	b.n	800a8ca <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	221c      	movs	r2, #28
 800a8d0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a2b      	ldr	r2, [pc, #172]	; (800a98c <HAL_ADC_Start+0x184>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d002      	beq.n	800a8ea <HAL_ADC_Start+0xe2>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	e000      	b.n	800a8ec <HAL_ADC_Start+0xe4>
 800a8ea:	4b27      	ldr	r3, [pc, #156]	; (800a988 <HAL_ADC_Start+0x180>)
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	6812      	ldr	r2, [r2, #0]
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d008      	beq.n	800a906 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b05      	cmp	r3, #5
 800a8fe:	d002      	beq.n	800a906 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	2b09      	cmp	r3, #9
 800a904:	d114      	bne.n	800a930 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a918:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a91c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fd67 	bl	800a3fc <LL_ADC_REG_StartConversion>
 800a92e:	e025      	b.n	800a97c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a934:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a12      	ldr	r2, [pc, #72]	; (800a98c <HAL_ADC_Start+0x184>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d002      	beq.n	800a94c <HAL_ADC_Start+0x144>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	e000      	b.n	800a94e <HAL_ADC_Start+0x146>
 800a94c:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <HAL_ADC_Start+0x180>)
 800a94e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00f      	beq.n	800a97c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a960:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a964:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	655a      	str	r2, [r3, #84]	; 0x54
 800a96c:	e006      	b.n	800a97c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a976:	e001      	b.n	800a97c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a978:	2302      	movs	r3, #2
 800a97a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	40022000 	.word	0x40022000
 800a98c:	40022100 	.word	0x40022100
 800a990:	40022300 	.word	0x40022300
 800a994:	58026300 	.word	0x58026300
 800a998:	fffff0fe 	.word	0xfffff0fe

0800a99c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_ADC_Stop+0x16>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e021      	b.n	800a9f6 <HAL_ADC_Stop+0x5a>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800a9ba:	2103      	movs	r1, #3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fc73 	bl	800b2a8 <ADC_ConversionStop>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10f      	bne.n	800a9ec <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fdb1 	bl	800b534 <ADC_Disable>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d107      	bne.n	800a9ec <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9e0:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <HAL_ADC_Stop+0x64>)
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	f043 0201 	orr.w	r2, r3, #1
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	ffffeefe 	.word	0xffffeefe

0800aa04 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a72      	ldr	r2, [pc, #456]	; (800abdc <HAL_ADC_PollForConversion+0x1d8>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d004      	beq.n	800aa22 <HAL_ADC_PollForConversion+0x1e>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a70      	ldr	r2, [pc, #448]	; (800abe0 <HAL_ADC_PollForConversion+0x1dc>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d101      	bne.n	800aa26 <HAL_ADC_PollForConversion+0x22>
 800aa22:	4b70      	ldr	r3, [pc, #448]	; (800abe4 <HAL_ADC_PollForConversion+0x1e0>)
 800aa24:	e000      	b.n	800aa28 <HAL_ADC_PollForConversion+0x24>
 800aa26:	4b70      	ldr	r3, [pc, #448]	; (800abe8 <HAL_ADC_PollForConversion+0x1e4>)
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff fc2f 	bl	800a28c <LL_ADC_GetMultimode>
 800aa2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b08      	cmp	r3, #8
 800aa36:	d102      	bne.n	800aa3e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800aa38:	2308      	movs	r3, #8
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	e037      	b.n	800aaae <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d005      	beq.n	800aa50 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2b05      	cmp	r3, #5
 800aa48:	d002      	beq.n	800aa50 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d111      	bne.n	800aa74 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d007      	beq.n	800aa6e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa62:	f043 0220 	orr.w	r2, r3, #32
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e0b1      	b.n	800abd2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800aa6e:	2304      	movs	r3, #4
 800aa70:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800aa72:	e01c      	b.n	800aaae <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a58      	ldr	r2, [pc, #352]	; (800abdc <HAL_ADC_PollForConversion+0x1d8>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d004      	beq.n	800aa88 <HAL_ADC_PollForConversion+0x84>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a57      	ldr	r2, [pc, #348]	; (800abe0 <HAL_ADC_PollForConversion+0x1dc>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d101      	bne.n	800aa8c <HAL_ADC_PollForConversion+0x88>
 800aa88:	4b56      	ldr	r3, [pc, #344]	; (800abe4 <HAL_ADC_PollForConversion+0x1e0>)
 800aa8a:	e000      	b.n	800aa8e <HAL_ADC_PollForConversion+0x8a>
 800aa8c:	4b56      	ldr	r3, [pc, #344]	; (800abe8 <HAL_ADC_PollForConversion+0x1e4>)
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fc0a 	bl	800a2a8 <LL_ADC_GetMultiDMATransfer>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d007      	beq.n	800aaaa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9e:	f043 0220 	orr.w	r2, r3, #32
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e093      	b.n	800abd2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800aaaa:	2304      	movs	r3, #4
 800aaac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800aaae:	f7ff fa85 	bl	8009fbc <HAL_GetTick>
 800aab2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800aab4:	e021      	b.n	800aafa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabc:	d01d      	beq.n	800aafa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800aabe:	f7ff fa7d 	bl	8009fbc <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d302      	bcc.n	800aad4 <HAL_ADC_PollForConversion+0xd0>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d112      	bne.n	800aafa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	4013      	ands	r3, r2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10b      	bne.n	800aafa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae6:	f043 0204 	orr.w	r2, r3, #4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e06b      	b.n	800abd2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d0d6      	beq.n	800aab6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff fb29 	bl	800a170 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d01c      	beq.n	800ab5e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7d5b      	ldrb	r3, [r3, #21]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d118      	bne.n	800ab5e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0308 	and.w	r3, r3, #8
 800ab36:	2b08      	cmp	r3, #8
 800ab38:	d111      	bne.n	800ab5e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d105      	bne.n	800ab5e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab56:	f043 0201 	orr.w	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a1f      	ldr	r2, [pc, #124]	; (800abe0 <HAL_ADC_PollForConversion+0x1dc>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d002      	beq.n	800ab6e <HAL_ADC_PollForConversion+0x16a>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	e000      	b.n	800ab70 <HAL_ADC_PollForConversion+0x16c>
 800ab6e:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <HAL_ADC_PollForConversion+0x1d8>)
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	6812      	ldr	r2, [r2, #0]
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d008      	beq.n	800ab8a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	d002      	beq.n	800ab8a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d104      	bne.n	800ab94 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	61bb      	str	r3, [r7, #24]
 800ab92:	e00c      	b.n	800abae <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a11      	ldr	r2, [pc, #68]	; (800abe0 <HAL_ADC_PollForConversion+0x1dc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d002      	beq.n	800aba4 <HAL_ADC_PollForConversion+0x1a0>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	e000      	b.n	800aba6 <HAL_ADC_PollForConversion+0x1a2>
 800aba4:	4b0d      	ldr	r3, [pc, #52]	; (800abdc <HAL_ADC_PollForConversion+0x1d8>)
 800aba6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	2b08      	cmp	r3, #8
 800abb2:	d104      	bne.n	800abbe <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2208      	movs	r2, #8
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	e008      	b.n	800abd0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d103      	bne.n	800abd0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	220c      	movs	r2, #12
 800abce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3720      	adds	r7, #32
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	40022000 	.word	0x40022000
 800abe0:	40022100 	.word	0x40022100
 800abe4:	40022300 	.word	0x40022300
 800abe8:	58026300 	.word	0x58026300

0800abec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
	...

0800ac08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800ac08:	b590      	push	{r4, r7, lr}
 800ac0a:	b0a1      	sub	sp, #132	; 0x84
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	4a9d      	ldr	r2, [pc, #628]	; (800ae98 <HAL_ADC_ConfigChannel+0x290>)
 800ac22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d101      	bne.n	800ac32 <HAL_ADC_ConfigChannel+0x2a>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	e321      	b.n	800b276 <HAL_ADC_ConfigChannel+0x66e>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff fc04 	bl	800a44c <LL_ADC_REG_IsConversionOngoing>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f040 8306 	bne.w	800b258 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d108      	bne.n	800ac6a <HAL_ADC_ConfigChannel+0x62>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	0e9b      	lsrs	r3, r3, #26
 800ac5e:	f003 031f 	and.w	r3, r3, #31
 800ac62:	2201      	movs	r2, #1
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	e016      	b.n	800ac98 <HAL_ADC_ConfigChannel+0x90>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac72:	fa93 f3a3 	rbit	r3, r3
 800ac76:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ac78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac7a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ac7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800ac82:	2320      	movs	r3, #32
 800ac84:	e003      	b.n	800ac8e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800ac86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac88:	fab3 f383 	clz	r3, r3
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	f003 031f 	and.w	r3, r3, #31
 800ac92:	2201      	movs	r2, #1
 800ac94:	fa02 f303 	lsl.w	r3, r2, r3
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	6812      	ldr	r2, [r2, #0]
 800ac9c:	69d1      	ldr	r1, [r2, #28]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6812      	ldr	r2, [r2, #0]
 800aca2:	430b      	orrs	r3, r1
 800aca4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	6859      	ldr	r1, [r3, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	f7ff fa6f 	bl	800a196 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fbc5 	bl	800a44c <LL_ADC_REG_IsConversionOngoing>
 800acc2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff fbe7 	bl	800a49c <LL_ADC_INJ_IsConversionOngoing>
 800acce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800acd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f040 80b3 	bne.w	800ae3e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800acd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f040 80af 	bne.w	800ae3e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	6819      	ldr	r1, [r3, #0]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	461a      	mov	r2, r3
 800acee:	f7ff fa7e 	bl	800a1ee <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800acf2:	4b6a      	ldr	r3, [pc, #424]	; (800ae9c <HAL_ADC_ConfigChannel+0x294>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800acfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acfe:	d10b      	bne.n	800ad18 <HAL_ADC_ConfigChannel+0x110>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	695a      	ldr	r2, [r3, #20]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	089b      	lsrs	r3, r3, #2
 800ad0c:	f003 0307 	and.w	r3, r3, #7
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	fa02 f303 	lsl.w	r3, r2, r3
 800ad16:	e01d      	b.n	800ad54 <HAL_ADC_ConfigChannel+0x14c>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	f003 0310 	and.w	r3, r3, #16
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10b      	bne.n	800ad3e <HAL_ADC_ConfigChannel+0x136>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	695a      	ldr	r2, [r3, #20]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	089b      	lsrs	r3, r3, #2
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3c:	e00a      	b.n	800ad54 <HAL_ADC_ConfigChannel+0x14c>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	695a      	ldr	r2, [r3, #20]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	089b      	lsrs	r3, r3, #2
 800ad4a:	f003 0304 	and.w	r3, r3, #4
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	fa02 f303 	lsl.w	r3, r2, r3
 800ad54:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d027      	beq.n	800adae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	6919      	ldr	r1, [r3, #16]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad6c:	f7ff f9ac 	bl	800a0c8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	6919      	ldr	r1, [r3, #16]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	7e5b      	ldrb	r3, [r3, #25]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d102      	bne.n	800ad86 <HAL_ADC_ConfigChannel+0x17e>
 800ad80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad84:	e000      	b.n	800ad88 <HAL_ADC_ConfigChannel+0x180>
 800ad86:	2300      	movs	r3, #0
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f7ff f9d6 	bl	800a13a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6818      	ldr	r0, [r3, #0]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	6919      	ldr	r1, [r3, #16]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	7e1b      	ldrb	r3, [r3, #24]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d102      	bne.n	800ada4 <HAL_ADC_ConfigChannel+0x19c>
 800ad9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ada2:	e000      	b.n	800ada6 <HAL_ADC_ConfigChannel+0x19e>
 800ada4:	2300      	movs	r3, #0
 800ada6:	461a      	mov	r2, r3
 800ada8:	f7ff f9ae 	bl	800a108 <LL_ADC_SetDataRightShift>
 800adac:	e047      	b.n	800ae3e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	069b      	lsls	r3, r3, #26
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d107      	bne.n	800add2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800add0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800add8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	069b      	lsls	r3, r3, #26
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d107      	bne.n	800adf6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800adf4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	069b      	lsls	r3, r3, #26
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d107      	bne.n	800ae1a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ae18:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	069b      	lsls	r3, r3, #26
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d107      	bne.n	800ae3e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ae3c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff fab4 	bl	800a3b0 <LL_ADC_IsEnabled>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f040 820d 	bne.w	800b26a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	6819      	ldr	r1, [r3, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f7ff f9f1 	bl	800a244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	4a0c      	ldr	r2, [pc, #48]	; (800ae98 <HAL_ADC_ConfigChannel+0x290>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	f040 8133 	bne.w	800b0d4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d110      	bne.n	800aea0 <HAL_ADC_ConfigChannel+0x298>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	0e9b      	lsrs	r3, r3, #26
 800ae84:	3301      	adds	r3, #1
 800ae86:	f003 031f 	and.w	r3, r3, #31
 800ae8a:	2b09      	cmp	r3, #9
 800ae8c:	bf94      	ite	ls
 800ae8e:	2301      	movls	r3, #1
 800ae90:	2300      	movhi	r3, #0
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	e01e      	b.n	800aed4 <HAL_ADC_ConfigChannel+0x2cc>
 800ae96:	bf00      	nop
 800ae98:	47ff0000 	.word	0x47ff0000
 800ae9c:	5c001000 	.word	0x5c001000
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aea8:	fa93 f3a3 	rbit	r3, r3
 800aeac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800aeae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800aeb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800aeb8:	2320      	movs	r3, #32
 800aeba:	e003      	b.n	800aec4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800aebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aebe:	fab3 f383 	clz	r3, r3
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	3301      	adds	r3, #1
 800aec6:	f003 031f 	and.w	r3, r3, #31
 800aeca:	2b09      	cmp	r3, #9
 800aecc:	bf94      	ite	ls
 800aece:	2301      	movls	r3, #1
 800aed0:	2300      	movhi	r3, #0
 800aed2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d079      	beq.n	800afcc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d107      	bne.n	800aef4 <HAL_ADC_ConfigChannel+0x2ec>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	0e9b      	lsrs	r3, r3, #26
 800aeea:	3301      	adds	r3, #1
 800aeec:	069b      	lsls	r3, r3, #26
 800aeee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800aef2:	e015      	b.n	800af20 <HAL_ADC_ConfigChannel+0x318>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aefc:	fa93 f3a3 	rbit	r3, r3
 800af00:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800af02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af04:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800af06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800af0c:	2320      	movs	r3, #32
 800af0e:	e003      	b.n	800af18 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800af10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af12:	fab3 f383 	clz	r3, r3
 800af16:	b2db      	uxtb	r3, r3
 800af18:	3301      	adds	r3, #1
 800af1a:	069b      	lsls	r3, r3, #26
 800af1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d109      	bne.n	800af40 <HAL_ADC_ConfigChannel+0x338>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	0e9b      	lsrs	r3, r3, #26
 800af32:	3301      	adds	r3, #1
 800af34:	f003 031f 	and.w	r3, r3, #31
 800af38:	2101      	movs	r1, #1
 800af3a:	fa01 f303 	lsl.w	r3, r1, r3
 800af3e:	e017      	b.n	800af70 <HAL_ADC_ConfigChannel+0x368>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af48:	fa93 f3a3 	rbit	r3, r3
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800af4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af50:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800af52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800af58:	2320      	movs	r3, #32
 800af5a:	e003      	b.n	800af64 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800af5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af5e:	fab3 f383 	clz	r3, r3
 800af62:	b2db      	uxtb	r3, r3
 800af64:	3301      	adds	r3, #1
 800af66:	f003 031f 	and.w	r3, r3, #31
 800af6a:	2101      	movs	r1, #1
 800af6c:	fa01 f303 	lsl.w	r3, r1, r3
 800af70:	ea42 0103 	orr.w	r1, r2, r3
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <HAL_ADC_ConfigChannel+0x38e>
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	0e9b      	lsrs	r3, r3, #26
 800af86:	3301      	adds	r3, #1
 800af88:	f003 021f 	and.w	r2, r3, #31
 800af8c:	4613      	mov	r3, r2
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	4413      	add	r3, r2
 800af92:	051b      	lsls	r3, r3, #20
 800af94:	e018      	b.n	800afc8 <HAL_ADC_ConfigChannel+0x3c0>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9e:	fa93 f3a3 	rbit	r3, r3
 800afa2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800afae:	2320      	movs	r3, #32
 800afb0:	e003      	b.n	800afba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	fab3 f383 	clz	r3, r3
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	3301      	adds	r3, #1
 800afbc:	f003 021f 	and.w	r2, r3, #31
 800afc0:	4613      	mov	r3, r2
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	4413      	add	r3, r2
 800afc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800afc8:	430b      	orrs	r3, r1
 800afca:	e07e      	b.n	800b0ca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d107      	bne.n	800afe8 <HAL_ADC_ConfigChannel+0x3e0>
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	0e9b      	lsrs	r3, r3, #26
 800afde:	3301      	adds	r3, #1
 800afe0:	069b      	lsls	r3, r3, #26
 800afe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800afe6:	e015      	b.n	800b014 <HAL_ADC_ConfigChannel+0x40c>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	fa93 f3a3 	rbit	r3, r3
 800aff4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800b000:	2320      	movs	r3, #32
 800b002:	e003      	b.n	800b00c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	fab3 f383 	clz	r3, r3
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	3301      	adds	r3, #1
 800b00e:	069b      	lsls	r3, r3, #26
 800b010:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d109      	bne.n	800b034 <HAL_ADC_ConfigChannel+0x42c>
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	0e9b      	lsrs	r3, r3, #26
 800b026:	3301      	adds	r3, #1
 800b028:	f003 031f 	and.w	r3, r3, #31
 800b02c:	2101      	movs	r1, #1
 800b02e:	fa01 f303 	lsl.w	r3, r1, r3
 800b032:	e017      	b.n	800b064 <HAL_ADC_ConfigChannel+0x45c>
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	fa93 f3a3 	rbit	r3, r3
 800b040:	61bb      	str	r3, [r7, #24]
  return result;
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800b04c:	2320      	movs	r3, #32
 800b04e:	e003      	b.n	800b058 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	fab3 f383 	clz	r3, r3
 800b056:	b2db      	uxtb	r3, r3
 800b058:	3301      	adds	r3, #1
 800b05a:	f003 031f 	and.w	r3, r3, #31
 800b05e:	2101      	movs	r1, #1
 800b060:	fa01 f303 	lsl.w	r3, r1, r3
 800b064:	ea42 0103 	orr.w	r1, r2, r3
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10d      	bne.n	800b090 <HAL_ADC_ConfigChannel+0x488>
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	0e9b      	lsrs	r3, r3, #26
 800b07a:	3301      	adds	r3, #1
 800b07c:	f003 021f 	and.w	r2, r3, #31
 800b080:	4613      	mov	r3, r2
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	4413      	add	r3, r2
 800b086:	3b1e      	subs	r3, #30
 800b088:	051b      	lsls	r3, r3, #20
 800b08a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b08e:	e01b      	b.n	800b0c8 <HAL_ADC_ConfigChannel+0x4c0>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	fa93 f3a3 	rbit	r3, r3
 800b09c:	60fb      	str	r3, [r7, #12]
  return result;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	e003      	b.n	800b0b4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	fab3 f383 	clz	r3, r3
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	f003 021f 	and.w	r2, r3, #31
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	4413      	add	r3, r2
 800b0c0:	3b1e      	subs	r3, #30
 800b0c2:	051b      	lsls	r3, r3, #20
 800b0c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	6892      	ldr	r2, [r2, #8]
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	f7ff f88d 	bl	800a1ee <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f280 80c6 	bge.w	800b26a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a67      	ldr	r2, [pc, #412]	; (800b280 <HAL_ADC_ConfigChannel+0x678>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d004      	beq.n	800b0f2 <HAL_ADC_ConfigChannel+0x4ea>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a65      	ldr	r2, [pc, #404]	; (800b284 <HAL_ADC_ConfigChannel+0x67c>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d101      	bne.n	800b0f6 <HAL_ADC_ConfigChannel+0x4ee>
 800b0f2:	4b65      	ldr	r3, [pc, #404]	; (800b288 <HAL_ADC_ConfigChannel+0x680>)
 800b0f4:	e000      	b.n	800b0f8 <HAL_ADC_ConfigChannel+0x4f0>
 800b0f6:	4b65      	ldr	r3, [pc, #404]	; (800b28c <HAL_ADC_ConfigChannel+0x684>)
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe ffd7 	bl	800a0ac <LL_ADC_GetCommonPathInternalCh>
 800b0fe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a5e      	ldr	r2, [pc, #376]	; (800b280 <HAL_ADC_ConfigChannel+0x678>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d004      	beq.n	800b114 <HAL_ADC_ConfigChannel+0x50c>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a5d      	ldr	r2, [pc, #372]	; (800b284 <HAL_ADC_ConfigChannel+0x67c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d10e      	bne.n	800b132 <HAL_ADC_ConfigChannel+0x52a>
 800b114:	485a      	ldr	r0, [pc, #360]	; (800b280 <HAL_ADC_ConfigChannel+0x678>)
 800b116:	f7ff f94b 	bl	800a3b0 <LL_ADC_IsEnabled>
 800b11a:	4604      	mov	r4, r0
 800b11c:	4859      	ldr	r0, [pc, #356]	; (800b284 <HAL_ADC_ConfigChannel+0x67c>)
 800b11e:	f7ff f947 	bl	800a3b0 <LL_ADC_IsEnabled>
 800b122:	4603      	mov	r3, r0
 800b124:	4323      	orrs	r3, r4
 800b126:	2b00      	cmp	r3, #0
 800b128:	bf0c      	ite	eq
 800b12a:	2301      	moveq	r3, #1
 800b12c:	2300      	movne	r3, #0
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	e008      	b.n	800b144 <HAL_ADC_ConfigChannel+0x53c>
 800b132:	4857      	ldr	r0, [pc, #348]	; (800b290 <HAL_ADC_ConfigChannel+0x688>)
 800b134:	f7ff f93c 	bl	800a3b0 <LL_ADC_IsEnabled>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bf0c      	ite	eq
 800b13e:	2301      	moveq	r3, #1
 800b140:	2300      	movne	r3, #0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d07d      	beq.n	800b244 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a51      	ldr	r2, [pc, #324]	; (800b294 <HAL_ADC_ConfigChannel+0x68c>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d130      	bne.n	800b1b4 <HAL_ADC_ConfigChannel+0x5ac>
 800b152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d12b      	bne.n	800b1b4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a4b      	ldr	r2, [pc, #300]	; (800b290 <HAL_ADC_ConfigChannel+0x688>)
 800b162:	4293      	cmp	r3, r2
 800b164:	f040 8081 	bne.w	800b26a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a44      	ldr	r2, [pc, #272]	; (800b280 <HAL_ADC_ConfigChannel+0x678>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d004      	beq.n	800b17c <HAL_ADC_ConfigChannel+0x574>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a43      	ldr	r2, [pc, #268]	; (800b284 <HAL_ADC_ConfigChannel+0x67c>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d101      	bne.n	800b180 <HAL_ADC_ConfigChannel+0x578>
 800b17c:	4a42      	ldr	r2, [pc, #264]	; (800b288 <HAL_ADC_ConfigChannel+0x680>)
 800b17e:	e000      	b.n	800b182 <HAL_ADC_ConfigChannel+0x57a>
 800b180:	4a42      	ldr	r2, [pc, #264]	; (800b28c <HAL_ADC_ConfigChannel+0x684>)
 800b182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7fe ff7b 	bl	800a086 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b190:	4b41      	ldr	r3, [pc, #260]	; (800b298 <HAL_ADC_ConfigChannel+0x690>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	099b      	lsrs	r3, r3, #6
 800b196:	4a41      	ldr	r2, [pc, #260]	; (800b29c <HAL_ADC_ConfigChannel+0x694>)
 800b198:	fba2 2303 	umull	r2, r3, r2, r3
 800b19c:	099b      	lsrs	r3, r3, #6
 800b19e:	3301      	adds	r3, #1
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b1a4:	e002      	b.n	800b1ac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1f9      	bne.n	800b1a6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b1b2:	e05a      	b.n	800b26a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a39      	ldr	r2, [pc, #228]	; (800b2a0 <HAL_ADC_ConfigChannel+0x698>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d11e      	bne.n	800b1fc <HAL_ADC_ConfigChannel+0x5f4>
 800b1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d119      	bne.n	800b1fc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a30      	ldr	r2, [pc, #192]	; (800b290 <HAL_ADC_ConfigChannel+0x688>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d14b      	bne.n	800b26a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a2a      	ldr	r2, [pc, #168]	; (800b280 <HAL_ADC_ConfigChannel+0x678>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d004      	beq.n	800b1e6 <HAL_ADC_ConfigChannel+0x5de>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a28      	ldr	r2, [pc, #160]	; (800b284 <HAL_ADC_ConfigChannel+0x67c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d101      	bne.n	800b1ea <HAL_ADC_ConfigChannel+0x5e2>
 800b1e6:	4a28      	ldr	r2, [pc, #160]	; (800b288 <HAL_ADC_ConfigChannel+0x680>)
 800b1e8:	e000      	b.n	800b1ec <HAL_ADC_ConfigChannel+0x5e4>
 800b1ea:	4a28      	ldr	r2, [pc, #160]	; (800b28c <HAL_ADC_ConfigChannel+0x684>)
 800b1ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f7fe ff46 	bl	800a086 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b1fa:	e036      	b.n	800b26a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a28      	ldr	r2, [pc, #160]	; (800b2a4 <HAL_ADC_ConfigChannel+0x69c>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d131      	bne.n	800b26a <HAL_ADC_ConfigChannel+0x662>
 800b206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d12c      	bne.n	800b26a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1e      	ldr	r2, [pc, #120]	; (800b290 <HAL_ADC_ConfigChannel+0x688>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d127      	bne.n	800b26a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a18      	ldr	r2, [pc, #96]	; (800b280 <HAL_ADC_ConfigChannel+0x678>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d004      	beq.n	800b22e <HAL_ADC_ConfigChannel+0x626>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a16      	ldr	r2, [pc, #88]	; (800b284 <HAL_ADC_ConfigChannel+0x67c>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d101      	bne.n	800b232 <HAL_ADC_ConfigChannel+0x62a>
 800b22e:	4a16      	ldr	r2, [pc, #88]	; (800b288 <HAL_ADC_ConfigChannel+0x680>)
 800b230:	e000      	b.n	800b234 <HAL_ADC_ConfigChannel+0x62c>
 800b232:	4a16      	ldr	r2, [pc, #88]	; (800b28c <HAL_ADC_ConfigChannel+0x684>)
 800b234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b23a:	4619      	mov	r1, r3
 800b23c:	4610      	mov	r0, r2
 800b23e:	f7fe ff22 	bl	800a086 <LL_ADC_SetCommonPathInternalCh>
 800b242:	e012      	b.n	800b26a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b248:	f043 0220 	orr.w	r2, r3, #32
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b256:	e008      	b.n	800b26a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25c:	f043 0220 	orr.w	r2, r3, #32
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800b272:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b276:	4618      	mov	r0, r3
 800b278:	3784      	adds	r7, #132	; 0x84
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd90      	pop	{r4, r7, pc}
 800b27e:	bf00      	nop
 800b280:	40022000 	.word	0x40022000
 800b284:	40022100 	.word	0x40022100
 800b288:	40022300 	.word	0x40022300
 800b28c:	58026300 	.word	0x58026300
 800b290:	58026000 	.word	0x58026000
 800b294:	cb840000 	.word	0xcb840000
 800b298:	240002dc 	.word	0x240002dc
 800b29c:	053e2d63 	.word	0x053e2d63
 800b2a0:	c7520000 	.word	0xc7520000
 800b2a4:	cfb80000 	.word	0xcfb80000

0800b2a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff f8c4 	bl	800a44c <LL_ADC_REG_IsConversionOngoing>
 800b2c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff f8e6 	bl	800a49c <LL_ADC_INJ_IsConversionOngoing>
 800b2d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d103      	bne.n	800b2e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 8098 	beq.w	800b410 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d02a      	beq.n	800b344 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7d5b      	ldrb	r3, [r3, #21]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d126      	bne.n	800b344 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	7d1b      	ldrb	r3, [r3, #20]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d122      	bne.n	800b344 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b2fe:	2301      	movs	r3, #1
 800b300:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b302:	e014      	b.n	800b32e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	4a45      	ldr	r2, [pc, #276]	; (800b41c <ADC_ConversionStop+0x174>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d90d      	bls.n	800b328 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b310:	f043 0210 	orr.w	r2, r3, #16
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31c:	f043 0201 	orr.w	r2, r3, #1
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e074      	b.n	800b412 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	3301      	adds	r3, #1
 800b32c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b338:	2b40      	cmp	r3, #64	; 0x40
 800b33a:	d1e3      	bne.n	800b304 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2240      	movs	r2, #64	; 0x40
 800b342:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d014      	beq.n	800b374 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff f87c 	bl	800a44c <LL_ADC_REG_IsConversionOngoing>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00c      	beq.n	800b374 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff f839 	bl	800a3d6 <LL_ADC_IsDisableOngoing>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d104      	bne.n	800b374 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff f858 	bl	800a424 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d014      	beq.n	800b3a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4618      	mov	r0, r3
 800b380:	f7ff f88c 	bl	800a49c <LL_ADC_INJ_IsConversionOngoing>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00c      	beq.n	800b3a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff f821 	bl	800a3d6 <LL_ADC_IsDisableOngoing>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d104      	bne.n	800b3a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff f868 	bl	800a474 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d005      	beq.n	800b3b6 <ADC_ConversionStop+0x10e>
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	2b03      	cmp	r3, #3
 800b3ae:	d105      	bne.n	800b3bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800b3b0:	230c      	movs	r3, #12
 800b3b2:	617b      	str	r3, [r7, #20]
        break;
 800b3b4:	e005      	b.n	800b3c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b3b6:	2308      	movs	r3, #8
 800b3b8:	617b      	str	r3, [r7, #20]
        break;
 800b3ba:	e002      	b.n	800b3c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b3bc:	2304      	movs	r3, #4
 800b3be:	617b      	str	r3, [r7, #20]
        break;
 800b3c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b3c2:	f7fe fdfb 	bl	8009fbc <HAL_GetTick>
 800b3c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b3c8:	e01b      	b.n	800b402 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b3ca:	f7fe fdf7 	bl	8009fbc <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	2b05      	cmp	r3, #5
 800b3d6:	d914      	bls.n	800b402 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689a      	ldr	r2, [r3, #8]
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00d      	beq.n	800b402 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ea:	f043 0210 	orr.w	r2, r3, #16
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f6:	f043 0201 	orr.w	r2, r3, #1
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e007      	b.n	800b412 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	689a      	ldr	r2, [r3, #8]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	4013      	ands	r3, r2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1dc      	bne.n	800b3ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	000cdbff 	.word	0x000cdbff

0800b420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fe ffbf 	bl	800a3b0 <LL_ADC_IsEnabled>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d16e      	bne.n	800b516 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689a      	ldr	r2, [r3, #8]
 800b43e:	4b38      	ldr	r3, [pc, #224]	; (800b520 <ADC_Enable+0x100>)
 800b440:	4013      	ands	r3, r2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00d      	beq.n	800b462 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b44a:	f043 0210 	orr.w	r2, r3, #16
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b456:	f043 0201 	orr.w	r2, r3, #1
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e05a      	b.n	800b518 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe ff7a 	bl	800a360 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b46c:	f7fe fda6 	bl	8009fbc <HAL_GetTick>
 800b470:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a2b      	ldr	r2, [pc, #172]	; (800b524 <ADC_Enable+0x104>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d004      	beq.n	800b486 <ADC_Enable+0x66>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a29      	ldr	r2, [pc, #164]	; (800b528 <ADC_Enable+0x108>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d101      	bne.n	800b48a <ADC_Enable+0x6a>
 800b486:	4b29      	ldr	r3, [pc, #164]	; (800b52c <ADC_Enable+0x10c>)
 800b488:	e000      	b.n	800b48c <ADC_Enable+0x6c>
 800b48a:	4b29      	ldr	r3, [pc, #164]	; (800b530 <ADC_Enable+0x110>)
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fe fefd 	bl	800a28c <LL_ADC_GetMultimode>
 800b492:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a23      	ldr	r2, [pc, #140]	; (800b528 <ADC_Enable+0x108>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d002      	beq.n	800b4a4 <ADC_Enable+0x84>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	e000      	b.n	800b4a6 <ADC_Enable+0x86>
 800b4a4:	4b1f      	ldr	r3, [pc, #124]	; (800b524 <ADC_Enable+0x104>)
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6812      	ldr	r2, [r2, #0]
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d02c      	beq.n	800b508 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d130      	bne.n	800b516 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b4b4:	e028      	b.n	800b508 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe ff78 	bl	800a3b0 <LL_ADC_IsEnabled>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d104      	bne.n	800b4d0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe ff48 	bl	800a360 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b4d0:	f7fe fd74 	bl	8009fbc <HAL_GetTick>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d914      	bls.n	800b508 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d00d      	beq.n	800b508 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f0:	f043 0210 	orr.w	r2, r3, #16
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4fc:	f043 0201 	orr.w	r2, r3, #1
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e007      	b.n	800b518 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0301 	and.w	r3, r3, #1
 800b512:	2b01      	cmp	r3, #1
 800b514:	d1cf      	bne.n	800b4b6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	8000003f 	.word	0x8000003f
 800b524:	40022000 	.word	0x40022000
 800b528:	40022100 	.word	0x40022100
 800b52c:	40022300 	.word	0x40022300
 800b530:	58026300 	.word	0x58026300

0800b534 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe ff48 	bl	800a3d6 <LL_ADC_IsDisableOngoing>
 800b546:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe ff2f 	bl	800a3b0 <LL_ADC_IsEnabled>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d047      	beq.n	800b5e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d144      	bne.n	800b5e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	f003 030d 	and.w	r3, r3, #13
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d10c      	bne.n	800b586 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe ff09 	bl	800a388 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2203      	movs	r2, #3
 800b57c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b57e:	f7fe fd1d 	bl	8009fbc <HAL_GetTick>
 800b582:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b584:	e029      	b.n	800b5da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58a:	f043 0210 	orr.w	r2, r3, #16
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b596:	f043 0201 	orr.w	r2, r3, #1
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e023      	b.n	800b5ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b5a2:	f7fe fd0b 	bl	8009fbc <HAL_GetTick>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d914      	bls.n	800b5da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00d      	beq.n	800b5da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c2:	f043 0210 	orr.w	r2, r3, #16
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ce:	f043 0201 	orr.w	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e007      	b.n	800b5ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f003 0301 	and.w	r3, r3, #1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1dc      	bne.n	800b5a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a79      	ldr	r2, [pc, #484]	; (800b7e8 <ADC_ConfigureBoostMode+0x1f4>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d004      	beq.n	800b610 <ADC_ConfigureBoostMode+0x1c>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a78      	ldr	r2, [pc, #480]	; (800b7ec <ADC_ConfigureBoostMode+0x1f8>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d109      	bne.n	800b624 <ADC_ConfigureBoostMode+0x30>
 800b610:	4b77      	ldr	r3, [pc, #476]	; (800b7f0 <ADC_ConfigureBoostMode+0x1fc>)
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	bf14      	ite	ne
 800b61c:	2301      	movne	r3, #1
 800b61e:	2300      	moveq	r3, #0
 800b620:	b2db      	uxtb	r3, r3
 800b622:	e008      	b.n	800b636 <ADC_ConfigureBoostMode+0x42>
 800b624:	4b73      	ldr	r3, [pc, #460]	; (800b7f4 <ADC_ConfigureBoostMode+0x200>)
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	bf14      	ite	ne
 800b630:	2301      	movne	r3, #1
 800b632:	2300      	moveq	r3, #0
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d01c      	beq.n	800b674 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b63a:	f006 f82f 	bl	801169c <HAL_RCC_GetHCLKFreq>
 800b63e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b648:	d010      	beq.n	800b66c <ADC_ConfigureBoostMode+0x78>
 800b64a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b64e:	d871      	bhi.n	800b734 <ADC_ConfigureBoostMode+0x140>
 800b650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b654:	d002      	beq.n	800b65c <ADC_ConfigureBoostMode+0x68>
 800b656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b65a:	d16b      	bne.n	800b734 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	0c1b      	lsrs	r3, r3, #16
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	fbb2 f3f3 	udiv	r3, r2, r3
 800b668:	60fb      	str	r3, [r7, #12]
        break;
 800b66a:	e066      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	089b      	lsrs	r3, r3, #2
 800b670:	60fb      	str	r3, [r7, #12]
        break;
 800b672:	e062      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b674:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b678:	f006 fff4 	bl	8012664 <HAL_RCCEx_GetPeriphCLKFreq>
 800b67c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800b686:	d051      	beq.n	800b72c <ADC_ConfigureBoostMode+0x138>
 800b688:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800b68c:	d854      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b68e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800b692:	d047      	beq.n	800b724 <ADC_ConfigureBoostMode+0x130>
 800b694:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800b698:	d84e      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b69a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800b69e:	d03d      	beq.n	800b71c <ADC_ConfigureBoostMode+0x128>
 800b6a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800b6a4:	d848      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b6a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6aa:	d033      	beq.n	800b714 <ADC_ConfigureBoostMode+0x120>
 800b6ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6b0:	d842      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b6b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800b6b6:	d029      	beq.n	800b70c <ADC_ConfigureBoostMode+0x118>
 800b6b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800b6bc:	d83c      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b6be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b6c2:	d01a      	beq.n	800b6fa <ADC_ConfigureBoostMode+0x106>
 800b6c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b6c8:	d836      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b6ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b6ce:	d014      	beq.n	800b6fa <ADC_ConfigureBoostMode+0x106>
 800b6d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b6d4:	d830      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b6d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6da:	d00e      	beq.n	800b6fa <ADC_ConfigureBoostMode+0x106>
 800b6dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6e0:	d82a      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b6e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b6e6:	d008      	beq.n	800b6fa <ADC_ConfigureBoostMode+0x106>
 800b6e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b6ec:	d824      	bhi.n	800b738 <ADC_ConfigureBoostMode+0x144>
 800b6ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b6f2:	d002      	beq.n	800b6fa <ADC_ConfigureBoostMode+0x106>
 800b6f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b6f8:	d11e      	bne.n	800b738 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	0c9b      	lsrs	r3, r3, #18
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	fbb2 f3f3 	udiv	r3, r2, r3
 800b708:	60fb      	str	r3, [r7, #12]
        break;
 800b70a:	e016      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	091b      	lsrs	r3, r3, #4
 800b710:	60fb      	str	r3, [r7, #12]
        break;
 800b712:	e012      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	095b      	lsrs	r3, r3, #5
 800b718:	60fb      	str	r3, [r7, #12]
        break;
 800b71a:	e00e      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	099b      	lsrs	r3, r3, #6
 800b720:	60fb      	str	r3, [r7, #12]
        break;
 800b722:	e00a      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	09db      	lsrs	r3, r3, #7
 800b728:	60fb      	str	r3, [r7, #12]
        break;
 800b72a:	e006      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	0a1b      	lsrs	r3, r3, #8
 800b730:	60fb      	str	r3, [r7, #12]
        break;
 800b732:	e002      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
        break;
 800b734:	bf00      	nop
 800b736:	e000      	b.n	800b73a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800b738:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800b73a:	f7fe fc6f 	bl	800a01c <HAL_GetREVID>
 800b73e:	4603      	mov	r3, r0
 800b740:	f241 0203 	movw	r2, #4099	; 0x1003
 800b744:	4293      	cmp	r3, r2
 800b746:	d815      	bhi.n	800b774 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4a2b      	ldr	r2, [pc, #172]	; (800b7f8 <ADC_ConfigureBoostMode+0x204>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d908      	bls.n	800b762 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b75e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b760:	e03e      	b.n	800b7e0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689a      	ldr	r2, [r3, #8]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b770:	609a      	str	r2, [r3, #8]
}
 800b772:	e035      	b.n	800b7e0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	085b      	lsrs	r3, r3, #1
 800b778:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4a1f      	ldr	r2, [pc, #124]	; (800b7fc <ADC_ConfigureBoostMode+0x208>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d808      	bhi.n	800b794 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b790:	609a      	str	r2, [r3, #8]
}
 800b792:	e025      	b.n	800b7e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4a1a      	ldr	r2, [pc, #104]	; (800b800 <ADC_ConfigureBoostMode+0x20c>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d80a      	bhi.n	800b7b2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7ae:	609a      	str	r2, [r3, #8]
}
 800b7b0:	e016      	b.n	800b7e0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	4a13      	ldr	r2, [pc, #76]	; (800b804 <ADC_ConfigureBoostMode+0x210>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d80a      	bhi.n	800b7d0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7cc:	609a      	str	r2, [r3, #8]
}
 800b7ce:	e007      	b.n	800b7e0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	689a      	ldr	r2, [r3, #8]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b7de:	609a      	str	r2, [r3, #8]
}
 800b7e0:	bf00      	nop
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	40022000 	.word	0x40022000
 800b7ec:	40022100 	.word	0x40022100
 800b7f0:	40022300 	.word	0x40022300
 800b7f4:	58026300 	.word	0x58026300
 800b7f8:	01312d00 	.word	0x01312d00
 800b7fc:	005f5e10 	.word	0x005f5e10
 800b800:	00bebc20 	.word	0x00bebc20
 800b804:	017d7840 	.word	0x017d7840

0800b808 <LL_ADC_StartCalibration>:
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	4b09      	ldr	r3, [pc, #36]	; (800b840 <LL_ADC_StartCalibration+0x38>)
 800b81a:	4013      	ands	r3, r2
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b828:	430a      	orrs	r2, r1
 800b82a:	4313      	orrs	r3, r2
 800b82c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	609a      	str	r2, [r3, #8]
}
 800b834:	bf00      	nop
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	3ffeffc0 	.word	0x3ffeffc0

0800b844 <LL_ADC_IsCalibrationOnGoing>:
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b858:	d101      	bne.n	800b85e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e000      	b.n	800b860 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b878:	2300      	movs	r3, #0
 800b87a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b882:	2b01      	cmp	r3, #1
 800b884:	d101      	bne.n	800b88a <HAL_ADCEx_Calibration_Start+0x1e>
 800b886:	2302      	movs	r3, #2
 800b888:	e04c      	b.n	800b924 <HAL_ADCEx_Calibration_Start+0xb8>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff fe4e 	bl	800b534 <ADC_Disable>
 800b898:	4603      	mov	r3, r0
 800b89a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b89c:	7dfb      	ldrb	r3, [r7, #23]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d135      	bne.n	800b90e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8a6:	4b21      	ldr	r3, [pc, #132]	; (800b92c <HAL_ADCEx_Calibration_Start+0xc0>)
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	f043 0202 	orr.w	r2, r3, #2
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff ffa4 	bl	800b808 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b8c0:	e014      	b.n	800b8ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	4a19      	ldr	r2, [pc, #100]	; (800b930 <HAL_ADCEx_Calibration_Start+0xc4>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d30d      	bcc.n	800b8ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d4:	f023 0312 	bic.w	r3, r3, #18
 800b8d8:	f043 0210 	orr.w	r2, r3, #16
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e01b      	b.n	800b924 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff ffa7 	bl	800b844 <LL_ADC_IsCalibrationOnGoing>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e2      	bne.n	800b8c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b900:	f023 0303 	bic.w	r3, r3, #3
 800b904:	f043 0201 	orr.w	r2, r3, #1
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	655a      	str	r2, [r3, #84]	; 0x54
 800b90c:	e005      	b.n	800b91a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b912:	f043 0210 	orr.w	r2, r3, #16
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	ffffeefd 	.word	0xffffeefd
 800b930:	25c3f800 	.word	0x25c3f800

0800b934 <__NVIC_SetPriorityGrouping>:
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b944:	4b0b      	ldr	r3, [pc, #44]	; (800b974 <__NVIC_SetPriorityGrouping+0x40>)
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b950:	4013      	ands	r3, r2
 800b952:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b95c:	4b06      	ldr	r3, [pc, #24]	; (800b978 <__NVIC_SetPriorityGrouping+0x44>)
 800b95e:	4313      	orrs	r3, r2
 800b960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b962:	4a04      	ldr	r2, [pc, #16]	; (800b974 <__NVIC_SetPriorityGrouping+0x40>)
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	60d3      	str	r3, [r2, #12]
}
 800b968:	bf00      	nop
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	e000ed00 	.word	0xe000ed00
 800b978:	05fa0000 	.word	0x05fa0000

0800b97c <__NVIC_GetPriorityGrouping>:
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b980:	4b04      	ldr	r3, [pc, #16]	; (800b994 <__NVIC_GetPriorityGrouping+0x18>)
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	0a1b      	lsrs	r3, r3, #8
 800b986:	f003 0307 	and.w	r3, r3, #7
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	e000ed00 	.word	0xe000ed00

0800b998 <__NVIC_EnableIRQ>:
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b9a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	db0b      	blt.n	800b9c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b9aa:	88fb      	ldrh	r3, [r7, #6]
 800b9ac:	f003 021f 	and.w	r2, r3, #31
 800b9b0:	4907      	ldr	r1, [pc, #28]	; (800b9d0 <__NVIC_EnableIRQ+0x38>)
 800b9b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9b6:	095b      	lsrs	r3, r3, #5
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	fa00 f202 	lsl.w	r2, r0, r2
 800b9be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b9c2:	bf00      	nop
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	e000e100 	.word	0xe000e100

0800b9d4 <__NVIC_SetPriority>:
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	6039      	str	r1, [r7, #0]
 800b9de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b9e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	db0a      	blt.n	800b9fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	490c      	ldr	r1, [pc, #48]	; (800ba20 <__NVIC_SetPriority+0x4c>)
 800b9ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9f2:	0112      	lsls	r2, r2, #4
 800b9f4:	b2d2      	uxtb	r2, r2
 800b9f6:	440b      	add	r3, r1
 800b9f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b9fc:	e00a      	b.n	800ba14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	4908      	ldr	r1, [pc, #32]	; (800ba24 <__NVIC_SetPriority+0x50>)
 800ba04:	88fb      	ldrh	r3, [r7, #6]
 800ba06:	f003 030f 	and.w	r3, r3, #15
 800ba0a:	3b04      	subs	r3, #4
 800ba0c:	0112      	lsls	r2, r2, #4
 800ba0e:	b2d2      	uxtb	r2, r2
 800ba10:	440b      	add	r3, r1
 800ba12:	761a      	strb	r2, [r3, #24]
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	e000e100 	.word	0xe000e100
 800ba24:	e000ed00 	.word	0xe000ed00

0800ba28 <NVIC_EncodePriority>:
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b089      	sub	sp, #36	; 0x24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f003 0307 	and.w	r3, r3, #7
 800ba3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	f1c3 0307 	rsb	r3, r3, #7
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	bf28      	it	cs
 800ba46:	2304      	movcs	r3, #4
 800ba48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	2b06      	cmp	r3, #6
 800ba50:	d902      	bls.n	800ba58 <NVIC_EncodePriority+0x30>
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	3b03      	subs	r3, #3
 800ba56:	e000      	b.n	800ba5a <NVIC_EncodePriority+0x32>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	fa02 f303 	lsl.w	r3, r2, r3
 800ba66:	43da      	mvns	r2, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	401a      	ands	r2, r3
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba70:	f04f 31ff 	mov.w	r1, #4294967295
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	fa01 f303 	lsl.w	r3, r1, r3
 800ba7a:	43d9      	mvns	r1, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba80:	4313      	orrs	r3, r2
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3724      	adds	r7, #36	; 0x24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b082      	sub	sp, #8
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff ff4c 	bl	800b934 <__NVIC_SetPriorityGrouping>
}
 800ba9c:	bf00      	nop
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
 800bab0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bab2:	f7ff ff63 	bl	800b97c <__NVIC_GetPriorityGrouping>
 800bab6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	68b9      	ldr	r1, [r7, #8]
 800babc:	6978      	ldr	r0, [r7, #20]
 800babe:	f7ff ffb3 	bl	800ba28 <NVIC_EncodePriority>
 800bac2:	4602      	mov	r2, r0
 800bac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff ff82 	bl	800b9d4 <__NVIC_SetPriority>
}
 800bad0:	bf00      	nop
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff ff56 	bl	800b998 <__NVIC_EnableIRQ>
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800baf4:	b480      	push	{r7}
 800baf6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800baf8:	f3bf 8f5f 	dmb	sy
}
 800bafc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800bafe:	4b07      	ldr	r3, [pc, #28]	; (800bb1c <HAL_MPU_Disable+0x28>)
 800bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb02:	4a06      	ldr	r2, [pc, #24]	; (800bb1c <HAL_MPU_Disable+0x28>)
 800bb04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800bb0a:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <HAL_MPU_Disable+0x2c>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	605a      	str	r2, [r3, #4]
}
 800bb10:	bf00      	nop
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	e000ed00 	.word	0xe000ed00
 800bb20:	e000ed90 	.word	0xe000ed90

0800bb24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800bb2c:	4a0b      	ldr	r2, [pc, #44]	; (800bb5c <HAL_MPU_Enable+0x38>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f043 0301 	orr.w	r3, r3, #1
 800bb34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800bb36:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <HAL_MPU_Enable+0x3c>)
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	4a09      	ldr	r2, [pc, #36]	; (800bb60 <HAL_MPU_Enable+0x3c>)
 800bb3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb40:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800bb42:	f3bf 8f4f 	dsb	sy
}
 800bb46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bb48:	f3bf 8f6f 	isb	sy
}
 800bb4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800bb4e:	bf00      	nop
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	e000ed90 	.word	0xe000ed90
 800bb60:	e000ed00 	.word	0xe000ed00

0800bb64 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	785a      	ldrb	r2, [r3, #1]
 800bb70:	4b1d      	ldr	r3, [pc, #116]	; (800bbe8 <HAL_MPU_ConfigRegion+0x84>)
 800bb72:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d029      	beq.n	800bbd0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800bb7c:	4a1a      	ldr	r2, [pc, #104]	; (800bbe8 <HAL_MPU_ConfigRegion+0x84>)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7b1b      	ldrb	r3, [r3, #12]
 800bb88:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7adb      	ldrb	r3, [r3, #11]
 800bb8e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bb90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	7a9b      	ldrb	r3, [r3, #10]
 800bb96:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800bb98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7b5b      	ldrb	r3, [r3, #13]
 800bb9e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800bba0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	7b9b      	ldrb	r3, [r3, #14]
 800bba6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800bba8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7bdb      	ldrb	r3, [r3, #15]
 800bbae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800bbb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	7a5b      	ldrb	r3, [r3, #9]
 800bbb6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800bbb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	7a1b      	ldrb	r3, [r3, #8]
 800bbbe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800bbc0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	7812      	ldrb	r2, [r2, #0]
 800bbc6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bbc8:	4a07      	ldr	r2, [pc, #28]	; (800bbe8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800bbca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800bbcc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800bbce:	e005      	b.n	800bbdc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800bbd0:	4b05      	ldr	r3, [pc, #20]	; (800bbe8 <HAL_MPU_ConfigRegion+0x84>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800bbd6:	4b04      	ldr	r3, [pc, #16]	; (800bbe8 <HAL_MPU_ConfigRegion+0x84>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	611a      	str	r2, [r3, #16]
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	e000ed90 	.word	0xe000ed90

0800bbec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800bbf4:	f7fe f9e2 	bl	8009fbc <HAL_GetTick>
 800bbf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	e316      	b.n	800c232 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a66      	ldr	r2, [pc, #408]	; (800bda4 <HAL_DMA_Init+0x1b8>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d04a      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a65      	ldr	r2, [pc, #404]	; (800bda8 <HAL_DMA_Init+0x1bc>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d045      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a63      	ldr	r2, [pc, #396]	; (800bdac <HAL_DMA_Init+0x1c0>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d040      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a62      	ldr	r2, [pc, #392]	; (800bdb0 <HAL_DMA_Init+0x1c4>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d03b      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a60      	ldr	r2, [pc, #384]	; (800bdb4 <HAL_DMA_Init+0x1c8>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d036      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a5f      	ldr	r2, [pc, #380]	; (800bdb8 <HAL_DMA_Init+0x1cc>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d031      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a5d      	ldr	r2, [pc, #372]	; (800bdbc <HAL_DMA_Init+0x1d0>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d02c      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a5c      	ldr	r2, [pc, #368]	; (800bdc0 <HAL_DMA_Init+0x1d4>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d027      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a5a      	ldr	r2, [pc, #360]	; (800bdc4 <HAL_DMA_Init+0x1d8>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d022      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a59      	ldr	r2, [pc, #356]	; (800bdc8 <HAL_DMA_Init+0x1dc>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d01d      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a57      	ldr	r2, [pc, #348]	; (800bdcc <HAL_DMA_Init+0x1e0>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d018      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a56      	ldr	r2, [pc, #344]	; (800bdd0 <HAL_DMA_Init+0x1e4>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d013      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a54      	ldr	r2, [pc, #336]	; (800bdd4 <HAL_DMA_Init+0x1e8>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d00e      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a53      	ldr	r2, [pc, #332]	; (800bdd8 <HAL_DMA_Init+0x1ec>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d009      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a51      	ldr	r2, [pc, #324]	; (800bddc <HAL_DMA_Init+0x1f0>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d004      	beq.n	800bca4 <HAL_DMA_Init+0xb8>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a50      	ldr	r2, [pc, #320]	; (800bde0 <HAL_DMA_Init+0x1f4>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d101      	bne.n	800bca8 <HAL_DMA_Init+0xbc>
 800bca4:	2301      	movs	r3, #1
 800bca6:	e000      	b.n	800bcaa <HAL_DMA_Init+0xbe>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f000 813b 	beq.w	800bf26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a37      	ldr	r2, [pc, #220]	; (800bda4 <HAL_DMA_Init+0x1b8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d04a      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a36      	ldr	r2, [pc, #216]	; (800bda8 <HAL_DMA_Init+0x1bc>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d045      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a34      	ldr	r2, [pc, #208]	; (800bdac <HAL_DMA_Init+0x1c0>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d040      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a33      	ldr	r2, [pc, #204]	; (800bdb0 <HAL_DMA_Init+0x1c4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d03b      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a31      	ldr	r2, [pc, #196]	; (800bdb4 <HAL_DMA_Init+0x1c8>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d036      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a30      	ldr	r2, [pc, #192]	; (800bdb8 <HAL_DMA_Init+0x1cc>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d031      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a2e      	ldr	r2, [pc, #184]	; (800bdbc <HAL_DMA_Init+0x1d0>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d02c      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a2d      	ldr	r2, [pc, #180]	; (800bdc0 <HAL_DMA_Init+0x1d4>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d027      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a2b      	ldr	r2, [pc, #172]	; (800bdc4 <HAL_DMA_Init+0x1d8>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d022      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a2a      	ldr	r2, [pc, #168]	; (800bdc8 <HAL_DMA_Init+0x1dc>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d01d      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a28      	ldr	r2, [pc, #160]	; (800bdcc <HAL_DMA_Init+0x1e0>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d018      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a27      	ldr	r2, [pc, #156]	; (800bdd0 <HAL_DMA_Init+0x1e4>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d013      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a25      	ldr	r2, [pc, #148]	; (800bdd4 <HAL_DMA_Init+0x1e8>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d00e      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a24      	ldr	r2, [pc, #144]	; (800bdd8 <HAL_DMA_Init+0x1ec>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d009      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a22      	ldr	r2, [pc, #136]	; (800bddc <HAL_DMA_Init+0x1f0>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d004      	beq.n	800bd60 <HAL_DMA_Init+0x174>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a21      	ldr	r2, [pc, #132]	; (800bde0 <HAL_DMA_Init+0x1f4>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d108      	bne.n	800bd72 <HAL_DMA_Init+0x186>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0201 	bic.w	r2, r2, #1
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	e007      	b.n	800bd82 <HAL_DMA_Init+0x196>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f022 0201 	bic.w	r2, r2, #1
 800bd80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bd82:	e02f      	b.n	800bde4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bd84:	f7fe f91a 	bl	8009fbc <HAL_GetTick>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	2b05      	cmp	r3, #5
 800bd90:	d928      	bls.n	800bde4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2220      	movs	r2, #32
 800bd96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2203      	movs	r2, #3
 800bd9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e246      	b.n	800c232 <HAL_DMA_Init+0x646>
 800bda4:	40020010 	.word	0x40020010
 800bda8:	40020028 	.word	0x40020028
 800bdac:	40020040 	.word	0x40020040
 800bdb0:	40020058 	.word	0x40020058
 800bdb4:	40020070 	.word	0x40020070
 800bdb8:	40020088 	.word	0x40020088
 800bdbc:	400200a0 	.word	0x400200a0
 800bdc0:	400200b8 	.word	0x400200b8
 800bdc4:	40020410 	.word	0x40020410
 800bdc8:	40020428 	.word	0x40020428
 800bdcc:	40020440 	.word	0x40020440
 800bdd0:	40020458 	.word	0x40020458
 800bdd4:	40020470 	.word	0x40020470
 800bdd8:	40020488 	.word	0x40020488
 800bddc:	400204a0 	.word	0x400204a0
 800bde0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1c8      	bne.n	800bd84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	4b83      	ldr	r3, [pc, #524]	; (800c00c <HAL_DMA_Init+0x420>)
 800bdfe:	4013      	ands	r3, r2
 800be00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800be0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800be16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800be22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800be2a:	697a      	ldr	r2, [r7, #20]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	2b04      	cmp	r3, #4
 800be36:	d107      	bne.n	800be48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be40:	4313      	orrs	r3, r2
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	4313      	orrs	r3, r2
 800be46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800be48:	4b71      	ldr	r3, [pc, #452]	; (800c010 <HAL_DMA_Init+0x424>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	4b71      	ldr	r3, [pc, #452]	; (800c014 <HAL_DMA_Init+0x428>)
 800be4e:	4013      	ands	r3, r2
 800be50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be54:	d328      	bcc.n	800bea8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	2b28      	cmp	r3, #40	; 0x28
 800be5c:	d903      	bls.n	800be66 <HAL_DMA_Init+0x27a>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	2b2e      	cmp	r3, #46	; 0x2e
 800be64:	d917      	bls.n	800be96 <HAL_DMA_Init+0x2aa>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	2b3e      	cmp	r3, #62	; 0x3e
 800be6c:	d903      	bls.n	800be76 <HAL_DMA_Init+0x28a>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2b42      	cmp	r3, #66	; 0x42
 800be74:	d90f      	bls.n	800be96 <HAL_DMA_Init+0x2aa>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	2b46      	cmp	r3, #70	; 0x46
 800be7c:	d903      	bls.n	800be86 <HAL_DMA_Init+0x29a>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	2b48      	cmp	r3, #72	; 0x48
 800be84:	d907      	bls.n	800be96 <HAL_DMA_Init+0x2aa>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	2b4e      	cmp	r3, #78	; 0x4e
 800be8c:	d905      	bls.n	800be9a <HAL_DMA_Init+0x2ae>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	2b52      	cmp	r3, #82	; 0x52
 800be94:	d801      	bhi.n	800be9a <HAL_DMA_Init+0x2ae>
 800be96:	2301      	movs	r3, #1
 800be98:	e000      	b.n	800be9c <HAL_DMA_Init+0x2b0>
 800be9a:	2300      	movs	r3, #0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d003      	beq.n	800bea8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bea6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f023 0307 	bic.w	r3, r3, #7
 800bebe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d117      	bne.n	800bf02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00e      	beq.n	800bf02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f002 fb3f 	bl	800e568 <DMA_CheckFifoParam>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d008      	beq.n	800bf02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2240      	movs	r2, #64	; 0x40
 800bef4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	e197      	b.n	800c232 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f002 fa7a 	bl	800e404 <DMA_CalcBaseAndBitshift>
 800bf10:	4603      	mov	r3, r0
 800bf12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf18:	f003 031f 	and.w	r3, r3, #31
 800bf1c:	223f      	movs	r2, #63	; 0x3f
 800bf1e:	409a      	lsls	r2, r3
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	609a      	str	r2, [r3, #8]
 800bf24:	e0cd      	b.n	800c0c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a3b      	ldr	r2, [pc, #236]	; (800c018 <HAL_DMA_Init+0x42c>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d022      	beq.n	800bf76 <HAL_DMA_Init+0x38a>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a39      	ldr	r2, [pc, #228]	; (800c01c <HAL_DMA_Init+0x430>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d01d      	beq.n	800bf76 <HAL_DMA_Init+0x38a>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a38      	ldr	r2, [pc, #224]	; (800c020 <HAL_DMA_Init+0x434>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d018      	beq.n	800bf76 <HAL_DMA_Init+0x38a>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a36      	ldr	r2, [pc, #216]	; (800c024 <HAL_DMA_Init+0x438>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d013      	beq.n	800bf76 <HAL_DMA_Init+0x38a>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a35      	ldr	r2, [pc, #212]	; (800c028 <HAL_DMA_Init+0x43c>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00e      	beq.n	800bf76 <HAL_DMA_Init+0x38a>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a33      	ldr	r2, [pc, #204]	; (800c02c <HAL_DMA_Init+0x440>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d009      	beq.n	800bf76 <HAL_DMA_Init+0x38a>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a32      	ldr	r2, [pc, #200]	; (800c030 <HAL_DMA_Init+0x444>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d004      	beq.n	800bf76 <HAL_DMA_Init+0x38a>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a30      	ldr	r2, [pc, #192]	; (800c034 <HAL_DMA_Init+0x448>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d101      	bne.n	800bf7a <HAL_DMA_Init+0x38e>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <HAL_DMA_Init+0x390>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f000 8097 	beq.w	800c0b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a24      	ldr	r2, [pc, #144]	; (800c018 <HAL_DMA_Init+0x42c>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d021      	beq.n	800bfd0 <HAL_DMA_Init+0x3e4>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a22      	ldr	r2, [pc, #136]	; (800c01c <HAL_DMA_Init+0x430>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d01c      	beq.n	800bfd0 <HAL_DMA_Init+0x3e4>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a21      	ldr	r2, [pc, #132]	; (800c020 <HAL_DMA_Init+0x434>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d017      	beq.n	800bfd0 <HAL_DMA_Init+0x3e4>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a1f      	ldr	r2, [pc, #124]	; (800c024 <HAL_DMA_Init+0x438>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d012      	beq.n	800bfd0 <HAL_DMA_Init+0x3e4>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a1e      	ldr	r2, [pc, #120]	; (800c028 <HAL_DMA_Init+0x43c>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d00d      	beq.n	800bfd0 <HAL_DMA_Init+0x3e4>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a1c      	ldr	r2, [pc, #112]	; (800c02c <HAL_DMA_Init+0x440>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d008      	beq.n	800bfd0 <HAL_DMA_Init+0x3e4>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a1b      	ldr	r2, [pc, #108]	; (800c030 <HAL_DMA_Init+0x444>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d003      	beq.n	800bfd0 <HAL_DMA_Init+0x3e4>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a19      	ldr	r2, [pc, #100]	; (800c034 <HAL_DMA_Init+0x448>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	4b12      	ldr	r3, [pc, #72]	; (800c038 <HAL_DMA_Init+0x44c>)
 800bfee:	4013      	ands	r3, r2
 800bff0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	2b40      	cmp	r3, #64	; 0x40
 800bff8:	d020      	beq.n	800c03c <HAL_DMA_Init+0x450>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	2b80      	cmp	r3, #128	; 0x80
 800c000:	d102      	bne.n	800c008 <HAL_DMA_Init+0x41c>
 800c002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c006:	e01a      	b.n	800c03e <HAL_DMA_Init+0x452>
 800c008:	2300      	movs	r3, #0
 800c00a:	e018      	b.n	800c03e <HAL_DMA_Init+0x452>
 800c00c:	fe10803f 	.word	0xfe10803f
 800c010:	5c001000 	.word	0x5c001000
 800c014:	ffff0000 	.word	0xffff0000
 800c018:	58025408 	.word	0x58025408
 800c01c:	5802541c 	.word	0x5802541c
 800c020:	58025430 	.word	0x58025430
 800c024:	58025444 	.word	0x58025444
 800c028:	58025458 	.word	0x58025458
 800c02c:	5802546c 	.word	0x5802546c
 800c030:	58025480 	.word	0x58025480
 800c034:	58025494 	.word	0x58025494
 800c038:	fffe000f 	.word	0xfffe000f
 800c03c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	68d2      	ldr	r2, [r2, #12]
 800c042:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c044:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c04c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c054:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c05c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c064:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c06c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c06e:	697a      	ldr	r2, [r7, #20]
 800c070:	4313      	orrs	r3, r2
 800c072:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	461a      	mov	r2, r3
 800c082:	4b6e      	ldr	r3, [pc, #440]	; (800c23c <HAL_DMA_Init+0x650>)
 800c084:	4413      	add	r3, r2
 800c086:	4a6e      	ldr	r2, [pc, #440]	; (800c240 <HAL_DMA_Init+0x654>)
 800c088:	fba2 2303 	umull	r2, r3, r2, r3
 800c08c:	091b      	lsrs	r3, r3, #4
 800c08e:	009a      	lsls	r2, r3, #2
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f002 f9b5 	bl	800e404 <DMA_CalcBaseAndBitshift>
 800c09a:	4603      	mov	r3, r0
 800c09c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0a2:	f003 031f 	and.w	r3, r3, #31
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	409a      	lsls	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	605a      	str	r2, [r3, #4]
 800c0ae:	e008      	b.n	800c0c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2240      	movs	r2, #64	; 0x40
 800c0b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2203      	movs	r2, #3
 800c0ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e0b7      	b.n	800c232 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a5f      	ldr	r2, [pc, #380]	; (800c244 <HAL_DMA_Init+0x658>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d072      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a5d      	ldr	r2, [pc, #372]	; (800c248 <HAL_DMA_Init+0x65c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d06d      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a5c      	ldr	r2, [pc, #368]	; (800c24c <HAL_DMA_Init+0x660>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d068      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a5a      	ldr	r2, [pc, #360]	; (800c250 <HAL_DMA_Init+0x664>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d063      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a59      	ldr	r2, [pc, #356]	; (800c254 <HAL_DMA_Init+0x668>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d05e      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a57      	ldr	r2, [pc, #348]	; (800c258 <HAL_DMA_Init+0x66c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d059      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a56      	ldr	r2, [pc, #344]	; (800c25c <HAL_DMA_Init+0x670>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d054      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a54      	ldr	r2, [pc, #336]	; (800c260 <HAL_DMA_Init+0x674>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d04f      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a53      	ldr	r2, [pc, #332]	; (800c264 <HAL_DMA_Init+0x678>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d04a      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a51      	ldr	r2, [pc, #324]	; (800c268 <HAL_DMA_Init+0x67c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d045      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a50      	ldr	r2, [pc, #320]	; (800c26c <HAL_DMA_Init+0x680>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d040      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a4e      	ldr	r2, [pc, #312]	; (800c270 <HAL_DMA_Init+0x684>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d03b      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a4d      	ldr	r2, [pc, #308]	; (800c274 <HAL_DMA_Init+0x688>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d036      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a4b      	ldr	r2, [pc, #300]	; (800c278 <HAL_DMA_Init+0x68c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d031      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a4a      	ldr	r2, [pc, #296]	; (800c27c <HAL_DMA_Init+0x690>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d02c      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a48      	ldr	r2, [pc, #288]	; (800c280 <HAL_DMA_Init+0x694>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d027      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a47      	ldr	r2, [pc, #284]	; (800c284 <HAL_DMA_Init+0x698>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d022      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a45      	ldr	r2, [pc, #276]	; (800c288 <HAL_DMA_Init+0x69c>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d01d      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a44      	ldr	r2, [pc, #272]	; (800c28c <HAL_DMA_Init+0x6a0>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d018      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a42      	ldr	r2, [pc, #264]	; (800c290 <HAL_DMA_Init+0x6a4>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d013      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a41      	ldr	r2, [pc, #260]	; (800c294 <HAL_DMA_Init+0x6a8>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d00e      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a3f      	ldr	r2, [pc, #252]	; (800c298 <HAL_DMA_Init+0x6ac>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d009      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a3e      	ldr	r2, [pc, #248]	; (800c29c <HAL_DMA_Init+0x6b0>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d004      	beq.n	800c1b2 <HAL_DMA_Init+0x5c6>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a3c      	ldr	r2, [pc, #240]	; (800c2a0 <HAL_DMA_Init+0x6b4>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d101      	bne.n	800c1b6 <HAL_DMA_Init+0x5ca>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <HAL_DMA_Init+0x5cc>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d032      	beq.n	800c222 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f002 fa4f 	bl	800e660 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	2b80      	cmp	r3, #128	; 0x80
 800c1c8:	d102      	bne.n	800c1d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685a      	ldr	r2, [r3, #4]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1d8:	b2d2      	uxtb	r2, r2
 800c1da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c1e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d010      	beq.n	800c210 <HAL_DMA_Init+0x624>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	2b08      	cmp	r3, #8
 800c1f4:	d80c      	bhi.n	800c210 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f002 facc 	bl	800e794 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c200:	2200      	movs	r2, #0
 800c202:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c20c:	605a      	str	r2, [r3, #4]
 800c20e:	e008      	b.n	800c222 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	a7fdabf8 	.word	0xa7fdabf8
 800c240:	cccccccd 	.word	0xcccccccd
 800c244:	40020010 	.word	0x40020010
 800c248:	40020028 	.word	0x40020028
 800c24c:	40020040 	.word	0x40020040
 800c250:	40020058 	.word	0x40020058
 800c254:	40020070 	.word	0x40020070
 800c258:	40020088 	.word	0x40020088
 800c25c:	400200a0 	.word	0x400200a0
 800c260:	400200b8 	.word	0x400200b8
 800c264:	40020410 	.word	0x40020410
 800c268:	40020428 	.word	0x40020428
 800c26c:	40020440 	.word	0x40020440
 800c270:	40020458 	.word	0x40020458
 800c274:	40020470 	.word	0x40020470
 800c278:	40020488 	.word	0x40020488
 800c27c:	400204a0 	.word	0x400204a0
 800c280:	400204b8 	.word	0x400204b8
 800c284:	58025408 	.word	0x58025408
 800c288:	5802541c 	.word	0x5802541c
 800c28c:	58025430 	.word	0x58025430
 800c290:	58025444 	.word	0x58025444
 800c294:	58025458 	.word	0x58025458
 800c298:	5802546c 	.word	0x5802546c
 800c29c:	58025480 	.word	0x58025480
 800c2a0:	58025494 	.word	0x58025494

0800c2a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e226      	b.n	800c70e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d101      	bne.n	800c2ce <HAL_DMA_Start_IT+0x2a>
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	e21f      	b.n	800c70e <HAL_DMA_Start_IT+0x46a>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	f040 820a 	bne.w	800c6f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a68      	ldr	r2, [pc, #416]	; (800c498 <HAL_DMA_Start_IT+0x1f4>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d04a      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a66      	ldr	r2, [pc, #408]	; (800c49c <HAL_DMA_Start_IT+0x1f8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d045      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a65      	ldr	r2, [pc, #404]	; (800c4a0 <HAL_DMA_Start_IT+0x1fc>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d040      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a63      	ldr	r2, [pc, #396]	; (800c4a4 <HAL_DMA_Start_IT+0x200>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d03b      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a62      	ldr	r2, [pc, #392]	; (800c4a8 <HAL_DMA_Start_IT+0x204>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d036      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a60      	ldr	r2, [pc, #384]	; (800c4ac <HAL_DMA_Start_IT+0x208>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d031      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a5f      	ldr	r2, [pc, #380]	; (800c4b0 <HAL_DMA_Start_IT+0x20c>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d02c      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a5d      	ldr	r2, [pc, #372]	; (800c4b4 <HAL_DMA_Start_IT+0x210>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d027      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a5c      	ldr	r2, [pc, #368]	; (800c4b8 <HAL_DMA_Start_IT+0x214>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d022      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a5a      	ldr	r2, [pc, #360]	; (800c4bc <HAL_DMA_Start_IT+0x218>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d01d      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a59      	ldr	r2, [pc, #356]	; (800c4c0 <HAL_DMA_Start_IT+0x21c>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d018      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a57      	ldr	r2, [pc, #348]	; (800c4c4 <HAL_DMA_Start_IT+0x220>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d013      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a56      	ldr	r2, [pc, #344]	; (800c4c8 <HAL_DMA_Start_IT+0x224>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d00e      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a54      	ldr	r2, [pc, #336]	; (800c4cc <HAL_DMA_Start_IT+0x228>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d009      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a53      	ldr	r2, [pc, #332]	; (800c4d0 <HAL_DMA_Start_IT+0x22c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d004      	beq.n	800c392 <HAL_DMA_Start_IT+0xee>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a51      	ldr	r2, [pc, #324]	; (800c4d4 <HAL_DMA_Start_IT+0x230>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d108      	bne.n	800c3a4 <HAL_DMA_Start_IT+0x100>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	e007      	b.n	800c3b4 <HAL_DMA_Start_IT+0x110>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 0201 	bic.w	r2, r2, #1
 800c3b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	68b9      	ldr	r1, [r7, #8]
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f001 fe76 	bl	800e0ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a34      	ldr	r2, [pc, #208]	; (800c498 <HAL_DMA_Start_IT+0x1f4>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d04a      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a33      	ldr	r2, [pc, #204]	; (800c49c <HAL_DMA_Start_IT+0x1f8>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d045      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a31      	ldr	r2, [pc, #196]	; (800c4a0 <HAL_DMA_Start_IT+0x1fc>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d040      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a30      	ldr	r2, [pc, #192]	; (800c4a4 <HAL_DMA_Start_IT+0x200>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d03b      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a2e      	ldr	r2, [pc, #184]	; (800c4a8 <HAL_DMA_Start_IT+0x204>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d036      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a2d      	ldr	r2, [pc, #180]	; (800c4ac <HAL_DMA_Start_IT+0x208>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d031      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a2b      	ldr	r2, [pc, #172]	; (800c4b0 <HAL_DMA_Start_IT+0x20c>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d02c      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a2a      	ldr	r2, [pc, #168]	; (800c4b4 <HAL_DMA_Start_IT+0x210>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d027      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a28      	ldr	r2, [pc, #160]	; (800c4b8 <HAL_DMA_Start_IT+0x214>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d022      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a27      	ldr	r2, [pc, #156]	; (800c4bc <HAL_DMA_Start_IT+0x218>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d01d      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a25      	ldr	r2, [pc, #148]	; (800c4c0 <HAL_DMA_Start_IT+0x21c>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d018      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a24      	ldr	r2, [pc, #144]	; (800c4c4 <HAL_DMA_Start_IT+0x220>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d013      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a22      	ldr	r2, [pc, #136]	; (800c4c8 <HAL_DMA_Start_IT+0x224>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d00e      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a21      	ldr	r2, [pc, #132]	; (800c4cc <HAL_DMA_Start_IT+0x228>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d009      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a1f      	ldr	r2, [pc, #124]	; (800c4d0 <HAL_DMA_Start_IT+0x22c>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d004      	beq.n	800c460 <HAL_DMA_Start_IT+0x1bc>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a1e      	ldr	r2, [pc, #120]	; (800c4d4 <HAL_DMA_Start_IT+0x230>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d101      	bne.n	800c464 <HAL_DMA_Start_IT+0x1c0>
 800c460:	2301      	movs	r3, #1
 800c462:	e000      	b.n	800c466 <HAL_DMA_Start_IT+0x1c2>
 800c464:	2300      	movs	r3, #0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d036      	beq.n	800c4d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f023 021e 	bic.w	r2, r3, #30
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0216 	orr.w	r2, r2, #22
 800c47c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c482:	2b00      	cmp	r3, #0
 800c484:	d03e      	beq.n	800c504 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f042 0208 	orr.w	r2, r2, #8
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	e035      	b.n	800c504 <HAL_DMA_Start_IT+0x260>
 800c498:	40020010 	.word	0x40020010
 800c49c:	40020028 	.word	0x40020028
 800c4a0:	40020040 	.word	0x40020040
 800c4a4:	40020058 	.word	0x40020058
 800c4a8:	40020070 	.word	0x40020070
 800c4ac:	40020088 	.word	0x40020088
 800c4b0:	400200a0 	.word	0x400200a0
 800c4b4:	400200b8 	.word	0x400200b8
 800c4b8:	40020410 	.word	0x40020410
 800c4bc:	40020428 	.word	0x40020428
 800c4c0:	40020440 	.word	0x40020440
 800c4c4:	40020458 	.word	0x40020458
 800c4c8:	40020470 	.word	0x40020470
 800c4cc:	40020488 	.word	0x40020488
 800c4d0:	400204a0 	.word	0x400204a0
 800c4d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f023 020e 	bic.w	r2, r3, #14
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f042 020a 	orr.w	r2, r2, #10
 800c4ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d007      	beq.n	800c504 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f042 0204 	orr.w	r2, r2, #4
 800c502:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a83      	ldr	r2, [pc, #524]	; (800c718 <HAL_DMA_Start_IT+0x474>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d072      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a82      	ldr	r2, [pc, #520]	; (800c71c <HAL_DMA_Start_IT+0x478>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d06d      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a80      	ldr	r2, [pc, #512]	; (800c720 <HAL_DMA_Start_IT+0x47c>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d068      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a7f      	ldr	r2, [pc, #508]	; (800c724 <HAL_DMA_Start_IT+0x480>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d063      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a7d      	ldr	r2, [pc, #500]	; (800c728 <HAL_DMA_Start_IT+0x484>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d05e      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a7c      	ldr	r2, [pc, #496]	; (800c72c <HAL_DMA_Start_IT+0x488>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d059      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a7a      	ldr	r2, [pc, #488]	; (800c730 <HAL_DMA_Start_IT+0x48c>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d054      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a79      	ldr	r2, [pc, #484]	; (800c734 <HAL_DMA_Start_IT+0x490>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d04f      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a77      	ldr	r2, [pc, #476]	; (800c738 <HAL_DMA_Start_IT+0x494>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d04a      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a76      	ldr	r2, [pc, #472]	; (800c73c <HAL_DMA_Start_IT+0x498>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d045      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a74      	ldr	r2, [pc, #464]	; (800c740 <HAL_DMA_Start_IT+0x49c>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d040      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a73      	ldr	r2, [pc, #460]	; (800c744 <HAL_DMA_Start_IT+0x4a0>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d03b      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a71      	ldr	r2, [pc, #452]	; (800c748 <HAL_DMA_Start_IT+0x4a4>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d036      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a70      	ldr	r2, [pc, #448]	; (800c74c <HAL_DMA_Start_IT+0x4a8>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d031      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a6e      	ldr	r2, [pc, #440]	; (800c750 <HAL_DMA_Start_IT+0x4ac>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d02c      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a6d      	ldr	r2, [pc, #436]	; (800c754 <HAL_DMA_Start_IT+0x4b0>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d027      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a6b      	ldr	r2, [pc, #428]	; (800c758 <HAL_DMA_Start_IT+0x4b4>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d022      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a6a      	ldr	r2, [pc, #424]	; (800c75c <HAL_DMA_Start_IT+0x4b8>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d01d      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a68      	ldr	r2, [pc, #416]	; (800c760 <HAL_DMA_Start_IT+0x4bc>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d018      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a67      	ldr	r2, [pc, #412]	; (800c764 <HAL_DMA_Start_IT+0x4c0>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d013      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a65      	ldr	r2, [pc, #404]	; (800c768 <HAL_DMA_Start_IT+0x4c4>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00e      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a64      	ldr	r2, [pc, #400]	; (800c76c <HAL_DMA_Start_IT+0x4c8>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d009      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a62      	ldr	r2, [pc, #392]	; (800c770 <HAL_DMA_Start_IT+0x4cc>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d004      	beq.n	800c5f4 <HAL_DMA_Start_IT+0x350>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a61      	ldr	r2, [pc, #388]	; (800c774 <HAL_DMA_Start_IT+0x4d0>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d101      	bne.n	800c5f8 <HAL_DMA_Start_IT+0x354>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e000      	b.n	800c5fa <HAL_DMA_Start_IT+0x356>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d01a      	beq.n	800c634 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d007      	beq.n	800c61c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c61a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c620:	2b00      	cmp	r3, #0
 800c622:	d007      	beq.n	800c634 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c62e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c632:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a37      	ldr	r2, [pc, #220]	; (800c718 <HAL_DMA_Start_IT+0x474>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d04a      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a36      	ldr	r2, [pc, #216]	; (800c71c <HAL_DMA_Start_IT+0x478>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d045      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a34      	ldr	r2, [pc, #208]	; (800c720 <HAL_DMA_Start_IT+0x47c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d040      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a33      	ldr	r2, [pc, #204]	; (800c724 <HAL_DMA_Start_IT+0x480>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d03b      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a31      	ldr	r2, [pc, #196]	; (800c728 <HAL_DMA_Start_IT+0x484>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d036      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a30      	ldr	r2, [pc, #192]	; (800c72c <HAL_DMA_Start_IT+0x488>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d031      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a2e      	ldr	r2, [pc, #184]	; (800c730 <HAL_DMA_Start_IT+0x48c>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d02c      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a2d      	ldr	r2, [pc, #180]	; (800c734 <HAL_DMA_Start_IT+0x490>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d027      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a2b      	ldr	r2, [pc, #172]	; (800c738 <HAL_DMA_Start_IT+0x494>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d022      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a2a      	ldr	r2, [pc, #168]	; (800c73c <HAL_DMA_Start_IT+0x498>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d01d      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a28      	ldr	r2, [pc, #160]	; (800c740 <HAL_DMA_Start_IT+0x49c>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d018      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a27      	ldr	r2, [pc, #156]	; (800c744 <HAL_DMA_Start_IT+0x4a0>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d013      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a25      	ldr	r2, [pc, #148]	; (800c748 <HAL_DMA_Start_IT+0x4a4>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00e      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a24      	ldr	r2, [pc, #144]	; (800c74c <HAL_DMA_Start_IT+0x4a8>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d009      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a22      	ldr	r2, [pc, #136]	; (800c750 <HAL_DMA_Start_IT+0x4ac>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d004      	beq.n	800c6d4 <HAL_DMA_Start_IT+0x430>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a21      	ldr	r2, [pc, #132]	; (800c754 <HAL_DMA_Start_IT+0x4b0>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d108      	bne.n	800c6e6 <HAL_DMA_Start_IT+0x442>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f042 0201 	orr.w	r2, r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	e012      	b.n	800c70c <HAL_DMA_Start_IT+0x468>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f042 0201 	orr.w	r2, r2, #1
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	e009      	b.n	800c70c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	40020010 	.word	0x40020010
 800c71c:	40020028 	.word	0x40020028
 800c720:	40020040 	.word	0x40020040
 800c724:	40020058 	.word	0x40020058
 800c728:	40020070 	.word	0x40020070
 800c72c:	40020088 	.word	0x40020088
 800c730:	400200a0 	.word	0x400200a0
 800c734:	400200b8 	.word	0x400200b8
 800c738:	40020410 	.word	0x40020410
 800c73c:	40020428 	.word	0x40020428
 800c740:	40020440 	.word	0x40020440
 800c744:	40020458 	.word	0x40020458
 800c748:	40020470 	.word	0x40020470
 800c74c:	40020488 	.word	0x40020488
 800c750:	400204a0 	.word	0x400204a0
 800c754:	400204b8 	.word	0x400204b8
 800c758:	58025408 	.word	0x58025408
 800c75c:	5802541c 	.word	0x5802541c
 800c760:	58025430 	.word	0x58025430
 800c764:	58025444 	.word	0x58025444
 800c768:	58025458 	.word	0x58025458
 800c76c:	5802546c 	.word	0x5802546c
 800c770:	58025480 	.word	0x58025480
 800c774:	58025494 	.word	0x58025494

0800c778 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c780:	f7fd fc1c 	bl	8009fbc <HAL_GetTick>
 800c784:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e2dc      	b.n	800cd4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d008      	beq.n	800c7ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2280      	movs	r2, #128	; 0x80
 800c7a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e2cd      	b.n	800cd4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a76      	ldr	r2, [pc, #472]	; (800c98c <HAL_DMA_Abort+0x214>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d04a      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a74      	ldr	r2, [pc, #464]	; (800c990 <HAL_DMA_Abort+0x218>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d045      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a73      	ldr	r2, [pc, #460]	; (800c994 <HAL_DMA_Abort+0x21c>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d040      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a71      	ldr	r2, [pc, #452]	; (800c998 <HAL_DMA_Abort+0x220>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d03b      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a70      	ldr	r2, [pc, #448]	; (800c99c <HAL_DMA_Abort+0x224>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d036      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a6e      	ldr	r2, [pc, #440]	; (800c9a0 <HAL_DMA_Abort+0x228>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d031      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a6d      	ldr	r2, [pc, #436]	; (800c9a4 <HAL_DMA_Abort+0x22c>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d02c      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a6b      	ldr	r2, [pc, #428]	; (800c9a8 <HAL_DMA_Abort+0x230>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d027      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a6a      	ldr	r2, [pc, #424]	; (800c9ac <HAL_DMA_Abort+0x234>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d022      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a68      	ldr	r2, [pc, #416]	; (800c9b0 <HAL_DMA_Abort+0x238>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d01d      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a67      	ldr	r2, [pc, #412]	; (800c9b4 <HAL_DMA_Abort+0x23c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d018      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a65      	ldr	r2, [pc, #404]	; (800c9b8 <HAL_DMA_Abort+0x240>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d013      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a64      	ldr	r2, [pc, #400]	; (800c9bc <HAL_DMA_Abort+0x244>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d00e      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a62      	ldr	r2, [pc, #392]	; (800c9c0 <HAL_DMA_Abort+0x248>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d009      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a61      	ldr	r2, [pc, #388]	; (800c9c4 <HAL_DMA_Abort+0x24c>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d004      	beq.n	800c84e <HAL_DMA_Abort+0xd6>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a5f      	ldr	r2, [pc, #380]	; (800c9c8 <HAL_DMA_Abort+0x250>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d101      	bne.n	800c852 <HAL_DMA_Abort+0xda>
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <HAL_DMA_Abort+0xdc>
 800c852:	2300      	movs	r3, #0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d013      	beq.n	800c880 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 021e 	bic.w	r2, r2, #30
 800c866:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	695a      	ldr	r2, [r3, #20]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c876:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	617b      	str	r3, [r7, #20]
 800c87e:	e00a      	b.n	800c896 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f022 020e 	bic.w	r2, r2, #14
 800c88e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a3c      	ldr	r2, [pc, #240]	; (800c98c <HAL_DMA_Abort+0x214>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d072      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a3a      	ldr	r2, [pc, #232]	; (800c990 <HAL_DMA_Abort+0x218>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d06d      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a39      	ldr	r2, [pc, #228]	; (800c994 <HAL_DMA_Abort+0x21c>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d068      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a37      	ldr	r2, [pc, #220]	; (800c998 <HAL_DMA_Abort+0x220>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d063      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a36      	ldr	r2, [pc, #216]	; (800c99c <HAL_DMA_Abort+0x224>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d05e      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a34      	ldr	r2, [pc, #208]	; (800c9a0 <HAL_DMA_Abort+0x228>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d059      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a33      	ldr	r2, [pc, #204]	; (800c9a4 <HAL_DMA_Abort+0x22c>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d054      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a31      	ldr	r2, [pc, #196]	; (800c9a8 <HAL_DMA_Abort+0x230>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d04f      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a30      	ldr	r2, [pc, #192]	; (800c9ac <HAL_DMA_Abort+0x234>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d04a      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a2e      	ldr	r2, [pc, #184]	; (800c9b0 <HAL_DMA_Abort+0x238>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d045      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a2d      	ldr	r2, [pc, #180]	; (800c9b4 <HAL_DMA_Abort+0x23c>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d040      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a2b      	ldr	r2, [pc, #172]	; (800c9b8 <HAL_DMA_Abort+0x240>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d03b      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a2a      	ldr	r2, [pc, #168]	; (800c9bc <HAL_DMA_Abort+0x244>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d036      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a28      	ldr	r2, [pc, #160]	; (800c9c0 <HAL_DMA_Abort+0x248>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d031      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a27      	ldr	r2, [pc, #156]	; (800c9c4 <HAL_DMA_Abort+0x24c>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d02c      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a25      	ldr	r2, [pc, #148]	; (800c9c8 <HAL_DMA_Abort+0x250>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d027      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a24      	ldr	r2, [pc, #144]	; (800c9cc <HAL_DMA_Abort+0x254>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d022      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a22      	ldr	r2, [pc, #136]	; (800c9d0 <HAL_DMA_Abort+0x258>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d01d      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a21      	ldr	r2, [pc, #132]	; (800c9d4 <HAL_DMA_Abort+0x25c>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d018      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a1f      	ldr	r2, [pc, #124]	; (800c9d8 <HAL_DMA_Abort+0x260>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d013      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a1e      	ldr	r2, [pc, #120]	; (800c9dc <HAL_DMA_Abort+0x264>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d00e      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a1c      	ldr	r2, [pc, #112]	; (800c9e0 <HAL_DMA_Abort+0x268>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d009      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a1b      	ldr	r2, [pc, #108]	; (800c9e4 <HAL_DMA_Abort+0x26c>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d004      	beq.n	800c986 <HAL_DMA_Abort+0x20e>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a19      	ldr	r2, [pc, #100]	; (800c9e8 <HAL_DMA_Abort+0x270>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d132      	bne.n	800c9ec <HAL_DMA_Abort+0x274>
 800c986:	2301      	movs	r3, #1
 800c988:	e031      	b.n	800c9ee <HAL_DMA_Abort+0x276>
 800c98a:	bf00      	nop
 800c98c:	40020010 	.word	0x40020010
 800c990:	40020028 	.word	0x40020028
 800c994:	40020040 	.word	0x40020040
 800c998:	40020058 	.word	0x40020058
 800c99c:	40020070 	.word	0x40020070
 800c9a0:	40020088 	.word	0x40020088
 800c9a4:	400200a0 	.word	0x400200a0
 800c9a8:	400200b8 	.word	0x400200b8
 800c9ac:	40020410 	.word	0x40020410
 800c9b0:	40020428 	.word	0x40020428
 800c9b4:	40020440 	.word	0x40020440
 800c9b8:	40020458 	.word	0x40020458
 800c9bc:	40020470 	.word	0x40020470
 800c9c0:	40020488 	.word	0x40020488
 800c9c4:	400204a0 	.word	0x400204a0
 800c9c8:	400204b8 	.word	0x400204b8
 800c9cc:	58025408 	.word	0x58025408
 800c9d0:	5802541c 	.word	0x5802541c
 800c9d4:	58025430 	.word	0x58025430
 800c9d8:	58025444 	.word	0x58025444
 800c9dc:	58025458 	.word	0x58025458
 800c9e0:	5802546c 	.word	0x5802546c
 800c9e4:	58025480 	.word	0x58025480
 800c9e8:	58025494 	.word	0x58025494
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d007      	beq.n	800ca02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a6d      	ldr	r2, [pc, #436]	; (800cbbc <HAL_DMA_Abort+0x444>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d04a      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a6b      	ldr	r2, [pc, #428]	; (800cbc0 <HAL_DMA_Abort+0x448>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d045      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a6a      	ldr	r2, [pc, #424]	; (800cbc4 <HAL_DMA_Abort+0x44c>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d040      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a68      	ldr	r2, [pc, #416]	; (800cbc8 <HAL_DMA_Abort+0x450>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d03b      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a67      	ldr	r2, [pc, #412]	; (800cbcc <HAL_DMA_Abort+0x454>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d036      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a65      	ldr	r2, [pc, #404]	; (800cbd0 <HAL_DMA_Abort+0x458>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d031      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a64      	ldr	r2, [pc, #400]	; (800cbd4 <HAL_DMA_Abort+0x45c>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d02c      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a62      	ldr	r2, [pc, #392]	; (800cbd8 <HAL_DMA_Abort+0x460>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d027      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a61      	ldr	r2, [pc, #388]	; (800cbdc <HAL_DMA_Abort+0x464>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d022      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a5f      	ldr	r2, [pc, #380]	; (800cbe0 <HAL_DMA_Abort+0x468>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d01d      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a5e      	ldr	r2, [pc, #376]	; (800cbe4 <HAL_DMA_Abort+0x46c>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d018      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a5c      	ldr	r2, [pc, #368]	; (800cbe8 <HAL_DMA_Abort+0x470>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d013      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a5b      	ldr	r2, [pc, #364]	; (800cbec <HAL_DMA_Abort+0x474>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d00e      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a59      	ldr	r2, [pc, #356]	; (800cbf0 <HAL_DMA_Abort+0x478>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d009      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a58      	ldr	r2, [pc, #352]	; (800cbf4 <HAL_DMA_Abort+0x47c>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d004      	beq.n	800caa2 <HAL_DMA_Abort+0x32a>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a56      	ldr	r2, [pc, #344]	; (800cbf8 <HAL_DMA_Abort+0x480>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d108      	bne.n	800cab4 <HAL_DMA_Abort+0x33c>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f022 0201 	bic.w	r2, r2, #1
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	e007      	b.n	800cac4 <HAL_DMA_Abort+0x34c>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f022 0201 	bic.w	r2, r2, #1
 800cac2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800cac4:	e013      	b.n	800caee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cac6:	f7fd fa79 	bl	8009fbc <HAL_GetTick>
 800caca:	4602      	mov	r2, r0
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	2b05      	cmp	r3, #5
 800cad2:	d90c      	bls.n	800caee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2220      	movs	r2, #32
 800cad8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2203      	movs	r2, #3
 800cade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e12d      	b.n	800cd4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 0301 	and.w	r3, r3, #1
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e5      	bne.n	800cac6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a2f      	ldr	r2, [pc, #188]	; (800cbbc <HAL_DMA_Abort+0x444>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d04a      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a2d      	ldr	r2, [pc, #180]	; (800cbc0 <HAL_DMA_Abort+0x448>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d045      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a2c      	ldr	r2, [pc, #176]	; (800cbc4 <HAL_DMA_Abort+0x44c>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d040      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a2a      	ldr	r2, [pc, #168]	; (800cbc8 <HAL_DMA_Abort+0x450>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d03b      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a29      	ldr	r2, [pc, #164]	; (800cbcc <HAL_DMA_Abort+0x454>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d036      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a27      	ldr	r2, [pc, #156]	; (800cbd0 <HAL_DMA_Abort+0x458>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d031      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a26      	ldr	r2, [pc, #152]	; (800cbd4 <HAL_DMA_Abort+0x45c>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d02c      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a24      	ldr	r2, [pc, #144]	; (800cbd8 <HAL_DMA_Abort+0x460>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d027      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a23      	ldr	r2, [pc, #140]	; (800cbdc <HAL_DMA_Abort+0x464>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d022      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a21      	ldr	r2, [pc, #132]	; (800cbe0 <HAL_DMA_Abort+0x468>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d01d      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a20      	ldr	r2, [pc, #128]	; (800cbe4 <HAL_DMA_Abort+0x46c>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d018      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a1e      	ldr	r2, [pc, #120]	; (800cbe8 <HAL_DMA_Abort+0x470>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d013      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a1d      	ldr	r2, [pc, #116]	; (800cbec <HAL_DMA_Abort+0x474>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d00e      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a1b      	ldr	r2, [pc, #108]	; (800cbf0 <HAL_DMA_Abort+0x478>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d009      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a1a      	ldr	r2, [pc, #104]	; (800cbf4 <HAL_DMA_Abort+0x47c>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d004      	beq.n	800cb9a <HAL_DMA_Abort+0x422>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a18      	ldr	r2, [pc, #96]	; (800cbf8 <HAL_DMA_Abort+0x480>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d101      	bne.n	800cb9e <HAL_DMA_Abort+0x426>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e000      	b.n	800cba0 <HAL_DMA_Abort+0x428>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d02b      	beq.n	800cbfc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbae:	f003 031f 	and.w	r3, r3, #31
 800cbb2:	223f      	movs	r2, #63	; 0x3f
 800cbb4:	409a      	lsls	r2, r3
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	609a      	str	r2, [r3, #8]
 800cbba:	e02a      	b.n	800cc12 <HAL_DMA_Abort+0x49a>
 800cbbc:	40020010 	.word	0x40020010
 800cbc0:	40020028 	.word	0x40020028
 800cbc4:	40020040 	.word	0x40020040
 800cbc8:	40020058 	.word	0x40020058
 800cbcc:	40020070 	.word	0x40020070
 800cbd0:	40020088 	.word	0x40020088
 800cbd4:	400200a0 	.word	0x400200a0
 800cbd8:	400200b8 	.word	0x400200b8
 800cbdc:	40020410 	.word	0x40020410
 800cbe0:	40020428 	.word	0x40020428
 800cbe4:	40020440 	.word	0x40020440
 800cbe8:	40020458 	.word	0x40020458
 800cbec:	40020470 	.word	0x40020470
 800cbf0:	40020488 	.word	0x40020488
 800cbf4:	400204a0 	.word	0x400204a0
 800cbf8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc06:	f003 031f 	and.w	r3, r3, #31
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	409a      	lsls	r2, r3
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a4f      	ldr	r2, [pc, #316]	; (800cd54 <HAL_DMA_Abort+0x5dc>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d072      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a4d      	ldr	r2, [pc, #308]	; (800cd58 <HAL_DMA_Abort+0x5e0>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d06d      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a4c      	ldr	r2, [pc, #304]	; (800cd5c <HAL_DMA_Abort+0x5e4>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d068      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a4a      	ldr	r2, [pc, #296]	; (800cd60 <HAL_DMA_Abort+0x5e8>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d063      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a49      	ldr	r2, [pc, #292]	; (800cd64 <HAL_DMA_Abort+0x5ec>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d05e      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a47      	ldr	r2, [pc, #284]	; (800cd68 <HAL_DMA_Abort+0x5f0>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d059      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a46      	ldr	r2, [pc, #280]	; (800cd6c <HAL_DMA_Abort+0x5f4>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d054      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a44      	ldr	r2, [pc, #272]	; (800cd70 <HAL_DMA_Abort+0x5f8>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d04f      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a43      	ldr	r2, [pc, #268]	; (800cd74 <HAL_DMA_Abort+0x5fc>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d04a      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a41      	ldr	r2, [pc, #260]	; (800cd78 <HAL_DMA_Abort+0x600>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d045      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a40      	ldr	r2, [pc, #256]	; (800cd7c <HAL_DMA_Abort+0x604>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d040      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a3e      	ldr	r2, [pc, #248]	; (800cd80 <HAL_DMA_Abort+0x608>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d03b      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a3d      	ldr	r2, [pc, #244]	; (800cd84 <HAL_DMA_Abort+0x60c>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d036      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a3b      	ldr	r2, [pc, #236]	; (800cd88 <HAL_DMA_Abort+0x610>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d031      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a3a      	ldr	r2, [pc, #232]	; (800cd8c <HAL_DMA_Abort+0x614>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d02c      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a38      	ldr	r2, [pc, #224]	; (800cd90 <HAL_DMA_Abort+0x618>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d027      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a37      	ldr	r2, [pc, #220]	; (800cd94 <HAL_DMA_Abort+0x61c>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d022      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a35      	ldr	r2, [pc, #212]	; (800cd98 <HAL_DMA_Abort+0x620>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d01d      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a34      	ldr	r2, [pc, #208]	; (800cd9c <HAL_DMA_Abort+0x624>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d018      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a32      	ldr	r2, [pc, #200]	; (800cda0 <HAL_DMA_Abort+0x628>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d013      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a31      	ldr	r2, [pc, #196]	; (800cda4 <HAL_DMA_Abort+0x62c>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d00e      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a2f      	ldr	r2, [pc, #188]	; (800cda8 <HAL_DMA_Abort+0x630>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d009      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a2e      	ldr	r2, [pc, #184]	; (800cdac <HAL_DMA_Abort+0x634>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d004      	beq.n	800cd02 <HAL_DMA_Abort+0x58a>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a2c      	ldr	r2, [pc, #176]	; (800cdb0 <HAL_DMA_Abort+0x638>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d101      	bne.n	800cd06 <HAL_DMA_Abort+0x58e>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <HAL_DMA_Abort+0x590>
 800cd06:	2300      	movs	r3, #0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d015      	beq.n	800cd38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cd14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00c      	beq.n	800cd38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cd36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	40020010 	.word	0x40020010
 800cd58:	40020028 	.word	0x40020028
 800cd5c:	40020040 	.word	0x40020040
 800cd60:	40020058 	.word	0x40020058
 800cd64:	40020070 	.word	0x40020070
 800cd68:	40020088 	.word	0x40020088
 800cd6c:	400200a0 	.word	0x400200a0
 800cd70:	400200b8 	.word	0x400200b8
 800cd74:	40020410 	.word	0x40020410
 800cd78:	40020428 	.word	0x40020428
 800cd7c:	40020440 	.word	0x40020440
 800cd80:	40020458 	.word	0x40020458
 800cd84:	40020470 	.word	0x40020470
 800cd88:	40020488 	.word	0x40020488
 800cd8c:	400204a0 	.word	0x400204a0
 800cd90:	400204b8 	.word	0x400204b8
 800cd94:	58025408 	.word	0x58025408
 800cd98:	5802541c 	.word	0x5802541c
 800cd9c:	58025430 	.word	0x58025430
 800cda0:	58025444 	.word	0x58025444
 800cda4:	58025458 	.word	0x58025458
 800cda8:	5802546c 	.word	0x5802546c
 800cdac:	58025480 	.word	0x58025480
 800cdb0:	58025494 	.word	0x58025494

0800cdb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e237      	b.n	800d236 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d004      	beq.n	800cddc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2280      	movs	r2, #128	; 0x80
 800cdd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e22c      	b.n	800d236 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a5c      	ldr	r2, [pc, #368]	; (800cf54 <HAL_DMA_Abort_IT+0x1a0>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d04a      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a5b      	ldr	r2, [pc, #364]	; (800cf58 <HAL_DMA_Abort_IT+0x1a4>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d045      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a59      	ldr	r2, [pc, #356]	; (800cf5c <HAL_DMA_Abort_IT+0x1a8>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d040      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a58      	ldr	r2, [pc, #352]	; (800cf60 <HAL_DMA_Abort_IT+0x1ac>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d03b      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a56      	ldr	r2, [pc, #344]	; (800cf64 <HAL_DMA_Abort_IT+0x1b0>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d036      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a55      	ldr	r2, [pc, #340]	; (800cf68 <HAL_DMA_Abort_IT+0x1b4>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d031      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a53      	ldr	r2, [pc, #332]	; (800cf6c <HAL_DMA_Abort_IT+0x1b8>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d02c      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a52      	ldr	r2, [pc, #328]	; (800cf70 <HAL_DMA_Abort_IT+0x1bc>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d027      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a50      	ldr	r2, [pc, #320]	; (800cf74 <HAL_DMA_Abort_IT+0x1c0>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d022      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a4f      	ldr	r2, [pc, #316]	; (800cf78 <HAL_DMA_Abort_IT+0x1c4>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d01d      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a4d      	ldr	r2, [pc, #308]	; (800cf7c <HAL_DMA_Abort_IT+0x1c8>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d018      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a4c      	ldr	r2, [pc, #304]	; (800cf80 <HAL_DMA_Abort_IT+0x1cc>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d013      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a4a      	ldr	r2, [pc, #296]	; (800cf84 <HAL_DMA_Abort_IT+0x1d0>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d00e      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a49      	ldr	r2, [pc, #292]	; (800cf88 <HAL_DMA_Abort_IT+0x1d4>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d009      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a47      	ldr	r2, [pc, #284]	; (800cf8c <HAL_DMA_Abort_IT+0x1d8>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d004      	beq.n	800ce7c <HAL_DMA_Abort_IT+0xc8>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a46      	ldr	r2, [pc, #280]	; (800cf90 <HAL_DMA_Abort_IT+0x1dc>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d101      	bne.n	800ce80 <HAL_DMA_Abort_IT+0xcc>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e000      	b.n	800ce82 <HAL_DMA_Abort_IT+0xce>
 800ce80:	2300      	movs	r3, #0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 8086 	beq.w	800cf94 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2204      	movs	r2, #4
 800ce8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a2f      	ldr	r2, [pc, #188]	; (800cf54 <HAL_DMA_Abort_IT+0x1a0>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d04a      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a2e      	ldr	r2, [pc, #184]	; (800cf58 <HAL_DMA_Abort_IT+0x1a4>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d045      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a2c      	ldr	r2, [pc, #176]	; (800cf5c <HAL_DMA_Abort_IT+0x1a8>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d040      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a2b      	ldr	r2, [pc, #172]	; (800cf60 <HAL_DMA_Abort_IT+0x1ac>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d03b      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a29      	ldr	r2, [pc, #164]	; (800cf64 <HAL_DMA_Abort_IT+0x1b0>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d036      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a28      	ldr	r2, [pc, #160]	; (800cf68 <HAL_DMA_Abort_IT+0x1b4>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d031      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a26      	ldr	r2, [pc, #152]	; (800cf6c <HAL_DMA_Abort_IT+0x1b8>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d02c      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a25      	ldr	r2, [pc, #148]	; (800cf70 <HAL_DMA_Abort_IT+0x1bc>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d027      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a23      	ldr	r2, [pc, #140]	; (800cf74 <HAL_DMA_Abort_IT+0x1c0>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d022      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a22      	ldr	r2, [pc, #136]	; (800cf78 <HAL_DMA_Abort_IT+0x1c4>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d01d      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a20      	ldr	r2, [pc, #128]	; (800cf7c <HAL_DMA_Abort_IT+0x1c8>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d018      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a1f      	ldr	r2, [pc, #124]	; (800cf80 <HAL_DMA_Abort_IT+0x1cc>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d013      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a1d      	ldr	r2, [pc, #116]	; (800cf84 <HAL_DMA_Abort_IT+0x1d0>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d00e      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a1c      	ldr	r2, [pc, #112]	; (800cf88 <HAL_DMA_Abort_IT+0x1d4>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d009      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a1a      	ldr	r2, [pc, #104]	; (800cf8c <HAL_DMA_Abort_IT+0x1d8>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d004      	beq.n	800cf30 <HAL_DMA_Abort_IT+0x17c>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a19      	ldr	r2, [pc, #100]	; (800cf90 <HAL_DMA_Abort_IT+0x1dc>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d108      	bne.n	800cf42 <HAL_DMA_Abort_IT+0x18e>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 0201 	bic.w	r2, r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	e178      	b.n	800d234 <HAL_DMA_Abort_IT+0x480>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f022 0201 	bic.w	r2, r2, #1
 800cf50:	601a      	str	r2, [r3, #0]
 800cf52:	e16f      	b.n	800d234 <HAL_DMA_Abort_IT+0x480>
 800cf54:	40020010 	.word	0x40020010
 800cf58:	40020028 	.word	0x40020028
 800cf5c:	40020040 	.word	0x40020040
 800cf60:	40020058 	.word	0x40020058
 800cf64:	40020070 	.word	0x40020070
 800cf68:	40020088 	.word	0x40020088
 800cf6c:	400200a0 	.word	0x400200a0
 800cf70:	400200b8 	.word	0x400200b8
 800cf74:	40020410 	.word	0x40020410
 800cf78:	40020428 	.word	0x40020428
 800cf7c:	40020440 	.word	0x40020440
 800cf80:	40020458 	.word	0x40020458
 800cf84:	40020470 	.word	0x40020470
 800cf88:	40020488 	.word	0x40020488
 800cf8c:	400204a0 	.word	0x400204a0
 800cf90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f022 020e 	bic.w	r2, r2, #14
 800cfa2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a6c      	ldr	r2, [pc, #432]	; (800d15c <HAL_DMA_Abort_IT+0x3a8>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d04a      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a6b      	ldr	r2, [pc, #428]	; (800d160 <HAL_DMA_Abort_IT+0x3ac>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d045      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a69      	ldr	r2, [pc, #420]	; (800d164 <HAL_DMA_Abort_IT+0x3b0>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d040      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a68      	ldr	r2, [pc, #416]	; (800d168 <HAL_DMA_Abort_IT+0x3b4>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d03b      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a66      	ldr	r2, [pc, #408]	; (800d16c <HAL_DMA_Abort_IT+0x3b8>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d036      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a65      	ldr	r2, [pc, #404]	; (800d170 <HAL_DMA_Abort_IT+0x3bc>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d031      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a63      	ldr	r2, [pc, #396]	; (800d174 <HAL_DMA_Abort_IT+0x3c0>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d02c      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a62      	ldr	r2, [pc, #392]	; (800d178 <HAL_DMA_Abort_IT+0x3c4>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d027      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a60      	ldr	r2, [pc, #384]	; (800d17c <HAL_DMA_Abort_IT+0x3c8>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d022      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a5f      	ldr	r2, [pc, #380]	; (800d180 <HAL_DMA_Abort_IT+0x3cc>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d01d      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a5d      	ldr	r2, [pc, #372]	; (800d184 <HAL_DMA_Abort_IT+0x3d0>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d018      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a5c      	ldr	r2, [pc, #368]	; (800d188 <HAL_DMA_Abort_IT+0x3d4>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d013      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a5a      	ldr	r2, [pc, #360]	; (800d18c <HAL_DMA_Abort_IT+0x3d8>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d00e      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a59      	ldr	r2, [pc, #356]	; (800d190 <HAL_DMA_Abort_IT+0x3dc>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d009      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a57      	ldr	r2, [pc, #348]	; (800d194 <HAL_DMA_Abort_IT+0x3e0>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d004      	beq.n	800d044 <HAL_DMA_Abort_IT+0x290>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a56      	ldr	r2, [pc, #344]	; (800d198 <HAL_DMA_Abort_IT+0x3e4>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d108      	bne.n	800d056 <HAL_DMA_Abort_IT+0x2a2>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0201 	bic.w	r2, r2, #1
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	e007      	b.n	800d066 <HAL_DMA_Abort_IT+0x2b2>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f022 0201 	bic.w	r2, r2, #1
 800d064:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a3c      	ldr	r2, [pc, #240]	; (800d15c <HAL_DMA_Abort_IT+0x3a8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d072      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a3a      	ldr	r2, [pc, #232]	; (800d160 <HAL_DMA_Abort_IT+0x3ac>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d06d      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a39      	ldr	r2, [pc, #228]	; (800d164 <HAL_DMA_Abort_IT+0x3b0>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d068      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a37      	ldr	r2, [pc, #220]	; (800d168 <HAL_DMA_Abort_IT+0x3b4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d063      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a36      	ldr	r2, [pc, #216]	; (800d16c <HAL_DMA_Abort_IT+0x3b8>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d05e      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a34      	ldr	r2, [pc, #208]	; (800d170 <HAL_DMA_Abort_IT+0x3bc>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d059      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a33      	ldr	r2, [pc, #204]	; (800d174 <HAL_DMA_Abort_IT+0x3c0>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d054      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a31      	ldr	r2, [pc, #196]	; (800d178 <HAL_DMA_Abort_IT+0x3c4>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d04f      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a30      	ldr	r2, [pc, #192]	; (800d17c <HAL_DMA_Abort_IT+0x3c8>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d04a      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a2e      	ldr	r2, [pc, #184]	; (800d180 <HAL_DMA_Abort_IT+0x3cc>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d045      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a2d      	ldr	r2, [pc, #180]	; (800d184 <HAL_DMA_Abort_IT+0x3d0>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d040      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a2b      	ldr	r2, [pc, #172]	; (800d188 <HAL_DMA_Abort_IT+0x3d4>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d03b      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a2a      	ldr	r2, [pc, #168]	; (800d18c <HAL_DMA_Abort_IT+0x3d8>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d036      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a28      	ldr	r2, [pc, #160]	; (800d190 <HAL_DMA_Abort_IT+0x3dc>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d031      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a27      	ldr	r2, [pc, #156]	; (800d194 <HAL_DMA_Abort_IT+0x3e0>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d02c      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a25      	ldr	r2, [pc, #148]	; (800d198 <HAL_DMA_Abort_IT+0x3e4>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d027      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a24      	ldr	r2, [pc, #144]	; (800d19c <HAL_DMA_Abort_IT+0x3e8>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d022      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a22      	ldr	r2, [pc, #136]	; (800d1a0 <HAL_DMA_Abort_IT+0x3ec>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d01d      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a21      	ldr	r2, [pc, #132]	; (800d1a4 <HAL_DMA_Abort_IT+0x3f0>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d018      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a1f      	ldr	r2, [pc, #124]	; (800d1a8 <HAL_DMA_Abort_IT+0x3f4>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d013      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a1e      	ldr	r2, [pc, #120]	; (800d1ac <HAL_DMA_Abort_IT+0x3f8>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d00e      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a1c      	ldr	r2, [pc, #112]	; (800d1b0 <HAL_DMA_Abort_IT+0x3fc>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d009      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a1b      	ldr	r2, [pc, #108]	; (800d1b4 <HAL_DMA_Abort_IT+0x400>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d004      	beq.n	800d156 <HAL_DMA_Abort_IT+0x3a2>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a19      	ldr	r2, [pc, #100]	; (800d1b8 <HAL_DMA_Abort_IT+0x404>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d132      	bne.n	800d1bc <HAL_DMA_Abort_IT+0x408>
 800d156:	2301      	movs	r3, #1
 800d158:	e031      	b.n	800d1be <HAL_DMA_Abort_IT+0x40a>
 800d15a:	bf00      	nop
 800d15c:	40020010 	.word	0x40020010
 800d160:	40020028 	.word	0x40020028
 800d164:	40020040 	.word	0x40020040
 800d168:	40020058 	.word	0x40020058
 800d16c:	40020070 	.word	0x40020070
 800d170:	40020088 	.word	0x40020088
 800d174:	400200a0 	.word	0x400200a0
 800d178:	400200b8 	.word	0x400200b8
 800d17c:	40020410 	.word	0x40020410
 800d180:	40020428 	.word	0x40020428
 800d184:	40020440 	.word	0x40020440
 800d188:	40020458 	.word	0x40020458
 800d18c:	40020470 	.word	0x40020470
 800d190:	40020488 	.word	0x40020488
 800d194:	400204a0 	.word	0x400204a0
 800d198:	400204b8 	.word	0x400204b8
 800d19c:	58025408 	.word	0x58025408
 800d1a0:	5802541c 	.word	0x5802541c
 800d1a4:	58025430 	.word	0x58025430
 800d1a8:	58025444 	.word	0x58025444
 800d1ac:	58025458 	.word	0x58025458
 800d1b0:	5802546c 	.word	0x5802546c
 800d1b4:	58025480 	.word	0x58025480
 800d1b8:	58025494 	.word	0x58025494
 800d1bc:	2300      	movs	r3, #0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d028      	beq.n	800d214 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d1d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1dc:	f003 031f 	and.w	r3, r3, #31
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	409a      	lsls	r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d1f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00c      	beq.n	800d214 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d208:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d212:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d003      	beq.n	800d234 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop

0800d240 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08a      	sub	sp, #40	; 0x28
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d24c:	4b67      	ldr	r3, [pc, #412]	; (800d3ec <HAL_DMA_IRQHandler+0x1ac>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a67      	ldr	r2, [pc, #412]	; (800d3f0 <HAL_DMA_IRQHandler+0x1b0>)
 800d252:	fba2 2303 	umull	r2, r3, r2, r3
 800d256:	0a9b      	lsrs	r3, r3, #10
 800d258:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d25e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d264:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a5f      	ldr	r2, [pc, #380]	; (800d3f4 <HAL_DMA_IRQHandler+0x1b4>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d04a      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a5d      	ldr	r2, [pc, #372]	; (800d3f8 <HAL_DMA_IRQHandler+0x1b8>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d045      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a5c      	ldr	r2, [pc, #368]	; (800d3fc <HAL_DMA_IRQHandler+0x1bc>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d040      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a5a      	ldr	r2, [pc, #360]	; (800d400 <HAL_DMA_IRQHandler+0x1c0>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d03b      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a59      	ldr	r2, [pc, #356]	; (800d404 <HAL_DMA_IRQHandler+0x1c4>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d036      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a57      	ldr	r2, [pc, #348]	; (800d408 <HAL_DMA_IRQHandler+0x1c8>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d031      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a56      	ldr	r2, [pc, #344]	; (800d40c <HAL_DMA_IRQHandler+0x1cc>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d02c      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a54      	ldr	r2, [pc, #336]	; (800d410 <HAL_DMA_IRQHandler+0x1d0>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d027      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a53      	ldr	r2, [pc, #332]	; (800d414 <HAL_DMA_IRQHandler+0x1d4>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d022      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a51      	ldr	r2, [pc, #324]	; (800d418 <HAL_DMA_IRQHandler+0x1d8>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d01d      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a50      	ldr	r2, [pc, #320]	; (800d41c <HAL_DMA_IRQHandler+0x1dc>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d018      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a4e      	ldr	r2, [pc, #312]	; (800d420 <HAL_DMA_IRQHandler+0x1e0>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d013      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a4d      	ldr	r2, [pc, #308]	; (800d424 <HAL_DMA_IRQHandler+0x1e4>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d00e      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a4b      	ldr	r2, [pc, #300]	; (800d428 <HAL_DMA_IRQHandler+0x1e8>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d009      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a4a      	ldr	r2, [pc, #296]	; (800d42c <HAL_DMA_IRQHandler+0x1ec>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d004      	beq.n	800d312 <HAL_DMA_IRQHandler+0xd2>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a48      	ldr	r2, [pc, #288]	; (800d430 <HAL_DMA_IRQHandler+0x1f0>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d101      	bne.n	800d316 <HAL_DMA_IRQHandler+0xd6>
 800d312:	2301      	movs	r3, #1
 800d314:	e000      	b.n	800d318 <HAL_DMA_IRQHandler+0xd8>
 800d316:	2300      	movs	r3, #0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 842b 	beq.w	800db74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d322:	f003 031f 	and.w	r3, r3, #31
 800d326:	2208      	movs	r2, #8
 800d328:	409a      	lsls	r2, r3
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	4013      	ands	r3, r2
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 80a2 	beq.w	800d478 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a2e      	ldr	r2, [pc, #184]	; (800d3f4 <HAL_DMA_IRQHandler+0x1b4>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d04a      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a2d      	ldr	r2, [pc, #180]	; (800d3f8 <HAL_DMA_IRQHandler+0x1b8>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d045      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a2b      	ldr	r2, [pc, #172]	; (800d3fc <HAL_DMA_IRQHandler+0x1bc>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d040      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a2a      	ldr	r2, [pc, #168]	; (800d400 <HAL_DMA_IRQHandler+0x1c0>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d03b      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a28      	ldr	r2, [pc, #160]	; (800d404 <HAL_DMA_IRQHandler+0x1c4>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d036      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a27      	ldr	r2, [pc, #156]	; (800d408 <HAL_DMA_IRQHandler+0x1c8>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d031      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a25      	ldr	r2, [pc, #148]	; (800d40c <HAL_DMA_IRQHandler+0x1cc>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d02c      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a24      	ldr	r2, [pc, #144]	; (800d410 <HAL_DMA_IRQHandler+0x1d0>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d027      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a22      	ldr	r2, [pc, #136]	; (800d414 <HAL_DMA_IRQHandler+0x1d4>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d022      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a21      	ldr	r2, [pc, #132]	; (800d418 <HAL_DMA_IRQHandler+0x1d8>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d01d      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a1f      	ldr	r2, [pc, #124]	; (800d41c <HAL_DMA_IRQHandler+0x1dc>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d018      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a1e      	ldr	r2, [pc, #120]	; (800d420 <HAL_DMA_IRQHandler+0x1e0>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d013      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a1c      	ldr	r2, [pc, #112]	; (800d424 <HAL_DMA_IRQHandler+0x1e4>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d00e      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a1b      	ldr	r2, [pc, #108]	; (800d428 <HAL_DMA_IRQHandler+0x1e8>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d009      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a19      	ldr	r2, [pc, #100]	; (800d42c <HAL_DMA_IRQHandler+0x1ec>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d004      	beq.n	800d3d4 <HAL_DMA_IRQHandler+0x194>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a18      	ldr	r2, [pc, #96]	; (800d430 <HAL_DMA_IRQHandler+0x1f0>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d12f      	bne.n	800d434 <HAL_DMA_IRQHandler+0x1f4>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0304 	and.w	r3, r3, #4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bf14      	ite	ne
 800d3e2:	2301      	movne	r3, #1
 800d3e4:	2300      	moveq	r3, #0
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	e02e      	b.n	800d448 <HAL_DMA_IRQHandler+0x208>
 800d3ea:	bf00      	nop
 800d3ec:	240002dc 	.word	0x240002dc
 800d3f0:	1b4e81b5 	.word	0x1b4e81b5
 800d3f4:	40020010 	.word	0x40020010
 800d3f8:	40020028 	.word	0x40020028
 800d3fc:	40020040 	.word	0x40020040
 800d400:	40020058 	.word	0x40020058
 800d404:	40020070 	.word	0x40020070
 800d408:	40020088 	.word	0x40020088
 800d40c:	400200a0 	.word	0x400200a0
 800d410:	400200b8 	.word	0x400200b8
 800d414:	40020410 	.word	0x40020410
 800d418:	40020428 	.word	0x40020428
 800d41c:	40020440 	.word	0x40020440
 800d420:	40020458 	.word	0x40020458
 800d424:	40020470 	.word	0x40020470
 800d428:	40020488 	.word	0x40020488
 800d42c:	400204a0 	.word	0x400204a0
 800d430:	400204b8 	.word	0x400204b8
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f003 0308 	and.w	r3, r3, #8
 800d43e:	2b00      	cmp	r3, #0
 800d440:	bf14      	ite	ne
 800d442:	2301      	movne	r3, #1
 800d444:	2300      	moveq	r3, #0
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d015      	beq.n	800d478 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f022 0204 	bic.w	r2, r2, #4
 800d45a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d460:	f003 031f 	and.w	r3, r3, #31
 800d464:	2208      	movs	r2, #8
 800d466:	409a      	lsls	r2, r3
 800d468:	6a3b      	ldr	r3, [r7, #32]
 800d46a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d470:	f043 0201 	orr.w	r2, r3, #1
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d47c:	f003 031f 	and.w	r3, r3, #31
 800d480:	69ba      	ldr	r2, [r7, #24]
 800d482:	fa22 f303 	lsr.w	r3, r2, r3
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d06e      	beq.n	800d56c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a69      	ldr	r2, [pc, #420]	; (800d638 <HAL_DMA_IRQHandler+0x3f8>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d04a      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a67      	ldr	r2, [pc, #412]	; (800d63c <HAL_DMA_IRQHandler+0x3fc>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d045      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a66      	ldr	r2, [pc, #408]	; (800d640 <HAL_DMA_IRQHandler+0x400>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d040      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a64      	ldr	r2, [pc, #400]	; (800d644 <HAL_DMA_IRQHandler+0x404>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d03b      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a63      	ldr	r2, [pc, #396]	; (800d648 <HAL_DMA_IRQHandler+0x408>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d036      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a61      	ldr	r2, [pc, #388]	; (800d64c <HAL_DMA_IRQHandler+0x40c>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d031      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a60      	ldr	r2, [pc, #384]	; (800d650 <HAL_DMA_IRQHandler+0x410>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d02c      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a5e      	ldr	r2, [pc, #376]	; (800d654 <HAL_DMA_IRQHandler+0x414>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d027      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4a5d      	ldr	r2, [pc, #372]	; (800d658 <HAL_DMA_IRQHandler+0x418>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d022      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a5b      	ldr	r2, [pc, #364]	; (800d65c <HAL_DMA_IRQHandler+0x41c>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d01d      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a5a      	ldr	r2, [pc, #360]	; (800d660 <HAL_DMA_IRQHandler+0x420>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d018      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a58      	ldr	r2, [pc, #352]	; (800d664 <HAL_DMA_IRQHandler+0x424>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d013      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a57      	ldr	r2, [pc, #348]	; (800d668 <HAL_DMA_IRQHandler+0x428>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d00e      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a55      	ldr	r2, [pc, #340]	; (800d66c <HAL_DMA_IRQHandler+0x42c>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d009      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a54      	ldr	r2, [pc, #336]	; (800d670 <HAL_DMA_IRQHandler+0x430>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d004      	beq.n	800d52e <HAL_DMA_IRQHandler+0x2ee>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a52      	ldr	r2, [pc, #328]	; (800d674 <HAL_DMA_IRQHandler+0x434>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d10a      	bne.n	800d544 <HAL_DMA_IRQHandler+0x304>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	695b      	ldr	r3, [r3, #20]
 800d534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d538:	2b00      	cmp	r3, #0
 800d53a:	bf14      	ite	ne
 800d53c:	2301      	movne	r3, #1
 800d53e:	2300      	moveq	r3, #0
 800d540:	b2db      	uxtb	r3, r3
 800d542:	e003      	b.n	800d54c <HAL_DMA_IRQHandler+0x30c>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2300      	movs	r3, #0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00d      	beq.n	800d56c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d554:	f003 031f 	and.w	r3, r3, #31
 800d558:	2201      	movs	r2, #1
 800d55a:	409a      	lsls	r2, r3
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d564:	f043 0202 	orr.w	r2, r3, #2
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d570:	f003 031f 	and.w	r3, r3, #31
 800d574:	2204      	movs	r2, #4
 800d576:	409a      	lsls	r2, r3
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	4013      	ands	r3, r2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f000 808f 	beq.w	800d6a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a2c      	ldr	r2, [pc, #176]	; (800d638 <HAL_DMA_IRQHandler+0x3f8>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d04a      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a2a      	ldr	r2, [pc, #168]	; (800d63c <HAL_DMA_IRQHandler+0x3fc>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d045      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a29      	ldr	r2, [pc, #164]	; (800d640 <HAL_DMA_IRQHandler+0x400>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d040      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a27      	ldr	r2, [pc, #156]	; (800d644 <HAL_DMA_IRQHandler+0x404>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d03b      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a26      	ldr	r2, [pc, #152]	; (800d648 <HAL_DMA_IRQHandler+0x408>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d036      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a24      	ldr	r2, [pc, #144]	; (800d64c <HAL_DMA_IRQHandler+0x40c>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d031      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a23      	ldr	r2, [pc, #140]	; (800d650 <HAL_DMA_IRQHandler+0x410>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d02c      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a21      	ldr	r2, [pc, #132]	; (800d654 <HAL_DMA_IRQHandler+0x414>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d027      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a20      	ldr	r2, [pc, #128]	; (800d658 <HAL_DMA_IRQHandler+0x418>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d022      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a1e      	ldr	r2, [pc, #120]	; (800d65c <HAL_DMA_IRQHandler+0x41c>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d01d      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a1d      	ldr	r2, [pc, #116]	; (800d660 <HAL_DMA_IRQHandler+0x420>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d018      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a1b      	ldr	r2, [pc, #108]	; (800d664 <HAL_DMA_IRQHandler+0x424>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d013      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a1a      	ldr	r2, [pc, #104]	; (800d668 <HAL_DMA_IRQHandler+0x428>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d00e      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a18      	ldr	r2, [pc, #96]	; (800d66c <HAL_DMA_IRQHandler+0x42c>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d009      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a17      	ldr	r2, [pc, #92]	; (800d670 <HAL_DMA_IRQHandler+0x430>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d004      	beq.n	800d622 <HAL_DMA_IRQHandler+0x3e2>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a15      	ldr	r2, [pc, #84]	; (800d674 <HAL_DMA_IRQHandler+0x434>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d12a      	bne.n	800d678 <HAL_DMA_IRQHandler+0x438>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f003 0302 	and.w	r3, r3, #2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	bf14      	ite	ne
 800d630:	2301      	movne	r3, #1
 800d632:	2300      	moveq	r3, #0
 800d634:	b2db      	uxtb	r3, r3
 800d636:	e023      	b.n	800d680 <HAL_DMA_IRQHandler+0x440>
 800d638:	40020010 	.word	0x40020010
 800d63c:	40020028 	.word	0x40020028
 800d640:	40020040 	.word	0x40020040
 800d644:	40020058 	.word	0x40020058
 800d648:	40020070 	.word	0x40020070
 800d64c:	40020088 	.word	0x40020088
 800d650:	400200a0 	.word	0x400200a0
 800d654:	400200b8 	.word	0x400200b8
 800d658:	40020410 	.word	0x40020410
 800d65c:	40020428 	.word	0x40020428
 800d660:	40020440 	.word	0x40020440
 800d664:	40020458 	.word	0x40020458
 800d668:	40020470 	.word	0x40020470
 800d66c:	40020488 	.word	0x40020488
 800d670:	400204a0 	.word	0x400204a0
 800d674:	400204b8 	.word	0x400204b8
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2300      	movs	r3, #0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00d      	beq.n	800d6a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d688:	f003 031f 	and.w	r3, r3, #31
 800d68c:	2204      	movs	r2, #4
 800d68e:	409a      	lsls	r2, r3
 800d690:	6a3b      	ldr	r3, [r7, #32]
 800d692:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d698:	f043 0204 	orr.w	r2, r3, #4
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6a4:	f003 031f 	and.w	r3, r3, #31
 800d6a8:	2210      	movs	r2, #16
 800d6aa:	409a      	lsls	r2, r3
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 80a6 	beq.w	800d802 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a85      	ldr	r2, [pc, #532]	; (800d8d0 <HAL_DMA_IRQHandler+0x690>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d04a      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a83      	ldr	r2, [pc, #524]	; (800d8d4 <HAL_DMA_IRQHandler+0x694>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d045      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a82      	ldr	r2, [pc, #520]	; (800d8d8 <HAL_DMA_IRQHandler+0x698>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d040      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a80      	ldr	r2, [pc, #512]	; (800d8dc <HAL_DMA_IRQHandler+0x69c>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d03b      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a7f      	ldr	r2, [pc, #508]	; (800d8e0 <HAL_DMA_IRQHandler+0x6a0>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d036      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a7d      	ldr	r2, [pc, #500]	; (800d8e4 <HAL_DMA_IRQHandler+0x6a4>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d031      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a7c      	ldr	r2, [pc, #496]	; (800d8e8 <HAL_DMA_IRQHandler+0x6a8>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d02c      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a7a      	ldr	r2, [pc, #488]	; (800d8ec <HAL_DMA_IRQHandler+0x6ac>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d027      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a79      	ldr	r2, [pc, #484]	; (800d8f0 <HAL_DMA_IRQHandler+0x6b0>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d022      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a77      	ldr	r2, [pc, #476]	; (800d8f4 <HAL_DMA_IRQHandler+0x6b4>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d01d      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a76      	ldr	r2, [pc, #472]	; (800d8f8 <HAL_DMA_IRQHandler+0x6b8>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d018      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a74      	ldr	r2, [pc, #464]	; (800d8fc <HAL_DMA_IRQHandler+0x6bc>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d013      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a73      	ldr	r2, [pc, #460]	; (800d900 <HAL_DMA_IRQHandler+0x6c0>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d00e      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a71      	ldr	r2, [pc, #452]	; (800d904 <HAL_DMA_IRQHandler+0x6c4>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d009      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a70      	ldr	r2, [pc, #448]	; (800d908 <HAL_DMA_IRQHandler+0x6c8>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d004      	beq.n	800d756 <HAL_DMA_IRQHandler+0x516>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a6e      	ldr	r2, [pc, #440]	; (800d90c <HAL_DMA_IRQHandler+0x6cc>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d10a      	bne.n	800d76c <HAL_DMA_IRQHandler+0x52c>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 0308 	and.w	r3, r3, #8
 800d760:	2b00      	cmp	r3, #0
 800d762:	bf14      	ite	ne
 800d764:	2301      	movne	r3, #1
 800d766:	2300      	moveq	r3, #0
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	e009      	b.n	800d780 <HAL_DMA_IRQHandler+0x540>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 0304 	and.w	r3, r3, #4
 800d776:	2b00      	cmp	r3, #0
 800d778:	bf14      	ite	ne
 800d77a:	2301      	movne	r3, #1
 800d77c:	2300      	moveq	r3, #0
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b00      	cmp	r3, #0
 800d782:	d03e      	beq.n	800d802 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d788:	f003 031f 	and.w	r3, r3, #31
 800d78c:	2210      	movs	r2, #16
 800d78e:	409a      	lsls	r2, r3
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d018      	beq.n	800d7d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d108      	bne.n	800d7c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d024      	beq.n	800d802 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	4798      	blx	r3
 800d7c0:	e01f      	b.n	800d802 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d01b      	beq.n	800d802 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	4798      	blx	r3
 800d7d2:	e016      	b.n	800d802 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d107      	bne.n	800d7f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f022 0208 	bic.w	r2, r2, #8
 800d7f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d806:	f003 031f 	and.w	r3, r3, #31
 800d80a:	2220      	movs	r2, #32
 800d80c:	409a      	lsls	r2, r3
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	4013      	ands	r3, r2
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 8110 	beq.w	800da38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a2c      	ldr	r2, [pc, #176]	; (800d8d0 <HAL_DMA_IRQHandler+0x690>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d04a      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a2b      	ldr	r2, [pc, #172]	; (800d8d4 <HAL_DMA_IRQHandler+0x694>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d045      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a29      	ldr	r2, [pc, #164]	; (800d8d8 <HAL_DMA_IRQHandler+0x698>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d040      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a28      	ldr	r2, [pc, #160]	; (800d8dc <HAL_DMA_IRQHandler+0x69c>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d03b      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a26      	ldr	r2, [pc, #152]	; (800d8e0 <HAL_DMA_IRQHandler+0x6a0>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d036      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a25      	ldr	r2, [pc, #148]	; (800d8e4 <HAL_DMA_IRQHandler+0x6a4>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d031      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a23      	ldr	r2, [pc, #140]	; (800d8e8 <HAL_DMA_IRQHandler+0x6a8>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d02c      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a22      	ldr	r2, [pc, #136]	; (800d8ec <HAL_DMA_IRQHandler+0x6ac>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d027      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a20      	ldr	r2, [pc, #128]	; (800d8f0 <HAL_DMA_IRQHandler+0x6b0>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d022      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a1f      	ldr	r2, [pc, #124]	; (800d8f4 <HAL_DMA_IRQHandler+0x6b4>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d01d      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a1d      	ldr	r2, [pc, #116]	; (800d8f8 <HAL_DMA_IRQHandler+0x6b8>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d018      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a1c      	ldr	r2, [pc, #112]	; (800d8fc <HAL_DMA_IRQHandler+0x6bc>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d013      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a1a      	ldr	r2, [pc, #104]	; (800d900 <HAL_DMA_IRQHandler+0x6c0>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d00e      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a19      	ldr	r2, [pc, #100]	; (800d904 <HAL_DMA_IRQHandler+0x6c4>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d009      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a17      	ldr	r2, [pc, #92]	; (800d908 <HAL_DMA_IRQHandler+0x6c8>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d004      	beq.n	800d8b8 <HAL_DMA_IRQHandler+0x678>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a16      	ldr	r2, [pc, #88]	; (800d90c <HAL_DMA_IRQHandler+0x6cc>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d12b      	bne.n	800d910 <HAL_DMA_IRQHandler+0x6d0>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f003 0310 	and.w	r3, r3, #16
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	bf14      	ite	ne
 800d8c6:	2301      	movne	r3, #1
 800d8c8:	2300      	moveq	r3, #0
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	e02a      	b.n	800d924 <HAL_DMA_IRQHandler+0x6e4>
 800d8ce:	bf00      	nop
 800d8d0:	40020010 	.word	0x40020010
 800d8d4:	40020028 	.word	0x40020028
 800d8d8:	40020040 	.word	0x40020040
 800d8dc:	40020058 	.word	0x40020058
 800d8e0:	40020070 	.word	0x40020070
 800d8e4:	40020088 	.word	0x40020088
 800d8e8:	400200a0 	.word	0x400200a0
 800d8ec:	400200b8 	.word	0x400200b8
 800d8f0:	40020410 	.word	0x40020410
 800d8f4:	40020428 	.word	0x40020428
 800d8f8:	40020440 	.word	0x40020440
 800d8fc:	40020458 	.word	0x40020458
 800d900:	40020470 	.word	0x40020470
 800d904:	40020488 	.word	0x40020488
 800d908:	400204a0 	.word	0x400204a0
 800d90c:	400204b8 	.word	0x400204b8
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bf14      	ite	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	2300      	moveq	r3, #0
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	f000 8087 	beq.w	800da38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d92e:	f003 031f 	and.w	r3, r3, #31
 800d932:	2220      	movs	r2, #32
 800d934:	409a      	lsls	r2, r3
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b04      	cmp	r3, #4
 800d944:	d139      	bne.n	800d9ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f022 0216 	bic.w	r2, r2, #22
 800d954:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	695a      	ldr	r2, [r3, #20]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d964:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d103      	bne.n	800d976 <HAL_DMA_IRQHandler+0x736>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f022 0208 	bic.w	r2, r2, #8
 800d984:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d98a:	f003 031f 	and.w	r3, r3, #31
 800d98e:	223f      	movs	r2, #63	; 0x3f
 800d990:	409a      	lsls	r2, r3
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 834a 	beq.w	800e044 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	4798      	blx	r3
          }
          return;
 800d9b8:	e344      	b.n	800e044 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d018      	beq.n	800d9fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d108      	bne.n	800d9e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d02c      	beq.n	800da38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	4798      	blx	r3
 800d9e6:	e027      	b.n	800da38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d023      	beq.n	800da38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	4798      	blx	r3
 800d9f8:	e01e      	b.n	800da38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10f      	bne.n	800da28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f022 0210 	bic.w	r2, r2, #16
 800da16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 8306 	beq.w	800e04e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f000 8088 	beq.w	800db60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2204      	movs	r2, #4
 800da54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a7a      	ldr	r2, [pc, #488]	; (800dc48 <HAL_DMA_IRQHandler+0xa08>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d04a      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a79      	ldr	r2, [pc, #484]	; (800dc4c <HAL_DMA_IRQHandler+0xa0c>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d045      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a77      	ldr	r2, [pc, #476]	; (800dc50 <HAL_DMA_IRQHandler+0xa10>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d040      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a76      	ldr	r2, [pc, #472]	; (800dc54 <HAL_DMA_IRQHandler+0xa14>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d03b      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a74      	ldr	r2, [pc, #464]	; (800dc58 <HAL_DMA_IRQHandler+0xa18>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d036      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a73      	ldr	r2, [pc, #460]	; (800dc5c <HAL_DMA_IRQHandler+0xa1c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d031      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a71      	ldr	r2, [pc, #452]	; (800dc60 <HAL_DMA_IRQHandler+0xa20>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d02c      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a70      	ldr	r2, [pc, #448]	; (800dc64 <HAL_DMA_IRQHandler+0xa24>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d027      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a6e      	ldr	r2, [pc, #440]	; (800dc68 <HAL_DMA_IRQHandler+0xa28>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d022      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a6d      	ldr	r2, [pc, #436]	; (800dc6c <HAL_DMA_IRQHandler+0xa2c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d01d      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a6b      	ldr	r2, [pc, #428]	; (800dc70 <HAL_DMA_IRQHandler+0xa30>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d018      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a6a      	ldr	r2, [pc, #424]	; (800dc74 <HAL_DMA_IRQHandler+0xa34>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d013      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a68      	ldr	r2, [pc, #416]	; (800dc78 <HAL_DMA_IRQHandler+0xa38>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d00e      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a67      	ldr	r2, [pc, #412]	; (800dc7c <HAL_DMA_IRQHandler+0xa3c>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d009      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a65      	ldr	r2, [pc, #404]	; (800dc80 <HAL_DMA_IRQHandler+0xa40>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d004      	beq.n	800daf8 <HAL_DMA_IRQHandler+0x8b8>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a64      	ldr	r2, [pc, #400]	; (800dc84 <HAL_DMA_IRQHandler+0xa44>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d108      	bne.n	800db0a <HAL_DMA_IRQHandler+0x8ca>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f022 0201 	bic.w	r2, r2, #1
 800db06:	601a      	str	r2, [r3, #0]
 800db08:	e007      	b.n	800db1a <HAL_DMA_IRQHandler+0x8da>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f022 0201 	bic.w	r2, r2, #1
 800db18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3301      	adds	r3, #1
 800db1e:	60fb      	str	r3, [r7, #12]
 800db20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db22:	429a      	cmp	r2, r3
 800db24:	d307      	bcc.n	800db36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f003 0301 	and.w	r3, r3, #1
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1f2      	bne.n	800db1a <HAL_DMA_IRQHandler+0x8da>
 800db34:	e000      	b.n	800db38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800db36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	2b00      	cmp	r3, #0
 800db44:	d004      	beq.n	800db50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2203      	movs	r2, #3
 800db4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800db4e:	e003      	b.n	800db58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db64:	2b00      	cmp	r3, #0
 800db66:	f000 8272 	beq.w	800e04e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	4798      	blx	r3
 800db72:	e26c      	b.n	800e04e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a43      	ldr	r2, [pc, #268]	; (800dc88 <HAL_DMA_IRQHandler+0xa48>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d022      	beq.n	800dbc4 <HAL_DMA_IRQHandler+0x984>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a42      	ldr	r2, [pc, #264]	; (800dc8c <HAL_DMA_IRQHandler+0xa4c>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d01d      	beq.n	800dbc4 <HAL_DMA_IRQHandler+0x984>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a40      	ldr	r2, [pc, #256]	; (800dc90 <HAL_DMA_IRQHandler+0xa50>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d018      	beq.n	800dbc4 <HAL_DMA_IRQHandler+0x984>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a3f      	ldr	r2, [pc, #252]	; (800dc94 <HAL_DMA_IRQHandler+0xa54>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d013      	beq.n	800dbc4 <HAL_DMA_IRQHandler+0x984>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a3d      	ldr	r2, [pc, #244]	; (800dc98 <HAL_DMA_IRQHandler+0xa58>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d00e      	beq.n	800dbc4 <HAL_DMA_IRQHandler+0x984>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a3c      	ldr	r2, [pc, #240]	; (800dc9c <HAL_DMA_IRQHandler+0xa5c>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d009      	beq.n	800dbc4 <HAL_DMA_IRQHandler+0x984>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a3a      	ldr	r2, [pc, #232]	; (800dca0 <HAL_DMA_IRQHandler+0xa60>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d004      	beq.n	800dbc4 <HAL_DMA_IRQHandler+0x984>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a39      	ldr	r2, [pc, #228]	; (800dca4 <HAL_DMA_IRQHandler+0xa64>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d101      	bne.n	800dbc8 <HAL_DMA_IRQHandler+0x988>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e000      	b.n	800dbca <HAL_DMA_IRQHandler+0x98a>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 823f 	beq.w	800e04e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbdc:	f003 031f 	and.w	r3, r3, #31
 800dbe0:	2204      	movs	r2, #4
 800dbe2:	409a      	lsls	r2, r3
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f000 80cd 	beq.w	800dd88 <HAL_DMA_IRQHandler+0xb48>
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	f003 0304 	and.w	r3, r3, #4
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f000 80c7 	beq.w	800dd88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbfe:	f003 031f 	and.w	r3, r3, #31
 800dc02:	2204      	movs	r2, #4
 800dc04:	409a      	lsls	r2, r3
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d049      	beq.n	800dca8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d109      	bne.n	800dc32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 8210 	beq.w	800e048 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc30:	e20a      	b.n	800e048 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f000 8206 	beq.w	800e048 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc44:	e200      	b.n	800e048 <HAL_DMA_IRQHandler+0xe08>
 800dc46:	bf00      	nop
 800dc48:	40020010 	.word	0x40020010
 800dc4c:	40020028 	.word	0x40020028
 800dc50:	40020040 	.word	0x40020040
 800dc54:	40020058 	.word	0x40020058
 800dc58:	40020070 	.word	0x40020070
 800dc5c:	40020088 	.word	0x40020088
 800dc60:	400200a0 	.word	0x400200a0
 800dc64:	400200b8 	.word	0x400200b8
 800dc68:	40020410 	.word	0x40020410
 800dc6c:	40020428 	.word	0x40020428
 800dc70:	40020440 	.word	0x40020440
 800dc74:	40020458 	.word	0x40020458
 800dc78:	40020470 	.word	0x40020470
 800dc7c:	40020488 	.word	0x40020488
 800dc80:	400204a0 	.word	0x400204a0
 800dc84:	400204b8 	.word	0x400204b8
 800dc88:	58025408 	.word	0x58025408
 800dc8c:	5802541c 	.word	0x5802541c
 800dc90:	58025430 	.word	0x58025430
 800dc94:	58025444 	.word	0x58025444
 800dc98:	58025458 	.word	0x58025458
 800dc9c:	5802546c 	.word	0x5802546c
 800dca0:	58025480 	.word	0x58025480
 800dca4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	f003 0320 	and.w	r3, r3, #32
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d160      	bne.n	800dd74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a7f      	ldr	r2, [pc, #508]	; (800deb4 <HAL_DMA_IRQHandler+0xc74>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d04a      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a7d      	ldr	r2, [pc, #500]	; (800deb8 <HAL_DMA_IRQHandler+0xc78>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d045      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a7c      	ldr	r2, [pc, #496]	; (800debc <HAL_DMA_IRQHandler+0xc7c>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d040      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a7a      	ldr	r2, [pc, #488]	; (800dec0 <HAL_DMA_IRQHandler+0xc80>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d03b      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4a79      	ldr	r2, [pc, #484]	; (800dec4 <HAL_DMA_IRQHandler+0xc84>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d036      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a77      	ldr	r2, [pc, #476]	; (800dec8 <HAL_DMA_IRQHandler+0xc88>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d031      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a76      	ldr	r2, [pc, #472]	; (800decc <HAL_DMA_IRQHandler+0xc8c>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d02c      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a74      	ldr	r2, [pc, #464]	; (800ded0 <HAL_DMA_IRQHandler+0xc90>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d027      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a73      	ldr	r2, [pc, #460]	; (800ded4 <HAL_DMA_IRQHandler+0xc94>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d022      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a71      	ldr	r2, [pc, #452]	; (800ded8 <HAL_DMA_IRQHandler+0xc98>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d01d      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a70      	ldr	r2, [pc, #448]	; (800dedc <HAL_DMA_IRQHandler+0xc9c>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d018      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a6e      	ldr	r2, [pc, #440]	; (800dee0 <HAL_DMA_IRQHandler+0xca0>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d013      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a6d      	ldr	r2, [pc, #436]	; (800dee4 <HAL_DMA_IRQHandler+0xca4>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d00e      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4a6b      	ldr	r2, [pc, #428]	; (800dee8 <HAL_DMA_IRQHandler+0xca8>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d009      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a6a      	ldr	r2, [pc, #424]	; (800deec <HAL_DMA_IRQHandler+0xcac>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d004      	beq.n	800dd52 <HAL_DMA_IRQHandler+0xb12>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a68      	ldr	r2, [pc, #416]	; (800def0 <HAL_DMA_IRQHandler+0xcb0>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d108      	bne.n	800dd64 <HAL_DMA_IRQHandler+0xb24>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f022 0208 	bic.w	r2, r2, #8
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	e007      	b.n	800dd74 <HAL_DMA_IRQHandler+0xb34>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f022 0204 	bic.w	r2, r2, #4
 800dd72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 8165 	beq.w	800e048 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dd86:	e15f      	b.n	800e048 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd8c:	f003 031f 	and.w	r3, r3, #31
 800dd90:	2202      	movs	r2, #2
 800dd92:	409a      	lsls	r2, r3
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	4013      	ands	r3, r2
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f000 80c5 	beq.w	800df28 <HAL_DMA_IRQHandler+0xce8>
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f003 0302 	and.w	r3, r3, #2
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 80bf 	beq.w	800df28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddae:	f003 031f 	and.w	r3, r3, #31
 800ddb2:	2202      	movs	r2, #2
 800ddb4:	409a      	lsls	r2, r3
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d018      	beq.n	800ddf6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d109      	bne.n	800dde2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 813a 	beq.w	800e04c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dde0:	e134      	b.n	800e04c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f000 8130 	beq.w	800e04c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ddf4:	e12a      	b.n	800e04c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f003 0320 	and.w	r3, r3, #32
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f040 8089 	bne.w	800df14 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a2b      	ldr	r2, [pc, #172]	; (800deb4 <HAL_DMA_IRQHandler+0xc74>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d04a      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a29      	ldr	r2, [pc, #164]	; (800deb8 <HAL_DMA_IRQHandler+0xc78>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d045      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a28      	ldr	r2, [pc, #160]	; (800debc <HAL_DMA_IRQHandler+0xc7c>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d040      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a26      	ldr	r2, [pc, #152]	; (800dec0 <HAL_DMA_IRQHandler+0xc80>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d03b      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a25      	ldr	r2, [pc, #148]	; (800dec4 <HAL_DMA_IRQHandler+0xc84>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d036      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a23      	ldr	r2, [pc, #140]	; (800dec8 <HAL_DMA_IRQHandler+0xc88>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d031      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a22      	ldr	r2, [pc, #136]	; (800decc <HAL_DMA_IRQHandler+0xc8c>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d02c      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a20      	ldr	r2, [pc, #128]	; (800ded0 <HAL_DMA_IRQHandler+0xc90>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d027      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a1f      	ldr	r2, [pc, #124]	; (800ded4 <HAL_DMA_IRQHandler+0xc94>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d022      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <HAL_DMA_IRQHandler+0xc98>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d01d      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a1c      	ldr	r2, [pc, #112]	; (800dedc <HAL_DMA_IRQHandler+0xc9c>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d018      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4a1a      	ldr	r2, [pc, #104]	; (800dee0 <HAL_DMA_IRQHandler+0xca0>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d013      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a19      	ldr	r2, [pc, #100]	; (800dee4 <HAL_DMA_IRQHandler+0xca4>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d00e      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <HAL_DMA_IRQHandler+0xca8>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d009      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a16      	ldr	r2, [pc, #88]	; (800deec <HAL_DMA_IRQHandler+0xcac>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d004      	beq.n	800dea2 <HAL_DMA_IRQHandler+0xc62>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a14      	ldr	r2, [pc, #80]	; (800def0 <HAL_DMA_IRQHandler+0xcb0>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d128      	bne.n	800def4 <HAL_DMA_IRQHandler+0xcb4>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f022 0214 	bic.w	r2, r2, #20
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	e027      	b.n	800df04 <HAL_DMA_IRQHandler+0xcc4>
 800deb4:	40020010 	.word	0x40020010
 800deb8:	40020028 	.word	0x40020028
 800debc:	40020040 	.word	0x40020040
 800dec0:	40020058 	.word	0x40020058
 800dec4:	40020070 	.word	0x40020070
 800dec8:	40020088 	.word	0x40020088
 800decc:	400200a0 	.word	0x400200a0
 800ded0:	400200b8 	.word	0x400200b8
 800ded4:	40020410 	.word	0x40020410
 800ded8:	40020428 	.word	0x40020428
 800dedc:	40020440 	.word	0x40020440
 800dee0:	40020458 	.word	0x40020458
 800dee4:	40020470 	.word	0x40020470
 800dee8:	40020488 	.word	0x40020488
 800deec:	400204a0 	.word	0x400204a0
 800def0:	400204b8 	.word	0x400204b8
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f022 020a 	bic.w	r2, r2, #10
 800df02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 8097 	beq.w	800e04c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800df26:	e091      	b.n	800e04c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df2c:	f003 031f 	and.w	r3, r3, #31
 800df30:	2208      	movs	r2, #8
 800df32:	409a      	lsls	r2, r3
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	4013      	ands	r3, r2
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 8088 	beq.w	800e04e <HAL_DMA_IRQHandler+0xe0e>
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	f003 0308 	and.w	r3, r3, #8
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 8082 	beq.w	800e04e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a41      	ldr	r2, [pc, #260]	; (800e054 <HAL_DMA_IRQHandler+0xe14>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d04a      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a3f      	ldr	r2, [pc, #252]	; (800e058 <HAL_DMA_IRQHandler+0xe18>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d045      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a3e      	ldr	r2, [pc, #248]	; (800e05c <HAL_DMA_IRQHandler+0xe1c>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d040      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a3c      	ldr	r2, [pc, #240]	; (800e060 <HAL_DMA_IRQHandler+0xe20>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d03b      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a3b      	ldr	r2, [pc, #236]	; (800e064 <HAL_DMA_IRQHandler+0xe24>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d036      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a39      	ldr	r2, [pc, #228]	; (800e068 <HAL_DMA_IRQHandler+0xe28>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d031      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a38      	ldr	r2, [pc, #224]	; (800e06c <HAL_DMA_IRQHandler+0xe2c>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d02c      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a36      	ldr	r2, [pc, #216]	; (800e070 <HAL_DMA_IRQHandler+0xe30>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d027      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a35      	ldr	r2, [pc, #212]	; (800e074 <HAL_DMA_IRQHandler+0xe34>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d022      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a33      	ldr	r2, [pc, #204]	; (800e078 <HAL_DMA_IRQHandler+0xe38>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d01d      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4a32      	ldr	r2, [pc, #200]	; (800e07c <HAL_DMA_IRQHandler+0xe3c>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d018      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a30      	ldr	r2, [pc, #192]	; (800e080 <HAL_DMA_IRQHandler+0xe40>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d013      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a2f      	ldr	r2, [pc, #188]	; (800e084 <HAL_DMA_IRQHandler+0xe44>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d00e      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a2d      	ldr	r2, [pc, #180]	; (800e088 <HAL_DMA_IRQHandler+0xe48>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d009      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a2c      	ldr	r2, [pc, #176]	; (800e08c <HAL_DMA_IRQHandler+0xe4c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d004      	beq.n	800dfea <HAL_DMA_IRQHandler+0xdaa>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a2a      	ldr	r2, [pc, #168]	; (800e090 <HAL_DMA_IRQHandler+0xe50>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d108      	bne.n	800dffc <HAL_DMA_IRQHandler+0xdbc>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f022 021c 	bic.w	r2, r2, #28
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	e007      	b.n	800e00c <HAL_DMA_IRQHandler+0xdcc>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f022 020e 	bic.w	r2, r2, #14
 800e00a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e010:	f003 031f 	and.w	r3, r3, #31
 800e014:	2201      	movs	r2, #1
 800e016:	409a      	lsls	r2, r3
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d009      	beq.n	800e04e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	4798      	blx	r3
 800e042:	e004      	b.n	800e04e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800e044:	bf00      	nop
 800e046:	e002      	b.n	800e04e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e048:	bf00      	nop
 800e04a:	e000      	b.n	800e04e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e04c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e04e:	3728      	adds	r7, #40	; 0x28
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	40020010 	.word	0x40020010
 800e058:	40020028 	.word	0x40020028
 800e05c:	40020040 	.word	0x40020040
 800e060:	40020058 	.word	0x40020058
 800e064:	40020070 	.word	0x40020070
 800e068:	40020088 	.word	0x40020088
 800e06c:	400200a0 	.word	0x400200a0
 800e070:	400200b8 	.word	0x400200b8
 800e074:	40020410 	.word	0x40020410
 800e078:	40020428 	.word	0x40020428
 800e07c:	40020440 	.word	0x40020440
 800e080:	40020458 	.word	0x40020458
 800e084:	40020470 	.word	0x40020470
 800e088:	40020488 	.word	0x40020488
 800e08c:	400204a0 	.word	0x400204a0
 800e090:	400204b8 	.word	0x400204b8

0800e094 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b087      	sub	sp, #28
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
 800e0b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a7f      	ldr	r2, [pc, #508]	; (800e2c8 <DMA_SetConfig+0x21c>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d072      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a7d      	ldr	r2, [pc, #500]	; (800e2cc <DMA_SetConfig+0x220>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d06d      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4a7c      	ldr	r2, [pc, #496]	; (800e2d0 <DMA_SetConfig+0x224>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d068      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a7a      	ldr	r2, [pc, #488]	; (800e2d4 <DMA_SetConfig+0x228>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d063      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a79      	ldr	r2, [pc, #484]	; (800e2d8 <DMA_SetConfig+0x22c>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d05e      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a77      	ldr	r2, [pc, #476]	; (800e2dc <DMA_SetConfig+0x230>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d059      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a76      	ldr	r2, [pc, #472]	; (800e2e0 <DMA_SetConfig+0x234>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d054      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a74      	ldr	r2, [pc, #464]	; (800e2e4 <DMA_SetConfig+0x238>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d04f      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a73      	ldr	r2, [pc, #460]	; (800e2e8 <DMA_SetConfig+0x23c>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d04a      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a71      	ldr	r2, [pc, #452]	; (800e2ec <DMA_SetConfig+0x240>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d045      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a70      	ldr	r2, [pc, #448]	; (800e2f0 <DMA_SetConfig+0x244>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d040      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a6e      	ldr	r2, [pc, #440]	; (800e2f4 <DMA_SetConfig+0x248>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d03b      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4a6d      	ldr	r2, [pc, #436]	; (800e2f8 <DMA_SetConfig+0x24c>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d036      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a6b      	ldr	r2, [pc, #428]	; (800e2fc <DMA_SetConfig+0x250>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d031      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a6a      	ldr	r2, [pc, #424]	; (800e300 <DMA_SetConfig+0x254>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d02c      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a68      	ldr	r2, [pc, #416]	; (800e304 <DMA_SetConfig+0x258>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d027      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a67      	ldr	r2, [pc, #412]	; (800e308 <DMA_SetConfig+0x25c>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d022      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a65      	ldr	r2, [pc, #404]	; (800e30c <DMA_SetConfig+0x260>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d01d      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a64      	ldr	r2, [pc, #400]	; (800e310 <DMA_SetConfig+0x264>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d018      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a62      	ldr	r2, [pc, #392]	; (800e314 <DMA_SetConfig+0x268>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d013      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a61      	ldr	r2, [pc, #388]	; (800e318 <DMA_SetConfig+0x26c>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d00e      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a5f      	ldr	r2, [pc, #380]	; (800e31c <DMA_SetConfig+0x270>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d009      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a5e      	ldr	r2, [pc, #376]	; (800e320 <DMA_SetConfig+0x274>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d004      	beq.n	800e1b6 <DMA_SetConfig+0x10a>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a5c      	ldr	r2, [pc, #368]	; (800e324 <DMA_SetConfig+0x278>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d101      	bne.n	800e1ba <DMA_SetConfig+0x10e>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e000      	b.n	800e1bc <DMA_SetConfig+0x110>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00d      	beq.n	800e1dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e1c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d004      	beq.n	800e1dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e1da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a39      	ldr	r2, [pc, #228]	; (800e2c8 <DMA_SetConfig+0x21c>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d04a      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a38      	ldr	r2, [pc, #224]	; (800e2cc <DMA_SetConfig+0x220>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d045      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a36      	ldr	r2, [pc, #216]	; (800e2d0 <DMA_SetConfig+0x224>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d040      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a35      	ldr	r2, [pc, #212]	; (800e2d4 <DMA_SetConfig+0x228>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d03b      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a33      	ldr	r2, [pc, #204]	; (800e2d8 <DMA_SetConfig+0x22c>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d036      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a32      	ldr	r2, [pc, #200]	; (800e2dc <DMA_SetConfig+0x230>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d031      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a30      	ldr	r2, [pc, #192]	; (800e2e0 <DMA_SetConfig+0x234>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d02c      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a2f      	ldr	r2, [pc, #188]	; (800e2e4 <DMA_SetConfig+0x238>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d027      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a2d      	ldr	r2, [pc, #180]	; (800e2e8 <DMA_SetConfig+0x23c>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d022      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a2c      	ldr	r2, [pc, #176]	; (800e2ec <DMA_SetConfig+0x240>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d01d      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a2a      	ldr	r2, [pc, #168]	; (800e2f0 <DMA_SetConfig+0x244>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d018      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a29      	ldr	r2, [pc, #164]	; (800e2f4 <DMA_SetConfig+0x248>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d013      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a27      	ldr	r2, [pc, #156]	; (800e2f8 <DMA_SetConfig+0x24c>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d00e      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4a26      	ldr	r2, [pc, #152]	; (800e2fc <DMA_SetConfig+0x250>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d009      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a24      	ldr	r2, [pc, #144]	; (800e300 <DMA_SetConfig+0x254>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d004      	beq.n	800e27c <DMA_SetConfig+0x1d0>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a23      	ldr	r2, [pc, #140]	; (800e304 <DMA_SetConfig+0x258>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d101      	bne.n	800e280 <DMA_SetConfig+0x1d4>
 800e27c:	2301      	movs	r3, #1
 800e27e:	e000      	b.n	800e282 <DMA_SetConfig+0x1d6>
 800e280:	2300      	movs	r3, #0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d059      	beq.n	800e33a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e28a:	f003 031f 	and.w	r3, r3, #31
 800e28e:	223f      	movs	r2, #63	; 0x3f
 800e290:	409a      	lsls	r2, r3
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e2a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	2b40      	cmp	r3, #64	; 0x40
 800e2b4:	d138      	bne.n	800e328 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e2c6:	e086      	b.n	800e3d6 <DMA_SetConfig+0x32a>
 800e2c8:	40020010 	.word	0x40020010
 800e2cc:	40020028 	.word	0x40020028
 800e2d0:	40020040 	.word	0x40020040
 800e2d4:	40020058 	.word	0x40020058
 800e2d8:	40020070 	.word	0x40020070
 800e2dc:	40020088 	.word	0x40020088
 800e2e0:	400200a0 	.word	0x400200a0
 800e2e4:	400200b8 	.word	0x400200b8
 800e2e8:	40020410 	.word	0x40020410
 800e2ec:	40020428 	.word	0x40020428
 800e2f0:	40020440 	.word	0x40020440
 800e2f4:	40020458 	.word	0x40020458
 800e2f8:	40020470 	.word	0x40020470
 800e2fc:	40020488 	.word	0x40020488
 800e300:	400204a0 	.word	0x400204a0
 800e304:	400204b8 	.word	0x400204b8
 800e308:	58025408 	.word	0x58025408
 800e30c:	5802541c 	.word	0x5802541c
 800e310:	58025430 	.word	0x58025430
 800e314:	58025444 	.word	0x58025444
 800e318:	58025458 	.word	0x58025458
 800e31c:	5802546c 	.word	0x5802546c
 800e320:	58025480 	.word	0x58025480
 800e324:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	68ba      	ldr	r2, [r7, #8]
 800e32e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	60da      	str	r2, [r3, #12]
}
 800e338:	e04d      	b.n	800e3d6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a29      	ldr	r2, [pc, #164]	; (800e3e4 <DMA_SetConfig+0x338>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d022      	beq.n	800e38a <DMA_SetConfig+0x2de>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a27      	ldr	r2, [pc, #156]	; (800e3e8 <DMA_SetConfig+0x33c>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d01d      	beq.n	800e38a <DMA_SetConfig+0x2de>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a26      	ldr	r2, [pc, #152]	; (800e3ec <DMA_SetConfig+0x340>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d018      	beq.n	800e38a <DMA_SetConfig+0x2de>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a24      	ldr	r2, [pc, #144]	; (800e3f0 <DMA_SetConfig+0x344>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d013      	beq.n	800e38a <DMA_SetConfig+0x2de>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a23      	ldr	r2, [pc, #140]	; (800e3f4 <DMA_SetConfig+0x348>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d00e      	beq.n	800e38a <DMA_SetConfig+0x2de>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a21      	ldr	r2, [pc, #132]	; (800e3f8 <DMA_SetConfig+0x34c>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d009      	beq.n	800e38a <DMA_SetConfig+0x2de>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a20      	ldr	r2, [pc, #128]	; (800e3fc <DMA_SetConfig+0x350>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d004      	beq.n	800e38a <DMA_SetConfig+0x2de>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a1e      	ldr	r2, [pc, #120]	; (800e400 <DMA_SetConfig+0x354>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d101      	bne.n	800e38e <DMA_SetConfig+0x2e2>
 800e38a:	2301      	movs	r3, #1
 800e38c:	e000      	b.n	800e390 <DMA_SetConfig+0x2e4>
 800e38e:	2300      	movs	r3, #0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d020      	beq.n	800e3d6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e398:	f003 031f 	and.w	r3, r3, #31
 800e39c:	2201      	movs	r2, #1
 800e39e:	409a      	lsls	r2, r3
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	683a      	ldr	r2, [r7, #0]
 800e3aa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	2b40      	cmp	r3, #64	; 0x40
 800e3b2:	d108      	bne.n	800e3c6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	60da      	str	r2, [r3, #12]
}
 800e3c4:	e007      	b.n	800e3d6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	60da      	str	r2, [r3, #12]
}
 800e3d6:	bf00      	nop
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	58025408 	.word	0x58025408
 800e3e8:	5802541c 	.word	0x5802541c
 800e3ec:	58025430 	.word	0x58025430
 800e3f0:	58025444 	.word	0x58025444
 800e3f4:	58025458 	.word	0x58025458
 800e3f8:	5802546c 	.word	0x5802546c
 800e3fc:	58025480 	.word	0x58025480
 800e400:	58025494 	.word	0x58025494

0800e404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a42      	ldr	r2, [pc, #264]	; (800e51c <DMA_CalcBaseAndBitshift+0x118>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d04a      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4a41      	ldr	r2, [pc, #260]	; (800e520 <DMA_CalcBaseAndBitshift+0x11c>)
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d045      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a3f      	ldr	r2, [pc, #252]	; (800e524 <DMA_CalcBaseAndBitshift+0x120>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d040      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4a3e      	ldr	r2, [pc, #248]	; (800e528 <DMA_CalcBaseAndBitshift+0x124>)
 800e430:	4293      	cmp	r3, r2
 800e432:	d03b      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4a3c      	ldr	r2, [pc, #240]	; (800e52c <DMA_CalcBaseAndBitshift+0x128>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d036      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a3b      	ldr	r2, [pc, #236]	; (800e530 <DMA_CalcBaseAndBitshift+0x12c>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d031      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a39      	ldr	r2, [pc, #228]	; (800e534 <DMA_CalcBaseAndBitshift+0x130>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d02c      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a38      	ldr	r2, [pc, #224]	; (800e538 <DMA_CalcBaseAndBitshift+0x134>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d027      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a36      	ldr	r2, [pc, #216]	; (800e53c <DMA_CalcBaseAndBitshift+0x138>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d022      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a35      	ldr	r2, [pc, #212]	; (800e540 <DMA_CalcBaseAndBitshift+0x13c>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d01d      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a33      	ldr	r2, [pc, #204]	; (800e544 <DMA_CalcBaseAndBitshift+0x140>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d018      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a32      	ldr	r2, [pc, #200]	; (800e548 <DMA_CalcBaseAndBitshift+0x144>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d013      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a30      	ldr	r2, [pc, #192]	; (800e54c <DMA_CalcBaseAndBitshift+0x148>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d00e      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a2f      	ldr	r2, [pc, #188]	; (800e550 <DMA_CalcBaseAndBitshift+0x14c>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d009      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a2d      	ldr	r2, [pc, #180]	; (800e554 <DMA_CalcBaseAndBitshift+0x150>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d004      	beq.n	800e4ac <DMA_CalcBaseAndBitshift+0xa8>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a2c      	ldr	r2, [pc, #176]	; (800e558 <DMA_CalcBaseAndBitshift+0x154>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d101      	bne.n	800e4b0 <DMA_CalcBaseAndBitshift+0xac>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e000      	b.n	800e4b2 <DMA_CalcBaseAndBitshift+0xae>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d024      	beq.n	800e500 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	3b10      	subs	r3, #16
 800e4be:	4a27      	ldr	r2, [pc, #156]	; (800e55c <DMA_CalcBaseAndBitshift+0x158>)
 800e4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c4:	091b      	lsrs	r3, r3, #4
 800e4c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f003 0307 	and.w	r3, r3, #7
 800e4ce:	4a24      	ldr	r2, [pc, #144]	; (800e560 <DMA_CalcBaseAndBitshift+0x15c>)
 800e4d0:	5cd3      	ldrb	r3, [r2, r3]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d908      	bls.n	800e4f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	4b1f      	ldr	r3, [pc, #124]	; (800e564 <DMA_CalcBaseAndBitshift+0x160>)
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	1d1a      	adds	r2, r3, #4
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	659a      	str	r2, [r3, #88]	; 0x58
 800e4ee:	e00d      	b.n	800e50c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	4b1b      	ldr	r3, [pc, #108]	; (800e564 <DMA_CalcBaseAndBitshift+0x160>)
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	6593      	str	r3, [r2, #88]	; 0x58
 800e4fe:	e005      	b.n	800e50c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr
 800e51c:	40020010 	.word	0x40020010
 800e520:	40020028 	.word	0x40020028
 800e524:	40020040 	.word	0x40020040
 800e528:	40020058 	.word	0x40020058
 800e52c:	40020070 	.word	0x40020070
 800e530:	40020088 	.word	0x40020088
 800e534:	400200a0 	.word	0x400200a0
 800e538:	400200b8 	.word	0x400200b8
 800e53c:	40020410 	.word	0x40020410
 800e540:	40020428 	.word	0x40020428
 800e544:	40020440 	.word	0x40020440
 800e548:	40020458 	.word	0x40020458
 800e54c:	40020470 	.word	0x40020470
 800e550:	40020488 	.word	0x40020488
 800e554:	400204a0 	.word	0x400204a0
 800e558:	400204b8 	.word	0x400204b8
 800e55c:	aaaaaaab 	.word	0xaaaaaaab
 800e560:	08027c08 	.word	0x08027c08
 800e564:	fffffc00 	.word	0xfffffc00

0800e568 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	699b      	ldr	r3, [r3, #24]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d120      	bne.n	800e5be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e580:	2b03      	cmp	r3, #3
 800e582:	d858      	bhi.n	800e636 <DMA_CheckFifoParam+0xce>
 800e584:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <DMA_CheckFifoParam+0x24>)
 800e586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58a:	bf00      	nop
 800e58c:	0800e59d 	.word	0x0800e59d
 800e590:	0800e5af 	.word	0x0800e5af
 800e594:	0800e59d 	.word	0x0800e59d
 800e598:	0800e637 	.word	0x0800e637
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d048      	beq.n	800e63a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e5ac:	e045      	b.n	800e63a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e5b6:	d142      	bne.n	800e63e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e5bc:	e03f      	b.n	800e63e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5c6:	d123      	bne.n	800e610 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	d838      	bhi.n	800e642 <DMA_CheckFifoParam+0xda>
 800e5d0:	a201      	add	r2, pc, #4	; (adr r2, 800e5d8 <DMA_CheckFifoParam+0x70>)
 800e5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d6:	bf00      	nop
 800e5d8:	0800e5e9 	.word	0x0800e5e9
 800e5dc:	0800e5ef 	.word	0x0800e5ef
 800e5e0:	0800e5e9 	.word	0x0800e5e9
 800e5e4:	0800e601 	.word	0x0800e601
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	73fb      	strb	r3, [r7, #15]
        break;
 800e5ec:	e030      	b.n	800e650 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d025      	beq.n	800e646 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e5fe:	e022      	b.n	800e646 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e608:	d11f      	bne.n	800e64a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e60e:	e01c      	b.n	800e64a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e614:	2b02      	cmp	r3, #2
 800e616:	d902      	bls.n	800e61e <DMA_CheckFifoParam+0xb6>
 800e618:	2b03      	cmp	r3, #3
 800e61a:	d003      	beq.n	800e624 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e61c:	e018      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e61e:	2301      	movs	r3, #1
 800e620:	73fb      	strb	r3, [r7, #15]
        break;
 800e622:	e015      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00e      	beq.n	800e64e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e630:	2301      	movs	r3, #1
 800e632:	73fb      	strb	r3, [r7, #15]
    break;
 800e634:	e00b      	b.n	800e64e <DMA_CheckFifoParam+0xe6>
        break;
 800e636:	bf00      	nop
 800e638:	e00a      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
        break;
 800e63a:	bf00      	nop
 800e63c:	e008      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
        break;
 800e63e:	bf00      	nop
 800e640:	e006      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
        break;
 800e642:	bf00      	nop
 800e644:	e004      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
        break;
 800e646:	bf00      	nop
 800e648:	e002      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
        break;
 800e64a:	bf00      	nop
 800e64c:	e000      	b.n	800e650 <DMA_CheckFifoParam+0xe8>
    break;
 800e64e:	bf00      	nop
    }
  }

  return status;
 800e650:	7bfb      	ldrb	r3, [r7, #15]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop

0800e660 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a38      	ldr	r2, [pc, #224]	; (800e754 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d022      	beq.n	800e6be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a36      	ldr	r2, [pc, #216]	; (800e758 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d01d      	beq.n	800e6be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a35      	ldr	r2, [pc, #212]	; (800e75c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d018      	beq.n	800e6be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a33      	ldr	r2, [pc, #204]	; (800e760 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d013      	beq.n	800e6be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a32      	ldr	r2, [pc, #200]	; (800e764 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d00e      	beq.n	800e6be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a30      	ldr	r2, [pc, #192]	; (800e768 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d009      	beq.n	800e6be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a2f      	ldr	r2, [pc, #188]	; (800e76c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d004      	beq.n	800e6be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a2d      	ldr	r2, [pc, #180]	; (800e770 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d101      	bne.n	800e6c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e000      	b.n	800e6c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d01a      	beq.n	800e6fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	3b08      	subs	r3, #8
 800e6d0:	4a28      	ldr	r2, [pc, #160]	; (800e774 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6d6:	091b      	lsrs	r3, r3, #4
 800e6d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	4b26      	ldr	r3, [pc, #152]	; (800e778 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e6de:	4413      	add	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a24      	ldr	r2, [pc, #144]	; (800e77c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e6ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f003 031f 	and.w	r3, r3, #31
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	409a      	lsls	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e6fc:	e024      	b.n	800e748 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	b2db      	uxtb	r3, r3
 800e704:	3b10      	subs	r3, #16
 800e706:	4a1e      	ldr	r2, [pc, #120]	; (800e780 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e708:	fba2 2303 	umull	r2, r3, r2, r3
 800e70c:	091b      	lsrs	r3, r3, #4
 800e70e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	4a1c      	ldr	r2, [pc, #112]	; (800e784 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d806      	bhi.n	800e726 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	4a1b      	ldr	r2, [pc, #108]	; (800e788 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d902      	bls.n	800e726 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	3308      	adds	r3, #8
 800e724:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e726:	68fa      	ldr	r2, [r7, #12]
 800e728:	4b18      	ldr	r3, [pc, #96]	; (800e78c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e72a:	4413      	add	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	461a      	mov	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a16      	ldr	r2, [pc, #88]	; (800e790 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e738:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f003 031f 	and.w	r3, r3, #31
 800e740:	2201      	movs	r2, #1
 800e742:	409a      	lsls	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	669a      	str	r2, [r3, #104]	; 0x68
}
 800e748:	bf00      	nop
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	58025408 	.word	0x58025408
 800e758:	5802541c 	.word	0x5802541c
 800e75c:	58025430 	.word	0x58025430
 800e760:	58025444 	.word	0x58025444
 800e764:	58025458 	.word	0x58025458
 800e768:	5802546c 	.word	0x5802546c
 800e76c:	58025480 	.word	0x58025480
 800e770:	58025494 	.word	0x58025494
 800e774:	cccccccd 	.word	0xcccccccd
 800e778:	16009600 	.word	0x16009600
 800e77c:	58025880 	.word	0x58025880
 800e780:	aaaaaaab 	.word	0xaaaaaaab
 800e784:	400204b8 	.word	0x400204b8
 800e788:	4002040f 	.word	0x4002040f
 800e78c:	10008200 	.word	0x10008200
 800e790:	40020880 	.word	0x40020880

0800e794 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d04a      	beq.n	800e840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2b08      	cmp	r3, #8
 800e7ae:	d847      	bhi.n	800e840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a25      	ldr	r2, [pc, #148]	; (800e84c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d022      	beq.n	800e800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4a24      	ldr	r2, [pc, #144]	; (800e850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d01d      	beq.n	800e800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a22      	ldr	r2, [pc, #136]	; (800e854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d018      	beq.n	800e800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	4a21      	ldr	r2, [pc, #132]	; (800e858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d013      	beq.n	800e800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a1f      	ldr	r2, [pc, #124]	; (800e85c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d00e      	beq.n	800e800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a1e      	ldr	r2, [pc, #120]	; (800e860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d009      	beq.n	800e800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a1c      	ldr	r2, [pc, #112]	; (800e864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d004      	beq.n	800e800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a1b      	ldr	r2, [pc, #108]	; (800e868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d101      	bne.n	800e804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e800:	2301      	movs	r3, #1
 800e802:	e000      	b.n	800e806 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e804:	2300      	movs	r3, #0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00a      	beq.n	800e820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	4b17      	ldr	r3, [pc, #92]	; (800e86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e80e:	4413      	add	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	461a      	mov	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a15      	ldr	r2, [pc, #84]	; (800e870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e81c:	671a      	str	r2, [r3, #112]	; 0x70
 800e81e:	e009      	b.n	800e834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	4b14      	ldr	r3, [pc, #80]	; (800e874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e824:	4413      	add	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	461a      	mov	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4a11      	ldr	r2, [pc, #68]	; (800e878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e832:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	3b01      	subs	r3, #1
 800e838:	2201      	movs	r2, #1
 800e83a:	409a      	lsls	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800e840:	bf00      	nop
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	58025408 	.word	0x58025408
 800e850:	5802541c 	.word	0x5802541c
 800e854:	58025430 	.word	0x58025430
 800e858:	58025444 	.word	0x58025444
 800e85c:	58025458 	.word	0x58025458
 800e860:	5802546c 	.word	0x5802546c
 800e864:	58025480 	.word	0x58025480
 800e868:	58025494 	.word	0x58025494
 800e86c:	1600963f 	.word	0x1600963f
 800e870:	58025940 	.word	0x58025940
 800e874:	1000823f 	.word	0x1000823f
 800e878:	40020940 	.word	0x40020940

0800e87c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b089      	sub	sp, #36	; 0x24
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e886:	2300      	movs	r3, #0
 800e888:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e88a:	4b89      	ldr	r3, [pc, #548]	; (800eab0 <HAL_GPIO_Init+0x234>)
 800e88c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e88e:	e194      	b.n	800ebba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	2101      	movs	r1, #1
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	fa01 f303 	lsl.w	r3, r1, r3
 800e89c:	4013      	ands	r3, r2
 800e89e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 8186 	beq.w	800ebb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	f003 0303 	and.w	r3, r3, #3
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d005      	beq.n	800e8c0 <HAL_GPIO_Init+0x44>
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	f003 0303 	and.w	r3, r3, #3
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d130      	bne.n	800e922 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	005b      	lsls	r3, r3, #1
 800e8ca:	2203      	movs	r2, #3
 800e8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d0:	43db      	mvns	r3, r3
 800e8d2:	69ba      	ldr	r2, [r7, #24]
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	68da      	ldr	r2, [r3, #12]
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	005b      	lsls	r3, r3, #1
 800e8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	69ba      	ldr	r2, [r7, #24]
 800e8ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e8fe:	43db      	mvns	r3, r3
 800e900:	69ba      	ldr	r2, [r7, #24]
 800e902:	4013      	ands	r3, r2
 800e904:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	091b      	lsrs	r3, r3, #4
 800e90c:	f003 0201 	and.w	r2, r3, #1
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	fa02 f303 	lsl.w	r3, r2, r3
 800e916:	69ba      	ldr	r2, [r7, #24]
 800e918:	4313      	orrs	r3, r2
 800e91a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	69ba      	ldr	r2, [r7, #24]
 800e920:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	f003 0303 	and.w	r3, r3, #3
 800e92a:	2b03      	cmp	r3, #3
 800e92c:	d017      	beq.n	800e95e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	2203      	movs	r2, #3
 800e93a:	fa02 f303 	lsl.w	r3, r2, r3
 800e93e:	43db      	mvns	r3, r3
 800e940:	69ba      	ldr	r2, [r7, #24]
 800e942:	4013      	ands	r3, r2
 800e944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	689a      	ldr	r2, [r3, #8]
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	fa02 f303 	lsl.w	r3, r2, r3
 800e952:	69ba      	ldr	r2, [r7, #24]
 800e954:	4313      	orrs	r3, r2
 800e956:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	69ba      	ldr	r2, [r7, #24]
 800e95c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	f003 0303 	and.w	r3, r3, #3
 800e966:	2b02      	cmp	r3, #2
 800e968:	d123      	bne.n	800e9b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	08da      	lsrs	r2, r3, #3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	3208      	adds	r2, #8
 800e972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	f003 0307 	and.w	r3, r3, #7
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	220f      	movs	r2, #15
 800e982:	fa02 f303 	lsl.w	r3, r2, r3
 800e986:	43db      	mvns	r3, r3
 800e988:	69ba      	ldr	r2, [r7, #24]
 800e98a:	4013      	ands	r3, r2
 800e98c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	691a      	ldr	r2, [r3, #16]
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	f003 0307 	and.w	r3, r3, #7
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	fa02 f303 	lsl.w	r3, r2, r3
 800e99e:	69ba      	ldr	r2, [r7, #24]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	08da      	lsrs	r2, r3, #3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	3208      	adds	r2, #8
 800e9ac:	69b9      	ldr	r1, [r7, #24]
 800e9ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	2203      	movs	r2, #3
 800e9be:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c2:	43db      	mvns	r3, r3
 800e9c4:	69ba      	ldr	r2, [r7, #24]
 800e9c6:	4013      	ands	r3, r2
 800e9c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	f003 0203 	and.w	r2, r3, #3
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	005b      	lsls	r3, r3, #1
 800e9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e9da:	69ba      	ldr	r2, [r7, #24]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	69ba      	ldr	r2, [r7, #24]
 800e9e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f000 80e0 	beq.w	800ebb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e9f4:	4b2f      	ldr	r3, [pc, #188]	; (800eab4 <HAL_GPIO_Init+0x238>)
 800e9f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e9fa:	4a2e      	ldr	r2, [pc, #184]	; (800eab4 <HAL_GPIO_Init+0x238>)
 800e9fc:	f043 0302 	orr.w	r3, r3, #2
 800ea00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ea04:	4b2b      	ldr	r3, [pc, #172]	; (800eab4 <HAL_GPIO_Init+0x238>)
 800ea06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ea0a:	f003 0302 	and.w	r3, r3, #2
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ea12:	4a29      	ldr	r2, [pc, #164]	; (800eab8 <HAL_GPIO_Init+0x23c>)
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	089b      	lsrs	r3, r3, #2
 800ea18:	3302      	adds	r3, #2
 800ea1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	f003 0303 	and.w	r3, r3, #3
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	220f      	movs	r2, #15
 800ea2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea2e:	43db      	mvns	r3, r3
 800ea30:	69ba      	ldr	r2, [r7, #24]
 800ea32:	4013      	ands	r3, r2
 800ea34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a20      	ldr	r2, [pc, #128]	; (800eabc <HAL_GPIO_Init+0x240>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d052      	beq.n	800eae4 <HAL_GPIO_Init+0x268>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a1f      	ldr	r2, [pc, #124]	; (800eac0 <HAL_GPIO_Init+0x244>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d031      	beq.n	800eaaa <HAL_GPIO_Init+0x22e>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a1e      	ldr	r2, [pc, #120]	; (800eac4 <HAL_GPIO_Init+0x248>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d02b      	beq.n	800eaa6 <HAL_GPIO_Init+0x22a>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a1d      	ldr	r2, [pc, #116]	; (800eac8 <HAL_GPIO_Init+0x24c>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d025      	beq.n	800eaa2 <HAL_GPIO_Init+0x226>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a1c      	ldr	r2, [pc, #112]	; (800eacc <HAL_GPIO_Init+0x250>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d01f      	beq.n	800ea9e <HAL_GPIO_Init+0x222>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a1b      	ldr	r2, [pc, #108]	; (800ead0 <HAL_GPIO_Init+0x254>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d019      	beq.n	800ea9a <HAL_GPIO_Init+0x21e>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a1a      	ldr	r2, [pc, #104]	; (800ead4 <HAL_GPIO_Init+0x258>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d013      	beq.n	800ea96 <HAL_GPIO_Init+0x21a>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a19      	ldr	r2, [pc, #100]	; (800ead8 <HAL_GPIO_Init+0x25c>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d00d      	beq.n	800ea92 <HAL_GPIO_Init+0x216>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	4a18      	ldr	r2, [pc, #96]	; (800eadc <HAL_GPIO_Init+0x260>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d007      	beq.n	800ea8e <HAL_GPIO_Init+0x212>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4a17      	ldr	r2, [pc, #92]	; (800eae0 <HAL_GPIO_Init+0x264>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d101      	bne.n	800ea8a <HAL_GPIO_Init+0x20e>
 800ea86:	2309      	movs	r3, #9
 800ea88:	e02d      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800ea8a:	230a      	movs	r3, #10
 800ea8c:	e02b      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800ea8e:	2308      	movs	r3, #8
 800ea90:	e029      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800ea92:	2307      	movs	r3, #7
 800ea94:	e027      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800ea96:	2306      	movs	r3, #6
 800ea98:	e025      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800ea9a:	2305      	movs	r3, #5
 800ea9c:	e023      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800ea9e:	2304      	movs	r3, #4
 800eaa0:	e021      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	e01f      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800eaa6:	2302      	movs	r3, #2
 800eaa8:	e01d      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e01b      	b.n	800eae6 <HAL_GPIO_Init+0x26a>
 800eaae:	bf00      	nop
 800eab0:	58000080 	.word	0x58000080
 800eab4:	58024400 	.word	0x58024400
 800eab8:	58000400 	.word	0x58000400
 800eabc:	58020000 	.word	0x58020000
 800eac0:	58020400 	.word	0x58020400
 800eac4:	58020800 	.word	0x58020800
 800eac8:	58020c00 	.word	0x58020c00
 800eacc:	58021000 	.word	0x58021000
 800ead0:	58021400 	.word	0x58021400
 800ead4:	58021800 	.word	0x58021800
 800ead8:	58021c00 	.word	0x58021c00
 800eadc:	58022000 	.word	0x58022000
 800eae0:	58022400 	.word	0x58022400
 800eae4:	2300      	movs	r3, #0
 800eae6:	69fa      	ldr	r2, [r7, #28]
 800eae8:	f002 0203 	and.w	r2, r2, #3
 800eaec:	0092      	lsls	r2, r2, #2
 800eaee:	4093      	lsls	r3, r2
 800eaf0:	69ba      	ldr	r2, [r7, #24]
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800eaf6:	4938      	ldr	r1, [pc, #224]	; (800ebd8 <HAL_GPIO_Init+0x35c>)
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	089b      	lsrs	r3, r3, #2
 800eafc:	3302      	adds	r3, #2
 800eafe:	69ba      	ldr	r2, [r7, #24]
 800eb00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800eb04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	43db      	mvns	r3, r3
 800eb10:	69ba      	ldr	r2, [r7, #24]
 800eb12:	4013      	ands	r3, r2
 800eb14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d003      	beq.n	800eb2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800eb22:	69ba      	ldr	r2, [r7, #24]
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	4313      	orrs	r3, r2
 800eb28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800eb2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800eb32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	43db      	mvns	r3, r3
 800eb3e:	69ba      	ldr	r2, [r7, #24]
 800eb40:	4013      	ands	r3, r2
 800eb42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d003      	beq.n	800eb58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800eb50:	69ba      	ldr	r2, [r7, #24]
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	4313      	orrs	r3, r2
 800eb56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800eb58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	43db      	mvns	r3, r3
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d003      	beq.n	800eb84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	69ba      	ldr	r2, [r7, #24]
 800eb88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	43db      	mvns	r3, r3
 800eb94:	69ba      	ldr	r2, [r7, #24]
 800eb96:	4013      	ands	r3, r2
 800eb98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d003      	beq.n	800ebae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800eba6:	69ba      	ldr	r2, [r7, #24]
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f47f ae63 	bne.w	800e890 <HAL_GPIO_Init+0x14>
  }
}
 800ebca:	bf00      	nop
 800ebcc:	bf00      	nop
 800ebce:	3724      	adds	r7, #36	; 0x24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr
 800ebd8:	58000400 	.word	0x58000400

0800ebdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	691a      	ldr	r2, [r3, #16]
 800ebec:	887b      	ldrh	r3, [r7, #2]
 800ebee:	4013      	ands	r3, r2
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d002      	beq.n	800ebfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	73fb      	strb	r3, [r7, #15]
 800ebf8:	e001      	b.n	800ebfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	807b      	strh	r3, [r7, #2]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ec1c:	787b      	ldrb	r3, [r7, #1]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ec22:	887a      	ldrh	r2, [r7, #2]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ec28:	e003      	b.n	800ec32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ec2a:	887b      	ldrh	r3, [r7, #2]
 800ec2c:	041a      	lsls	r2, r3, #16
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	619a      	str	r2, [r3, #24]
}
 800ec32:	bf00      	nop
 800ec34:	370c      	adds	r7, #12
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
	...

0800ec40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d101      	bne.n	800ec52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e07f      	b.n	800ed52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d106      	bne.n	800ec6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f7f7 fe3c 	bl	80068e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2224      	movs	r2, #36	; 0x24
 800ec70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f022 0201 	bic.w	r2, r2, #1
 800ec82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685a      	ldr	r2, [r3, #4]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ec90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	689a      	ldr	r2, [r3, #8]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d107      	bne.n	800ecba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	689a      	ldr	r2, [r3, #8]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ecb6:	609a      	str	r2, [r3, #8]
 800ecb8:	e006      	b.n	800ecc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	689a      	ldr	r2, [r3, #8]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ecc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d104      	bne.n	800ecda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6859      	ldr	r1, [r3, #4]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	4b1d      	ldr	r3, [pc, #116]	; (800ed5c <HAL_I2C_Init+0x11c>)
 800ece6:	430b      	orrs	r3, r1
 800ece8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	68da      	ldr	r2, [r3, #12]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ecf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	691a      	ldr	r2, [r3, #16]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	695b      	ldr	r3, [r3, #20]
 800ed02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	699b      	ldr	r3, [r3, #24]
 800ed0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	430a      	orrs	r2, r1
 800ed12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	69d9      	ldr	r1, [r3, #28]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a1a      	ldr	r2, [r3, #32]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	430a      	orrs	r2, r1
 800ed22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f042 0201 	orr.w	r2, r2, #1
 800ed32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2220      	movs	r2, #32
 800ed3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	02008000 	.word	0x02008000

0800ed60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af02      	add	r7, sp, #8
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	607a      	str	r2, [r7, #4]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	817b      	strh	r3, [r7, #10]
 800ed70:	4613      	mov	r3, r2
 800ed72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	2b20      	cmp	r3, #32
 800ed7e:	f040 80da 	bne.w	800ef36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d101      	bne.n	800ed90 <HAL_I2C_Master_Transmit+0x30>
 800ed8c:	2302      	movs	r3, #2
 800ed8e:	e0d3      	b.n	800ef38 <HAL_I2C_Master_Transmit+0x1d8>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ed98:	f7fb f910 	bl	8009fbc <HAL_GetTick>
 800ed9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	2319      	movs	r3, #25
 800eda4:	2201      	movs	r2, #1
 800eda6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 fbc6 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800edb6:	2301      	movs	r3, #1
 800edb8:	e0be      	b.n	800ef38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2221      	movs	r2, #33	; 0x21
 800edbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2210      	movs	r2, #16
 800edc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2200      	movs	r2, #0
 800edce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	893a      	ldrh	r2, [r7, #8]
 800edda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	2bff      	cmp	r3, #255	; 0xff
 800edea:	d90e      	bls.n	800ee0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	22ff      	movs	r2, #255	; 0xff
 800edf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	8979      	ldrh	r1, [r7, #10]
 800edfa:	4b51      	ldr	r3, [pc, #324]	; (800ef40 <HAL_I2C_Master_Transmit+0x1e0>)
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f000 fd42 	bl	800f88c <I2C_TransferConfig>
 800ee08:	e06c      	b.n	800eee4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee18:	b2da      	uxtb	r2, r3
 800ee1a:	8979      	ldrh	r1, [r7, #10]
 800ee1c:	4b48      	ldr	r3, [pc, #288]	; (800ef40 <HAL_I2C_Master_Transmit+0x1e0>)
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f000 fd31 	bl	800f88c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ee2a:	e05b      	b.n	800eee4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ee2c:	697a      	ldr	r2, [r7, #20]
 800ee2e:	6a39      	ldr	r1, [r7, #32]
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f000 fbc3 	bl	800f5bc <I2C_WaitOnTXISFlagUntilTimeout>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d001      	beq.n	800ee40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e07b      	b.n	800ef38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee44:	781a      	ldrb	r2, [r3, #0]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee50:	1c5a      	adds	r2, r3, #1
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d034      	beq.n	800eee4 <HAL_I2C_Master_Transmit+0x184>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d130      	bne.n	800eee4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	6a3b      	ldr	r3, [r7, #32]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2180      	movs	r1, #128	; 0x80
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f000 fb55 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d001      	beq.n	800ee9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e04d      	b.n	800ef38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	2bff      	cmp	r3, #255	; 0xff
 800eea4:	d90e      	bls.n	800eec4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	22ff      	movs	r2, #255	; 0xff
 800eeaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eeb0:	b2da      	uxtb	r2, r3
 800eeb2:	8979      	ldrh	r1, [r7, #10]
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 fce5 	bl	800f88c <I2C_TransferConfig>
 800eec2:	e00f      	b.n	800eee4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	8979      	ldrh	r1, [r7, #10]
 800eed6:	2300      	movs	r3, #0
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f000 fcd4 	bl	800f88c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d19e      	bne.n	800ee2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eeee:	697a      	ldr	r2, [r7, #20]
 800eef0:	6a39      	ldr	r1, [r7, #32]
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f000 fba2 	bl	800f63c <I2C_WaitOnSTOPFlagUntilTimeout>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d001      	beq.n	800ef02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	e01a      	b.n	800ef38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2220      	movs	r2, #32
 800ef08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	6859      	ldr	r1, [r3, #4]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	4b0b      	ldr	r3, [pc, #44]	; (800ef44 <HAL_I2C_Master_Transmit+0x1e4>)
 800ef16:	400b      	ands	r3, r1
 800ef18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2220      	movs	r2, #32
 800ef1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	e000      	b.n	800ef38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ef36:	2302      	movs	r3, #2
  }
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	80002000 	.word	0x80002000
 800ef44:	fe00e800 	.word	0xfe00e800

0800ef48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b088      	sub	sp, #32
 800ef4c:	af02      	add	r7, sp, #8
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	4608      	mov	r0, r1
 800ef52:	4611      	mov	r1, r2
 800ef54:	461a      	mov	r2, r3
 800ef56:	4603      	mov	r3, r0
 800ef58:	817b      	strh	r3, [r7, #10]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	813b      	strh	r3, [r7, #8]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b20      	cmp	r3, #32
 800ef6c:	f040 80f9 	bne.w	800f162 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef70:	6a3b      	ldr	r3, [r7, #32]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <HAL_I2C_Mem_Write+0x34>
 800ef76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d105      	bne.n	800ef88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ef84:	2301      	movs	r3, #1
 800ef86:	e0ed      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d101      	bne.n	800ef96 <HAL_I2C_Mem_Write+0x4e>
 800ef92:	2302      	movs	r3, #2
 800ef94:	e0e6      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ef9e:	f7fb f80d 	bl	8009fbc <HAL_GetTick>
 800efa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	2319      	movs	r3, #25
 800efaa:	2201      	movs	r2, #1
 800efac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800efb0:	68f8      	ldr	r0, [r7, #12]
 800efb2:	f000 fac3 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800efbc:	2301      	movs	r3, #1
 800efbe:	e0d1      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2221      	movs	r2, #33	; 0x21
 800efc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2240      	movs	r2, #64	; 0x40
 800efcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6a3a      	ldr	r2, [r7, #32]
 800efda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800efe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2200      	movs	r2, #0
 800efe6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800efe8:	88f8      	ldrh	r0, [r7, #6]
 800efea:	893a      	ldrh	r2, [r7, #8]
 800efec:	8979      	ldrh	r1, [r7, #10]
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	9301      	str	r3, [sp, #4]
 800eff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	4603      	mov	r3, r0
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f000 f9d3 	bl	800f3a4 <I2C_RequestMemoryWrite>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d005      	beq.n	800f010 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	e0a9      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f014:	b29b      	uxth	r3, r3
 800f016:	2bff      	cmp	r3, #255	; 0xff
 800f018:	d90e      	bls.n	800f038 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	22ff      	movs	r2, #255	; 0xff
 800f01e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f024:	b2da      	uxtb	r2, r3
 800f026:	8979      	ldrh	r1, [r7, #10]
 800f028:	2300      	movs	r3, #0
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f000 fc2b 	bl	800f88c <I2C_TransferConfig>
 800f036:	e00f      	b.n	800f058 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f046:	b2da      	uxtb	r2, r3
 800f048:	8979      	ldrh	r1, [r7, #10]
 800f04a:	2300      	movs	r3, #0
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f052:	68f8      	ldr	r0, [r7, #12]
 800f054:	f000 fc1a 	bl	800f88c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f058:	697a      	ldr	r2, [r7, #20]
 800f05a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f000 faad 	bl	800f5bc <I2C_WaitOnTXISFlagUntilTimeout>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d001      	beq.n	800f06c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	e07b      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f070:	781a      	ldrb	r2, [r3, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07c:	1c5a      	adds	r2, r3, #1
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f086:	b29b      	uxth	r3, r3
 800f088:	3b01      	subs	r3, #1
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f094:	3b01      	subs	r3, #1
 800f096:	b29a      	uxth	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d034      	beq.n	800f110 <HAL_I2C_Mem_Write+0x1c8>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d130      	bne.n	800f110 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2180      	movs	r1, #128	; 0x80
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f000 fa3f 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e04d      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	2bff      	cmp	r3, #255	; 0xff
 800f0d0:	d90e      	bls.n	800f0f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	22ff      	movs	r2, #255	; 0xff
 800f0d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0dc:	b2da      	uxtb	r2, r3
 800f0de:	8979      	ldrh	r1, [r7, #10]
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 fbcf 	bl	800f88c <I2C_TransferConfig>
 800f0ee:	e00f      	b.n	800f110 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	8979      	ldrh	r1, [r7, #10]
 800f102:	2300      	movs	r3, #0
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f000 fbbe 	bl	800f88c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f114:	b29b      	uxth	r3, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	d19e      	bne.n	800f058 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f000 fa8c 	bl	800f63c <I2C_WaitOnSTOPFlagUntilTimeout>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d001      	beq.n	800f12e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e01a      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2220      	movs	r2, #32
 800f134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6859      	ldr	r1, [r3, #4]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <HAL_I2C_Mem_Write+0x224>)
 800f142:	400b      	ands	r3, r1
 800f144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2220      	movs	r2, #32
 800f14a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2200      	movs	r2, #0
 800f152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	e000      	b.n	800f164 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800f162:	2302      	movs	r3, #2
  }
}
 800f164:	4618      	mov	r0, r3
 800f166:	3718      	adds	r7, #24
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	fe00e800 	.word	0xfe00e800

0800f170 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af02      	add	r7, sp, #8
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	4608      	mov	r0, r1
 800f17a:	4611      	mov	r1, r2
 800f17c:	461a      	mov	r2, r3
 800f17e:	4603      	mov	r3, r0
 800f180:	817b      	strh	r3, [r7, #10]
 800f182:	460b      	mov	r3, r1
 800f184:	813b      	strh	r3, [r7, #8]
 800f186:	4613      	mov	r3, r2
 800f188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f190:	b2db      	uxtb	r3, r3
 800f192:	2b20      	cmp	r3, #32
 800f194:	f040 80fd 	bne.w	800f392 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <HAL_I2C_Mem_Read+0x34>
 800f19e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d105      	bne.n	800f1b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e0f1      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d101      	bne.n	800f1be <HAL_I2C_Mem_Read+0x4e>
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e0ea      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f1c6:	f7fa fef9 	bl	8009fbc <HAL_GetTick>
 800f1ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	9300      	str	r3, [sp, #0]
 800f1d0:	2319      	movs	r3, #25
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f000 f9af 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d001      	beq.n	800f1e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e0d5      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2222      	movs	r2, #34	; 0x22
 800f1ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2240      	movs	r2, #64	; 0x40
 800f1f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6a3a      	ldr	r2, [r7, #32]
 800f202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2200      	movs	r2, #0
 800f20e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f210:	88f8      	ldrh	r0, [r7, #6]
 800f212:	893a      	ldrh	r2, [r7, #8]
 800f214:	8979      	ldrh	r1, [r7, #10]
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	4603      	mov	r3, r0
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f000 f913 	bl	800f44c <I2C_RequestMemoryRead>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d005      	beq.n	800f238 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f234:	2301      	movs	r3, #1
 800f236:	e0ad      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	2bff      	cmp	r3, #255	; 0xff
 800f240:	d90e      	bls.n	800f260 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	22ff      	movs	r2, #255	; 0xff
 800f246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f24c:	b2da      	uxtb	r2, r3
 800f24e:	8979      	ldrh	r1, [r7, #10]
 800f250:	4b52      	ldr	r3, [pc, #328]	; (800f39c <HAL_I2C_Mem_Read+0x22c>)
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f000 fb17 	bl	800f88c <I2C_TransferConfig>
 800f25e:	e00f      	b.n	800f280 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f264:	b29a      	uxth	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	8979      	ldrh	r1, [r7, #10]
 800f272:	4b4a      	ldr	r3, [pc, #296]	; (800f39c <HAL_I2C_Mem_Read+0x22c>)
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f000 fb06 	bl	800f88c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	2200      	movs	r2, #0
 800f288:	2104      	movs	r1, #4
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 f956 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800f296:	2301      	movs	r3, #1
 800f298:	e07c      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a4:	b2d2      	uxtb	r2, r2
 800f2a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ac:	1c5a      	adds	r2, r3, #1
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d034      	beq.n	800f340 <HAL_I2C_Mem_Read+0x1d0>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d130      	bne.n	800f340 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	9300      	str	r3, [sp, #0]
 800f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	2180      	movs	r1, #128	; 0x80
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f000 f927 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d001      	beq.n	800f2f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e04d      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	2bff      	cmp	r3, #255	; 0xff
 800f300:	d90e      	bls.n	800f320 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	22ff      	movs	r2, #255	; 0xff
 800f306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	8979      	ldrh	r1, [r7, #10]
 800f310:	2300      	movs	r3, #0
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	f000 fab7 	bl	800f88c <I2C_TransferConfig>
 800f31e:	e00f      	b.n	800f340 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f324:	b29a      	uxth	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	8979      	ldrh	r1, [r7, #10]
 800f332:	2300      	movs	r3, #0
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f000 faa6 	bl	800f88c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f344:	b29b      	uxth	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d19a      	bne.n	800f280 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f34a:	697a      	ldr	r2, [r7, #20]
 800f34c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f000 f974 	bl	800f63c <I2C_WaitOnSTOPFlagUntilTimeout>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d001      	beq.n	800f35e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e01a      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2220      	movs	r2, #32
 800f364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6859      	ldr	r1, [r3, #4]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	4b0b      	ldr	r3, [pc, #44]	; (800f3a0 <HAL_I2C_Mem_Read+0x230>)
 800f372:	400b      	ands	r3, r1
 800f374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2220      	movs	r2, #32
 800f37a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2200      	movs	r2, #0
 800f38a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	e000      	b.n	800f394 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800f392:	2302      	movs	r3, #2
  }
}
 800f394:	4618      	mov	r0, r3
 800f396:	3718      	adds	r7, #24
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	80002400 	.word	0x80002400
 800f3a0:	fe00e800 	.word	0xfe00e800

0800f3a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af02      	add	r7, sp, #8
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	4611      	mov	r1, r2
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	817b      	strh	r3, [r7, #10]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	813b      	strh	r3, [r7, #8]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f3be:	88fb      	ldrh	r3, [r7, #6]
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	8979      	ldrh	r1, [r7, #10]
 800f3c4:	4b20      	ldr	r3, [pc, #128]	; (800f448 <I2C_RequestMemoryWrite+0xa4>)
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f000 fa5d 	bl	800f88c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f3d2:	69fa      	ldr	r2, [r7, #28]
 800f3d4:	69b9      	ldr	r1, [r7, #24]
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f000 f8f0 	bl	800f5bc <I2C_WaitOnTXISFlagUntilTimeout>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d001      	beq.n	800f3e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e02c      	b.n	800f440 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f3e6:	88fb      	ldrh	r3, [r7, #6]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d105      	bne.n	800f3f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f3ec:	893b      	ldrh	r3, [r7, #8]
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	629a      	str	r2, [r3, #40]	; 0x28
 800f3f6:	e015      	b.n	800f424 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f3f8:	893b      	ldrh	r3, [r7, #8]
 800f3fa:	0a1b      	lsrs	r3, r3, #8
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	b2da      	uxtb	r2, r3
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f406:	69fa      	ldr	r2, [r7, #28]
 800f408:	69b9      	ldr	r1, [r7, #24]
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f000 f8d6 	bl	800f5bc <I2C_WaitOnTXISFlagUntilTimeout>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d001      	beq.n	800f41a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800f416:	2301      	movs	r3, #1
 800f418:	e012      	b.n	800f440 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f41a:	893b      	ldrh	r3, [r7, #8]
 800f41c:	b2da      	uxtb	r2, r3
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	2200      	movs	r2, #0
 800f42c:	2180      	movs	r1, #128	; 0x80
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f000 f884 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d001      	beq.n	800f43e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800f43a:	2301      	movs	r3, #1
 800f43c:	e000      	b.n	800f440 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	80002000 	.word	0x80002000

0800f44c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b086      	sub	sp, #24
 800f450:	af02      	add	r7, sp, #8
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	4608      	mov	r0, r1
 800f456:	4611      	mov	r1, r2
 800f458:	461a      	mov	r2, r3
 800f45a:	4603      	mov	r3, r0
 800f45c:	817b      	strh	r3, [r7, #10]
 800f45e:	460b      	mov	r3, r1
 800f460:	813b      	strh	r3, [r7, #8]
 800f462:	4613      	mov	r3, r2
 800f464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f466:	88fb      	ldrh	r3, [r7, #6]
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	8979      	ldrh	r1, [r7, #10]
 800f46c:	4b20      	ldr	r3, [pc, #128]	; (800f4f0 <I2C_RequestMemoryRead+0xa4>)
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	2300      	movs	r3, #0
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f000 fa0a 	bl	800f88c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f478:	69fa      	ldr	r2, [r7, #28]
 800f47a:	69b9      	ldr	r1, [r7, #24]
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f000 f89d 	bl	800f5bc <I2C_WaitOnTXISFlagUntilTimeout>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f488:	2301      	movs	r3, #1
 800f48a:	e02c      	b.n	800f4e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f48c:	88fb      	ldrh	r3, [r7, #6]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d105      	bne.n	800f49e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f492:	893b      	ldrh	r3, [r7, #8]
 800f494:	b2da      	uxtb	r2, r3
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	629a      	str	r2, [r3, #40]	; 0x28
 800f49c:	e015      	b.n	800f4ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f49e:	893b      	ldrh	r3, [r7, #8]
 800f4a0:	0a1b      	lsrs	r3, r3, #8
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f4ac:	69fa      	ldr	r2, [r7, #28]
 800f4ae:	69b9      	ldr	r1, [r7, #24]
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f000 f883 	bl	800f5bc <I2C_WaitOnTXISFlagUntilTimeout>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e012      	b.n	800f4e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f4c0:	893b      	ldrh	r3, [r7, #8]
 800f4c2:	b2da      	uxtb	r2, r3
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	2140      	movs	r1, #64	; 0x40
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f000 f831 	bl	800f53c <I2C_WaitOnFlagUntilTimeout>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e000      	b.n	800f4e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	80002000 	.word	0x80002000

0800f4f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	699b      	ldr	r3, [r3, #24]
 800f502:	f003 0302 	and.w	r3, r3, #2
 800f506:	2b02      	cmp	r3, #2
 800f508:	d103      	bne.n	800f512 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2200      	movs	r2, #0
 800f510:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d007      	beq.n	800f530 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	699a      	ldr	r2, [r3, #24]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f042 0201 	orr.w	r2, r2, #1
 800f52e:	619a      	str	r2, [r3, #24]
  }
}
 800f530:	bf00      	nop
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	603b      	str	r3, [r7, #0]
 800f548:	4613      	mov	r3, r2
 800f54a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f54c:	e022      	b.n	800f594 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f554:	d01e      	beq.n	800f594 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f556:	f7fa fd31 	bl	8009fbc <HAL_GetTick>
 800f55a:	4602      	mov	r2, r0
 800f55c:	69bb      	ldr	r3, [r7, #24]
 800f55e:	1ad3      	subs	r3, r2, r3
 800f560:	683a      	ldr	r2, [r7, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d302      	bcc.n	800f56c <I2C_WaitOnFlagUntilTimeout+0x30>
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d113      	bne.n	800f594 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f570:	f043 0220 	orr.w	r2, r3, #32
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2220      	movs	r2, #32
 800f57c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2200      	movs	r2, #0
 800f584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	e00f      	b.n	800f5b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	699a      	ldr	r2, [r3, #24]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	4013      	ands	r3, r2
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	bf0c      	ite	eq
 800f5a4:	2301      	moveq	r3, #1
 800f5a6:	2300      	movne	r3, #0
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d0cd      	beq.n	800f54e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3710      	adds	r7, #16
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f5c8:	e02c      	b.n	800f624 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	68b9      	ldr	r1, [r7, #8]
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f000 f870 	bl	800f6b4 <I2C_IsErrorOccurred>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e02a      	b.n	800f634 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e4:	d01e      	beq.n	800f624 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5e6:	f7fa fce9 	bl	8009fbc <HAL_GetTick>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d302      	bcc.n	800f5fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d113      	bne.n	800f624 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f600:	f043 0220 	orr.w	r2, r3, #32
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2220      	movs	r2, #32
 800f60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2200      	movs	r2, #0
 800f614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	e007      	b.n	800f634 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	699b      	ldr	r3, [r3, #24]
 800f62a:	f003 0302 	and.w	r3, r3, #2
 800f62e:	2b02      	cmp	r3, #2
 800f630:	d1cb      	bne.n	800f5ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f648:	e028      	b.n	800f69c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f000 f830 	bl	800f6b4 <I2C_IsErrorOccurred>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	d001      	beq.n	800f65e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	e026      	b.n	800f6ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f65e:	f7fa fcad 	bl	8009fbc <HAL_GetTick>
 800f662:	4602      	mov	r2, r0
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	68ba      	ldr	r2, [r7, #8]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d302      	bcc.n	800f674 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d113      	bne.n	800f69c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f678:	f043 0220 	orr.w	r2, r3, #32
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2220      	movs	r2, #32
 800f684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2200      	movs	r2, #0
 800f68c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2200      	movs	r2, #0
 800f694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	e007      	b.n	800f6ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	699b      	ldr	r3, [r3, #24]
 800f6a2:	f003 0320 	and.w	r3, r3, #32
 800f6a6:	2b20      	cmp	r3, #32
 800f6a8:	d1cf      	bne.n	800f64a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b08a      	sub	sp, #40	; 0x28
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	699b      	ldr	r3, [r3, #24]
 800f6cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	f003 0310 	and.w	r3, r3, #16
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d075      	beq.n	800f7cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2210      	movs	r2, #16
 800f6e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f6e8:	e056      	b.n	800f798 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f0:	d052      	beq.n	800f798 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800f6f2:	f7fa fc63 	bl	8009fbc <HAL_GetTick>
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	1ad3      	subs	r3, r2, r3
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d302      	bcc.n	800f708 <I2C_IsErrorOccurred+0x54>
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d147      	bne.n	800f798 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f712:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f71a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	699b      	ldr	r3, [r3, #24]
 800f722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f72a:	d12e      	bne.n	800f78a <I2C_IsErrorOccurred+0xd6>
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f732:	d02a      	beq.n	800f78a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800f734:	7cfb      	ldrb	r3, [r7, #19]
 800f736:	2b20      	cmp	r3, #32
 800f738:	d027      	beq.n	800f78a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	685a      	ldr	r2, [r3, #4]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f748:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800f74a:	f7fa fc37 	bl	8009fbc <HAL_GetTick>
 800f74e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f750:	e01b      	b.n	800f78a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800f752:	f7fa fc33 	bl	8009fbc <HAL_GetTick>
 800f756:	4602      	mov	r2, r0
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	2b19      	cmp	r3, #25
 800f75e:	d914      	bls.n	800f78a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f764:	f043 0220 	orr.w	r2, r3, #32
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2220      	movs	r2, #32
 800f770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2200      	movs	r2, #0
 800f780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800f784:	2301      	movs	r3, #1
 800f786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	699b      	ldr	r3, [r3, #24]
 800f790:	f003 0320 	and.w	r3, r3, #32
 800f794:	2b20      	cmp	r3, #32
 800f796:	d1dc      	bne.n	800f752 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	699b      	ldr	r3, [r3, #24]
 800f79e:	f003 0320 	and.w	r3, r3, #32
 800f7a2:	2b20      	cmp	r3, #32
 800f7a4:	d003      	beq.n	800f7ae <I2C_IsErrorOccurred+0xfa>
 800f7a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d09d      	beq.n	800f6ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800f7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d103      	bne.n	800f7be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2220      	movs	r2, #32
 800f7bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800f7be:	6a3b      	ldr	r3, [r7, #32]
 800f7c0:	f043 0304 	orr.w	r3, r3, #4
 800f7c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	699b      	ldr	r3, [r3, #24]
 800f7d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00b      	beq.n	800f7f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800f7de:	6a3b      	ldr	r3, [r7, #32]
 800f7e0:	f043 0301 	orr.w	r3, r3, #1
 800f7e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00b      	beq.n	800f818 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	f043 0308 	orr.w	r3, r3, #8
 800f806:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f812:	2301      	movs	r3, #1
 800f814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00b      	beq.n	800f83a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800f822:	6a3b      	ldr	r3, [r7, #32]
 800f824:	f043 0302 	orr.w	r3, r3, #2
 800f828:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f832:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f834:	2301      	movs	r3, #1
 800f836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800f83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d01c      	beq.n	800f87c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	f7ff fe56 	bl	800f4f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	6859      	ldr	r1, [r3, #4]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	4b0d      	ldr	r3, [pc, #52]	; (800f888 <I2C_IsErrorOccurred+0x1d4>)
 800f854:	400b      	ands	r3, r1
 800f856:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	431a      	orrs	r2, r3
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2220      	movs	r2, #32
 800f868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2200      	movs	r2, #0
 800f878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800f87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f880:	4618      	mov	r0, r3
 800f882:	3728      	adds	r7, #40	; 0x28
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	fe00e800 	.word	0xfe00e800

0800f88c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b087      	sub	sp, #28
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	607b      	str	r3, [r7, #4]
 800f896:	460b      	mov	r3, r1
 800f898:	817b      	strh	r3, [r7, #10]
 800f89a:	4613      	mov	r3, r2
 800f89c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f89e:	897b      	ldrh	r3, [r7, #10]
 800f8a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f8a4:	7a7b      	ldrb	r3, [r7, #9]
 800f8a6:	041b      	lsls	r3, r3, #16
 800f8a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f8ac:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f8b2:	6a3b      	ldr	r3, [r7, #32]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8ba:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	0d5b      	lsrs	r3, r3, #21
 800f8c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800f8ca:	4b08      	ldr	r3, [pc, #32]	; (800f8ec <I2C_TransferConfig+0x60>)
 800f8cc:	430b      	orrs	r3, r1
 800f8ce:	43db      	mvns	r3, r3
 800f8d0:	ea02 0103 	and.w	r1, r2, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	697a      	ldr	r2, [r7, #20]
 800f8da:	430a      	orrs	r2, r1
 800f8dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f8de:	bf00      	nop
 800f8e0:	371c      	adds	r7, #28
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	03ff63ff 	.word	0x03ff63ff

0800f8f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b20      	cmp	r3, #32
 800f904:	d138      	bne.n	800f978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d101      	bne.n	800f914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f910:	2302      	movs	r3, #2
 800f912:	e032      	b.n	800f97a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2201      	movs	r2, #1
 800f918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2224      	movs	r2, #36	; 0x24
 800f920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f022 0201 	bic.w	r2, r2, #1
 800f932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	6819      	ldr	r1, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	683a      	ldr	r2, [r7, #0]
 800f950:	430a      	orrs	r2, r1
 800f952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f042 0201 	orr.w	r2, r2, #1
 800f962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2220      	movs	r2, #32
 800f968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f974:	2300      	movs	r3, #0
 800f976:	e000      	b.n	800f97a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f978:	2302      	movs	r3, #2
  }
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr

0800f986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f986:	b480      	push	{r7}
 800f988:	b085      	sub	sp, #20
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f996:	b2db      	uxtb	r3, r3
 800f998:	2b20      	cmp	r3, #32
 800f99a:	d139      	bne.n	800fa10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d101      	bne.n	800f9aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f9a6:	2302      	movs	r3, #2
 800f9a8:	e033      	b.n	800fa12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2224      	movs	r2, #36	; 0x24
 800f9b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f022 0201 	bic.w	r2, r2, #1
 800f9c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f9d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	021b      	lsls	r3, r3, #8
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f042 0201 	orr.w	r2, r2, #1
 800f9fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2220      	movs	r2, #32
 800fa00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	e000      	b.n	800fa12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800fa10:	2302      	movs	r3, #2
  }
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b083      	sub	sp, #12
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d101      	bne.n	800fa30 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e017      	b.n	800fa60 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d004      	beq.n	800fa46 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2280      	movs	r2, #128	; 0x80
 800fa40:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	e00c      	b.n	800fa60 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2204      	movs	r2, #4
 800fa4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	68da      	ldr	r2, [r3, #12]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f022 0201 	bic.w	r2, r2, #1
 800fa5c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800fa74:	4b19      	ldr	r3, [pc, #100]	; (800fadc <HAL_PWREx_ConfigSupply+0x70>)
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	f003 0304 	and.w	r3, r3, #4
 800fa7c:	2b04      	cmp	r3, #4
 800fa7e:	d00a      	beq.n	800fa96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800fa80:	4b16      	ldr	r3, [pc, #88]	; (800fadc <HAL_PWREx_ConfigSupply+0x70>)
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	f003 0307 	and.w	r3, r3, #7
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d001      	beq.n	800fa92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e01f      	b.n	800fad2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800fa92:	2300      	movs	r3, #0
 800fa94:	e01d      	b.n	800fad2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800fa96:	4b11      	ldr	r3, [pc, #68]	; (800fadc <HAL_PWREx_ConfigSupply+0x70>)
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	f023 0207 	bic.w	r2, r3, #7
 800fa9e:	490f      	ldr	r1, [pc, #60]	; (800fadc <HAL_PWREx_ConfigSupply+0x70>)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4313      	orrs	r3, r2
 800faa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800faa6:	f7fa fa89 	bl	8009fbc <HAL_GetTick>
 800faaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800faac:	e009      	b.n	800fac2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800faae:	f7fa fa85 	bl	8009fbc <HAL_GetTick>
 800fab2:	4602      	mov	r2, r0
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fabc:	d901      	bls.n	800fac2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800fabe:	2301      	movs	r3, #1
 800fac0:	e007      	b.n	800fad2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800fac2:	4b06      	ldr	r3, [pc, #24]	; (800fadc <HAL_PWREx_ConfigSupply+0x70>)
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800faca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800face:	d1ee      	bne.n	800faae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	58024800 	.word	0x58024800

0800fae0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af02      	add	r7, sp, #8
 800fae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800fae8:	f7fa fa68 	bl	8009fbc <HAL_GetTick>
 800faec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d101      	bne.n	800faf8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	e05f      	b.n	800fbb8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d107      	bne.n	800fb14 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7f7 fedf 	bl	80078c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800fb0a:	f241 3188 	movw	r1, #5000	; 0x1388
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 fc68 	bl	80103e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	3b01      	subs	r3, #1
 800fb24:	021a      	lsls	r2, r3, #8
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	430a      	orrs	r2, r1
 800fb2c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	2120      	movs	r1, #32
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fc93 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 800fb40:	4603      	mov	r3, r0
 800fb42:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800fb44:	7afb      	ldrb	r3, [r7, #11]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d135      	bne.n	800fbb6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	4b1b      	ldr	r3, [pc, #108]	; (800fbc0 <HAL_QSPI_Init+0xe0>)
 800fb52:	4013      	ands	r3, r2
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	6852      	ldr	r2, [r2, #4]
 800fb58:	0611      	lsls	r1, r2, #24
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	68d2      	ldr	r2, [r2, #12]
 800fb5e:	4311      	orrs	r1, r2
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	69d2      	ldr	r2, [r2, #28]
 800fb64:	4311      	orrs	r1, r2
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	6a12      	ldr	r2, [r2, #32]
 800fb6a:	4311      	orrs	r1, r2
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	6812      	ldr	r2, [r2, #0]
 800fb70:	430b      	orrs	r3, r1
 800fb72:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	685a      	ldr	r2, [r3, #4]
 800fb7a:	4b12      	ldr	r3, [pc, #72]	; (800fbc4 <HAL_QSPI_Init+0xe4>)
 800fb7c:	4013      	ands	r3, r2
 800fb7e:	687a      	ldr	r2, [r7, #4]
 800fb80:	6912      	ldr	r2, [r2, #16]
 800fb82:	0411      	lsls	r1, r2, #16
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	6952      	ldr	r2, [r2, #20]
 800fb88:	4311      	orrs	r1, r2
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	6992      	ldr	r2, [r2, #24]
 800fb8e:	4311      	orrs	r1, r2
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	6812      	ldr	r2, [r2, #0]
 800fb94:	430b      	orrs	r3, r1
 800fb96:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f042 0201 	orr.w	r2, r2, #1
 800fba6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800fbb6:	7afb      	ldrb	r3, [r7, #11]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3710      	adds	r7, #16
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	00ffff2f 	.word	0x00ffff2f
 800fbc4:	ffe0f8fe 	.word	0xffe0f8fe

0800fbc8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	f003 0304 	and.w	r3, r3, #4
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d064      	beq.n	800fcb4 <HAL_QSPI_IRQHandler+0xec>
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d05f      	beq.n	800fcb4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	3320      	adds	r3, #32
 800fbfa:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b12      	cmp	r3, #18
 800fc06:	d125      	bne.n	800fc54 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fc08:	e01c      	b.n	800fc44 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00f      	beq.n	800fc32 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	781a      	ldrb	r2, [r3, #0]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc20:	1c5a      	adds	r2, r3, #1
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc2a:	1e5a      	subs	r2, r3, #1
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	62da      	str	r2, [r3, #44]	; 0x2c
 800fc30:	e008      	b.n	800fc44 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc40:	601a      	str	r2, [r3, #0]
          break;
 800fc42:	e033      	b.n	800fcac <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	f003 0304 	and.w	r3, r3, #4
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d1db      	bne.n	800fc0a <HAL_QSPI_IRQHandler+0x42>
 800fc52:	e02b      	b.n	800fcac <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	2b22      	cmp	r3, #34	; 0x22
 800fc5e:	d125      	bne.n	800fcac <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fc60:	e01d      	b.n	800fc9e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d010      	beq.n	800fc8c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	7812      	ldrb	r2, [r2, #0]
 800fc72:	b2d2      	uxtb	r2, r2
 800fc74:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc7a:	1c5a      	adds	r2, r3, #1
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc84:	1e5a      	subs	r2, r3, #1
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	639a      	str	r2, [r3, #56]	; 0x38
 800fc8a:	e008      	b.n	800fc9e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fc9a:	601a      	str	r2, [r3, #0]
          break;
 800fc9c:	e006      	b.n	800fcac <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	f003 0304 	and.w	r3, r3, #4
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1da      	bne.n	800fc62 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 fb7b 	bl	80103a8 <HAL_QSPI_FifoThresholdCallback>
 800fcb2:	e13c      	b.n	800ff2e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	f003 0302 	and.w	r3, r3, #2
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f000 80b0 	beq.w	800fe20 <HAL_QSPI_IRQHandler+0x258>
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f000 80aa 	beq.w	800fe20 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2202      	movs	r2, #2
 800fcd2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800fce2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	2b12      	cmp	r3, #18
 800fcee:	d120      	bne.n	800fd32 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d011      	beq.n	800fd22 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	681a      	ldr	r2, [r3, #0]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f022 0204 	bic.w	r2, r2, #4
 800fd0c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68da      	ldr	r2, [r3, #12]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f022 0201 	bic.w	r2, r2, #1
 800fd20:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2201      	movs	r2, #1
 800fd26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 fb32 	bl	8010394 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fd30:	e0fa      	b.n	800ff28 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	2b22      	cmp	r3, #34	; 0x22
 800fd3c:	d143      	bne.n	800fdc6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f003 0304 	and.w	r3, r3, #4
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d012      	beq.n	800fd72 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f022 0204 	bic.w	r2, r2, #4
 800fd5a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	68da      	ldr	r2, [r3, #12]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f022 0201 	bic.w	r2, r2, #1
 800fd6e:	60da      	str	r2, [r3, #12]
 800fd70:	e021      	b.n	800fdb6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3320      	adds	r3, #32
 800fd78:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800fd7a:	e013      	b.n	800fda4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d017      	beq.n	800fdb4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	7812      	ldrb	r2, [r2, #0]
 800fd8c:	b2d2      	uxtb	r2, r2
 800fd8e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd94:	1c5a      	adds	r2, r3, #1
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd9e:	1e5a      	subs	r2, r3, #1
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d1e4      	bne.n	800fd7c <HAL_QSPI_IRQHandler+0x1b4>
 800fdb2:	e000      	b.n	800fdb6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800fdb4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 fade 	bl	8010380 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fdc4:	e0b0      	b.n	800ff28 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d107      	bne.n	800fde2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 fac6 	bl	801036c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fde0:	e0a2      	b.n	800ff28 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	2b08      	cmp	r3, #8
 800fdec:	f040 809c 	bne.w	800ff28 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	695a      	ldr	r2, [r3, #20]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800fdfe:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2201      	movs	r2, #1
 800fe04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d103      	bne.n	800fe18 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 faa1 	bl	8010358 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fe16:	e087      	b.n	800ff28 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 fa93 	bl	8010344 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800fe1e:	e083      	b.n	800ff28 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	f003 0308 	and.w	r3, r3, #8
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d01f      	beq.n	800fe6a <HAL_QSPI_IRQHandler+0x2a2>
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d01a      	beq.n	800fe6a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2208      	movs	r2, #8
 800fe3a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00b      	beq.n	800fe62 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800fe58:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 faaa 	bl	80103bc <HAL_QSPI_StatusMatchCallback>
 800fe68:	e061      	b.n	800ff2e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d047      	beq.n	800ff04 <HAL_QSPI_IRQHandler+0x33c>
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d042      	beq.n	800ff04 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2201      	movs	r2, #1
 800fe84:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800fe94:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe9a:	f043 0202 	orr.w	r2, r3, #2
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f003 0304 	and.w	r3, r3, #4
 800feac:	2b00      	cmp	r3, #0
 800feae:	d021      	beq.n	800fef4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f022 0204 	bic.w	r2, r2, #4
 800febe:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fec4:	4a1c      	ldr	r2, [pc, #112]	; (800ff38 <HAL_QSPI_IRQHandler+0x370>)
 800fec6:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fecc:	4618      	mov	r0, r3
 800fece:	f7ff fda6 	bl	800fa1e <HAL_MDMA_Abort_IT>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d029      	beq.n	800ff2c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fedc:	f043 0204 	orr.w	r2, r3, #4
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 fa29 	bl	8010344 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800fef2:	e01b      	b.n	800ff2c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2201      	movs	r2, #1
 800fef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 fa21 	bl	8010344 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ff02:	e013      	b.n	800ff2c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	f003 0310 	and.w	r3, r3, #16
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00f      	beq.n	800ff2e <HAL_QSPI_IRQHandler+0x366>
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00a      	beq.n	800ff2e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2210      	movs	r2, #16
 800ff1e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f000 fa55 	bl	80103d0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800ff26:	e002      	b.n	800ff2e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ff28:	bf00      	nop
 800ff2a:	e000      	b.n	800ff2e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ff2c:	bf00      	nop
}
 800ff2e:	bf00      	nop
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	08010401 	.word	0x08010401

0800ff3c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b088      	sub	sp, #32
 800ff40:	af02      	add	r7, sp, #8
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ff48:	f7fa f838 	bl	8009fbc <HAL_GetTick>
 800ff4c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d101      	bne.n	800ff5e <HAL_QSPI_Command+0x22>
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	e048      	b.n	800fff0 <HAL_QSPI_Command+0xb4>
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2201      	movs	r2, #1
 800ff62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff6c:	b2db      	uxtb	r3, r3
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d137      	bne.n	800ffe2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2200      	movs	r2, #0
 800ff76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2202      	movs	r2, #2
 800ff7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	2200      	movs	r2, #0
 800ff88:	2120      	movs	r1, #32
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f000 fa6b 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 800ff90:	4603      	mov	r3, r0
 800ff92:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ff94:	7dfb      	ldrb	r3, [r7, #23]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d125      	bne.n	800ffe6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	68b9      	ldr	r1, [r7, #8]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f000 fa98 	bl	80104d4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d115      	bne.n	800ffd8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	2102      	movs	r1, #2
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f000 fa55 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ffc0:	7dfb      	ldrb	r3, [r7, #23]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d10f      	bne.n	800ffe6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2202      	movs	r2, #2
 800ffcc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffd6:	e006      	b.n	800ffe6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffe0:	e001      	b.n	800ffe6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ffe2:	2302      	movs	r3, #2
 800ffe4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ffee:	7dfb      	ldrb	r3, [r7, #23]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3718      	adds	r7, #24
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b08a      	sub	sp, #40	; 0x28
 800fffc:	af02      	add	r7, sp, #8
 800fffe:	60f8      	str	r0, [r7, #12]
 8010000:	60b9      	str	r1, [r7, #8]
 8010002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010004:	2300      	movs	r3, #0
 8010006:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8010008:	f7f9 ffd8 	bl	8009fbc <HAL_GetTick>
 801000c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	3320      	adds	r3, #32
 8010014:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801001c:	b2db      	uxtb	r3, r3
 801001e:	2b01      	cmp	r3, #1
 8010020:	d101      	bne.n	8010026 <HAL_QSPI_Transmit+0x2e>
 8010022:	2302      	movs	r3, #2
 8010024:	e076      	b.n	8010114 <HAL_QSPI_Transmit+0x11c>
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010034:	b2db      	uxtb	r3, r3
 8010036:	2b01      	cmp	r3, #1
 8010038:	d165      	bne.n	8010106 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2200      	movs	r2, #0
 801003e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d056      	beq.n	80100f4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2212      	movs	r2, #18
 801004a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	691b      	ldr	r3, [r3, #16]
 8010054:	1c5a      	adds	r2, r3, #1
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	695a      	ldr	r2, [r3, #20]
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 801007a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 801007c:	e01b      	b.n	80100b6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	2201      	movs	r2, #1
 8010086:	2104      	movs	r1, #4
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f000 f9ec 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 801008e:	4603      	mov	r3, r0
 8010090:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8010092:	7ffb      	ldrb	r3, [r7, #31]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d113      	bne.n	80100c0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009c:	781a      	ldrb	r2, [r3, #0]
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a6:	1c5a      	adds	r2, r3, #1
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b0:	1e5a      	subs	r2, r3, #1
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1df      	bne.n	801007e <HAL_QSPI_Transmit+0x86>
 80100be:	e000      	b.n	80100c2 <HAL_QSPI_Transmit+0xca>
          break;
 80100c0:	bf00      	nop
      }

      if (status == HAL_OK)
 80100c2:	7ffb      	ldrb	r3, [r7, #31]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d110      	bne.n	80100ea <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	2201      	movs	r2, #1
 80100d0:	2102      	movs	r1, #2
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f000 f9c7 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 80100d8:	4603      	mov	r3, r0
 80100da:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80100dc:	7ffb      	ldrb	r3, [r7, #31]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d103      	bne.n	80100ea <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2202      	movs	r2, #2
 80100e8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2201      	movs	r2, #1
 80100ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100f2:	e00a      	b.n	801010a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100f8:	f043 0208 	orr.w	r2, r3, #8
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8010100:	2301      	movs	r3, #1
 8010102:	77fb      	strb	r3, [r7, #31]
 8010104:	e001      	b.n	801010a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8010106:	2302      	movs	r3, #2
 8010108:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2200      	movs	r2, #0
 801010e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8010112:	7ffb      	ldrb	r3, [r7, #31]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3720      	adds	r7, #32
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b08a      	sub	sp, #40	; 0x28
 8010120:	af02      	add	r7, sp, #8
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010128:	2300      	movs	r3, #0
 801012a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 801012c:	f7f9 ff46 	bl	8009fbc <HAL_GetTick>
 8010130:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	699b      	ldr	r3, [r3, #24]
 8010138:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	3320      	adds	r3, #32
 8010140:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010148:	b2db      	uxtb	r3, r3
 801014a:	2b01      	cmp	r3, #1
 801014c:	d101      	bne.n	8010152 <HAL_QSPI_Receive+0x36>
 801014e:	2302      	movs	r3, #2
 8010150:	e07d      	b.n	801024e <HAL_QSPI_Receive+0x132>
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2201      	movs	r2, #1
 8010156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010160:	b2db      	uxtb	r3, r3
 8010162:	2b01      	cmp	r3, #1
 8010164:	d16c      	bne.n	8010240 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2200      	movs	r2, #0
 801016a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d05d      	beq.n	801022e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2222      	movs	r2, #34	; 0x22
 8010176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	1c5a      	adds	r2, r3, #1
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	695b      	ldr	r3, [r3, #20]
 801019e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80101aa:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	697a      	ldr	r2, [r7, #20]
 80101b2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80101b4:	e01c      	b.n	80101f0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	2201      	movs	r2, #1
 80101be:	2106      	movs	r1, #6
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	f000 f950 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 80101c6:	4603      	mov	r3, r0
 80101c8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80101ca:	7ffb      	ldrb	r3, [r7, #31]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d114      	bne.n	80101fa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101d4:	693a      	ldr	r2, [r7, #16]
 80101d6:	7812      	ldrb	r2, [r2, #0]
 80101d8:	b2d2      	uxtb	r2, r2
 80101da:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101e0:	1c5a      	adds	r2, r3, #1
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ea:	1e5a      	subs	r2, r3, #1
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1de      	bne.n	80101b6 <HAL_QSPI_Receive+0x9a>
 80101f8:	e000      	b.n	80101fc <HAL_QSPI_Receive+0xe0>
          break;
 80101fa:	bf00      	nop
      }

      if (status == HAL_OK)
 80101fc:	7ffb      	ldrb	r3, [r7, #31]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d110      	bne.n	8010224 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	9300      	str	r3, [sp, #0]
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2201      	movs	r2, #1
 801020a:	2102      	movs	r1, #2
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	f000 f92a 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 8010212:	4603      	mov	r3, r0
 8010214:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8010216:	7ffb      	ldrb	r3, [r7, #31]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d103      	bne.n	8010224 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2202      	movs	r2, #2
 8010222:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2201      	movs	r2, #1
 8010228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801022c:	e00a      	b.n	8010244 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010232:	f043 0208 	orr.w	r2, r3, #8
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 801023a:	2301      	movs	r3, #1
 801023c:	77fb      	strb	r3, [r7, #31]
 801023e:	e001      	b.n	8010244 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8010240:	2302      	movs	r3, #2
 8010242:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2200      	movs	r2, #0
 8010248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 801024c:	7ffb      	ldrb	r3, [r7, #31]
}
 801024e:	4618      	mov	r0, r3
 8010250:	3720      	adds	r7, #32
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b088      	sub	sp, #32
 801025a:	af02      	add	r7, sp, #8
 801025c:	60f8      	str	r0, [r7, #12]
 801025e:	60b9      	str	r1, [r7, #8]
 8010260:	607a      	str	r2, [r7, #4]
 8010262:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010264:	f7f9 feaa 	bl	8009fbc <HAL_GetTick>
 8010268:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b01      	cmp	r3, #1
 8010274:	d101      	bne.n	801027a <HAL_QSPI_AutoPolling+0x24>
 8010276:	2302      	movs	r3, #2
 8010278:	e060      	b.n	801033c <HAL_QSPI_AutoPolling+0xe6>
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2201      	movs	r2, #1
 801027e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b01      	cmp	r3, #1
 801028c:	d14f      	bne.n	801032e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2200      	movs	r2, #0
 8010292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2242      	movs	r2, #66	; 0x42
 8010298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	2200      	movs	r2, #0
 80102a4:	2120      	movs	r1, #32
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f000 f8dd 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 80102ac:	4603      	mov	r3, r0
 80102ae:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80102b0:	7dfb      	ldrb	r3, [r7, #23]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d13d      	bne.n	8010332 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	6812      	ldr	r2, [r2, #0]
 80102be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	6852      	ldr	r2, [r2, #4]
 80102c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	6892      	ldr	r2, [r2, #8]
 80102d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	691b      	ldr	r3, [r3, #16]
 80102e2:	431a      	orrs	r2, r3
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80102ec:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	68da      	ldr	r2, [r3, #12]
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80102f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80102fa:	68b9      	ldr	r1, [r7, #8]
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f000 f8e9 	bl	80104d4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	9300      	str	r3, [sp, #0]
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	2201      	movs	r2, #1
 801030a:	2108      	movs	r1, #8
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f000 f8aa 	bl	8010466 <QSPI_WaitFlagStateUntilTimeout>
 8010312:	4603      	mov	r3, r0
 8010314:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8010316:	7dfb      	ldrb	r3, [r7, #23]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10a      	bne.n	8010332 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2208      	movs	r2, #8
 8010322:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801032c:	e001      	b.n	8010332 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 801032e:	2302      	movs	r3, #2
 8010330:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801033a:	7dfb      	ldrb	r3, [r7, #23]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3718      	adds	r7, #24
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8010374:	bf00      	nop
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8010388:	bf00      	nop
 801038a:	370c      	adds	r7, #12
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr

08010394 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 801039c:	bf00      	nop
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80103b0:	bf00      	nop
 80103b2:	370c      	adds	r7, #12
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr

080103bc <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80103c4:	bf00      	nop
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80103d8:	bf00      	nop
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801040c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2200      	movs	r2, #0
 8010418:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b08      	cmp	r3, #8
 8010424:	d114      	bne.n	8010450 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2202      	movs	r2, #2
 801042c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801043c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f042 0202 	orr.w	r2, r2, #2
 801044c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 801044e:	e006      	b.n	801045e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2201      	movs	r2, #1
 8010454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f7ff ff73 	bl	8010344 <HAL_QSPI_ErrorCallback>
}
 801045e:	bf00      	nop
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b084      	sub	sp, #16
 801046a:	af00      	add	r7, sp, #0
 801046c:	60f8      	str	r0, [r7, #12]
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	603b      	str	r3, [r7, #0]
 8010472:	4613      	mov	r3, r2
 8010474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010476:	e01a      	b.n	80104ae <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801047e:	d016      	beq.n	80104ae <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010480:	f7f9 fd9c 	bl	8009fbc <HAL_GetTick>
 8010484:	4602      	mov	r2, r0
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	1ad3      	subs	r3, r2, r3
 801048a:	69ba      	ldr	r2, [r7, #24]
 801048c:	429a      	cmp	r2, r3
 801048e:	d302      	bcc.n	8010496 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d10b      	bne.n	80104ae <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2204      	movs	r2, #4
 801049a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a2:	f043 0201 	orr.w	r2, r3, #1
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80104aa:	2301      	movs	r3, #1
 80104ac:	e00e      	b.n	80104cc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	689a      	ldr	r2, [r3, #8]
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	4013      	ands	r3, r2
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	bf14      	ite	ne
 80104bc:	2301      	movne	r3, #1
 80104be:	2300      	moveq	r3, #0
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	461a      	mov	r2, r3
 80104c4:	79fb      	ldrb	r3, [r7, #7]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d1d6      	bne.n	8010478 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b085      	sub	sp, #20
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	60b9      	str	r1, [r7, #8]
 80104de:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d009      	beq.n	80104fc <QSPI_Config+0x28>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80104ee:	d005      	beq.n	80104fc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3a01      	subs	r2, #1
 80104fa:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	699b      	ldr	r3, [r3, #24]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f000 80b9 	beq.w	8010678 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	6a1b      	ldr	r3, [r3, #32]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d05f      	beq.n	80105ce <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	6892      	ldr	r2, [r2, #8]
 8010516:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	69db      	ldr	r3, [r3, #28]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d031      	beq.n	8010584 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010528:	431a      	orrs	r2, r3
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801052e:	431a      	orrs	r2, r3
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010534:	431a      	orrs	r2, r3
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	695b      	ldr	r3, [r3, #20]
 801053a:	049b      	lsls	r3, r3, #18
 801053c:	431a      	orrs	r2, r3
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	431a      	orrs	r2, r3
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	431a      	orrs	r2, r3
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	431a      	orrs	r2, r3
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	69db      	ldr	r3, [r3, #28]
 8010554:	431a      	orrs	r2, r3
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	699b      	ldr	r3, [r3, #24]
 801055a:	431a      	orrs	r2, r3
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	ea42 0103 	orr.w	r1, r2, r3
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	430a      	orrs	r2, r1
 801056c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010574:	f000 812e 	beq.w	80107d4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68ba      	ldr	r2, [r7, #8]
 801057e:	6852      	ldr	r2, [r2, #4]
 8010580:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8010582:	e127      	b.n	80107d4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058c:	431a      	orrs	r2, r3
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010592:	431a      	orrs	r2, r3
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010598:	431a      	orrs	r2, r3
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	695b      	ldr	r3, [r3, #20]
 801059e:	049b      	lsls	r3, r3, #18
 80105a0:	431a      	orrs	r2, r3
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	691b      	ldr	r3, [r3, #16]
 80105a6:	431a      	orrs	r2, r3
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	6a1b      	ldr	r3, [r3, #32]
 80105ac:	431a      	orrs	r2, r3
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	69db      	ldr	r3, [r3, #28]
 80105b2:	431a      	orrs	r2, r3
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	699b      	ldr	r3, [r3, #24]
 80105b8:	431a      	orrs	r2, r3
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	ea42 0103 	orr.w	r1, r2, r3
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	430a      	orrs	r2, r1
 80105ca:	615a      	str	r2, [r3, #20]
}
 80105cc:	e102      	b.n	80107d4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	69db      	ldr	r3, [r3, #28]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d02e      	beq.n	8010634 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105de:	431a      	orrs	r2, r3
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e4:	431a      	orrs	r2, r3
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ea:	431a      	orrs	r2, r3
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	695b      	ldr	r3, [r3, #20]
 80105f0:	049b      	lsls	r3, r3, #18
 80105f2:	431a      	orrs	r2, r3
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	6a1b      	ldr	r3, [r3, #32]
 80105f8:	431a      	orrs	r2, r3
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	431a      	orrs	r2, r3
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	69db      	ldr	r3, [r3, #28]
 8010604:	431a      	orrs	r2, r3
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	699b      	ldr	r3, [r3, #24]
 801060a:	431a      	orrs	r2, r3
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	ea42 0103 	orr.w	r1, r2, r3
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	430a      	orrs	r2, r1
 801061c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010624:	f000 80d6 	beq.w	80107d4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	6852      	ldr	r2, [r2, #4]
 8010630:	619a      	str	r2, [r3, #24]
}
 8010632:	e0cf      	b.n	80107d4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801063c:	431a      	orrs	r2, r3
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010642:	431a      	orrs	r2, r3
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010648:	431a      	orrs	r2, r3
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	049b      	lsls	r3, r3, #18
 8010650:	431a      	orrs	r2, r3
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	6a1b      	ldr	r3, [r3, #32]
 8010656:	431a      	orrs	r2, r3
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	69db      	ldr	r3, [r3, #28]
 801065c:	431a      	orrs	r2, r3
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	699b      	ldr	r3, [r3, #24]
 8010662:	431a      	orrs	r2, r3
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	ea42 0103 	orr.w	r1, r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	430a      	orrs	r2, r1
 8010674:	615a      	str	r2, [r3, #20]
}
 8010676:	e0ad      	b.n	80107d4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d058      	beq.n	8010732 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	6892      	ldr	r2, [r2, #8]
 8010688:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	69db      	ldr	r3, [r3, #28]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d02d      	beq.n	80106ee <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801069a:	431a      	orrs	r2, r3
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106a0:	431a      	orrs	r2, r3
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a6:	431a      	orrs	r2, r3
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	049b      	lsls	r3, r3, #18
 80106ae:	431a      	orrs	r2, r3
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	691b      	ldr	r3, [r3, #16]
 80106b4:	431a      	orrs	r2, r3
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	6a1b      	ldr	r3, [r3, #32]
 80106ba:	431a      	orrs	r2, r3
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	431a      	orrs	r2, r3
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	69db      	ldr	r3, [r3, #28]
 80106c6:	431a      	orrs	r2, r3
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	699b      	ldr	r3, [r3, #24]
 80106cc:	ea42 0103 	orr.w	r1, r2, r3
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	430a      	orrs	r2, r1
 80106d8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80106e0:	d078      	beq.n	80107d4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	68ba      	ldr	r2, [r7, #8]
 80106e8:	6852      	ldr	r2, [r2, #4]
 80106ea:	619a      	str	r2, [r3, #24]
}
 80106ec:	e072      	b.n	80107d4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f6:	431a      	orrs	r2, r3
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106fc:	431a      	orrs	r2, r3
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010702:	431a      	orrs	r2, r3
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	695b      	ldr	r3, [r3, #20]
 8010708:	049b      	lsls	r3, r3, #18
 801070a:	431a      	orrs	r2, r3
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	691b      	ldr	r3, [r3, #16]
 8010710:	431a      	orrs	r2, r3
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	6a1b      	ldr	r3, [r3, #32]
 8010716:	431a      	orrs	r2, r3
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	69db      	ldr	r3, [r3, #28]
 801071c:	431a      	orrs	r2, r3
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	699b      	ldr	r3, [r3, #24]
 8010722:	ea42 0103 	orr.w	r1, r2, r3
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	430a      	orrs	r2, r1
 801072e:	615a      	str	r2, [r3, #20]
}
 8010730:	e050      	b.n	80107d4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	69db      	ldr	r3, [r3, #28]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d02a      	beq.n	8010790 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010742:	431a      	orrs	r2, r3
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010748:	431a      	orrs	r2, r3
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074e:	431a      	orrs	r2, r3
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	695b      	ldr	r3, [r3, #20]
 8010754:	049b      	lsls	r3, r3, #18
 8010756:	431a      	orrs	r2, r3
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	6a1b      	ldr	r3, [r3, #32]
 801075c:	431a      	orrs	r2, r3
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	68db      	ldr	r3, [r3, #12]
 8010762:	431a      	orrs	r2, r3
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	69db      	ldr	r3, [r3, #28]
 8010768:	431a      	orrs	r2, r3
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	699b      	ldr	r3, [r3, #24]
 801076e:	ea42 0103 	orr.w	r1, r2, r3
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	430a      	orrs	r2, r1
 801077a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010782:	d027      	beq.n	80107d4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	6852      	ldr	r2, [r2, #4]
 801078c:	619a      	str	r2, [r3, #24]
}
 801078e:	e021      	b.n	80107d4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010794:	2b00      	cmp	r3, #0
 8010796:	d01d      	beq.n	80107d4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a0:	431a      	orrs	r2, r3
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107a6:	431a      	orrs	r2, r3
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ac:	431a      	orrs	r2, r3
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	695b      	ldr	r3, [r3, #20]
 80107b2:	049b      	lsls	r3, r3, #18
 80107b4:	431a      	orrs	r2, r3
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	6a1b      	ldr	r3, [r3, #32]
 80107ba:	431a      	orrs	r2, r3
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	69db      	ldr	r3, [r3, #28]
 80107c0:	431a      	orrs	r2, r3
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	699b      	ldr	r3, [r3, #24]
 80107c6:	ea42 0103 	orr.w	r1, r2, r3
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	430a      	orrs	r2, r1
 80107d2:	615a      	str	r2, [r3, #20]
}
 80107d4:	bf00      	nop
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b08c      	sub	sp, #48	; 0x30
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d102      	bne.n	80107f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	f000 bc1d 	b.w	801102e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f003 0301 	and.w	r3, r3, #1
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 8087 	beq.w	8010910 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010802:	4b99      	ldr	r3, [pc, #612]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010804:	691b      	ldr	r3, [r3, #16]
 8010806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801080a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801080c:	4b96      	ldr	r3, [pc, #600]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801080e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010810:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010814:	2b10      	cmp	r3, #16
 8010816:	d007      	beq.n	8010828 <HAL_RCC_OscConfig+0x48>
 8010818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081a:	2b18      	cmp	r3, #24
 801081c:	d110      	bne.n	8010840 <HAL_RCC_OscConfig+0x60>
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	f003 0303 	and.w	r3, r3, #3
 8010824:	2b02      	cmp	r3, #2
 8010826:	d10b      	bne.n	8010840 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010828:	4b8f      	ldr	r3, [pc, #572]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010830:	2b00      	cmp	r3, #0
 8010832:	d06c      	beq.n	801090e <HAL_RCC_OscConfig+0x12e>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d168      	bne.n	801090e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 801083c:	2301      	movs	r3, #1
 801083e:	e3f6      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010848:	d106      	bne.n	8010858 <HAL_RCC_OscConfig+0x78>
 801084a:	4b87      	ldr	r3, [pc, #540]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	4a86      	ldr	r2, [pc, #536]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010854:	6013      	str	r3, [r2, #0]
 8010856:	e02e      	b.n	80108b6 <HAL_RCC_OscConfig+0xd6>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d10c      	bne.n	801087a <HAL_RCC_OscConfig+0x9a>
 8010860:	4b81      	ldr	r3, [pc, #516]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a80      	ldr	r2, [pc, #512]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801086a:	6013      	str	r3, [r2, #0]
 801086c:	4b7e      	ldr	r3, [pc, #504]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a7d      	ldr	r2, [pc, #500]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010876:	6013      	str	r3, [r2, #0]
 8010878:	e01d      	b.n	80108b6 <HAL_RCC_OscConfig+0xd6>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010882:	d10c      	bne.n	801089e <HAL_RCC_OscConfig+0xbe>
 8010884:	4b78      	ldr	r3, [pc, #480]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a77      	ldr	r2, [pc, #476]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801088a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801088e:	6013      	str	r3, [r2, #0]
 8010890:	4b75      	ldr	r3, [pc, #468]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a74      	ldr	r2, [pc, #464]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801089a:	6013      	str	r3, [r2, #0]
 801089c:	e00b      	b.n	80108b6 <HAL_RCC_OscConfig+0xd6>
 801089e:	4b72      	ldr	r3, [pc, #456]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a71      	ldr	r2, [pc, #452]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80108a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108a8:	6013      	str	r3, [r2, #0]
 80108aa:	4b6f      	ldr	r3, [pc, #444]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a6e      	ldr	r2, [pc, #440]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80108b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d013      	beq.n	80108e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108be:	f7f9 fb7d 	bl	8009fbc <HAL_GetTick>
 80108c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80108c4:	e008      	b.n	80108d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108c6:	f7f9 fb79 	bl	8009fbc <HAL_GetTick>
 80108ca:	4602      	mov	r2, r0
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	1ad3      	subs	r3, r2, r3
 80108d0:	2b64      	cmp	r3, #100	; 0x64
 80108d2:	d901      	bls.n	80108d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80108d4:	2303      	movs	r3, #3
 80108d6:	e3aa      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80108d8:	4b63      	ldr	r3, [pc, #396]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d0f0      	beq.n	80108c6 <HAL_RCC_OscConfig+0xe6>
 80108e4:	e014      	b.n	8010910 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80108e6:	f7f9 fb69 	bl	8009fbc <HAL_GetTick>
 80108ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80108ec:	e008      	b.n	8010900 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80108ee:	f7f9 fb65 	bl	8009fbc <HAL_GetTick>
 80108f2:	4602      	mov	r2, r0
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	2b64      	cmp	r3, #100	; 0x64
 80108fa:	d901      	bls.n	8010900 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80108fc:	2303      	movs	r3, #3
 80108fe:	e396      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010900:	4b59      	ldr	r3, [pc, #356]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1f0      	bne.n	80108ee <HAL_RCC_OscConfig+0x10e>
 801090c:	e000      	b.n	8010910 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801090e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f003 0302 	and.w	r3, r3, #2
 8010918:	2b00      	cmp	r3, #0
 801091a:	f000 80cb 	beq.w	8010ab4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801091e:	4b52      	ldr	r3, [pc, #328]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010920:	691b      	ldr	r3, [r3, #16]
 8010922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010926:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010928:	4b4f      	ldr	r3, [pc, #316]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801092c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801092e:	6a3b      	ldr	r3, [r7, #32]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d007      	beq.n	8010944 <HAL_RCC_OscConfig+0x164>
 8010934:	6a3b      	ldr	r3, [r7, #32]
 8010936:	2b18      	cmp	r3, #24
 8010938:	d156      	bne.n	80109e8 <HAL_RCC_OscConfig+0x208>
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	f003 0303 	and.w	r3, r3, #3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d151      	bne.n	80109e8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010944:	4b48      	ldr	r3, [pc, #288]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f003 0304 	and.w	r3, r3, #4
 801094c:	2b00      	cmp	r3, #0
 801094e:	d005      	beq.n	801095c <HAL_RCC_OscConfig+0x17c>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d101      	bne.n	801095c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8010958:	2301      	movs	r3, #1
 801095a:	e368      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801095c:	4b42      	ldr	r3, [pc, #264]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f023 0219 	bic.w	r2, r3, #25
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	493f      	ldr	r1, [pc, #252]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801096a:	4313      	orrs	r3, r2
 801096c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801096e:	f7f9 fb25 	bl	8009fbc <HAL_GetTick>
 8010972:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010974:	e008      	b.n	8010988 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010976:	f7f9 fb21 	bl	8009fbc <HAL_GetTick>
 801097a:	4602      	mov	r2, r0
 801097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	2b02      	cmp	r3, #2
 8010982:	d901      	bls.n	8010988 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8010984:	2303      	movs	r3, #3
 8010986:	e352      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010988:	4b37      	ldr	r3, [pc, #220]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f003 0304 	and.w	r3, r3, #4
 8010990:	2b00      	cmp	r3, #0
 8010992:	d0f0      	beq.n	8010976 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010994:	f7f9 fb42 	bl	800a01c <HAL_GetREVID>
 8010998:	4603      	mov	r3, r0
 801099a:	f241 0203 	movw	r2, #4099	; 0x1003
 801099e:	4293      	cmp	r3, r2
 80109a0:	d817      	bhi.n	80109d2 <HAL_RCC_OscConfig+0x1f2>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	691b      	ldr	r3, [r3, #16]
 80109a6:	2b40      	cmp	r3, #64	; 0x40
 80109a8:	d108      	bne.n	80109bc <HAL_RCC_OscConfig+0x1dc>
 80109aa:	4b2f      	ldr	r3, [pc, #188]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80109b2:	4a2d      	ldr	r2, [pc, #180]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80109b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80109ba:	e07b      	b.n	8010ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80109bc:	4b2a      	ldr	r3, [pc, #168]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	691b      	ldr	r3, [r3, #16]
 80109c8:	031b      	lsls	r3, r3, #12
 80109ca:	4927      	ldr	r1, [pc, #156]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109cc:	4313      	orrs	r3, r2
 80109ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80109d0:	e070      	b.n	8010ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80109d2:	4b25      	ldr	r3, [pc, #148]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	691b      	ldr	r3, [r3, #16]
 80109de:	061b      	lsls	r3, r3, #24
 80109e0:	4921      	ldr	r1, [pc, #132]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109e2:	4313      	orrs	r3, r2
 80109e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80109e6:	e065      	b.n	8010ab4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d048      	beq.n	8010a82 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80109f0:	4b1d      	ldr	r3, [pc, #116]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f023 0219 	bic.w	r2, r3, #25
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	491a      	ldr	r1, [pc, #104]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 80109fe:	4313      	orrs	r3, r2
 8010a00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a02:	f7f9 fadb 	bl	8009fbc <HAL_GetTick>
 8010a06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010a08:	e008      	b.n	8010a1c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010a0a:	f7f9 fad7 	bl	8009fbc <HAL_GetTick>
 8010a0e:	4602      	mov	r2, r0
 8010a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	2b02      	cmp	r3, #2
 8010a16:	d901      	bls.n	8010a1c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8010a18:	2303      	movs	r3, #3
 8010a1a:	e308      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010a1c:	4b12      	ldr	r3, [pc, #72]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f003 0304 	and.w	r3, r3, #4
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d0f0      	beq.n	8010a0a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a28:	f7f9 faf8 	bl	800a01c <HAL_GetREVID>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d81a      	bhi.n	8010a6c <HAL_RCC_OscConfig+0x28c>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	691b      	ldr	r3, [r3, #16]
 8010a3a:	2b40      	cmp	r3, #64	; 0x40
 8010a3c:	d108      	bne.n	8010a50 <HAL_RCC_OscConfig+0x270>
 8010a3e:	4b0a      	ldr	r3, [pc, #40]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8010a46:	4a08      	ldr	r2, [pc, #32]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010a4c:	6053      	str	r3, [r2, #4]
 8010a4e:	e031      	b.n	8010ab4 <HAL_RCC_OscConfig+0x2d4>
 8010a50:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	691b      	ldr	r3, [r3, #16]
 8010a5c:	031b      	lsls	r3, r3, #12
 8010a5e:	4902      	ldr	r1, [pc, #8]	; (8010a68 <HAL_RCC_OscConfig+0x288>)
 8010a60:	4313      	orrs	r3, r2
 8010a62:	604b      	str	r3, [r1, #4]
 8010a64:	e026      	b.n	8010ab4 <HAL_RCC_OscConfig+0x2d4>
 8010a66:	bf00      	nop
 8010a68:	58024400 	.word	0x58024400
 8010a6c:	4b9a      	ldr	r3, [pc, #616]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	691b      	ldr	r3, [r3, #16]
 8010a78:	061b      	lsls	r3, r3, #24
 8010a7a:	4997      	ldr	r1, [pc, #604]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	604b      	str	r3, [r1, #4]
 8010a80:	e018      	b.n	8010ab4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010a82:	4b95      	ldr	r3, [pc, #596]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a94      	ldr	r2, [pc, #592]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010a88:	f023 0301 	bic.w	r3, r3, #1
 8010a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a8e:	f7f9 fa95 	bl	8009fbc <HAL_GetTick>
 8010a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010a94:	e008      	b.n	8010aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010a96:	f7f9 fa91 	bl	8009fbc <HAL_GetTick>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	1ad3      	subs	r3, r2, r3
 8010aa0:	2b02      	cmp	r3, #2
 8010aa2:	d901      	bls.n	8010aa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8010aa4:	2303      	movs	r3, #3
 8010aa6:	e2c2      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010aa8:	4b8b      	ldr	r3, [pc, #556]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1f0      	bne.n	8010a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f003 0310 	and.w	r3, r3, #16
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f000 80a9 	beq.w	8010c14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010ac2:	4b85      	ldr	r3, [pc, #532]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010ac4:	691b      	ldr	r3, [r3, #16]
 8010ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010aca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010acc:	4b82      	ldr	r3, [pc, #520]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010ad2:	69bb      	ldr	r3, [r7, #24]
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d007      	beq.n	8010ae8 <HAL_RCC_OscConfig+0x308>
 8010ad8:	69bb      	ldr	r3, [r7, #24]
 8010ada:	2b18      	cmp	r3, #24
 8010adc:	d13a      	bne.n	8010b54 <HAL_RCC_OscConfig+0x374>
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	f003 0303 	and.w	r3, r3, #3
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d135      	bne.n	8010b54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010ae8:	4b7b      	ldr	r3, [pc, #492]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d005      	beq.n	8010b00 <HAL_RCC_OscConfig+0x320>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	69db      	ldr	r3, [r3, #28]
 8010af8:	2b80      	cmp	r3, #128	; 0x80
 8010afa:	d001      	beq.n	8010b00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8010afc:	2301      	movs	r3, #1
 8010afe:	e296      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010b00:	f7f9 fa8c 	bl	800a01c <HAL_GetREVID>
 8010b04:	4603      	mov	r3, r0
 8010b06:	f241 0203 	movw	r2, #4099	; 0x1003
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d817      	bhi.n	8010b3e <HAL_RCC_OscConfig+0x35e>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6a1b      	ldr	r3, [r3, #32]
 8010b12:	2b20      	cmp	r3, #32
 8010b14:	d108      	bne.n	8010b28 <HAL_RCC_OscConfig+0x348>
 8010b16:	4b70      	ldr	r3, [pc, #448]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010b1e:	4a6e      	ldr	r2, [pc, #440]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010b24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010b26:	e075      	b.n	8010c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010b28:	4b6b      	ldr	r3, [pc, #428]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6a1b      	ldr	r3, [r3, #32]
 8010b34:	069b      	lsls	r3, r3, #26
 8010b36:	4968      	ldr	r1, [pc, #416]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010b3c:	e06a      	b.n	8010c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010b3e:	4b66      	ldr	r3, [pc, #408]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b40:	68db      	ldr	r3, [r3, #12]
 8010b42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6a1b      	ldr	r3, [r3, #32]
 8010b4a:	061b      	lsls	r3, r3, #24
 8010b4c:	4962      	ldr	r1, [pc, #392]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010b52:	e05f      	b.n	8010c14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	69db      	ldr	r3, [r3, #28]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d042      	beq.n	8010be2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010b5c:	4b5e      	ldr	r3, [pc, #376]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a5d      	ldr	r2, [pc, #372]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010b68:	f7f9 fa28 	bl	8009fbc <HAL_GetTick>
 8010b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010b6e:	e008      	b.n	8010b82 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010b70:	f7f9 fa24 	bl	8009fbc <HAL_GetTick>
 8010b74:	4602      	mov	r2, r0
 8010b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b78:	1ad3      	subs	r3, r2, r3
 8010b7a:	2b02      	cmp	r3, #2
 8010b7c:	d901      	bls.n	8010b82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8010b7e:	2303      	movs	r3, #3
 8010b80:	e255      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010b82:	4b55      	ldr	r3, [pc, #340]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d0f0      	beq.n	8010b70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010b8e:	f7f9 fa45 	bl	800a01c <HAL_GetREVID>
 8010b92:	4603      	mov	r3, r0
 8010b94:	f241 0203 	movw	r2, #4099	; 0x1003
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d817      	bhi.n	8010bcc <HAL_RCC_OscConfig+0x3ec>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6a1b      	ldr	r3, [r3, #32]
 8010ba0:	2b20      	cmp	r3, #32
 8010ba2:	d108      	bne.n	8010bb6 <HAL_RCC_OscConfig+0x3d6>
 8010ba4:	4b4c      	ldr	r3, [pc, #304]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010bac:	4a4a      	ldr	r2, [pc, #296]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010bb2:	6053      	str	r3, [r2, #4]
 8010bb4:	e02e      	b.n	8010c14 <HAL_RCC_OscConfig+0x434>
 8010bb6:	4b48      	ldr	r3, [pc, #288]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6a1b      	ldr	r3, [r3, #32]
 8010bc2:	069b      	lsls	r3, r3, #26
 8010bc4:	4944      	ldr	r1, [pc, #272]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	604b      	str	r3, [r1, #4]
 8010bca:	e023      	b.n	8010c14 <HAL_RCC_OscConfig+0x434>
 8010bcc:	4b42      	ldr	r3, [pc, #264]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6a1b      	ldr	r3, [r3, #32]
 8010bd8:	061b      	lsls	r3, r3, #24
 8010bda:	493f      	ldr	r1, [pc, #252]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	60cb      	str	r3, [r1, #12]
 8010be0:	e018      	b.n	8010c14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010be2:	4b3d      	ldr	r3, [pc, #244]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4a3c      	ldr	r2, [pc, #240]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010bee:	f7f9 f9e5 	bl	8009fbc <HAL_GetTick>
 8010bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010bf4:	e008      	b.n	8010c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010bf6:	f7f9 f9e1 	bl	8009fbc <HAL_GetTick>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfe:	1ad3      	subs	r3, r2, r3
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d901      	bls.n	8010c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010c04:	2303      	movs	r3, #3
 8010c06:	e212      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010c08:	4b33      	ldr	r3, [pc, #204]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d1f0      	bne.n	8010bf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f003 0308 	and.w	r3, r3, #8
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d036      	beq.n	8010c8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	695b      	ldr	r3, [r3, #20]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d019      	beq.n	8010c5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010c28:	4b2b      	ldr	r3, [pc, #172]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c2c:	4a2a      	ldr	r2, [pc, #168]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010c2e:	f043 0301 	orr.w	r3, r3, #1
 8010c32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010c34:	f7f9 f9c2 	bl	8009fbc <HAL_GetTick>
 8010c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010c3a:	e008      	b.n	8010c4e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010c3c:	f7f9 f9be 	bl	8009fbc <HAL_GetTick>
 8010c40:	4602      	mov	r2, r0
 8010c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c44:	1ad3      	subs	r3, r2, r3
 8010c46:	2b02      	cmp	r3, #2
 8010c48:	d901      	bls.n	8010c4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8010c4a:	2303      	movs	r3, #3
 8010c4c:	e1ef      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010c4e:	4b22      	ldr	r3, [pc, #136]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c52:	f003 0302 	and.w	r3, r3, #2
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d0f0      	beq.n	8010c3c <HAL_RCC_OscConfig+0x45c>
 8010c5a:	e018      	b.n	8010c8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010c5c:	4b1e      	ldr	r3, [pc, #120]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c60:	4a1d      	ldr	r2, [pc, #116]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010c62:	f023 0301 	bic.w	r3, r3, #1
 8010c66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010c68:	f7f9 f9a8 	bl	8009fbc <HAL_GetTick>
 8010c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010c6e:	e008      	b.n	8010c82 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010c70:	f7f9 f9a4 	bl	8009fbc <HAL_GetTick>
 8010c74:	4602      	mov	r2, r0
 8010c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c78:	1ad3      	subs	r3, r2, r3
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d901      	bls.n	8010c82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8010c7e:	2303      	movs	r3, #3
 8010c80:	e1d5      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010c82:	4b15      	ldr	r3, [pc, #84]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c86:	f003 0302 	and.w	r3, r3, #2
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d1f0      	bne.n	8010c70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f003 0320 	and.w	r3, r3, #32
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d039      	beq.n	8010d0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d01c      	beq.n	8010cdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010ca2:	4b0d      	ldr	r3, [pc, #52]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4a0c      	ldr	r2, [pc, #48]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010cae:	f7f9 f985 	bl	8009fbc <HAL_GetTick>
 8010cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010cb4:	e008      	b.n	8010cc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010cb6:	f7f9 f981 	bl	8009fbc <HAL_GetTick>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	2b02      	cmp	r3, #2
 8010cc2:	d901      	bls.n	8010cc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8010cc4:	2303      	movs	r3, #3
 8010cc6:	e1b2      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010cc8:	4b03      	ldr	r3, [pc, #12]	; (8010cd8 <HAL_RCC_OscConfig+0x4f8>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d0f0      	beq.n	8010cb6 <HAL_RCC_OscConfig+0x4d6>
 8010cd4:	e01b      	b.n	8010d0e <HAL_RCC_OscConfig+0x52e>
 8010cd6:	bf00      	nop
 8010cd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010cdc:	4b9b      	ldr	r3, [pc, #620]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a9a      	ldr	r2, [pc, #616]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ce6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010ce8:	f7f9 f968 	bl	8009fbc <HAL_GetTick>
 8010cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010cee:	e008      	b.n	8010d02 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010cf0:	f7f9 f964 	bl	8009fbc <HAL_GetTick>
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf8:	1ad3      	subs	r3, r2, r3
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	d901      	bls.n	8010d02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8010cfe:	2303      	movs	r3, #3
 8010d00:	e195      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010d02:	4b92      	ldr	r3, [pc, #584]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d1f0      	bne.n	8010cf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f003 0304 	and.w	r3, r3, #4
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f000 8081 	beq.w	8010e1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010d1c:	4b8c      	ldr	r3, [pc, #560]	; (8010f50 <HAL_RCC_OscConfig+0x770>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4a8b      	ldr	r2, [pc, #556]	; (8010f50 <HAL_RCC_OscConfig+0x770>)
 8010d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010d28:	f7f9 f948 	bl	8009fbc <HAL_GetTick>
 8010d2c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010d2e:	e008      	b.n	8010d42 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010d30:	f7f9 f944 	bl	8009fbc <HAL_GetTick>
 8010d34:	4602      	mov	r2, r0
 8010d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	2b64      	cmp	r3, #100	; 0x64
 8010d3c:	d901      	bls.n	8010d42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8010d3e:	2303      	movs	r3, #3
 8010d40:	e175      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010d42:	4b83      	ldr	r3, [pc, #524]	; (8010f50 <HAL_RCC_OscConfig+0x770>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d0f0      	beq.n	8010d30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	689b      	ldr	r3, [r3, #8]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d106      	bne.n	8010d64 <HAL_RCC_OscConfig+0x584>
 8010d56:	4b7d      	ldr	r3, [pc, #500]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d5a:	4a7c      	ldr	r2, [pc, #496]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d5c:	f043 0301 	orr.w	r3, r3, #1
 8010d60:	6713      	str	r3, [r2, #112]	; 0x70
 8010d62:	e02d      	b.n	8010dc0 <HAL_RCC_OscConfig+0x5e0>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d10c      	bne.n	8010d86 <HAL_RCC_OscConfig+0x5a6>
 8010d6c:	4b77      	ldr	r3, [pc, #476]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d70:	4a76      	ldr	r2, [pc, #472]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d72:	f023 0301 	bic.w	r3, r3, #1
 8010d76:	6713      	str	r3, [r2, #112]	; 0x70
 8010d78:	4b74      	ldr	r3, [pc, #464]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d7c:	4a73      	ldr	r2, [pc, #460]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d7e:	f023 0304 	bic.w	r3, r3, #4
 8010d82:	6713      	str	r3, [r2, #112]	; 0x70
 8010d84:	e01c      	b.n	8010dc0 <HAL_RCC_OscConfig+0x5e0>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	689b      	ldr	r3, [r3, #8]
 8010d8a:	2b05      	cmp	r3, #5
 8010d8c:	d10c      	bne.n	8010da8 <HAL_RCC_OscConfig+0x5c8>
 8010d8e:	4b6f      	ldr	r3, [pc, #444]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d92:	4a6e      	ldr	r2, [pc, #440]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d94:	f043 0304 	orr.w	r3, r3, #4
 8010d98:	6713      	str	r3, [r2, #112]	; 0x70
 8010d9a:	4b6c      	ldr	r3, [pc, #432]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d9e:	4a6b      	ldr	r2, [pc, #428]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010da0:	f043 0301 	orr.w	r3, r3, #1
 8010da4:	6713      	str	r3, [r2, #112]	; 0x70
 8010da6:	e00b      	b.n	8010dc0 <HAL_RCC_OscConfig+0x5e0>
 8010da8:	4b68      	ldr	r3, [pc, #416]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dac:	4a67      	ldr	r2, [pc, #412]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010dae:	f023 0301 	bic.w	r3, r3, #1
 8010db2:	6713      	str	r3, [r2, #112]	; 0x70
 8010db4:	4b65      	ldr	r3, [pc, #404]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010db8:	4a64      	ldr	r2, [pc, #400]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010dba:	f023 0304 	bic.w	r3, r3, #4
 8010dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	689b      	ldr	r3, [r3, #8]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d015      	beq.n	8010df4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010dc8:	f7f9 f8f8 	bl	8009fbc <HAL_GetTick>
 8010dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010dce:	e00a      	b.n	8010de6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010dd0:	f7f9 f8f4 	bl	8009fbc <HAL_GetTick>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd8:	1ad3      	subs	r3, r2, r3
 8010dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d901      	bls.n	8010de6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8010de2:	2303      	movs	r3, #3
 8010de4:	e123      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010de6:	4b59      	ldr	r3, [pc, #356]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dea:	f003 0302 	and.w	r3, r3, #2
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d0ee      	beq.n	8010dd0 <HAL_RCC_OscConfig+0x5f0>
 8010df2:	e014      	b.n	8010e1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010df4:	f7f9 f8e2 	bl	8009fbc <HAL_GetTick>
 8010df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010dfa:	e00a      	b.n	8010e12 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010dfc:	f7f9 f8de 	bl	8009fbc <HAL_GetTick>
 8010e00:	4602      	mov	r2, r0
 8010e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e04:	1ad3      	subs	r3, r2, r3
 8010e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	d901      	bls.n	8010e12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8010e0e:	2303      	movs	r3, #3
 8010e10:	e10d      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010e12:	4b4e      	ldr	r3, [pc, #312]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e16:	f003 0302 	and.w	r3, r3, #2
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d1ee      	bne.n	8010dfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f000 8102 	beq.w	801102c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010e28:	4b48      	ldr	r3, [pc, #288]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010e30:	2b18      	cmp	r3, #24
 8010e32:	f000 80bd 	beq.w	8010fb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	f040 809e 	bne.w	8010f7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010e40:	4b42      	ldr	r3, [pc, #264]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4a41      	ldr	r2, [pc, #260]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e4c:	f7f9 f8b6 	bl	8009fbc <HAL_GetTick>
 8010e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010e52:	e008      	b.n	8010e66 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010e54:	f7f9 f8b2 	bl	8009fbc <HAL_GetTick>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	d901      	bls.n	8010e66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8010e62:	2303      	movs	r3, #3
 8010e64:	e0e3      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010e66:	4b39      	ldr	r3, [pc, #228]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1f0      	bne.n	8010e54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010e72:	4b36      	ldr	r3, [pc, #216]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e76:	4b37      	ldr	r3, [pc, #220]	; (8010f54 <HAL_RCC_OscConfig+0x774>)
 8010e78:	4013      	ands	r3, r2
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010e82:	0112      	lsls	r2, r2, #4
 8010e84:	430a      	orrs	r2, r1
 8010e86:	4931      	ldr	r1, [pc, #196]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010e88:	4313      	orrs	r3, r2
 8010e8a:	628b      	str	r3, [r1, #40]	; 0x28
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e90:	3b01      	subs	r3, #1
 8010e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	025b      	lsls	r3, r3, #9
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	431a      	orrs	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	041b      	lsls	r3, r3, #16
 8010eaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010eae:	431a      	orrs	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eb4:	3b01      	subs	r3, #1
 8010eb6:	061b      	lsls	r3, r3, #24
 8010eb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010ebc:	4923      	ldr	r1, [pc, #140]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8010ec2:	4b22      	ldr	r3, [pc, #136]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec6:	4a21      	ldr	r2, [pc, #132]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ec8:	f023 0301 	bic.w	r3, r3, #1
 8010ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010ece:	4b1f      	ldr	r3, [pc, #124]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ed2:	4b21      	ldr	r3, [pc, #132]	; (8010f58 <HAL_RCC_OscConfig+0x778>)
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010eda:	00d2      	lsls	r2, r2, #3
 8010edc:	491b      	ldr	r1, [pc, #108]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ede:	4313      	orrs	r3, r2
 8010ee0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010ee2:	4b1a      	ldr	r3, [pc, #104]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ee6:	f023 020c 	bic.w	r2, r3, #12
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eee:	4917      	ldr	r1, [pc, #92]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ef0:	4313      	orrs	r3, r2
 8010ef2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010ef4:	4b15      	ldr	r3, [pc, #84]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef8:	f023 0202 	bic.w	r2, r3, #2
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f00:	4912      	ldr	r1, [pc, #72]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f02:	4313      	orrs	r3, r2
 8010f04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010f06:	4b11      	ldr	r3, [pc, #68]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0a:	4a10      	ldr	r2, [pc, #64]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f12:	4b0e      	ldr	r3, [pc, #56]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f16:	4a0d      	ldr	r2, [pc, #52]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010f1e:	4b0b      	ldr	r3, [pc, #44]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f22:	4a0a      	ldr	r2, [pc, #40]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010f28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8010f2a:	4b08      	ldr	r3, [pc, #32]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2e:	4a07      	ldr	r2, [pc, #28]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f30:	f043 0301 	orr.w	r3, r3, #1
 8010f34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010f36:	4b05      	ldr	r3, [pc, #20]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4a04      	ldr	r2, [pc, #16]	; (8010f4c <HAL_RCC_OscConfig+0x76c>)
 8010f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f42:	f7f9 f83b 	bl	8009fbc <HAL_GetTick>
 8010f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010f48:	e011      	b.n	8010f6e <HAL_RCC_OscConfig+0x78e>
 8010f4a:	bf00      	nop
 8010f4c:	58024400 	.word	0x58024400
 8010f50:	58024800 	.word	0x58024800
 8010f54:	fffffc0c 	.word	0xfffffc0c
 8010f58:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010f5c:	f7f9 f82e 	bl	8009fbc <HAL_GetTick>
 8010f60:	4602      	mov	r2, r0
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	1ad3      	subs	r3, r2, r3
 8010f66:	2b02      	cmp	r3, #2
 8010f68:	d901      	bls.n	8010f6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8010f6a:	2303      	movs	r3, #3
 8010f6c:	e05f      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010f6e:	4b32      	ldr	r3, [pc, #200]	; (8011038 <HAL_RCC_OscConfig+0x858>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d0f0      	beq.n	8010f5c <HAL_RCC_OscConfig+0x77c>
 8010f7a:	e057      	b.n	801102c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010f7c:	4b2e      	ldr	r3, [pc, #184]	; (8011038 <HAL_RCC_OscConfig+0x858>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4a2d      	ldr	r2, [pc, #180]	; (8011038 <HAL_RCC_OscConfig+0x858>)
 8010f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f88:	f7f9 f818 	bl	8009fbc <HAL_GetTick>
 8010f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010f8e:	e008      	b.n	8010fa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010f90:	f7f9 f814 	bl	8009fbc <HAL_GetTick>
 8010f94:	4602      	mov	r2, r0
 8010f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d901      	bls.n	8010fa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8010f9e:	2303      	movs	r3, #3
 8010fa0:	e045      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010fa2:	4b25      	ldr	r3, [pc, #148]	; (8011038 <HAL_RCC_OscConfig+0x858>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1f0      	bne.n	8010f90 <HAL_RCC_OscConfig+0x7b0>
 8010fae:	e03d      	b.n	801102c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010fb0:	4b21      	ldr	r3, [pc, #132]	; (8011038 <HAL_RCC_OscConfig+0x858>)
 8010fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010fb6:	4b20      	ldr	r3, [pc, #128]	; (8011038 <HAL_RCC_OscConfig+0x858>)
 8010fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d031      	beq.n	8011028 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	f003 0203 	and.w	r2, r3, #3
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d12a      	bne.n	8011028 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	091b      	lsrs	r3, r3, #4
 8010fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d122      	bne.n	8011028 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d11a      	bne.n	8011028 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	0a5b      	lsrs	r3, r3, #9
 8010ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ffe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011000:	429a      	cmp	r2, r3
 8011002:	d111      	bne.n	8011028 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	0c1b      	lsrs	r3, r3, #16
 8011008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011010:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011012:	429a      	cmp	r2, r3
 8011014:	d108      	bne.n	8011028 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	0e1b      	lsrs	r3, r3, #24
 801101a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011022:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011024:	429a      	cmp	r2, r3
 8011026:	d001      	beq.n	801102c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8011028:	2301      	movs	r3, #1
 801102a:	e000      	b.n	801102e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	3730      	adds	r7, #48	; 0x30
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	58024400 	.word	0x58024400

0801103c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d101      	bne.n	8011050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801104c:	2301      	movs	r3, #1
 801104e:	e19c      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011050:	4b8a      	ldr	r3, [pc, #552]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f003 030f 	and.w	r3, r3, #15
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d910      	bls.n	8011080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801105e:	4b87      	ldr	r3, [pc, #540]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f023 020f 	bic.w	r2, r3, #15
 8011066:	4985      	ldr	r1, [pc, #532]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	4313      	orrs	r3, r2
 801106c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801106e:	4b83      	ldr	r3, [pc, #524]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f003 030f 	and.w	r3, r3, #15
 8011076:	683a      	ldr	r2, [r7, #0]
 8011078:	429a      	cmp	r2, r3
 801107a:	d001      	beq.n	8011080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801107c:	2301      	movs	r3, #1
 801107e:	e184      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f003 0304 	and.w	r3, r3, #4
 8011088:	2b00      	cmp	r3, #0
 801108a:	d010      	beq.n	80110ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	691a      	ldr	r2, [r3, #16]
 8011090:	4b7b      	ldr	r3, [pc, #492]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011092:	699b      	ldr	r3, [r3, #24]
 8011094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011098:	429a      	cmp	r2, r3
 801109a:	d908      	bls.n	80110ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801109c:	4b78      	ldr	r3, [pc, #480]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 801109e:	699b      	ldr	r3, [r3, #24]
 80110a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	691b      	ldr	r3, [r3, #16]
 80110a8:	4975      	ldr	r1, [pc, #468]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80110aa:	4313      	orrs	r3, r2
 80110ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f003 0308 	and.w	r3, r3, #8
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d010      	beq.n	80110dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	695a      	ldr	r2, [r3, #20]
 80110be:	4b70      	ldr	r3, [pc, #448]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80110c0:	69db      	ldr	r3, [r3, #28]
 80110c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d908      	bls.n	80110dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80110ca:	4b6d      	ldr	r3, [pc, #436]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80110cc:	69db      	ldr	r3, [r3, #28]
 80110ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	695b      	ldr	r3, [r3, #20]
 80110d6:	496a      	ldr	r1, [pc, #424]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80110d8:	4313      	orrs	r3, r2
 80110da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f003 0310 	and.w	r3, r3, #16
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d010      	beq.n	801110a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	699a      	ldr	r2, [r3, #24]
 80110ec:	4b64      	ldr	r3, [pc, #400]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80110ee:	69db      	ldr	r3, [r3, #28]
 80110f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d908      	bls.n	801110a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80110f8:	4b61      	ldr	r3, [pc, #388]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80110fa:	69db      	ldr	r3, [r3, #28]
 80110fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	699b      	ldr	r3, [r3, #24]
 8011104:	495e      	ldr	r1, [pc, #376]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011106:	4313      	orrs	r3, r2
 8011108:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f003 0320 	and.w	r3, r3, #32
 8011112:	2b00      	cmp	r3, #0
 8011114:	d010      	beq.n	8011138 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	69da      	ldr	r2, [r3, #28]
 801111a:	4b59      	ldr	r3, [pc, #356]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 801111c:	6a1b      	ldr	r3, [r3, #32]
 801111e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011122:	429a      	cmp	r2, r3
 8011124:	d908      	bls.n	8011138 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8011126:	4b56      	ldr	r3, [pc, #344]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011128:	6a1b      	ldr	r3, [r3, #32]
 801112a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	69db      	ldr	r3, [r3, #28]
 8011132:	4953      	ldr	r1, [pc, #332]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011134:	4313      	orrs	r3, r2
 8011136:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f003 0302 	and.w	r3, r3, #2
 8011140:	2b00      	cmp	r3, #0
 8011142:	d010      	beq.n	8011166 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	68da      	ldr	r2, [r3, #12]
 8011148:	4b4d      	ldr	r3, [pc, #308]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 801114a:	699b      	ldr	r3, [r3, #24]
 801114c:	f003 030f 	and.w	r3, r3, #15
 8011150:	429a      	cmp	r2, r3
 8011152:	d908      	bls.n	8011166 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011154:	4b4a      	ldr	r3, [pc, #296]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011156:	699b      	ldr	r3, [r3, #24]
 8011158:	f023 020f 	bic.w	r2, r3, #15
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	4947      	ldr	r1, [pc, #284]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011162:	4313      	orrs	r3, r2
 8011164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f003 0301 	and.w	r3, r3, #1
 801116e:	2b00      	cmp	r3, #0
 8011170:	d055      	beq.n	801121e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011172:	4b43      	ldr	r3, [pc, #268]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	4940      	ldr	r1, [pc, #256]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011180:	4313      	orrs	r3, r2
 8011182:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	2b02      	cmp	r3, #2
 801118a:	d107      	bne.n	801119c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801118c:	4b3c      	ldr	r3, [pc, #240]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011194:	2b00      	cmp	r3, #0
 8011196:	d121      	bne.n	80111dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8011198:	2301      	movs	r3, #1
 801119a:	e0f6      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	2b03      	cmp	r3, #3
 80111a2:	d107      	bne.n	80111b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80111a4:	4b36      	ldr	r3, [pc, #216]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d115      	bne.n	80111dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80111b0:	2301      	movs	r3, #1
 80111b2:	e0ea      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	685b      	ldr	r3, [r3, #4]
 80111b8:	2b01      	cmp	r3, #1
 80111ba:	d107      	bne.n	80111cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80111bc:	4b30      	ldr	r3, [pc, #192]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d109      	bne.n	80111dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	e0de      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80111cc:	4b2c      	ldr	r3, [pc, #176]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	f003 0304 	and.w	r3, r3, #4
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d101      	bne.n	80111dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80111d8:	2301      	movs	r3, #1
 80111da:	e0d6      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80111dc:	4b28      	ldr	r3, [pc, #160]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	f023 0207 	bic.w	r2, r3, #7
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	4925      	ldr	r1, [pc, #148]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 80111ea:	4313      	orrs	r3, r2
 80111ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111ee:	f7f8 fee5 	bl	8009fbc <HAL_GetTick>
 80111f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80111f4:	e00a      	b.n	801120c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80111f6:	f7f8 fee1 	bl	8009fbc <HAL_GetTick>
 80111fa:	4602      	mov	r2, r0
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	f241 3288 	movw	r2, #5000	; 0x1388
 8011204:	4293      	cmp	r3, r2
 8011206:	d901      	bls.n	801120c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8011208:	2303      	movs	r3, #3
 801120a:	e0be      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801120c:	4b1c      	ldr	r3, [pc, #112]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 801120e:	691b      	ldr	r3, [r3, #16]
 8011210:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	00db      	lsls	r3, r3, #3
 801121a:	429a      	cmp	r2, r3
 801121c:	d1eb      	bne.n	80111f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f003 0302 	and.w	r3, r3, #2
 8011226:	2b00      	cmp	r3, #0
 8011228:	d010      	beq.n	801124c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	68da      	ldr	r2, [r3, #12]
 801122e:	4b14      	ldr	r3, [pc, #80]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011230:	699b      	ldr	r3, [r3, #24]
 8011232:	f003 030f 	and.w	r3, r3, #15
 8011236:	429a      	cmp	r2, r3
 8011238:	d208      	bcs.n	801124c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801123a:	4b11      	ldr	r3, [pc, #68]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 801123c:	699b      	ldr	r3, [r3, #24]
 801123e:	f023 020f 	bic.w	r2, r3, #15
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	490e      	ldr	r1, [pc, #56]	; (8011280 <HAL_RCC_ClockConfig+0x244>)
 8011248:	4313      	orrs	r3, r2
 801124a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801124c:	4b0b      	ldr	r3, [pc, #44]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f003 030f 	and.w	r3, r3, #15
 8011254:	683a      	ldr	r2, [r7, #0]
 8011256:	429a      	cmp	r2, r3
 8011258:	d214      	bcs.n	8011284 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801125a:	4b08      	ldr	r3, [pc, #32]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f023 020f 	bic.w	r2, r3, #15
 8011262:	4906      	ldr	r1, [pc, #24]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	4313      	orrs	r3, r2
 8011268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801126a:	4b04      	ldr	r3, [pc, #16]	; (801127c <HAL_RCC_ClockConfig+0x240>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f003 030f 	and.w	r3, r3, #15
 8011272:	683a      	ldr	r2, [r7, #0]
 8011274:	429a      	cmp	r2, r3
 8011276:	d005      	beq.n	8011284 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011278:	2301      	movs	r3, #1
 801127a:	e086      	b.n	801138a <HAL_RCC_ClockConfig+0x34e>
 801127c:	52002000 	.word	0x52002000
 8011280:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f003 0304 	and.w	r3, r3, #4
 801128c:	2b00      	cmp	r3, #0
 801128e:	d010      	beq.n	80112b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	691a      	ldr	r2, [r3, #16]
 8011294:	4b3f      	ldr	r3, [pc, #252]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 8011296:	699b      	ldr	r3, [r3, #24]
 8011298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801129c:	429a      	cmp	r2, r3
 801129e:	d208      	bcs.n	80112b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80112a0:	4b3c      	ldr	r3, [pc, #240]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 80112a2:	699b      	ldr	r3, [r3, #24]
 80112a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	691b      	ldr	r3, [r3, #16]
 80112ac:	4939      	ldr	r1, [pc, #228]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 80112ae:	4313      	orrs	r3, r2
 80112b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f003 0308 	and.w	r3, r3, #8
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d010      	beq.n	80112e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	695a      	ldr	r2, [r3, #20]
 80112c2:	4b34      	ldr	r3, [pc, #208]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 80112c4:	69db      	ldr	r3, [r3, #28]
 80112c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d208      	bcs.n	80112e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80112ce:	4b31      	ldr	r3, [pc, #196]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 80112d0:	69db      	ldr	r3, [r3, #28]
 80112d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	695b      	ldr	r3, [r3, #20]
 80112da:	492e      	ldr	r1, [pc, #184]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 80112dc:	4313      	orrs	r3, r2
 80112de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f003 0310 	and.w	r3, r3, #16
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d010      	beq.n	801130e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	699a      	ldr	r2, [r3, #24]
 80112f0:	4b28      	ldr	r3, [pc, #160]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 80112f2:	69db      	ldr	r3, [r3, #28]
 80112f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d208      	bcs.n	801130e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80112fc:	4b25      	ldr	r3, [pc, #148]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 80112fe:	69db      	ldr	r3, [r3, #28]
 8011300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	699b      	ldr	r3, [r3, #24]
 8011308:	4922      	ldr	r1, [pc, #136]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 801130a:	4313      	orrs	r3, r2
 801130c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f003 0320 	and.w	r3, r3, #32
 8011316:	2b00      	cmp	r3, #0
 8011318:	d010      	beq.n	801133c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	69da      	ldr	r2, [r3, #28]
 801131e:	4b1d      	ldr	r3, [pc, #116]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 8011320:	6a1b      	ldr	r3, [r3, #32]
 8011322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011326:	429a      	cmp	r2, r3
 8011328:	d208      	bcs.n	801133c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801132a:	4b1a      	ldr	r3, [pc, #104]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 801132c:	6a1b      	ldr	r3, [r3, #32]
 801132e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	69db      	ldr	r3, [r3, #28]
 8011336:	4917      	ldr	r1, [pc, #92]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 8011338:	4313      	orrs	r3, r2
 801133a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801133c:	f000 f834 	bl	80113a8 <HAL_RCC_GetSysClockFreq>
 8011340:	4602      	mov	r2, r0
 8011342:	4b14      	ldr	r3, [pc, #80]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 8011344:	699b      	ldr	r3, [r3, #24]
 8011346:	0a1b      	lsrs	r3, r3, #8
 8011348:	f003 030f 	and.w	r3, r3, #15
 801134c:	4912      	ldr	r1, [pc, #72]	; (8011398 <HAL_RCC_ClockConfig+0x35c>)
 801134e:	5ccb      	ldrb	r3, [r1, r3]
 8011350:	f003 031f 	and.w	r3, r3, #31
 8011354:	fa22 f303 	lsr.w	r3, r2, r3
 8011358:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801135a:	4b0e      	ldr	r3, [pc, #56]	; (8011394 <HAL_RCC_ClockConfig+0x358>)
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	f003 030f 	and.w	r3, r3, #15
 8011362:	4a0d      	ldr	r2, [pc, #52]	; (8011398 <HAL_RCC_ClockConfig+0x35c>)
 8011364:	5cd3      	ldrb	r3, [r2, r3]
 8011366:	f003 031f 	and.w	r3, r3, #31
 801136a:	693a      	ldr	r2, [r7, #16]
 801136c:	fa22 f303 	lsr.w	r3, r2, r3
 8011370:	4a0a      	ldr	r2, [pc, #40]	; (801139c <HAL_RCC_ClockConfig+0x360>)
 8011372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011374:	4a0a      	ldr	r2, [pc, #40]	; (80113a0 <HAL_RCC_ClockConfig+0x364>)
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801137a:	4b0a      	ldr	r3, [pc, #40]	; (80113a4 <HAL_RCC_ClockConfig+0x368>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4618      	mov	r0, r3
 8011380:	f7f6 fc7a 	bl	8007c78 <HAL_InitTick>
 8011384:	4603      	mov	r3, r0
 8011386:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011388:	7bfb      	ldrb	r3, [r7, #15]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	58024400 	.word	0x58024400
 8011398:	08027bf8 	.word	0x08027bf8
 801139c:	240002e0 	.word	0x240002e0
 80113a0:	240002dc 	.word	0x240002dc
 80113a4:	240002ec 	.word	0x240002ec

080113a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b089      	sub	sp, #36	; 0x24
 80113ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80113ae:	4bb3      	ldr	r3, [pc, #716]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80113b0:	691b      	ldr	r3, [r3, #16]
 80113b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113b6:	2b18      	cmp	r3, #24
 80113b8:	f200 8155 	bhi.w	8011666 <HAL_RCC_GetSysClockFreq+0x2be>
 80113bc:	a201      	add	r2, pc, #4	; (adr r2, 80113c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80113be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c2:	bf00      	nop
 80113c4:	08011429 	.word	0x08011429
 80113c8:	08011667 	.word	0x08011667
 80113cc:	08011667 	.word	0x08011667
 80113d0:	08011667 	.word	0x08011667
 80113d4:	08011667 	.word	0x08011667
 80113d8:	08011667 	.word	0x08011667
 80113dc:	08011667 	.word	0x08011667
 80113e0:	08011667 	.word	0x08011667
 80113e4:	0801144f 	.word	0x0801144f
 80113e8:	08011667 	.word	0x08011667
 80113ec:	08011667 	.word	0x08011667
 80113f0:	08011667 	.word	0x08011667
 80113f4:	08011667 	.word	0x08011667
 80113f8:	08011667 	.word	0x08011667
 80113fc:	08011667 	.word	0x08011667
 8011400:	08011667 	.word	0x08011667
 8011404:	08011455 	.word	0x08011455
 8011408:	08011667 	.word	0x08011667
 801140c:	08011667 	.word	0x08011667
 8011410:	08011667 	.word	0x08011667
 8011414:	08011667 	.word	0x08011667
 8011418:	08011667 	.word	0x08011667
 801141c:	08011667 	.word	0x08011667
 8011420:	08011667 	.word	0x08011667
 8011424:	0801145b 	.word	0x0801145b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011428:	4b94      	ldr	r3, [pc, #592]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f003 0320 	and.w	r3, r3, #32
 8011430:	2b00      	cmp	r3, #0
 8011432:	d009      	beq.n	8011448 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011434:	4b91      	ldr	r3, [pc, #580]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	08db      	lsrs	r3, r3, #3
 801143a:	f003 0303 	and.w	r3, r3, #3
 801143e:	4a90      	ldr	r2, [pc, #576]	; (8011680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011440:	fa22 f303 	lsr.w	r3, r2, r3
 8011444:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8011446:	e111      	b.n	801166c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011448:	4b8d      	ldr	r3, [pc, #564]	; (8011680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801144a:	61bb      	str	r3, [r7, #24]
    break;
 801144c:	e10e      	b.n	801166c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801144e:	4b8d      	ldr	r3, [pc, #564]	; (8011684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011450:	61bb      	str	r3, [r7, #24]
    break;
 8011452:	e10b      	b.n	801166c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8011454:	4b8c      	ldr	r3, [pc, #560]	; (8011688 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011456:	61bb      	str	r3, [r7, #24]
    break;
 8011458:	e108      	b.n	801166c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801145a:	4b88      	ldr	r3, [pc, #544]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801145e:	f003 0303 	and.w	r3, r3, #3
 8011462:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011464:	4b85      	ldr	r3, [pc, #532]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011468:	091b      	lsrs	r3, r3, #4
 801146a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801146e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011470:	4b82      	ldr	r3, [pc, #520]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011474:	f003 0301 	and.w	r3, r3, #1
 8011478:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801147a:	4b80      	ldr	r3, [pc, #512]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801147e:	08db      	lsrs	r3, r3, #3
 8011480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	fb02 f303 	mul.w	r3, r2, r3
 801148a:	ee07 3a90 	vmov	s15, r3
 801148e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011492:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 80e1 	beq.w	8011660 <HAL_RCC_GetSysClockFreq+0x2b8>
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	2b02      	cmp	r3, #2
 80114a2:	f000 8083 	beq.w	80115ac <HAL_RCC_GetSysClockFreq+0x204>
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	f200 80a1 	bhi.w	80115f0 <HAL_RCC_GetSysClockFreq+0x248>
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d003      	beq.n	80114bc <HAL_RCC_GetSysClockFreq+0x114>
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d056      	beq.n	8011568 <HAL_RCC_GetSysClockFreq+0x1c0>
 80114ba:	e099      	b.n	80115f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114bc:	4b6f      	ldr	r3, [pc, #444]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f003 0320 	and.w	r3, r3, #32
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d02d      	beq.n	8011524 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80114c8:	4b6c      	ldr	r3, [pc, #432]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	08db      	lsrs	r3, r3, #3
 80114ce:	f003 0303 	and.w	r3, r3, #3
 80114d2:	4a6b      	ldr	r2, [pc, #428]	; (8011680 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80114d4:	fa22 f303 	lsr.w	r3, r2, r3
 80114d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	ee07 3a90 	vmov	s15, r3
 80114e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	ee07 3a90 	vmov	s15, r3
 80114ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114f2:	4b62      	ldr	r3, [pc, #392]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80114f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114fa:	ee07 3a90 	vmov	s15, r3
 80114fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011502:	ed97 6a02 	vldr	s12, [r7, #8]
 8011506:	eddf 5a61 	vldr	s11, [pc, #388]	; 801168c <HAL_RCC_GetSysClockFreq+0x2e4>
 801150a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801150e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801151e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8011522:	e087      	b.n	8011634 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	ee07 3a90 	vmov	s15, r3
 801152a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801152e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8011690 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011536:	4b51      	ldr	r3, [pc, #324]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801153a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801153e:	ee07 3a90 	vmov	s15, r3
 8011542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011546:	ed97 6a02 	vldr	s12, [r7, #8]
 801154a:	eddf 5a50 	vldr	s11, [pc, #320]	; 801168c <HAL_RCC_GetSysClockFreq+0x2e4>
 801154e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801155a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011566:	e065      	b.n	8011634 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	ee07 3a90 	vmov	s15, r3
 801156e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011572:	eddf 6a48 	vldr	s13, [pc, #288]	; 8011694 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801157a:	4b40      	ldr	r3, [pc, #256]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011582:	ee07 3a90 	vmov	s15, r3
 8011586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801158a:	ed97 6a02 	vldr	s12, [r7, #8]
 801158e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801168c <HAL_RCC_GetSysClockFreq+0x2e4>
 8011592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801159a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801159e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115aa:	e043      	b.n	8011634 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	ee07 3a90 	vmov	s15, r3
 80115b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011698 <HAL_RCC_GetSysClockFreq+0x2f0>
 80115ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115be:	4b2f      	ldr	r3, [pc, #188]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115c6:	ee07 3a90 	vmov	s15, r3
 80115ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80115d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801168c <HAL_RCC_GetSysClockFreq+0x2e4>
 80115d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115ee:	e021      	b.n	8011634 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	ee07 3a90 	vmov	s15, r3
 80115f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8011694 <HAL_RCC_GetSysClockFreq+0x2ec>
 80115fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011602:	4b1e      	ldr	r3, [pc, #120]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801160a:	ee07 3a90 	vmov	s15, r3
 801160e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011612:	ed97 6a02 	vldr	s12, [r7, #8]
 8011616:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801168c <HAL_RCC_GetSysClockFreq+0x2e4>
 801161a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801161e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801162a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801162e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011632:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8011634:	4b11      	ldr	r3, [pc, #68]	; (801167c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011638:	0a5b      	lsrs	r3, r3, #9
 801163a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801163e:	3301      	adds	r3, #1
 8011640:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	ee07 3a90 	vmov	s15, r3
 8011648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801164c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011658:	ee17 3a90 	vmov	r3, s15
 801165c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801165e:	e005      	b.n	801166c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8011660:	2300      	movs	r3, #0
 8011662:	61bb      	str	r3, [r7, #24]
    break;
 8011664:	e002      	b.n	801166c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8011666:	4b07      	ldr	r3, [pc, #28]	; (8011684 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011668:	61bb      	str	r3, [r7, #24]
    break;
 801166a:	bf00      	nop
  }

  return sysclockfreq;
 801166c:	69bb      	ldr	r3, [r7, #24]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3724      	adds	r7, #36	; 0x24
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop
 801167c:	58024400 	.word	0x58024400
 8011680:	03d09000 	.word	0x03d09000
 8011684:	003d0900 	.word	0x003d0900
 8011688:	017d7840 	.word	0x017d7840
 801168c:	46000000 	.word	0x46000000
 8011690:	4c742400 	.word	0x4c742400
 8011694:	4a742400 	.word	0x4a742400
 8011698:	4bbebc20 	.word	0x4bbebc20

0801169c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80116a2:	f7ff fe81 	bl	80113a8 <HAL_RCC_GetSysClockFreq>
 80116a6:	4602      	mov	r2, r0
 80116a8:	4b10      	ldr	r3, [pc, #64]	; (80116ec <HAL_RCC_GetHCLKFreq+0x50>)
 80116aa:	699b      	ldr	r3, [r3, #24]
 80116ac:	0a1b      	lsrs	r3, r3, #8
 80116ae:	f003 030f 	and.w	r3, r3, #15
 80116b2:	490f      	ldr	r1, [pc, #60]	; (80116f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80116b4:	5ccb      	ldrb	r3, [r1, r3]
 80116b6:	f003 031f 	and.w	r3, r3, #31
 80116ba:	fa22 f303 	lsr.w	r3, r2, r3
 80116be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80116c0:	4b0a      	ldr	r3, [pc, #40]	; (80116ec <HAL_RCC_GetHCLKFreq+0x50>)
 80116c2:	699b      	ldr	r3, [r3, #24]
 80116c4:	f003 030f 	and.w	r3, r3, #15
 80116c8:	4a09      	ldr	r2, [pc, #36]	; (80116f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80116ca:	5cd3      	ldrb	r3, [r2, r3]
 80116cc:	f003 031f 	and.w	r3, r3, #31
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	fa22 f303 	lsr.w	r3, r2, r3
 80116d6:	4a07      	ldr	r2, [pc, #28]	; (80116f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80116d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80116da:	4a07      	ldr	r2, [pc, #28]	; (80116f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80116e0:	4b04      	ldr	r3, [pc, #16]	; (80116f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80116e2:	681b      	ldr	r3, [r3, #0]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	58024400 	.word	0x58024400
 80116f0:	08027bf8 	.word	0x08027bf8
 80116f4:	240002e0 	.word	0x240002e0
 80116f8:	240002dc 	.word	0x240002dc

080116fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011700:	f7ff ffcc 	bl	801169c <HAL_RCC_GetHCLKFreq>
 8011704:	4602      	mov	r2, r0
 8011706:	4b06      	ldr	r3, [pc, #24]	; (8011720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011708:	69db      	ldr	r3, [r3, #28]
 801170a:	091b      	lsrs	r3, r3, #4
 801170c:	f003 0307 	and.w	r3, r3, #7
 8011710:	4904      	ldr	r1, [pc, #16]	; (8011724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011712:	5ccb      	ldrb	r3, [r1, r3]
 8011714:	f003 031f 	and.w	r3, r3, #31
 8011718:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801171c:	4618      	mov	r0, r3
 801171e:	bd80      	pop	{r7, pc}
 8011720:	58024400 	.word	0x58024400
 8011724:	08027bf8 	.word	0x08027bf8

08011728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801172c:	f7ff ffb6 	bl	801169c <HAL_RCC_GetHCLKFreq>
 8011730:	4602      	mov	r2, r0
 8011732:	4b06      	ldr	r3, [pc, #24]	; (801174c <HAL_RCC_GetPCLK2Freq+0x24>)
 8011734:	69db      	ldr	r3, [r3, #28]
 8011736:	0a1b      	lsrs	r3, r3, #8
 8011738:	f003 0307 	and.w	r3, r3, #7
 801173c:	4904      	ldr	r1, [pc, #16]	; (8011750 <HAL_RCC_GetPCLK2Freq+0x28>)
 801173e:	5ccb      	ldrb	r3, [r1, r3]
 8011740:	f003 031f 	and.w	r3, r3, #31
 8011744:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011748:	4618      	mov	r0, r3
 801174a:	bd80      	pop	{r7, pc}
 801174c:	58024400 	.word	0x58024400
 8011750:	08027bf8 	.word	0x08027bf8

08011754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	223f      	movs	r2, #63	; 0x3f
 8011762:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011764:	4b1a      	ldr	r3, [pc, #104]	; (80117d0 <HAL_RCC_GetClockConfig+0x7c>)
 8011766:	691b      	ldr	r3, [r3, #16]
 8011768:	f003 0207 	and.w	r2, r3, #7
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8011770:	4b17      	ldr	r3, [pc, #92]	; (80117d0 <HAL_RCC_GetClockConfig+0x7c>)
 8011772:	699b      	ldr	r3, [r3, #24]
 8011774:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801177c:	4b14      	ldr	r3, [pc, #80]	; (80117d0 <HAL_RCC_GetClockConfig+0x7c>)
 801177e:	699b      	ldr	r3, [r3, #24]
 8011780:	f003 020f 	and.w	r2, r3, #15
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8011788:	4b11      	ldr	r3, [pc, #68]	; (80117d0 <HAL_RCC_GetClockConfig+0x7c>)
 801178a:	699b      	ldr	r3, [r3, #24]
 801178c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8011794:	4b0e      	ldr	r3, [pc, #56]	; (80117d0 <HAL_RCC_GetClockConfig+0x7c>)
 8011796:	69db      	ldr	r3, [r3, #28]
 8011798:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <HAL_RCC_GetClockConfig+0x7c>)
 80117a2:	69db      	ldr	r3, [r3, #28]
 80117a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80117ac:	4b08      	ldr	r3, [pc, #32]	; (80117d0 <HAL_RCC_GetClockConfig+0x7c>)
 80117ae:	6a1b      	ldr	r3, [r3, #32]
 80117b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80117b8:	4b06      	ldr	r3, [pc, #24]	; (80117d4 <HAL_RCC_GetClockConfig+0x80>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f003 020f 	and.w	r2, r3, #15
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	601a      	str	r2, [r3, #0]
}
 80117c4:	bf00      	nop
 80117c6:	370c      	adds	r7, #12
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr
 80117d0:	58024400 	.word	0x58024400
 80117d4:	52002000 	.word	0x52002000

080117d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80117e0:	2300      	movs	r3, #0
 80117e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80117e4:	2300      	movs	r3, #0
 80117e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d03f      	beq.n	8011874 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80117f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80117fc:	d02a      	beq.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80117fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011802:	d824      	bhi.n	801184e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011808:	d018      	beq.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801180a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801180e:	d81e      	bhi.n	801184e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011810:	2b00      	cmp	r3, #0
 8011812:	d003      	beq.n	801181c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011818:	d007      	beq.n	801182a <HAL_RCCEx_PeriphCLKConfig+0x52>
 801181a:	e018      	b.n	801184e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801181c:	4ba3      	ldr	r3, [pc, #652]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011820:	4aa2      	ldr	r2, [pc, #648]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8011828:	e015      	b.n	8011856 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	3304      	adds	r3, #4
 801182e:	2102      	movs	r1, #2
 8011830:	4618      	mov	r0, r3
 8011832:	f001 fff9 	bl	8013828 <RCCEx_PLL2_Config>
 8011836:	4603      	mov	r3, r0
 8011838:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801183a:	e00c      	b.n	8011856 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	3324      	adds	r3, #36	; 0x24
 8011840:	2102      	movs	r1, #2
 8011842:	4618      	mov	r0, r3
 8011844:	f002 f8a2 	bl	801398c <RCCEx_PLL3_Config>
 8011848:	4603      	mov	r3, r0
 801184a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801184c:	e003      	b.n	8011856 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801184e:	2301      	movs	r3, #1
 8011850:	75fb      	strb	r3, [r7, #23]
      break;
 8011852:	e000      	b.n	8011856 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8011854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011856:	7dfb      	ldrb	r3, [r7, #23]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d109      	bne.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801185c:	4b93      	ldr	r3, [pc, #588]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801185e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011868:	4990      	ldr	r1, [pc, #576]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801186a:	4313      	orrs	r3, r2
 801186c:	650b      	str	r3, [r1, #80]	; 0x50
 801186e:	e001      	b.n	8011874 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011870:	7dfb      	ldrb	r3, [r7, #23]
 8011872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801187c:	2b00      	cmp	r3, #0
 801187e:	d03d      	beq.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011884:	2b04      	cmp	r3, #4
 8011886:	d826      	bhi.n	80118d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8011888:	a201      	add	r2, pc, #4	; (adr r2, 8011890 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 801188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801188e:	bf00      	nop
 8011890:	080118a5 	.word	0x080118a5
 8011894:	080118b3 	.word	0x080118b3
 8011898:	080118c5 	.word	0x080118c5
 801189c:	080118dd 	.word	0x080118dd
 80118a0:	080118dd 	.word	0x080118dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80118a4:	4b81      	ldr	r3, [pc, #516]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80118a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a8:	4a80      	ldr	r2, [pc, #512]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80118aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80118ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80118b0:	e015      	b.n	80118de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	3304      	adds	r3, #4
 80118b6:	2100      	movs	r1, #0
 80118b8:	4618      	mov	r0, r3
 80118ba:	f001 ffb5 	bl	8013828 <RCCEx_PLL2_Config>
 80118be:	4603      	mov	r3, r0
 80118c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80118c2:	e00c      	b.n	80118de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	3324      	adds	r3, #36	; 0x24
 80118c8:	2100      	movs	r1, #0
 80118ca:	4618      	mov	r0, r3
 80118cc:	f002 f85e 	bl	801398c <RCCEx_PLL3_Config>
 80118d0:	4603      	mov	r3, r0
 80118d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80118d4:	e003      	b.n	80118de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80118d6:	2301      	movs	r3, #1
 80118d8:	75fb      	strb	r3, [r7, #23]
      break;
 80118da:	e000      	b.n	80118de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80118dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d109      	bne.n	80118f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80118e4:	4b71      	ldr	r3, [pc, #452]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80118e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118e8:	f023 0207 	bic.w	r2, r3, #7
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118f0:	496e      	ldr	r1, [pc, #440]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80118f2:	4313      	orrs	r3, r2
 80118f4:	650b      	str	r3, [r1, #80]	; 0x50
 80118f6:	e001      	b.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118f8:	7dfb      	ldrb	r3, [r7, #23]
 80118fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011904:	2b00      	cmp	r3, #0
 8011906:	d042      	beq.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801190c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011910:	d02b      	beq.n	801196a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8011912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011916:	d825      	bhi.n	8011964 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011918:	2bc0      	cmp	r3, #192	; 0xc0
 801191a:	d028      	beq.n	801196e <HAL_RCCEx_PeriphCLKConfig+0x196>
 801191c:	2bc0      	cmp	r3, #192	; 0xc0
 801191e:	d821      	bhi.n	8011964 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011920:	2b80      	cmp	r3, #128	; 0x80
 8011922:	d016      	beq.n	8011952 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8011924:	2b80      	cmp	r3, #128	; 0x80
 8011926:	d81d      	bhi.n	8011964 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 801192c:	2b40      	cmp	r3, #64	; 0x40
 801192e:	d007      	beq.n	8011940 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8011930:	e018      	b.n	8011964 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011932:	4b5e      	ldr	r3, [pc, #376]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011936:	4a5d      	ldr	r2, [pc, #372]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801193c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801193e:	e017      	b.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	3304      	adds	r3, #4
 8011944:	2100      	movs	r1, #0
 8011946:	4618      	mov	r0, r3
 8011948:	f001 ff6e 	bl	8013828 <RCCEx_PLL2_Config>
 801194c:	4603      	mov	r3, r0
 801194e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011950:	e00e      	b.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	3324      	adds	r3, #36	; 0x24
 8011956:	2100      	movs	r1, #0
 8011958:	4618      	mov	r0, r3
 801195a:	f002 f817 	bl	801398c <RCCEx_PLL3_Config>
 801195e:	4603      	mov	r3, r0
 8011960:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8011962:	e005      	b.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011964:	2301      	movs	r3, #1
 8011966:	75fb      	strb	r3, [r7, #23]
      break;
 8011968:	e002      	b.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801196a:	bf00      	nop
 801196c:	e000      	b.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801196e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011970:	7dfb      	ldrb	r3, [r7, #23]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d109      	bne.n	801198a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8011976:	4b4d      	ldr	r3, [pc, #308]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801197a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011982:	494a      	ldr	r1, [pc, #296]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011984:	4313      	orrs	r3, r2
 8011986:	650b      	str	r3, [r1, #80]	; 0x50
 8011988:	e001      	b.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801198a:	7dfb      	ldrb	r3, [r7, #23]
 801198c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011996:	2b00      	cmp	r3, #0
 8011998:	d049      	beq.n	8011a2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80119a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80119a4:	d030      	beq.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80119a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80119aa:	d82a      	bhi.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80119ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80119b0:	d02c      	beq.n	8011a0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80119b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80119b6:	d824      	bhi.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80119b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80119bc:	d018      	beq.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80119be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80119c2:	d81e      	bhi.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d003      	beq.n	80119d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80119c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80119cc:	d007      	beq.n	80119de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80119ce:	e018      	b.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80119d0:	4b36      	ldr	r3, [pc, #216]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80119d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119d4:	4a35      	ldr	r2, [pc, #212]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80119d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80119dc:	e017      	b.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3304      	adds	r3, #4
 80119e2:	2100      	movs	r1, #0
 80119e4:	4618      	mov	r0, r3
 80119e6:	f001 ff1f 	bl	8013828 <RCCEx_PLL2_Config>
 80119ea:	4603      	mov	r3, r0
 80119ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80119ee:	e00e      	b.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	3324      	adds	r3, #36	; 0x24
 80119f4:	2100      	movs	r1, #0
 80119f6:	4618      	mov	r0, r3
 80119f8:	f001 ffc8 	bl	801398c <RCCEx_PLL3_Config>
 80119fc:	4603      	mov	r3, r0
 80119fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011a00:	e005      	b.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011a02:	2301      	movs	r3, #1
 8011a04:	75fb      	strb	r3, [r7, #23]
      break;
 8011a06:	e002      	b.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011a08:	bf00      	nop
 8011a0a:	e000      	b.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a0e:	7dfb      	ldrb	r3, [r7, #23]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d10a      	bne.n	8011a2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011a14:	4b25      	ldr	r3, [pc, #148]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011a22:	4922      	ldr	r1, [pc, #136]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a24:	4313      	orrs	r3, r2
 8011a26:	658b      	str	r3, [r1, #88]	; 0x58
 8011a28:	e001      	b.n	8011a2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a2a:	7dfb      	ldrb	r3, [r7, #23]
 8011a2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d04b      	beq.n	8011ad2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011a44:	d030      	beq.n	8011aa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8011a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011a4a:	d82a      	bhi.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011a4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011a50:	d02e      	beq.n	8011ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8011a52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011a56:	d824      	bhi.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a5c:	d018      	beq.n	8011a90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8011a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a62:	d81e      	bhi.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d003      	beq.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011a6c:	d007      	beq.n	8011a7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011a6e:	e018      	b.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a70:	4b0e      	ldr	r3, [pc, #56]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a74:	4a0d      	ldr	r2, [pc, #52]	; (8011aac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011a7c:	e019      	b.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	3304      	adds	r3, #4
 8011a82:	2100      	movs	r1, #0
 8011a84:	4618      	mov	r0, r3
 8011a86:	f001 fecf 	bl	8013828 <RCCEx_PLL2_Config>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8011a8e:	e010      	b.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	3324      	adds	r3, #36	; 0x24
 8011a94:	2100      	movs	r1, #0
 8011a96:	4618      	mov	r0, r3
 8011a98:	f001 ff78 	bl	801398c <RCCEx_PLL3_Config>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011aa0:	e007      	b.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8011aa6:	e004      	b.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8011aa8:	bf00      	nop
 8011aaa:	e002      	b.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011aac:	58024400 	.word	0x58024400
      break;
 8011ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011ab2:	7dfb      	ldrb	r3, [r7, #23]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10a      	bne.n	8011ace <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011ab8:	4b99      	ldr	r3, [pc, #612]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011abc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011ac6:	4996      	ldr	r1, [pc, #600]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011ac8:	4313      	orrs	r3, r2
 8011aca:	658b      	str	r3, [r1, #88]	; 0x58
 8011acc:	e001      	b.n	8011ad2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ace:	7dfb      	ldrb	r3, [r7, #23]
 8011ad0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d032      	beq.n	8011b44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ae2:	2b30      	cmp	r3, #48	; 0x30
 8011ae4:	d01c      	beq.n	8011b20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8011ae6:	2b30      	cmp	r3, #48	; 0x30
 8011ae8:	d817      	bhi.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8011aea:	2b20      	cmp	r3, #32
 8011aec:	d00c      	beq.n	8011b08 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8011aee:	2b20      	cmp	r3, #32
 8011af0:	d813      	bhi.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d016      	beq.n	8011b24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8011af6:	2b10      	cmp	r3, #16
 8011af8:	d10f      	bne.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011afa:	4b89      	ldr	r3, [pc, #548]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afe:	4a88      	ldr	r2, [pc, #544]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011b06:	e00e      	b.n	8011b26 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3304      	adds	r3, #4
 8011b0c:	2102      	movs	r1, #2
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f001 fe8a 	bl	8013828 <RCCEx_PLL2_Config>
 8011b14:	4603      	mov	r3, r0
 8011b16:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8011b18:	e005      	b.n	8011b26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8011b1e:	e002      	b.n	8011b26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011b20:	bf00      	nop
 8011b22:	e000      	b.n	8011b26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b26:	7dfb      	ldrb	r3, [r7, #23]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d109      	bne.n	8011b40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8011b2c:	4b7c      	ldr	r3, [pc, #496]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b38:	4979      	ldr	r1, [pc, #484]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011b3a:	4313      	orrs	r3, r2
 8011b3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011b3e:	e001      	b.n	8011b44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b40:	7dfb      	ldrb	r3, [r7, #23]
 8011b42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d047      	beq.n	8011be0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b58:	d030      	beq.n	8011bbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8011b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b5e:	d82a      	bhi.n	8011bb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011b60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011b64:	d02c      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8011b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011b6a:	d824      	bhi.n	8011bb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b70:	d018      	beq.n	8011ba4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8011b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b76:	d81e      	bhi.n	8011bb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d003      	beq.n	8011b84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8011b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b80:	d007      	beq.n	8011b92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8011b82:	e018      	b.n	8011bb6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b84:	4b66      	ldr	r3, [pc, #408]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b88:	4a65      	ldr	r2, [pc, #404]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011b90:	e017      	b.n	8011bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	3304      	adds	r3, #4
 8011b96:	2100      	movs	r1, #0
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f001 fe45 	bl	8013828 <RCCEx_PLL2_Config>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011ba2:	e00e      	b.n	8011bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	3324      	adds	r3, #36	; 0x24
 8011ba8:	2100      	movs	r1, #0
 8011baa:	4618      	mov	r0, r3
 8011bac:	f001 feee 	bl	801398c <RCCEx_PLL3_Config>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011bb4:	e005      	b.n	8011bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8011bba:	e002      	b.n	8011bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8011bbc:	bf00      	nop
 8011bbe:	e000      	b.n	8011bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8011bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011bc2:	7dfb      	ldrb	r3, [r7, #23]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d109      	bne.n	8011bdc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011bc8:	4b55      	ldr	r3, [pc, #340]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bcc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bd4:	4952      	ldr	r1, [pc, #328]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8011bda:	e001      	b.n	8011be0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011bdc:	7dfb      	ldrb	r3, [r7, #23]
 8011bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d049      	beq.n	8011c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011bf4:	d02e      	beq.n	8011c54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8011bf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011bfa:	d828      	bhi.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c00:	d02a      	beq.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8011c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c06:	d822      	bhi.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011c0c:	d026      	beq.n	8011c5c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8011c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011c12:	d81c      	bhi.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c18:	d010      	beq.n	8011c3c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8011c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c1e:	d816      	bhi.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d01d      	beq.n	8011c60 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8011c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c28:	d111      	bne.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	2101      	movs	r1, #1
 8011c30:	4618      	mov	r0, r3
 8011c32:	f001 fdf9 	bl	8013828 <RCCEx_PLL2_Config>
 8011c36:	4603      	mov	r3, r0
 8011c38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011c3a:	e012      	b.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	3324      	adds	r3, #36	; 0x24
 8011c40:	2101      	movs	r1, #1
 8011c42:	4618      	mov	r0, r3
 8011c44:	f001 fea2 	bl	801398c <RCCEx_PLL3_Config>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011c4c:	e009      	b.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011c4e:	2301      	movs	r3, #1
 8011c50:	75fb      	strb	r3, [r7, #23]
      break;
 8011c52:	e006      	b.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011c54:	bf00      	nop
 8011c56:	e004      	b.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011c58:	bf00      	nop
 8011c5a:	e002      	b.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011c5c:	bf00      	nop
 8011c5e:	e000      	b.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c62:	7dfb      	ldrb	r3, [r7, #23]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d109      	bne.n	8011c7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011c68:	4b2d      	ldr	r3, [pc, #180]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c74:	492a      	ldr	r1, [pc, #168]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011c76:	4313      	orrs	r3, r2
 8011c78:	650b      	str	r3, [r1, #80]	; 0x50
 8011c7a:	e001      	b.n	8011c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c7c:	7dfb      	ldrb	r3, [r7, #23]
 8011c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d04d      	beq.n	8011d28 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011c96:	d02e      	beq.n	8011cf6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8011c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011c9c:	d828      	bhi.n	8011cf0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ca2:	d02a      	beq.n	8011cfa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8011ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ca8:	d822      	bhi.n	8011cf0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011cae:	d026      	beq.n	8011cfe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8011cb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011cb4:	d81c      	bhi.n	8011cf0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011cba:	d010      	beq.n	8011cde <HAL_RCCEx_PeriphCLKConfig+0x506>
 8011cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011cc0:	d816      	bhi.n	8011cf0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d01d      	beq.n	8011d02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8011cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011cca:	d111      	bne.n	8011cf0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	3304      	adds	r3, #4
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f001 fda8 	bl	8013828 <RCCEx_PLL2_Config>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011cdc:	e012      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	3324      	adds	r3, #36	; 0x24
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f001 fe51 	bl	801398c <RCCEx_PLL3_Config>
 8011cea:	4603      	mov	r3, r0
 8011cec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011cee:	e009      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8011cf4:	e006      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011cf6:	bf00      	nop
 8011cf8:	e004      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011cfa:	bf00      	nop
 8011cfc:	e002      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011cfe:	bf00      	nop
 8011d00:	e000      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d04:	7dfb      	ldrb	r3, [r7, #23]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10c      	bne.n	8011d24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011d0a:	4b05      	ldr	r3, [pc, #20]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011d18:	4901      	ldr	r1, [pc, #4]	; (8011d20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011d1a:	4313      	orrs	r3, r2
 8011d1c:	658b      	str	r3, [r1, #88]	; 0x58
 8011d1e:	e003      	b.n	8011d28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8011d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d24:	7dfb      	ldrb	r3, [r7, #23]
 8011d26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d02f      	beq.n	8011d94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d3c:	d00e      	beq.n	8011d5c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8011d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d42:	d814      	bhi.n	8011d6e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d015      	beq.n	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8011d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d4c:	d10f      	bne.n	8011d6e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d4e:	4baf      	ldr	r3, [pc, #700]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d52:	4aae      	ldr	r2, [pc, #696]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011d5a:	e00c      	b.n	8011d76 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	3304      	adds	r3, #4
 8011d60:	2101      	movs	r1, #1
 8011d62:	4618      	mov	r0, r3
 8011d64:	f001 fd60 	bl	8013828 <RCCEx_PLL2_Config>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8011d6c:	e003      	b.n	8011d76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011d6e:	2301      	movs	r3, #1
 8011d70:	75fb      	strb	r3, [r7, #23]
      break;
 8011d72:	e000      	b.n	8011d76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8011d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011d76:	7dfb      	ldrb	r3, [r7, #23]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d109      	bne.n	8011d90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011d7c:	4ba3      	ldr	r3, [pc, #652]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d88:	49a0      	ldr	r1, [pc, #640]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011d8a:	4313      	orrs	r3, r2
 8011d8c:	650b      	str	r3, [r1, #80]	; 0x50
 8011d8e:	e001      	b.n	8011d94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d90:	7dfb      	ldrb	r3, [r7, #23]
 8011d92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d032      	beq.n	8011e06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011da4:	2b03      	cmp	r3, #3
 8011da6:	d81b      	bhi.n	8011de0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8011da8:	a201      	add	r2, pc, #4	; (adr r2, 8011db0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8011daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dae:	bf00      	nop
 8011db0:	08011de7 	.word	0x08011de7
 8011db4:	08011dc1 	.word	0x08011dc1
 8011db8:	08011dcf 	.word	0x08011dcf
 8011dbc:	08011de7 	.word	0x08011de7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011dc0:	4b92      	ldr	r3, [pc, #584]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc4:	4a91      	ldr	r2, [pc, #580]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011dcc:	e00c      	b.n	8011de8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	3304      	adds	r3, #4
 8011dd2:	2102      	movs	r1, #2
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f001 fd27 	bl	8013828 <RCCEx_PLL2_Config>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011dde:	e003      	b.n	8011de8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011de0:	2301      	movs	r3, #1
 8011de2:	75fb      	strb	r3, [r7, #23]
      break;
 8011de4:	e000      	b.n	8011de8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8011de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011de8:	7dfb      	ldrb	r3, [r7, #23]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d109      	bne.n	8011e02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011dee:	4b87      	ldr	r3, [pc, #540]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011df2:	f023 0203 	bic.w	r2, r3, #3
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dfa:	4984      	ldr	r1, [pc, #528]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011e00:	e001      	b.n	8011e06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	f000 8086 	beq.w	8011f20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011e14:	4b7e      	ldr	r3, [pc, #504]	; (8012010 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	4a7d      	ldr	r2, [pc, #500]	; (8012010 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011e20:	f7f8 f8cc 	bl	8009fbc <HAL_GetTick>
 8011e24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011e26:	e009      	b.n	8011e3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011e28:	f7f8 f8c8 	bl	8009fbc <HAL_GetTick>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	2b64      	cmp	r3, #100	; 0x64
 8011e34:	d902      	bls.n	8011e3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8011e36:	2303      	movs	r3, #3
 8011e38:	75fb      	strb	r3, [r7, #23]
        break;
 8011e3a:	e005      	b.n	8011e48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011e3c:	4b74      	ldr	r3, [pc, #464]	; (8012010 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d0ef      	beq.n	8011e28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8011e48:	7dfb      	ldrb	r3, [r7, #23]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d166      	bne.n	8011f1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011e4e:	4b6f      	ldr	r3, [pc, #444]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011e58:	4053      	eors	r3, r2
 8011e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d013      	beq.n	8011e8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011e62:	4b6a      	ldr	r3, [pc, #424]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011e6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011e6c:	4b67      	ldr	r3, [pc, #412]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e70:	4a66      	ldr	r2, [pc, #408]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011e76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011e78:	4b64      	ldr	r3, [pc, #400]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e7c:	4a63      	ldr	r2, [pc, #396]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011e82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011e84:	4a61      	ldr	r2, [pc, #388]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e94:	d115      	bne.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e96:	f7f8 f891 	bl	8009fbc <HAL_GetTick>
 8011e9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011e9c:	e00b      	b.n	8011eb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011e9e:	f7f8 f88d 	bl	8009fbc <HAL_GetTick>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d902      	bls.n	8011eb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8011eb0:	2303      	movs	r3, #3
 8011eb2:	75fb      	strb	r3, [r7, #23]
            break;
 8011eb4:	e005      	b.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011eb6:	4b55      	ldr	r3, [pc, #340]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eba:	f003 0302 	and.w	r3, r3, #2
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d0ed      	beq.n	8011e9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8011ec2:	7dfb      	ldrb	r3, [r7, #23]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d126      	bne.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ed6:	d10d      	bne.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8011ed8:	4b4c      	ldr	r3, [pc, #304]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011eda:	691b      	ldr	r3, [r3, #16]
 8011edc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011ee6:	0919      	lsrs	r1, r3, #4
 8011ee8:	4b4a      	ldr	r3, [pc, #296]	; (8012014 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8011eea:	400b      	ands	r3, r1
 8011eec:	4947      	ldr	r1, [pc, #284]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011eee:	4313      	orrs	r3, r2
 8011ef0:	610b      	str	r3, [r1, #16]
 8011ef2:	e005      	b.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8011ef4:	4b45      	ldr	r3, [pc, #276]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011ef6:	691b      	ldr	r3, [r3, #16]
 8011ef8:	4a44      	ldr	r2, [pc, #272]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011efa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011efe:	6113      	str	r3, [r2, #16]
 8011f00:	4b42      	ldr	r3, [pc, #264]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f0e:	493f      	ldr	r1, [pc, #252]	; (801200c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011f10:	4313      	orrs	r3, r2
 8011f12:	670b      	str	r3, [r1, #112]	; 0x70
 8011f14:	e004      	b.n	8011f20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011f16:	7dfb      	ldrb	r3, [r7, #23]
 8011f18:	75bb      	strb	r3, [r7, #22]
 8011f1a:	e001      	b.n	8011f20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f1c:	7dfb      	ldrb	r3, [r7, #23]
 8011f1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f003 0301 	and.w	r3, r3, #1
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f000 8085 	beq.w	8012038 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f32:	2b28      	cmp	r3, #40	; 0x28
 8011f34:	d866      	bhi.n	8012004 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8011f36:	a201      	add	r2, pc, #4	; (adr r2, 8011f3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8011f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f3c:	08012019 	.word	0x08012019
 8011f40:	08012005 	.word	0x08012005
 8011f44:	08012005 	.word	0x08012005
 8011f48:	08012005 	.word	0x08012005
 8011f4c:	08012005 	.word	0x08012005
 8011f50:	08012005 	.word	0x08012005
 8011f54:	08012005 	.word	0x08012005
 8011f58:	08012005 	.word	0x08012005
 8011f5c:	08011fe1 	.word	0x08011fe1
 8011f60:	08012005 	.word	0x08012005
 8011f64:	08012005 	.word	0x08012005
 8011f68:	08012005 	.word	0x08012005
 8011f6c:	08012005 	.word	0x08012005
 8011f70:	08012005 	.word	0x08012005
 8011f74:	08012005 	.word	0x08012005
 8011f78:	08012005 	.word	0x08012005
 8011f7c:	08011ff3 	.word	0x08011ff3
 8011f80:	08012005 	.word	0x08012005
 8011f84:	08012005 	.word	0x08012005
 8011f88:	08012005 	.word	0x08012005
 8011f8c:	08012005 	.word	0x08012005
 8011f90:	08012005 	.word	0x08012005
 8011f94:	08012005 	.word	0x08012005
 8011f98:	08012005 	.word	0x08012005
 8011f9c:	08012019 	.word	0x08012019
 8011fa0:	08012005 	.word	0x08012005
 8011fa4:	08012005 	.word	0x08012005
 8011fa8:	08012005 	.word	0x08012005
 8011fac:	08012005 	.word	0x08012005
 8011fb0:	08012005 	.word	0x08012005
 8011fb4:	08012005 	.word	0x08012005
 8011fb8:	08012005 	.word	0x08012005
 8011fbc:	08012019 	.word	0x08012019
 8011fc0:	08012005 	.word	0x08012005
 8011fc4:	08012005 	.word	0x08012005
 8011fc8:	08012005 	.word	0x08012005
 8011fcc:	08012005 	.word	0x08012005
 8011fd0:	08012005 	.word	0x08012005
 8011fd4:	08012005 	.word	0x08012005
 8011fd8:	08012005 	.word	0x08012005
 8011fdc:	08012019 	.word	0x08012019
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	2101      	movs	r1, #1
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f001 fc1e 	bl	8013828 <RCCEx_PLL2_Config>
 8011fec:	4603      	mov	r3, r0
 8011fee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011ff0:	e013      	b.n	801201a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	3324      	adds	r3, #36	; 0x24
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f001 fcc7 	bl	801398c <RCCEx_PLL3_Config>
 8011ffe:	4603      	mov	r3, r0
 8012000:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8012002:	e00a      	b.n	801201a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012004:	2301      	movs	r3, #1
 8012006:	75fb      	strb	r3, [r7, #23]
      break;
 8012008:	e007      	b.n	801201a <HAL_RCCEx_PeriphCLKConfig+0x842>
 801200a:	bf00      	nop
 801200c:	58024400 	.word	0x58024400
 8012010:	58024800 	.word	0x58024800
 8012014:	00ffffcf 	.word	0x00ffffcf
      break;
 8012018:	bf00      	nop
    }

    if(ret == HAL_OK)
 801201a:	7dfb      	ldrb	r3, [r7, #23]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d109      	bne.n	8012034 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012020:	4b96      	ldr	r3, [pc, #600]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012024:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801202c:	4993      	ldr	r1, [pc, #588]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801202e:	4313      	orrs	r3, r2
 8012030:	654b      	str	r3, [r1, #84]	; 0x54
 8012032:	e001      	b.n	8012038 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f003 0302 	and.w	r3, r3, #2
 8012040:	2b00      	cmp	r3, #0
 8012042:	d038      	beq.n	80120b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012048:	2b05      	cmp	r3, #5
 801204a:	d821      	bhi.n	8012090 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 801204c:	a201      	add	r2, pc, #4	; (adr r2, 8012054 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 801204e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012052:	bf00      	nop
 8012054:	08012097 	.word	0x08012097
 8012058:	0801206d 	.word	0x0801206d
 801205c:	0801207f 	.word	0x0801207f
 8012060:	08012097 	.word	0x08012097
 8012064:	08012097 	.word	0x08012097
 8012068:	08012097 	.word	0x08012097
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	3304      	adds	r3, #4
 8012070:	2101      	movs	r1, #1
 8012072:	4618      	mov	r0, r3
 8012074:	f001 fbd8 	bl	8013828 <RCCEx_PLL2_Config>
 8012078:	4603      	mov	r3, r0
 801207a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801207c:	e00c      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3324      	adds	r3, #36	; 0x24
 8012082:	2101      	movs	r1, #1
 8012084:	4618      	mov	r0, r3
 8012086:	f001 fc81 	bl	801398c <RCCEx_PLL3_Config>
 801208a:	4603      	mov	r3, r0
 801208c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801208e:	e003      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012090:	2301      	movs	r3, #1
 8012092:	75fb      	strb	r3, [r7, #23]
      break;
 8012094:	e000      	b.n	8012098 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8012096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012098:	7dfb      	ldrb	r3, [r7, #23]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d109      	bne.n	80120b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801209e:	4b77      	ldr	r3, [pc, #476]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80120a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120a2:	f023 0207 	bic.w	r2, r3, #7
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120aa:	4974      	ldr	r1, [pc, #464]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80120ac:	4313      	orrs	r3, r2
 80120ae:	654b      	str	r3, [r1, #84]	; 0x54
 80120b0:	e001      	b.n	80120b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120b2:	7dfb      	ldrb	r3, [r7, #23]
 80120b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	f003 0304 	and.w	r3, r3, #4
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d03a      	beq.n	8012138 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120c8:	2b05      	cmp	r3, #5
 80120ca:	d821      	bhi.n	8012110 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80120cc:	a201      	add	r2, pc, #4	; (adr r2, 80120d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80120ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120d2:	bf00      	nop
 80120d4:	08012117 	.word	0x08012117
 80120d8:	080120ed 	.word	0x080120ed
 80120dc:	080120ff 	.word	0x080120ff
 80120e0:	08012117 	.word	0x08012117
 80120e4:	08012117 	.word	0x08012117
 80120e8:	08012117 	.word	0x08012117
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	3304      	adds	r3, #4
 80120f0:	2101      	movs	r1, #1
 80120f2:	4618      	mov	r0, r3
 80120f4:	f001 fb98 	bl	8013828 <RCCEx_PLL2_Config>
 80120f8:	4603      	mov	r3, r0
 80120fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80120fc:	e00c      	b.n	8012118 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	3324      	adds	r3, #36	; 0x24
 8012102:	2101      	movs	r1, #1
 8012104:	4618      	mov	r0, r3
 8012106:	f001 fc41 	bl	801398c <RCCEx_PLL3_Config>
 801210a:	4603      	mov	r3, r0
 801210c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801210e:	e003      	b.n	8012118 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012110:	2301      	movs	r3, #1
 8012112:	75fb      	strb	r3, [r7, #23]
      break;
 8012114:	e000      	b.n	8012118 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8012116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012118:	7dfb      	ldrb	r3, [r7, #23]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10a      	bne.n	8012134 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801211e:	4b57      	ldr	r3, [pc, #348]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012122:	f023 0207 	bic.w	r2, r3, #7
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801212c:	4953      	ldr	r1, [pc, #332]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801212e:	4313      	orrs	r3, r2
 8012130:	658b      	str	r3, [r1, #88]	; 0x58
 8012132:	e001      	b.n	8012138 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012134:	7dfb      	ldrb	r3, [r7, #23]
 8012136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f003 0320 	and.w	r3, r3, #32
 8012140:	2b00      	cmp	r3, #0
 8012142:	d04b      	beq.n	80121dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801214a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801214e:	d02e      	beq.n	80121ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8012150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012154:	d828      	bhi.n	80121a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801215a:	d02a      	beq.n	80121b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 801215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012160:	d822      	bhi.n	80121a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8012162:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012166:	d026      	beq.n	80121b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8012168:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801216c:	d81c      	bhi.n	80121a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801216e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012172:	d010      	beq.n	8012196 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8012174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012178:	d816      	bhi.n	80121a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801217a:	2b00      	cmp	r3, #0
 801217c:	d01d      	beq.n	80121ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 801217e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012182:	d111      	bne.n	80121a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	3304      	adds	r3, #4
 8012188:	2100      	movs	r1, #0
 801218a:	4618      	mov	r0, r3
 801218c:	f001 fb4c 	bl	8013828 <RCCEx_PLL2_Config>
 8012190:	4603      	mov	r3, r0
 8012192:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8012194:	e012      	b.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	3324      	adds	r3, #36	; 0x24
 801219a:	2102      	movs	r1, #2
 801219c:	4618      	mov	r0, r3
 801219e:	f001 fbf5 	bl	801398c <RCCEx_PLL3_Config>
 80121a2:	4603      	mov	r3, r0
 80121a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80121a6:	e009      	b.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80121a8:	2301      	movs	r3, #1
 80121aa:	75fb      	strb	r3, [r7, #23]
      break;
 80121ac:	e006      	b.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80121ae:	bf00      	nop
 80121b0:	e004      	b.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80121b2:	bf00      	nop
 80121b4:	e002      	b.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80121b6:	bf00      	nop
 80121b8:	e000      	b.n	80121bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80121ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80121bc:	7dfb      	ldrb	r3, [r7, #23]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d10a      	bne.n	80121d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80121c2:	4b2e      	ldr	r3, [pc, #184]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80121c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121d0:	492a      	ldr	r1, [pc, #168]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80121d2:	4313      	orrs	r3, r2
 80121d4:	654b      	str	r3, [r1, #84]	; 0x54
 80121d6:	e001      	b.n	80121dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80121d8:	7dfb      	ldrb	r3, [r7, #23]
 80121da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d04d      	beq.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80121ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80121f2:	d02e      	beq.n	8012252 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80121f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80121f8:	d828      	bhi.n	801224c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80121fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121fe:	d02a      	beq.n	8012256 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8012200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012204:	d822      	bhi.n	801224c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801220a:	d026      	beq.n	801225a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 801220c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012210:	d81c      	bhi.n	801224c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8012212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012216:	d010      	beq.n	801223a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8012218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801221c:	d816      	bhi.n	801224c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801221e:	2b00      	cmp	r3, #0
 8012220:	d01d      	beq.n	801225e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8012222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012226:	d111      	bne.n	801224c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	3304      	adds	r3, #4
 801222c:	2100      	movs	r1, #0
 801222e:	4618      	mov	r0, r3
 8012230:	f001 fafa 	bl	8013828 <RCCEx_PLL2_Config>
 8012234:	4603      	mov	r3, r0
 8012236:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8012238:	e012      	b.n	8012260 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	3324      	adds	r3, #36	; 0x24
 801223e:	2102      	movs	r1, #2
 8012240:	4618      	mov	r0, r3
 8012242:	f001 fba3 	bl	801398c <RCCEx_PLL3_Config>
 8012246:	4603      	mov	r3, r0
 8012248:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801224a:	e009      	b.n	8012260 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801224c:	2301      	movs	r3, #1
 801224e:	75fb      	strb	r3, [r7, #23]
      break;
 8012250:	e006      	b.n	8012260 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012252:	bf00      	nop
 8012254:	e004      	b.n	8012260 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8012256:	bf00      	nop
 8012258:	e002      	b.n	8012260 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801225a:	bf00      	nop
 801225c:	e000      	b.n	8012260 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801225e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012260:	7dfb      	ldrb	r3, [r7, #23]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d10c      	bne.n	8012280 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012266:	4b05      	ldr	r3, [pc, #20]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801226a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012274:	4901      	ldr	r1, [pc, #4]	; (801227c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8012276:	4313      	orrs	r3, r2
 8012278:	658b      	str	r3, [r1, #88]	; 0x58
 801227a:	e003      	b.n	8012284 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801227c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012280:	7dfb      	ldrb	r3, [r7, #23]
 8012282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801228c:	2b00      	cmp	r3, #0
 801228e:	d04b      	beq.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012296:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801229a:	d02e      	beq.n	80122fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 801229c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80122a0:	d828      	bhi.n	80122f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80122a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80122a6:	d02a      	beq.n	80122fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80122a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80122ac:	d822      	bhi.n	80122f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80122ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80122b2:	d026      	beq.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80122b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80122b8:	d81c      	bhi.n	80122f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80122ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80122be:	d010      	beq.n	80122e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80122c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80122c4:	d816      	bhi.n	80122f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d01d      	beq.n	8012306 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80122ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80122ce:	d111      	bne.n	80122f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	3304      	adds	r3, #4
 80122d4:	2100      	movs	r1, #0
 80122d6:	4618      	mov	r0, r3
 80122d8:	f001 faa6 	bl	8013828 <RCCEx_PLL2_Config>
 80122dc:	4603      	mov	r3, r0
 80122de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80122e0:	e012      	b.n	8012308 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	3324      	adds	r3, #36	; 0x24
 80122e6:	2102      	movs	r1, #2
 80122e8:	4618      	mov	r0, r3
 80122ea:	f001 fb4f 	bl	801398c <RCCEx_PLL3_Config>
 80122ee:	4603      	mov	r3, r0
 80122f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80122f2:	e009      	b.n	8012308 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80122f4:	2301      	movs	r3, #1
 80122f6:	75fb      	strb	r3, [r7, #23]
      break;
 80122f8:	e006      	b.n	8012308 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80122fa:	bf00      	nop
 80122fc:	e004      	b.n	8012308 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80122fe:	bf00      	nop
 8012300:	e002      	b.n	8012308 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012302:	bf00      	nop
 8012304:	e000      	b.n	8012308 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8012306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012308:	7dfb      	ldrb	r3, [r7, #23]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d10a      	bne.n	8012324 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801230e:	4b9d      	ldr	r3, [pc, #628]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801231c:	4999      	ldr	r1, [pc, #612]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801231e:	4313      	orrs	r3, r2
 8012320:	658b      	str	r3, [r1, #88]	; 0x58
 8012322:	e001      	b.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012324:	7dfb      	ldrb	r3, [r7, #23]
 8012326:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f003 0308 	and.w	r3, r3, #8
 8012330:	2b00      	cmp	r3, #0
 8012332:	d01a      	beq.n	801236a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801233e:	d10a      	bne.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	3324      	adds	r3, #36	; 0x24
 8012344:	2102      	movs	r1, #2
 8012346:	4618      	mov	r0, r3
 8012348:	f001 fb20 	bl	801398c <RCCEx_PLL3_Config>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d001      	beq.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8012352:	2301      	movs	r3, #1
 8012354:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8012356:	4b8b      	ldr	r3, [pc, #556]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801235a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012364:	4987      	ldr	r1, [pc, #540]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012366:	4313      	orrs	r3, r2
 8012368:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f003 0310 	and.w	r3, r3, #16
 8012372:	2b00      	cmp	r3, #0
 8012374:	d01a      	beq.n	80123ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801237c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012380:	d10a      	bne.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	3324      	adds	r3, #36	; 0x24
 8012386:	2102      	movs	r1, #2
 8012388:	4618      	mov	r0, r3
 801238a:	f001 faff 	bl	801398c <RCCEx_PLL3_Config>
 801238e:	4603      	mov	r3, r0
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8012394:	2301      	movs	r3, #1
 8012396:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012398:	4b7a      	ldr	r3, [pc, #488]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801239c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80123a6:	4977      	ldr	r1, [pc, #476]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80123a8:	4313      	orrs	r3, r2
 80123aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d034      	beq.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80123be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80123c2:	d01d      	beq.n	8012400 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80123c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80123c8:	d817      	bhi.n	80123fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d003      	beq.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80123ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123d2:	d009      	beq.n	80123e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80123d4:	e011      	b.n	80123fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3304      	adds	r3, #4
 80123da:	2100      	movs	r1, #0
 80123dc:	4618      	mov	r0, r3
 80123de:	f001 fa23 	bl	8013828 <RCCEx_PLL2_Config>
 80123e2:	4603      	mov	r3, r0
 80123e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80123e6:	e00c      	b.n	8012402 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	3324      	adds	r3, #36	; 0x24
 80123ec:	2102      	movs	r1, #2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f001 facc 	bl	801398c <RCCEx_PLL3_Config>
 80123f4:	4603      	mov	r3, r0
 80123f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80123f8:	e003      	b.n	8012402 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	75fb      	strb	r3, [r7, #23]
      break;
 80123fe:	e000      	b.n	8012402 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8012400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012402:	7dfb      	ldrb	r3, [r7, #23]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10a      	bne.n	801241e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012408:	4b5e      	ldr	r3, [pc, #376]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801240c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012416:	495b      	ldr	r1, [pc, #364]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012418:	4313      	orrs	r3, r2
 801241a:	658b      	str	r3, [r1, #88]	; 0x58
 801241c:	e001      	b.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801241e:	7dfb      	ldrb	r3, [r7, #23]
 8012420:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801242a:	2b00      	cmp	r3, #0
 801242c:	d033      	beq.n	8012496 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012438:	d01c      	beq.n	8012474 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 801243a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801243e:	d816      	bhi.n	801246e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8012440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012444:	d003      	beq.n	801244e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8012446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801244a:	d007      	beq.n	801245c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 801244c:	e00f      	b.n	801246e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801244e:	4b4d      	ldr	r3, [pc, #308]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012452:	4a4c      	ldr	r2, [pc, #304]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801245a:	e00c      	b.n	8012476 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3324      	adds	r3, #36	; 0x24
 8012460:	2101      	movs	r1, #1
 8012462:	4618      	mov	r0, r3
 8012464:	f001 fa92 	bl	801398c <RCCEx_PLL3_Config>
 8012468:	4603      	mov	r3, r0
 801246a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 801246c:	e003      	b.n	8012476 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801246e:	2301      	movs	r3, #1
 8012470:	75fb      	strb	r3, [r7, #23]
      break;
 8012472:	e000      	b.n	8012476 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8012474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d10a      	bne.n	8012492 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801247c:	4b41      	ldr	r3, [pc, #260]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801248a:	493e      	ldr	r1, [pc, #248]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801248c:	4313      	orrs	r3, r2
 801248e:	654b      	str	r3, [r1, #84]	; 0x54
 8012490:	e001      	b.n	8012496 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012492:	7dfb      	ldrb	r3, [r7, #23]
 8012494:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d029      	beq.n	80124f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d003      	beq.n	80124b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80124aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124ae:	d007      	beq.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80124b0:	e00f      	b.n	80124d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80124b2:	4b34      	ldr	r3, [pc, #208]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80124b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b6:	4a33      	ldr	r2, [pc, #204]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80124b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80124bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80124be:	e00b      	b.n	80124d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	3304      	adds	r3, #4
 80124c4:	2102      	movs	r1, #2
 80124c6:	4618      	mov	r0, r3
 80124c8:	f001 f9ae 	bl	8013828 <RCCEx_PLL2_Config>
 80124cc:	4603      	mov	r3, r0
 80124ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80124d0:	e002      	b.n	80124d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80124d2:	2301      	movs	r3, #1
 80124d4:	75fb      	strb	r3, [r7, #23]
      break;
 80124d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d109      	bne.n	80124f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80124de:	4b29      	ldr	r3, [pc, #164]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80124e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124ea:	4926      	ldr	r1, [pc, #152]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80124ec:	4313      	orrs	r3, r2
 80124ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80124f0:	e001      	b.n	80124f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124f2:	7dfb      	ldrb	r3, [r7, #23]
 80124f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d00a      	beq.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	3324      	adds	r3, #36	; 0x24
 8012506:	2102      	movs	r1, #2
 8012508:	4618      	mov	r0, r3
 801250a:	f001 fa3f 	bl	801398c <RCCEx_PLL3_Config>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d001      	beq.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8012514:	2301      	movs	r3, #1
 8012516:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012520:	2b00      	cmp	r3, #0
 8012522:	d033      	beq.n	801258c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801252c:	d017      	beq.n	801255e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 801252e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012532:	d811      	bhi.n	8012558 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8012534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012538:	d013      	beq.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 801253a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801253e:	d80b      	bhi.n	8012558 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8012540:	2b00      	cmp	r3, #0
 8012542:	d010      	beq.n	8012566 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8012544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012548:	d106      	bne.n	8012558 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801254a:	4b0e      	ldr	r3, [pc, #56]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801254e:	4a0d      	ldr	r2, [pc, #52]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8012556:	e007      	b.n	8012568 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012558:	2301      	movs	r3, #1
 801255a:	75fb      	strb	r3, [r7, #23]
      break;
 801255c:	e004      	b.n	8012568 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 801255e:	bf00      	nop
 8012560:	e002      	b.n	8012568 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012562:	bf00      	nop
 8012564:	e000      	b.n	8012568 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8012566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012568:	7dfb      	ldrb	r3, [r7, #23]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d10c      	bne.n	8012588 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801256e:	4b05      	ldr	r3, [pc, #20]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8012570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801257a:	4902      	ldr	r1, [pc, #8]	; (8012584 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801257c:	4313      	orrs	r3, r2
 801257e:	654b      	str	r3, [r1, #84]	; 0x54
 8012580:	e004      	b.n	801258c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8012582:	bf00      	nop
 8012584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012588:	7dfb      	ldrb	r3, [r7, #23]
 801258a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012594:	2b00      	cmp	r3, #0
 8012596:	d008      	beq.n	80125aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012598:	4b31      	ldr	r3, [pc, #196]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801259c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125a4:	492e      	ldr	r1, [pc, #184]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80125a6:	4313      	orrs	r3, r2
 80125a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d009      	beq.n	80125ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80125b6:	4b2a      	ldr	r3, [pc, #168]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80125b8:	691b      	ldr	r3, [r3, #16]
 80125ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80125c4:	4926      	ldr	r1, [pc, #152]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80125c6:	4313      	orrs	r3, r2
 80125c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d008      	beq.n	80125e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80125d6:	4b22      	ldr	r3, [pc, #136]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80125d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125e2:	491f      	ldr	r1, [pc, #124]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80125e4:	4313      	orrs	r3, r2
 80125e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00d      	beq.n	8012610 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80125f4:	4b1a      	ldr	r3, [pc, #104]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80125f6:	691b      	ldr	r3, [r3, #16]
 80125f8:	4a19      	ldr	r2, [pc, #100]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80125fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80125fe:	6113      	str	r3, [r2, #16]
 8012600:	4b17      	ldr	r3, [pc, #92]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012602:	691a      	ldr	r2, [r3, #16]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801260a:	4915      	ldr	r1, [pc, #84]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801260c:	4313      	orrs	r3, r2
 801260e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	da08      	bge.n	801262a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012618:	4b11      	ldr	r3, [pc, #68]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801261c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012624:	490e      	ldr	r1, [pc, #56]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012626:	4313      	orrs	r3, r2
 8012628:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012632:	2b00      	cmp	r3, #0
 8012634:	d009      	beq.n	801264a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012636:	4b0a      	ldr	r3, [pc, #40]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801263a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012644:	4906      	ldr	r1, [pc, #24]	; (8012660 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8012646:	4313      	orrs	r3, r2
 8012648:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 801264a:	7dbb      	ldrb	r3, [r7, #22]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d101      	bne.n	8012654 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8012650:	2300      	movs	r3, #0
 8012652:	e000      	b.n	8012656 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8012654:	2301      	movs	r3, #1
}
 8012656:	4618      	mov	r0, r3
 8012658:	3718      	adds	r7, #24
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	58024400 	.word	0x58024400

08012664 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b090      	sub	sp, #64	; 0x40
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012672:	f040 8095 	bne.w	80127a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8012676:	4b97      	ldr	r3, [pc, #604]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8012678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801267a:	f003 0307 	and.w	r3, r3, #7
 801267e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8012680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012682:	2b04      	cmp	r3, #4
 8012684:	f200 8088 	bhi.w	8012798 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8012688:	a201      	add	r2, pc, #4	; (adr r2, 8012690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 801268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801268e:	bf00      	nop
 8012690:	080126a5 	.word	0x080126a5
 8012694:	080126cd 	.word	0x080126cd
 8012698:	080126f5 	.word	0x080126f5
 801269c:	08012791 	.word	0x08012791
 80126a0:	0801271d 	.word	0x0801271d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80126a4:	4b8b      	ldr	r3, [pc, #556]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80126ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80126b0:	d108      	bne.n	80126c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80126b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126b6:	4618      	mov	r0, r3
 80126b8:	f000 ff64 	bl	8013584 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80126bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80126c0:	f000 bc94 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80126c4:	2300      	movs	r3, #0
 80126c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80126c8:	f000 bc90 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80126cc:	4b81      	ldr	r3, [pc, #516]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80126d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80126d8:	d108      	bne.n	80126ec <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80126da:	f107 0318 	add.w	r3, r7, #24
 80126de:	4618      	mov	r0, r3
 80126e0:	f000 fca8 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80126e8:	f000 bc80 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80126ec:	2300      	movs	r3, #0
 80126ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80126f0:	f000 bc7c 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80126f4:	4b77      	ldr	r3, [pc, #476]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80126fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012700:	d108      	bne.n	8012714 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012702:	f107 030c 	add.w	r3, r7, #12
 8012706:	4618      	mov	r0, r3
 8012708:	f000 fde8 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012710:	f000 bc6c 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012714:	2300      	movs	r3, #0
 8012716:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012718:	f000 bc68 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801271c:	4b6d      	ldr	r3, [pc, #436]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012724:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012726:	4b6b      	ldr	r3, [pc, #428]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f003 0304 	and.w	r3, r3, #4
 801272e:	2b04      	cmp	r3, #4
 8012730:	d10c      	bne.n	801274c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8012732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012734:	2b00      	cmp	r3, #0
 8012736:	d109      	bne.n	801274c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012738:	4b66      	ldr	r3, [pc, #408]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	08db      	lsrs	r3, r3, #3
 801273e:	f003 0303 	and.w	r3, r3, #3
 8012742:	4a65      	ldr	r2, [pc, #404]	; (80128d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8012744:	fa22 f303 	lsr.w	r3, r2, r3
 8012748:	63fb      	str	r3, [r7, #60]	; 0x3c
 801274a:	e01f      	b.n	801278c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801274c:	4b61      	ldr	r3, [pc, #388]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012758:	d106      	bne.n	8012768 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801275c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012760:	d102      	bne.n	8012768 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8012762:	4b5e      	ldr	r3, [pc, #376]	; (80128dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8012764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012766:	e011      	b.n	801278c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012768:	4b5a      	ldr	r3, [pc, #360]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012774:	d106      	bne.n	8012784 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8012776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801277c:	d102      	bne.n	8012784 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 801277e:	4b58      	ldr	r3, [pc, #352]	; (80128e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8012780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012782:	e003      	b.n	801278c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8012784:	2300      	movs	r3, #0
 8012786:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8012788:	f000 bc30 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 801278c:	f000 bc2e 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8012790:	4b54      	ldr	r3, [pc, #336]	; (80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8012792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012794:	f000 bc2a 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8012798:	2300      	movs	r3, #0
 801279a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801279c:	f000 bc26 	b.w	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127a6:	f040 809f 	bne.w	80128e8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80127aa:	4b4a      	ldr	r3, [pc, #296]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80127ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80127b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127ba:	d04d      	beq.n	8012858 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80127bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127c2:	f200 8084 	bhi.w	80128ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80127c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c8:	2bc0      	cmp	r3, #192	; 0xc0
 80127ca:	d07d      	beq.n	80128c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80127cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ce:	2bc0      	cmp	r3, #192	; 0xc0
 80127d0:	d87d      	bhi.n	80128ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80127d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d4:	2b80      	cmp	r3, #128	; 0x80
 80127d6:	d02d      	beq.n	8012834 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80127d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127da:	2b80      	cmp	r3, #128	; 0x80
 80127dc:	d877      	bhi.n	80128ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d003      	beq.n	80127ec <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80127e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e6:	2b40      	cmp	r3, #64	; 0x40
 80127e8:	d012      	beq.n	8012810 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80127ea:	e070      	b.n	80128ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80127ec:	4b39      	ldr	r3, [pc, #228]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80127f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80127f8:	d107      	bne.n	801280a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80127fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127fe:	4618      	mov	r0, r3
 8012800:	f000 fec0 	bl	8013584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012806:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012808:	e3f0      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 801280a:	2300      	movs	r3, #0
 801280c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801280e:	e3ed      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012810:	4b30      	ldr	r3, [pc, #192]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801281c:	d107      	bne.n	801282e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801281e:	f107 0318 	add.w	r3, r7, #24
 8012822:	4618      	mov	r0, r3
 8012824:	f000 fc06 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801282c:	e3de      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 801282e:	2300      	movs	r3, #0
 8012830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012832:	e3db      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012834:	4b27      	ldr	r3, [pc, #156]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801283c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012840:	d107      	bne.n	8012852 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012842:	f107 030c 	add.w	r3, r7, #12
 8012846:	4618      	mov	r0, r3
 8012848:	f000 fd48 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012850:	e3cc      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012856:	e3c9      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012858:	4b1e      	ldr	r3, [pc, #120]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801285c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012860:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012862:	4b1c      	ldr	r3, [pc, #112]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f003 0304 	and.w	r3, r3, #4
 801286a:	2b04      	cmp	r3, #4
 801286c:	d10c      	bne.n	8012888 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 801286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012870:	2b00      	cmp	r3, #0
 8012872:	d109      	bne.n	8012888 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012874:	4b17      	ldr	r3, [pc, #92]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	08db      	lsrs	r3, r3, #3
 801287a:	f003 0303 	and.w	r3, r3, #3
 801287e:	4a16      	ldr	r2, [pc, #88]	; (80128d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8012880:	fa22 f303 	lsr.w	r3, r2, r3
 8012884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012886:	e01e      	b.n	80128c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012888:	4b12      	ldr	r3, [pc, #72]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012894:	d106      	bne.n	80128a4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8012896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801289c:	d102      	bne.n	80128a4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 801289e:	4b0f      	ldr	r3, [pc, #60]	; (80128dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80128a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80128a2:	e010      	b.n	80128c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80128a4:	4b0b      	ldr	r3, [pc, #44]	; (80128d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80128b0:	d106      	bne.n	80128c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80128b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80128b8:	d102      	bne.n	80128c0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80128ba:	4b09      	ldr	r3, [pc, #36]	; (80128e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80128bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80128be:	e002      	b.n	80128c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80128c0:	2300      	movs	r3, #0
 80128c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80128c4:	e392      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80128c6:	e391      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80128c8:	4b06      	ldr	r3, [pc, #24]	; (80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80128ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80128cc:	e38e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80128ce:	2300      	movs	r3, #0
 80128d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80128d2:	e38b      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80128d4:	58024400 	.word	0x58024400
 80128d8:	03d09000 	.word	0x03d09000
 80128dc:	003d0900 	.word	0x003d0900
 80128e0:	017d7840 	.word	0x017d7840
 80128e4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80128ee:	f040 809c 	bne.w	8012a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80128f2:	4b9d      	ldr	r3, [pc, #628]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80128f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80128fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80128fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012902:	d054      	beq.n	80129ae <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8012904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801290a:	f200 808b 	bhi.w	8012a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 801290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012910:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8012914:	f000 8083 	beq.w	8012a1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8012918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801291e:	f200 8081 	bhi.w	8012a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8012922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012928:	d02f      	beq.n	801298a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 801292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012930:	d878      	bhi.n	8012a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8012932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8012938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801293e:	d012      	beq.n	8012966 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8012940:	e070      	b.n	8012a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012942:	4b89      	ldr	r3, [pc, #548]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801294a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801294e:	d107      	bne.n	8012960 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012954:	4618      	mov	r0, r3
 8012956:	f000 fe15 	bl	8013584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801295e:	e345      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012960:	2300      	movs	r3, #0
 8012962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012964:	e342      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012966:	4b80      	ldr	r3, [pc, #512]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801296e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012972:	d107      	bne.n	8012984 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012974:	f107 0318 	add.w	r3, r7, #24
 8012978:	4618      	mov	r0, r3
 801297a:	f000 fb5b 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801297e:	69bb      	ldr	r3, [r7, #24]
 8012980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012982:	e333      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012984:	2300      	movs	r3, #0
 8012986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012988:	e330      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801298a:	4b77      	ldr	r3, [pc, #476]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012996:	d107      	bne.n	80129a8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012998:	f107 030c 	add.w	r3, r7, #12
 801299c:	4618      	mov	r0, r3
 801299e:	f000 fc9d 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80129a6:	e321      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80129a8:	2300      	movs	r3, #0
 80129aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80129ac:	e31e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80129ae:	4b6e      	ldr	r3, [pc, #440]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80129b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80129b6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80129b8:	4b6b      	ldr	r3, [pc, #428]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	f003 0304 	and.w	r3, r3, #4
 80129c0:	2b04      	cmp	r3, #4
 80129c2:	d10c      	bne.n	80129de <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80129c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d109      	bne.n	80129de <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80129ca:	4b67      	ldr	r3, [pc, #412]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	08db      	lsrs	r3, r3, #3
 80129d0:	f003 0303 	and.w	r3, r3, #3
 80129d4:	4a65      	ldr	r2, [pc, #404]	; (8012b6c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80129d6:	fa22 f303 	lsr.w	r3, r2, r3
 80129da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129dc:	e01e      	b.n	8012a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80129de:	4b62      	ldr	r3, [pc, #392]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80129ea:	d106      	bne.n	80129fa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80129ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80129f2:	d102      	bne.n	80129fa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80129f4:	4b5e      	ldr	r3, [pc, #376]	; (8012b70 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80129f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129f8:	e010      	b.n	8012a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80129fa:	4b5b      	ldr	r3, [pc, #364]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012a06:	d106      	bne.n	8012a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8012a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012a0e:	d102      	bne.n	8012a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8012a10:	4b58      	ldr	r3, [pc, #352]	; (8012b74 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8012a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a14:	e002      	b.n	8012a1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8012a16:	2300      	movs	r3, #0
 8012a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8012a1a:	e2e7      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8012a1c:	e2e6      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8012a1e:	4b56      	ldr	r3, [pc, #344]	; (8012b78 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8012a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012a22:	e2e3      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8012a24:	2300      	movs	r3, #0
 8012a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012a28:	e2e0      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a30:	f040 80a7 	bne.w	8012b82 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8012a34:	4b4c      	ldr	r3, [pc, #304]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a38:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8012a3c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8012a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012a44:	d055      	beq.n	8012af2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8012a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012a4c:	f200 8096 	bhi.w	8012b7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8012a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012a56:	f000 8084 	beq.w	8012b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8012a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012a60:	f200 808c 	bhi.w	8012b7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8012a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012a6a:	d030      	beq.n	8012ace <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012a72:	f200 8083 	bhi.w	8012b7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8012a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d004      	beq.n	8012a86 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8012a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012a82:	d012      	beq.n	8012aaa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8012a84:	e07a      	b.n	8012b7c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012a86:	4b38      	ldr	r3, [pc, #224]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012a92:	d107      	bne.n	8012aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f000 fd73 	bl	8013584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012aa2:	e2a3      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012aa8:	e2a0      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012aaa:	4b2f      	ldr	r3, [pc, #188]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012ab6:	d107      	bne.n	8012ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012ab8:	f107 0318 	add.w	r3, r7, #24
 8012abc:	4618      	mov	r0, r3
 8012abe:	f000 fab9 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8012ac6:	e291      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012acc:	e28e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012ace:	4b26      	ldr	r3, [pc, #152]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012ada:	d107      	bne.n	8012aec <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012adc:	f107 030c 	add.w	r3, r7, #12
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f000 fbfb 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012aea:	e27f      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012aec:	2300      	movs	r3, #0
 8012aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012af0:	e27c      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012af2:	4b1d      	ldr	r3, [pc, #116]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012af6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012afa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012afc:	4b1a      	ldr	r3, [pc, #104]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	f003 0304 	and.w	r3, r3, #4
 8012b04:	2b04      	cmp	r3, #4
 8012b06:	d10c      	bne.n	8012b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8012b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d109      	bne.n	8012b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b0e:	4b16      	ldr	r3, [pc, #88]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	08db      	lsrs	r3, r3, #3
 8012b14:	f003 0303 	and.w	r3, r3, #3
 8012b18:	4a14      	ldr	r2, [pc, #80]	; (8012b6c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8012b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8012b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b20:	e01e      	b.n	8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012b22:	4b11      	ldr	r3, [pc, #68]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b2e:	d106      	bne.n	8012b3e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8012b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b36:	d102      	bne.n	8012b3e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8012b38:	4b0d      	ldr	r3, [pc, #52]	; (8012b70 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8012b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b3c:	e010      	b.n	8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012b3e:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012b4a:	d106      	bne.n	8012b5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8012b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012b52:	d102      	bne.n	8012b5a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8012b54:	4b07      	ldr	r3, [pc, #28]	; (8012b74 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8012b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012b58:	e002      	b.n	8012b60 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8012b5e:	e245      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8012b60:	e244      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8012b62:	4b05      	ldr	r3, [pc, #20]	; (8012b78 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8012b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012b66:	e241      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8012b68:	58024400 	.word	0x58024400
 8012b6c:	03d09000 	.word	0x03d09000
 8012b70:	003d0900 	.word	0x003d0900
 8012b74:	017d7840 	.word	0x017d7840
 8012b78:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012b80:	e234      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b88:	f040 809c 	bne.w	8012cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8012b8c:	4b9b      	ldr	r3, [pc, #620]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8012b94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012b9c:	d054      	beq.n	8012c48 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8012b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ba4:	f200 808b 	bhi.w	8012cbe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012bae:	f000 8083 	beq.w	8012cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8012bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012bb8:	f200 8081 	bhi.w	8012cbe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012bc2:	d02f      	beq.n	8012c24 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8012bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012bca:	d878      	bhi.n	8012cbe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8012bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d004      	beq.n	8012bdc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8012bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012bd8:	d012      	beq.n	8012c00 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8012bda:	e070      	b.n	8012cbe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012bdc:	4b87      	ldr	r3, [pc, #540]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012be8:	d107      	bne.n	8012bfa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f000 fcc8 	bl	8013584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012bf8:	e1f8      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012bfe:	e1f5      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012c00:	4b7e      	ldr	r3, [pc, #504]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012c0c:	d107      	bne.n	8012c1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c0e:	f107 0318 	add.w	r3, r7, #24
 8012c12:	4618      	mov	r0, r3
 8012c14:	f000 fa0e 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012c1c:	e1e6      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012c22:	e1e3      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012c24:	4b75      	ldr	r3, [pc, #468]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c30:	d107      	bne.n	8012c42 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c32:	f107 030c 	add.w	r3, r7, #12
 8012c36:	4618      	mov	r0, r3
 8012c38:	f000 fb50 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012c40:	e1d4      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012c46:	e1d1      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012c48:	4b6c      	ldr	r3, [pc, #432]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012c50:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012c52:	4b6a      	ldr	r3, [pc, #424]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f003 0304 	and.w	r3, r3, #4
 8012c5a:	2b04      	cmp	r3, #4
 8012c5c:	d10c      	bne.n	8012c78 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8012c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d109      	bne.n	8012c78 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012c64:	4b65      	ldr	r3, [pc, #404]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	08db      	lsrs	r3, r3, #3
 8012c6a:	f003 0303 	and.w	r3, r3, #3
 8012c6e:	4a64      	ldr	r2, [pc, #400]	; (8012e00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8012c70:	fa22 f303 	lsr.w	r3, r2, r3
 8012c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c76:	e01e      	b.n	8012cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012c78:	4b60      	ldr	r3, [pc, #384]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c84:	d106      	bne.n	8012c94 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8012c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012c8c:	d102      	bne.n	8012c94 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8012c8e:	4b5d      	ldr	r3, [pc, #372]	; (8012e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8012c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c92:	e010      	b.n	8012cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012c94:	4b59      	ldr	r3, [pc, #356]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012ca0:	d106      	bne.n	8012cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8012ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012ca8:	d102      	bne.n	8012cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8012caa:	4b57      	ldr	r3, [pc, #348]	; (8012e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8012cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012cae:	e002      	b.n	8012cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8012cb4:	e19a      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8012cb6:	e199      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8012cb8:	4b54      	ldr	r3, [pc, #336]	; (8012e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012cbc:	e196      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012cc2:	e193      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012cca:	d173      	bne.n	8012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8012ccc:	4b4b      	ldr	r3, [pc, #300]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012cd4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012cdc:	d02f      	beq.n	8012d3e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8012cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012ce4:	d863      	bhi.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8012ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d004      	beq.n	8012cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8012cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cf2:	d012      	beq.n	8012d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8012cf4:	e05b      	b.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012cf6:	4b41      	ldr	r3, [pc, #260]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012d02:	d107      	bne.n	8012d14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012d04:	f107 0318 	add.w	r3, r7, #24
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f000 f993 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012d0e:	69bb      	ldr	r3, [r7, #24]
 8012d10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012d12:	e16b      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012d14:	2300      	movs	r3, #0
 8012d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012d18:	e168      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012d1a:	4b38      	ldr	r3, [pc, #224]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012d26:	d107      	bne.n	8012d38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012d28:	f107 030c 	add.w	r3, r7, #12
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f000 fad5 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012d36:	e159      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012d3c:	e156      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012d3e:	4b2f      	ldr	r3, [pc, #188]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012d46:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012d48:	4b2c      	ldr	r3, [pc, #176]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f003 0304 	and.w	r3, r3, #4
 8012d50:	2b04      	cmp	r3, #4
 8012d52:	d10c      	bne.n	8012d6e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8012d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d109      	bne.n	8012d6e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012d5a:	4b28      	ldr	r3, [pc, #160]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	08db      	lsrs	r3, r3, #3
 8012d60:	f003 0303 	and.w	r3, r3, #3
 8012d64:	4a26      	ldr	r2, [pc, #152]	; (8012e00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8012d66:	fa22 f303 	lsr.w	r3, r2, r3
 8012d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012d6c:	e01e      	b.n	8012dac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012d6e:	4b23      	ldr	r3, [pc, #140]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d7a:	d106      	bne.n	8012d8a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8012d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012d82:	d102      	bne.n	8012d8a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8012d84:	4b1f      	ldr	r3, [pc, #124]	; (8012e04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8012d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012d88:	e010      	b.n	8012dac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012d8a:	4b1c      	ldr	r3, [pc, #112]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012d96:	d106      	bne.n	8012da6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8012d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012d9e:	d102      	bne.n	8012da6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8012da0:	4b19      	ldr	r3, [pc, #100]	; (8012e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8012da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012da4:	e002      	b.n	8012dac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8012daa:	e11f      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8012dac:	e11e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8012dae:	2300      	movs	r3, #0
 8012db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012db2:	e11b      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012dba:	d13e      	bne.n	8012e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8012dbc:	4b0f      	ldr	r3, [pc, #60]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012dc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d004      	beq.n	8012dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012dd2:	d01d      	beq.n	8012e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8012dd4:	e02e      	b.n	8012e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012dd6:	4b09      	ldr	r3, [pc, #36]	; (8012dfc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012de2:	d107      	bne.n	8012df4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 fbcb 	bl	8013584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012df2:	e0fb      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012df4:	2300      	movs	r3, #0
 8012df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012df8:	e0f8      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8012dfa:	bf00      	nop
 8012dfc:	58024400 	.word	0x58024400
 8012e00:	03d09000 	.word	0x03d09000
 8012e04:	003d0900 	.word	0x003d0900
 8012e08:	017d7840 	.word	0x017d7840
 8012e0c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012e10:	4b79      	ldr	r3, [pc, #484]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012e1c:	d107      	bne.n	8012e2e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e1e:	f107 0318 	add.w	r3, r7, #24
 8012e22:	4618      	mov	r0, r3
 8012e24:	f000 f906 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8012e28:	6a3b      	ldr	r3, [r7, #32]
 8012e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012e2c:	e0de      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012e32:	e0db      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8012e34:	2300      	movs	r3, #0
 8012e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012e38:	e0d8      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e40:	f040 8085 	bne.w	8012f4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8012e44:	4b6c      	ldr	r3, [pc, #432]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e48:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8012e4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012e54:	d06b      	beq.n	8012f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8012e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012e5c:	d874      	bhi.n	8012f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8012e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e64:	d056      	beq.n	8012f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8012e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e6c:	d86c      	bhi.n	8012f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8012e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012e74:	d03b      	beq.n	8012eee <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8012e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012e7c:	d864      	bhi.n	8012f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8012e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012e84:	d021      	beq.n	8012eca <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8012e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012e8c:	d85c      	bhi.n	8012f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8012e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d004      	beq.n	8012e9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012e9a:	d004      	beq.n	8012ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8012e9c:	e054      	b.n	8012f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8012e9e:	f000 f8b3 	bl	8013008 <HAL_RCCEx_GetD3PCLK1Freq>
 8012ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8012ea4:	e0a2      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012ea6:	4b54      	ldr	r3, [pc, #336]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012eb2:	d107      	bne.n	8012ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012eb4:	f107 0318 	add.w	r3, r7, #24
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 f8bb 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012ec2:	e093      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012ec8:	e090      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012eca:	4b4b      	ldr	r3, [pc, #300]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012ed6:	d107      	bne.n	8012ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ed8:	f107 030c 	add.w	r3, r7, #12
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 f9fd 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012ee6:	e081      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012eec:	e07e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012eee:	4b42      	ldr	r3, [pc, #264]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f003 0304 	and.w	r3, r3, #4
 8012ef6:	2b04      	cmp	r3, #4
 8012ef8:	d109      	bne.n	8012f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012efa:	4b3f      	ldr	r3, [pc, #252]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	08db      	lsrs	r3, r3, #3
 8012f00:	f003 0303 	and.w	r3, r3, #3
 8012f04:	4a3d      	ldr	r2, [pc, #244]	; (8012ffc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8012f06:	fa22 f303 	lsr.w	r3, r2, r3
 8012f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012f0c:	e06e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012f12:	e06b      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012f14:	4b38      	ldr	r3, [pc, #224]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f20:	d102      	bne.n	8012f28 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8012f22:	4b37      	ldr	r3, [pc, #220]	; (8013000 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8012f24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012f26:	e061      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012f2c:	e05e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012f2e:	4b32      	ldr	r3, [pc, #200]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012f3a:	d102      	bne.n	8012f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8012f3c:	4b31      	ldr	r3, [pc, #196]	; (8013004 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012f40:	e054      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012f42:	2300      	movs	r3, #0
 8012f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012f46:	e051      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012f4c:	e04e      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f54:	d148      	bne.n	8012fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8012f56:	4b28      	ldr	r3, [pc, #160]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012f5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012f66:	d02a      	beq.n	8012fbe <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8012f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012f6e:	d838      	bhi.n	8012fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8012f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d004      	beq.n	8012f80 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8012f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012f7c:	d00d      	beq.n	8012f9a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8012f7e:	e030      	b.n	8012fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012f80:	4b1d      	ldr	r3, [pc, #116]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012f8c:	d102      	bne.n	8012f94 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8012f8e:	4b1d      	ldr	r3, [pc, #116]	; (8013004 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8012f90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012f92:	e02b      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012f94:	2300      	movs	r3, #0
 8012f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012f98:	e028      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012f9a:	4b17      	ldr	r3, [pc, #92]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012fa6:	d107      	bne.n	8012fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012fac:	4618      	mov	r0, r3
 8012fae:	f000 fae9 	bl	8013584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012fb6:	e019      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012fbc:	e016      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012fbe:	4b0e      	ldr	r3, [pc, #56]	; (8012ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012fca:	d107      	bne.n	8012fdc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012fcc:	f107 0318 	add.w	r3, r7, #24
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f000 f82f 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012fd6:	69fb      	ldr	r3, [r7, #28]
 8012fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012fda:	e007      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012fe0:	e004      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012fe6:	e001      	b.n	8012fec <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8012fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3740      	adds	r7, #64	; 0x40
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	58024400 	.word	0x58024400
 8012ffc:	03d09000 	.word	0x03d09000
 8013000:	003d0900 	.word	0x003d0900
 8013004:	017d7840 	.word	0x017d7840

08013008 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801300c:	f7fe fb46 	bl	801169c <HAL_RCC_GetHCLKFreq>
 8013010:	4602      	mov	r2, r0
 8013012:	4b06      	ldr	r3, [pc, #24]	; (801302c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013014:	6a1b      	ldr	r3, [r3, #32]
 8013016:	091b      	lsrs	r3, r3, #4
 8013018:	f003 0307 	and.w	r3, r3, #7
 801301c:	4904      	ldr	r1, [pc, #16]	; (8013030 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801301e:	5ccb      	ldrb	r3, [r1, r3]
 8013020:	f003 031f 	and.w	r3, r3, #31
 8013024:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013028:	4618      	mov	r0, r3
 801302a:	bd80      	pop	{r7, pc}
 801302c:	58024400 	.word	0x58024400
 8013030:	08027bf8 	.word	0x08027bf8

08013034 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8013034:	b480      	push	{r7}
 8013036:	b089      	sub	sp, #36	; 0x24
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801303c:	4ba1      	ldr	r3, [pc, #644]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013040:	f003 0303 	and.w	r3, r3, #3
 8013044:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013046:	4b9f      	ldr	r3, [pc, #636]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801304a:	0b1b      	lsrs	r3, r3, #12
 801304c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013050:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013052:	4b9c      	ldr	r3, [pc, #624]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013056:	091b      	lsrs	r3, r3, #4
 8013058:	f003 0301 	and.w	r3, r3, #1
 801305c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801305e:	4b99      	ldr	r3, [pc, #612]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013062:	08db      	lsrs	r3, r3, #3
 8013064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013068:	693a      	ldr	r2, [r7, #16]
 801306a:	fb02 f303 	mul.w	r3, r2, r3
 801306e:	ee07 3a90 	vmov	s15, r3
 8013072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013076:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	2b00      	cmp	r3, #0
 801307e:	f000 8111 	beq.w	80132a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	2b02      	cmp	r3, #2
 8013086:	f000 8083 	beq.w	8013190 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801308a:	69bb      	ldr	r3, [r7, #24]
 801308c:	2b02      	cmp	r3, #2
 801308e:	f200 80a1 	bhi.w	80131d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d003      	beq.n	80130a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013098:	69bb      	ldr	r3, [r7, #24]
 801309a:	2b01      	cmp	r3, #1
 801309c:	d056      	beq.n	801314c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801309e:	e099      	b.n	80131d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80130a0:	4b88      	ldr	r3, [pc, #544]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f003 0320 	and.w	r3, r3, #32
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d02d      	beq.n	8013108 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80130ac:	4b85      	ldr	r3, [pc, #532]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	08db      	lsrs	r3, r3, #3
 80130b2:	f003 0303 	and.w	r3, r3, #3
 80130b6:	4a84      	ldr	r2, [pc, #528]	; (80132c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80130b8:	fa22 f303 	lsr.w	r3, r2, r3
 80130bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	ee07 3a90 	vmov	s15, r3
 80130c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	ee07 3a90 	vmov	s15, r3
 80130ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130d6:	4b7b      	ldr	r3, [pc, #492]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130de:	ee07 3a90 	vmov	s15, r3
 80130e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80130ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80132cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80130f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80130fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013102:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013106:	e087      	b.n	8013218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	ee07 3a90 	vmov	s15, r3
 801310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013112:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80132d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801311a:	4b6a      	ldr	r3, [pc, #424]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013122:	ee07 3a90 	vmov	s15, r3
 8013126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801312a:	ed97 6a03 	vldr	s12, [r7, #12]
 801312e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80132cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801313a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801313e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801314a:	e065      	b.n	8013218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	ee07 3a90 	vmov	s15, r3
 8013152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013156:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80132d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801315e:	4b59      	ldr	r3, [pc, #356]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013166:	ee07 3a90 	vmov	s15, r3
 801316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801316e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013172:	eddf 5a56 	vldr	s11, [pc, #344]	; 80132cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801317a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801317e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013186:	ee67 7a27 	vmul.f32	s15, s14, s15
 801318a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801318e:	e043      	b.n	8013218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	ee07 3a90 	vmov	s15, r3
 8013196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801319a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80132d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80131a2:	4b48      	ldr	r3, [pc, #288]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131aa:	ee07 3a90 	vmov	s15, r3
 80131ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80131b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80131b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80132cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80131ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80131be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80131c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80131c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80131ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80131d2:	e021      	b.n	8013218 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	ee07 3a90 	vmov	s15, r3
 80131da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80132d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80131e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80131e6:	4b37      	ldr	r3, [pc, #220]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131ee:	ee07 3a90 	vmov	s15, r3
 80131f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80131f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80131fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80132cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80131fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013216:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013218:	4b2a      	ldr	r3, [pc, #168]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801321c:	0a5b      	lsrs	r3, r3, #9
 801321e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013222:	ee07 3a90 	vmov	s15, r3
 8013226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801322a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801322e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013232:	edd7 6a07 	vldr	s13, [r7, #28]
 8013236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801323a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801323e:	ee17 2a90 	vmov	r2, s15
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013246:	4b1f      	ldr	r3, [pc, #124]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801324a:	0c1b      	lsrs	r3, r3, #16
 801324c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013250:	ee07 3a90 	vmov	s15, r3
 8013254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801325c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013260:	edd7 6a07 	vldr	s13, [r7, #28]
 8013264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801326c:	ee17 2a90 	vmov	r2, s15
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013274:	4b13      	ldr	r3, [pc, #76]	; (80132c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013278:	0e1b      	lsrs	r3, r3, #24
 801327a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801327e:	ee07 3a90 	vmov	s15, r3
 8013282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801328a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801328e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801329a:	ee17 2a90 	vmov	r2, s15
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80132a2:	e008      	b.n	80132b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	2200      	movs	r2, #0
 80132b4:	609a      	str	r2, [r3, #8]
}
 80132b6:	bf00      	nop
 80132b8:	3724      	adds	r7, #36	; 0x24
 80132ba:	46bd      	mov	sp, r7
 80132bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	58024400 	.word	0x58024400
 80132c8:	03d09000 	.word	0x03d09000
 80132cc:	46000000 	.word	0x46000000
 80132d0:	4c742400 	.word	0x4c742400
 80132d4:	4a742400 	.word	0x4a742400
 80132d8:	4bbebc20 	.word	0x4bbebc20

080132dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80132dc:	b480      	push	{r7}
 80132de:	b089      	sub	sp, #36	; 0x24
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80132e4:	4ba1      	ldr	r3, [pc, #644]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132e8:	f003 0303 	and.w	r3, r3, #3
 80132ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80132ee:	4b9f      	ldr	r3, [pc, #636]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132f2:	0d1b      	lsrs	r3, r3, #20
 80132f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80132fa:	4b9c      	ldr	r3, [pc, #624]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132fe:	0a1b      	lsrs	r3, r3, #8
 8013300:	f003 0301 	and.w	r3, r3, #1
 8013304:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013306:	4b99      	ldr	r3, [pc, #612]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801330a:	08db      	lsrs	r3, r3, #3
 801330c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013310:	693a      	ldr	r2, [r7, #16]
 8013312:	fb02 f303 	mul.w	r3, r2, r3
 8013316:	ee07 3a90 	vmov	s15, r3
 801331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801331e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	2b00      	cmp	r3, #0
 8013326:	f000 8111 	beq.w	801354c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801332a:	69bb      	ldr	r3, [r7, #24]
 801332c:	2b02      	cmp	r3, #2
 801332e:	f000 8083 	beq.w	8013438 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	2b02      	cmp	r3, #2
 8013336:	f200 80a1 	bhi.w	801347c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801333a:	69bb      	ldr	r3, [r7, #24]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d003      	beq.n	8013348 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013340:	69bb      	ldr	r3, [r7, #24]
 8013342:	2b01      	cmp	r3, #1
 8013344:	d056      	beq.n	80133f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013346:	e099      	b.n	801347c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013348:	4b88      	ldr	r3, [pc, #544]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f003 0320 	and.w	r3, r3, #32
 8013350:	2b00      	cmp	r3, #0
 8013352:	d02d      	beq.n	80133b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013354:	4b85      	ldr	r3, [pc, #532]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	08db      	lsrs	r3, r3, #3
 801335a:	f003 0303 	and.w	r3, r3, #3
 801335e:	4a84      	ldr	r2, [pc, #528]	; (8013570 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013360:	fa22 f303 	lsr.w	r3, r2, r3
 8013364:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	ee07 3a90 	vmov	s15, r3
 801336c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	ee07 3a90 	vmov	s15, r3
 8013376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801337e:	4b7b      	ldr	r3, [pc, #492]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013386:	ee07 3a90 	vmov	s15, r3
 801338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801338e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013392:	eddf 5a78 	vldr	s11, [pc, #480]	; 8013574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801339e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80133ae:	e087      	b.n	80134c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	ee07 3a90 	vmov	s15, r3
 80133b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013578 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80133be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133c2:	4b6a      	ldr	r3, [pc, #424]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80133c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133ca:	ee07 3a90 	vmov	s15, r3
 80133ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80133d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8013574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80133da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80133f2:	e065      	b.n	80134c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	ee07 3a90 	vmov	s15, r3
 80133fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801357c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013406:	4b59      	ldr	r3, [pc, #356]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801340e:	ee07 3a90 	vmov	s15, r3
 8013412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013416:	ed97 6a03 	vldr	s12, [r7, #12]
 801341a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8013574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013436:	e043      	b.n	80134c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	ee07 3a90 	vmov	s15, r3
 801343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013442:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801344a:	4b48      	ldr	r3, [pc, #288]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013452:	ee07 3a90 	vmov	s15, r3
 8013456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801345a:	ed97 6a03 	vldr	s12, [r7, #12]
 801345e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801347a:	e021      	b.n	80134c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	ee07 3a90 	vmov	s15, r3
 8013482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013486:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801357c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801348e:	4b37      	ldr	r3, [pc, #220]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013496:	ee07 3a90 	vmov	s15, r3
 801349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801349e:	ed97 6a03 	vldr	s12, [r7, #12]
 80134a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013574 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80134a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80134aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80134ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80134b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80134b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80134be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80134c0:	4b2a      	ldr	r3, [pc, #168]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80134c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c4:	0a5b      	lsrs	r3, r3, #9
 80134c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134ca:	ee07 3a90 	vmov	s15, r3
 80134ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80134d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134da:	edd7 6a07 	vldr	s13, [r7, #28]
 80134de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134e6:	ee17 2a90 	vmov	r2, s15
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80134ee:	4b1f      	ldr	r3, [pc, #124]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80134f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f2:	0c1b      	lsrs	r3, r3, #16
 80134f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134f8:	ee07 3a90 	vmov	s15, r3
 80134fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013508:	edd7 6a07 	vldr	s13, [r7, #28]
 801350c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013514:	ee17 2a90 	vmov	r2, s15
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 801351c:	4b13      	ldr	r3, [pc, #76]	; (801356c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013520:	0e1b      	lsrs	r3, r3, #24
 8013522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013526:	ee07 3a90 	vmov	s15, r3
 801352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801352e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013536:	edd7 6a07 	vldr	s13, [r7, #28]
 801353a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801353e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013542:	ee17 2a90 	vmov	r2, s15
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801354a:	e008      	b.n	801355e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2200      	movs	r2, #0
 8013556:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2200      	movs	r2, #0
 801355c:	609a      	str	r2, [r3, #8]
}
 801355e:	bf00      	nop
 8013560:	3724      	adds	r7, #36	; 0x24
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr
 801356a:	bf00      	nop
 801356c:	58024400 	.word	0x58024400
 8013570:	03d09000 	.word	0x03d09000
 8013574:	46000000 	.word	0x46000000
 8013578:	4c742400 	.word	0x4c742400
 801357c:	4a742400 	.word	0x4a742400
 8013580:	4bbebc20 	.word	0x4bbebc20

08013584 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8013584:	b480      	push	{r7}
 8013586:	b089      	sub	sp, #36	; 0x24
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801358c:	4ba0      	ldr	r3, [pc, #640]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013590:	f003 0303 	and.w	r3, r3, #3
 8013594:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8013596:	4b9e      	ldr	r3, [pc, #632]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801359a:	091b      	lsrs	r3, r3, #4
 801359c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80135a2:	4b9b      	ldr	r3, [pc, #620]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a6:	f003 0301 	and.w	r3, r3, #1
 80135aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80135ac:	4b98      	ldr	r3, [pc, #608]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135b0:	08db      	lsrs	r3, r3, #3
 80135b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135b6:	693a      	ldr	r2, [r7, #16]
 80135b8:	fb02 f303 	mul.w	r3, r2, r3
 80135bc:	ee07 3a90 	vmov	s15, r3
 80135c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	f000 8111 	beq.w	80137f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	2b02      	cmp	r3, #2
 80135d4:	f000 8083 	beq.w	80136de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	2b02      	cmp	r3, #2
 80135dc:	f200 80a1 	bhi.w	8013722 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80135e0:	69bb      	ldr	r3, [r7, #24]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d003      	beq.n	80135ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	d056      	beq.n	801369a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80135ec:	e099      	b.n	8013722 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135ee:	4b88      	ldr	r3, [pc, #544]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f003 0320 	and.w	r3, r3, #32
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d02d      	beq.n	8013656 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80135fa:	4b85      	ldr	r3, [pc, #532]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	08db      	lsrs	r3, r3, #3
 8013600:	f003 0303 	and.w	r3, r3, #3
 8013604:	4a83      	ldr	r2, [pc, #524]	; (8013814 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8013606:	fa22 f303 	lsr.w	r3, r2, r3
 801360a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	ee07 3a90 	vmov	s15, r3
 8013612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	ee07 3a90 	vmov	s15, r3
 801361c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013624:	4b7a      	ldr	r3, [pc, #488]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801362c:	ee07 3a90 	vmov	s15, r3
 8013630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013634:	ed97 6a03 	vldr	s12, [r7, #12]
 8013638:	eddf 5a77 	vldr	s11, [pc, #476]	; 8013818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801363c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801364c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013650:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013654:	e087      	b.n	8013766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	ee07 3a90 	vmov	s15, r3
 801365c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013660:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801381c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013668:	4b69      	ldr	r3, [pc, #420]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801366c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013670:	ee07 3a90 	vmov	s15, r3
 8013674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013678:	ed97 6a03 	vldr	s12, [r7, #12]
 801367c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8013818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801368c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013694:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013698:	e065      	b.n	8013766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	ee07 3a90 	vmov	s15, r3
 80136a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8013820 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80136a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136ac:	4b58      	ldr	r3, [pc, #352]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80136ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136b4:	ee07 3a90 	vmov	s15, r3
 80136b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80136bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80136c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8013818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80136c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80136c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80136cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80136d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80136dc:	e043      	b.n	8013766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	ee07 3a90 	vmov	s15, r3
 80136e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8013824 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80136ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136f0:	4b47      	ldr	r3, [pc, #284]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80136f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136f8:	ee07 3a90 	vmov	s15, r3
 80136fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013700:	ed97 6a03 	vldr	s12, [r7, #12]
 8013704:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801370c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013718:	ee67 7a27 	vmul.f32	s15, s14, s15
 801371c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013720:	e021      	b.n	8013766 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	ee07 3a90 	vmov	s15, r3
 8013728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801372c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801381c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013734:	4b36      	ldr	r3, [pc, #216]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801373c:	ee07 3a90 	vmov	s15, r3
 8013740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013744:	ed97 6a03 	vldr	s12, [r7, #12]
 8013748:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013818 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801374c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013764:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8013766:	4b2a      	ldr	r3, [pc, #168]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801376a:	0a5b      	lsrs	r3, r3, #9
 801376c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013770:	ee07 3a90 	vmov	s15, r3
 8013774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801377c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013780:	edd7 6a07 	vldr	s13, [r7, #28]
 8013784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801378c:	ee17 2a90 	vmov	r2, s15
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8013794:	4b1e      	ldr	r3, [pc, #120]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013798:	0c1b      	lsrs	r3, r3, #16
 801379a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801379e:	ee07 3a90 	vmov	s15, r3
 80137a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80137aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80137ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80137b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80137b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137ba:	ee17 2a90 	vmov	r2, s15
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80137c2:	4b13      	ldr	r3, [pc, #76]	; (8013810 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80137c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c6:	0e1b      	lsrs	r3, r3, #24
 80137c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137cc:	ee07 3a90 	vmov	s15, r3
 80137d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80137d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80137dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80137e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80137e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137e8:	ee17 2a90 	vmov	r2, s15
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80137f0:	e008      	b.n	8013804 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2200      	movs	r2, #0
 80137f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2200      	movs	r2, #0
 80137fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2200      	movs	r2, #0
 8013802:	609a      	str	r2, [r3, #8]
}
 8013804:	bf00      	nop
 8013806:	3724      	adds	r7, #36	; 0x24
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr
 8013810:	58024400 	.word	0x58024400
 8013814:	03d09000 	.word	0x03d09000
 8013818:	46000000 	.word	0x46000000
 801381c:	4c742400 	.word	0x4c742400
 8013820:	4a742400 	.word	0x4a742400
 8013824:	4bbebc20 	.word	0x4bbebc20

08013828 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b084      	sub	sp, #16
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013832:	2300      	movs	r3, #0
 8013834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013836:	4b53      	ldr	r3, [pc, #332]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801383a:	f003 0303 	and.w	r3, r3, #3
 801383e:	2b03      	cmp	r3, #3
 8013840:	d101      	bne.n	8013846 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013842:	2301      	movs	r3, #1
 8013844:	e099      	b.n	801397a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013846:	4b4f      	ldr	r3, [pc, #316]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	4a4e      	ldr	r2, [pc, #312]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801384c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013852:	f7f6 fbb3 	bl	8009fbc <HAL_GetTick>
 8013856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013858:	e008      	b.n	801386c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801385a:	f7f6 fbaf 	bl	8009fbc <HAL_GetTick>
 801385e:	4602      	mov	r2, r0
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	1ad3      	subs	r3, r2, r3
 8013864:	2b02      	cmp	r3, #2
 8013866:	d901      	bls.n	801386c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013868:	2303      	movs	r3, #3
 801386a:	e086      	b.n	801397a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801386c:	4b45      	ldr	r3, [pc, #276]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013874:	2b00      	cmp	r3, #0
 8013876:	d1f0      	bne.n	801385a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013878:	4b42      	ldr	r3, [pc, #264]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801387c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	031b      	lsls	r3, r3, #12
 8013886:	493f      	ldr	r1, [pc, #252]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013888:	4313      	orrs	r3, r2
 801388a:	628b      	str	r3, [r1, #40]	; 0x28
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	3b01      	subs	r3, #1
 8013892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	3b01      	subs	r3, #1
 801389c:	025b      	lsls	r3, r3, #9
 801389e:	b29b      	uxth	r3, r3
 80138a0:	431a      	orrs	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	68db      	ldr	r3, [r3, #12]
 80138a6:	3b01      	subs	r3, #1
 80138a8:	041b      	lsls	r3, r3, #16
 80138aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80138ae:	431a      	orrs	r2, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	691b      	ldr	r3, [r3, #16]
 80138b4:	3b01      	subs	r3, #1
 80138b6:	061b      	lsls	r3, r3, #24
 80138b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80138bc:	4931      	ldr	r1, [pc, #196]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138be:	4313      	orrs	r3, r2
 80138c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80138c2:	4b30      	ldr	r3, [pc, #192]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	695b      	ldr	r3, [r3, #20]
 80138ce:	492d      	ldr	r1, [pc, #180]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138d0:	4313      	orrs	r3, r2
 80138d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80138d4:	4b2b      	ldr	r3, [pc, #172]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138d8:	f023 0220 	bic.w	r2, r3, #32
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	699b      	ldr	r3, [r3, #24]
 80138e0:	4928      	ldr	r1, [pc, #160]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138e2:	4313      	orrs	r3, r2
 80138e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80138e6:	4b27      	ldr	r3, [pc, #156]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ea:	4a26      	ldr	r2, [pc, #152]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138ec:	f023 0310 	bic.w	r3, r3, #16
 80138f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80138f2:	4b24      	ldr	r3, [pc, #144]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 80138f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80138f6:	4b24      	ldr	r3, [pc, #144]	; (8013988 <RCCEx_PLL2_Config+0x160>)
 80138f8:	4013      	ands	r3, r2
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	69d2      	ldr	r2, [r2, #28]
 80138fe:	00d2      	lsls	r2, r2, #3
 8013900:	4920      	ldr	r1, [pc, #128]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013902:	4313      	orrs	r3, r2
 8013904:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8013906:	4b1f      	ldr	r3, [pc, #124]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801390a:	4a1e      	ldr	r2, [pc, #120]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801390c:	f043 0310 	orr.w	r3, r3, #16
 8013910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d106      	bne.n	8013926 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8013918:	4b1a      	ldr	r3, [pc, #104]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801391c:	4a19      	ldr	r2, [pc, #100]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801391e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013924:	e00f      	b.n	8013946 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	2b01      	cmp	r3, #1
 801392a:	d106      	bne.n	801393a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801392c:	4b15      	ldr	r3, [pc, #84]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013930:	4a14      	ldr	r2, [pc, #80]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013938:	e005      	b.n	8013946 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801393a:	4b12      	ldr	r3, [pc, #72]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801393e:	4a11      	ldr	r2, [pc, #68]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013944:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013946:	4b0f      	ldr	r3, [pc, #60]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	4a0e      	ldr	r2, [pc, #56]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801394c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013952:	f7f6 fb33 	bl	8009fbc <HAL_GetTick>
 8013956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013958:	e008      	b.n	801396c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801395a:	f7f6 fb2f 	bl	8009fbc <HAL_GetTick>
 801395e:	4602      	mov	r2, r0
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	2b02      	cmp	r3, #2
 8013966:	d901      	bls.n	801396c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013968:	2303      	movs	r3, #3
 801396a:	e006      	b.n	801397a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801396c:	4b05      	ldr	r3, [pc, #20]	; (8013984 <RCCEx_PLL2_Config+0x15c>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013974:	2b00      	cmp	r3, #0
 8013976:	d0f0      	beq.n	801395a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013978:	7bfb      	ldrb	r3, [r7, #15]
}
 801397a:	4618      	mov	r0, r3
 801397c:	3710      	adds	r7, #16
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	58024400 	.word	0x58024400
 8013988:	ffff0007 	.word	0xffff0007

0801398c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b084      	sub	sp, #16
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013996:	2300      	movs	r3, #0
 8013998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801399a:	4b53      	ldr	r3, [pc, #332]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 801399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801399e:	f003 0303 	and.w	r3, r3, #3
 80139a2:	2b03      	cmp	r3, #3
 80139a4:	d101      	bne.n	80139aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80139a6:	2301      	movs	r3, #1
 80139a8:	e099      	b.n	8013ade <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80139aa:	4b4f      	ldr	r3, [pc, #316]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	4a4e      	ldr	r2, [pc, #312]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 80139b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80139b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80139b6:	f7f6 fb01 	bl	8009fbc <HAL_GetTick>
 80139ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80139bc:	e008      	b.n	80139d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80139be:	f7f6 fafd 	bl	8009fbc <HAL_GetTick>
 80139c2:	4602      	mov	r2, r0
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	1ad3      	subs	r3, r2, r3
 80139c8:	2b02      	cmp	r3, #2
 80139ca:	d901      	bls.n	80139d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80139cc:	2303      	movs	r3, #3
 80139ce:	e086      	b.n	8013ade <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80139d0:	4b45      	ldr	r3, [pc, #276]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d1f0      	bne.n	80139be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80139dc:	4b42      	ldr	r3, [pc, #264]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 80139de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	051b      	lsls	r3, r3, #20
 80139ea:	493f      	ldr	r1, [pc, #252]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 80139ec:	4313      	orrs	r3, r2
 80139ee:	628b      	str	r3, [r1, #40]	; 0x28
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	3b01      	subs	r3, #1
 80139f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	689b      	ldr	r3, [r3, #8]
 80139fe:	3b01      	subs	r3, #1
 8013a00:	025b      	lsls	r3, r3, #9
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	431a      	orrs	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	3b01      	subs	r3, #1
 8013a0c:	041b      	lsls	r3, r3, #16
 8013a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013a12:	431a      	orrs	r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	691b      	ldr	r3, [r3, #16]
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	061b      	lsls	r3, r3, #24
 8013a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013a20:	4931      	ldr	r1, [pc, #196]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a22:	4313      	orrs	r3, r2
 8013a24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013a26:	4b30      	ldr	r3, [pc, #192]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	695b      	ldr	r3, [r3, #20]
 8013a32:	492d      	ldr	r1, [pc, #180]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a34:	4313      	orrs	r3, r2
 8013a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013a38:	4b2b      	ldr	r3, [pc, #172]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	699b      	ldr	r3, [r3, #24]
 8013a44:	4928      	ldr	r1, [pc, #160]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a46:	4313      	orrs	r3, r2
 8013a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013a4a:	4b27      	ldr	r3, [pc, #156]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4e:	4a26      	ldr	r2, [pc, #152]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013a56:	4b24      	ldr	r3, [pc, #144]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a5a:	4b24      	ldr	r3, [pc, #144]	; (8013aec <RCCEx_PLL3_Config+0x160>)
 8013a5c:	4013      	ands	r3, r2
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	69d2      	ldr	r2, [r2, #28]
 8013a62:	00d2      	lsls	r2, r2, #3
 8013a64:	4920      	ldr	r1, [pc, #128]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a66:	4313      	orrs	r3, r2
 8013a68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013a6a:	4b1f      	ldr	r3, [pc, #124]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a6e:	4a1e      	ldr	r2, [pc, #120]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d106      	bne.n	8013a8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013a7c:	4b1a      	ldr	r3, [pc, #104]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a80:	4a19      	ldr	r2, [pc, #100]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013a88:	e00f      	b.n	8013aaa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d106      	bne.n	8013a9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013a90:	4b15      	ldr	r3, [pc, #84]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a94:	4a14      	ldr	r2, [pc, #80]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013a9c:	e005      	b.n	8013aaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013a9e:	4b12      	ldr	r3, [pc, #72]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aa2:	4a11      	ldr	r2, [pc, #68]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013aaa:	4b0f      	ldr	r3, [pc, #60]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4a0e      	ldr	r2, [pc, #56]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013ab6:	f7f6 fa81 	bl	8009fbc <HAL_GetTick>
 8013aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013abc:	e008      	b.n	8013ad0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8013abe:	f7f6 fa7d 	bl	8009fbc <HAL_GetTick>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	1ad3      	subs	r3, r2, r3
 8013ac8:	2b02      	cmp	r3, #2
 8013aca:	d901      	bls.n	8013ad0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013acc:	2303      	movs	r3, #3
 8013ace:	e006      	b.n	8013ade <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013ad0:	4b05      	ldr	r3, [pc, #20]	; (8013ae8 <RCCEx_PLL3_Config+0x15c>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d0f0      	beq.n	8013abe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8013adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3710      	adds	r7, #16
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	58024400 	.word	0x58024400
 8013aec:	ffff0007 	.word	0xffff0007

08013af0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013af8:	2301      	movs	r3, #1
 8013afa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d067      	beq.n	8013bd2 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d106      	bne.n	8013b1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2200      	movs	r2, #0
 8013b12:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f7f3 ffce 	bl	8007ab8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2202      	movs	r2, #2
 8013b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	22ca      	movs	r2, #202	; 0xca
 8013b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2253      	movs	r2, #83	; 0x53
 8013b32:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f000 fa49 	bl	8013fcc <RTC_EnterInitMode>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8013b3e:	7bfb      	ldrb	r3, [r7, #15]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d13b      	bne.n	8013bbc <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	6899      	ldr	r1, [r3, #8]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	4b23      	ldr	r3, [pc, #140]	; (8013bdc <HAL_RTC_Init+0xec>)
 8013b50:	400b      	ands	r3, r1
 8013b52:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	6899      	ldr	r1, [r3, #8]
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	685a      	ldr	r2, [r3, #4]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	691b      	ldr	r3, [r3, #16]
 8013b62:	431a      	orrs	r2, r3
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	699b      	ldr	r3, [r3, #24]
 8013b68:	431a      	orrs	r2, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	430a      	orrs	r2, r1
 8013b70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	689b      	ldr	r3, [r3, #8]
 8013b76:	0419      	lsls	r1, r3, #16
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	68da      	ldr	r2, [r3, #12]
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	430a      	orrs	r2, r1
 8013b82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fa55 	bl	8014034 <RTC_ExitInitMode>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8013b8e:	7bfb      	ldrb	r3, [r7, #15]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d113      	bne.n	8013bbc <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	f022 0203 	bic.w	r2, r2, #3
 8013ba2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	69da      	ldr	r2, [r3, #28]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	695b      	ldr	r3, [r3, #20]
 8013bb2:	431a      	orrs	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	430a      	orrs	r2, r1
 8013bba:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	22ff      	movs	r2, #255	; 0xff
 8013bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8013bc4:	7bfb      	ldrb	r3, [r7, #15]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d103      	bne.n	8013bd2 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2201      	movs	r2, #1
 8013bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8013bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3710      	adds	r7, #16
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	ff8fffbf 	.word	0xff8fffbf

08013be0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013be0:	b590      	push	{r4, r7, lr}
 8013be2:	b087      	sub	sp, #28
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	60b9      	str	r1, [r7, #8]
 8013bea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bf2:	2b01      	cmp	r3, #1
 8013bf4:	d101      	bne.n	8013bfa <HAL_RTC_SetTime+0x1a>
 8013bf6:	2302      	movs	r3, #2
 8013bf8:	e089      	b.n	8013d0e <HAL_RTC_SetTime+0x12e>
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2202      	movs	r2, #2
 8013c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	22ca      	movs	r2, #202	; 0xca
 8013c10:	625a      	str	r2, [r3, #36]	; 0x24
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2253      	movs	r2, #83	; 0x53
 8013c18:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013c1a:	68f8      	ldr	r0, [r7, #12]
 8013c1c:	f000 f9d6 	bl	8013fcc <RTC_EnterInitMode>
 8013c20:	4603      	mov	r3, r0
 8013c22:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8013c24:	7cfb      	ldrb	r3, [r7, #19]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d161      	bne.n	8013cee <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d126      	bne.n	8013c7e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	689b      	ldr	r3, [r3, #8]
 8013c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d102      	bne.n	8013c44 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	2200      	movs	r2, #0
 8013c42:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 fa31 	bl	80140b0 <RTC_ByteToBcd2>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	785b      	ldrb	r3, [r3, #1]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 fa2a 	bl	80140b0 <RTC_ByteToBcd2>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013c60:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	789b      	ldrb	r3, [r3, #2]
 8013c66:	4618      	mov	r0, r3
 8013c68:	f000 fa22 	bl	80140b0 <RTC_ByteToBcd2>
 8013c6c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013c6e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	78db      	ldrb	r3, [r3, #3]
 8013c76:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013c78:	4313      	orrs	r3, r2
 8013c7a:	617b      	str	r3, [r7, #20]
 8013c7c:	e018      	b.n	8013cb0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	689b      	ldr	r3, [r3, #8]
 8013c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d102      	bne.n	8013c92 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	2200      	movs	r2, #0
 8013c90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	785b      	ldrb	r3, [r3, #1]
 8013c9c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013c9e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8013ca0:	68ba      	ldr	r2, [r7, #8]
 8013ca2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8013ca4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	78db      	ldrb	r3, [r3, #3]
 8013caa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8013cac:	4313      	orrs	r3, r2
 8013cae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	6979      	ldr	r1, [r7, #20]
 8013cb6:	4b18      	ldr	r3, [pc, #96]	; (8013d18 <HAL_RTC_SetTime+0x138>)
 8013cb8:	400b      	ands	r3, r1
 8013cba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	689a      	ldr	r2, [r3, #8]
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013cca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	6899      	ldr	r1, [r3, #8]
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	68da      	ldr	r2, [r3, #12]
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	691b      	ldr	r3, [r3, #16]
 8013cda:	431a      	orrs	r2, r3
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	430a      	orrs	r2, r1
 8013ce2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013ce4:	68f8      	ldr	r0, [r7, #12]
 8013ce6:	f000 f9a5 	bl	8014034 <RTC_ExitInitMode>
 8013cea:	4603      	mov	r3, r0
 8013cec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	22ff      	movs	r2, #255	; 0xff
 8013cf4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8013cf6:	7cfb      	ldrb	r3, [r7, #19]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d103      	bne.n	8013d04 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2200      	movs	r2, #0
 8013d08:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8013d0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	371c      	adds	r7, #28
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd90      	pop	{r4, r7, pc}
 8013d16:	bf00      	nop
 8013d18:	007f7f7f 	.word	0x007f7f7f

08013d1c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b086      	sub	sp, #24
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	60b9      	str	r1, [r7, #8]
 8013d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	691b      	ldr	r3, [r3, #16]
 8013d38:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	4b22      	ldr	r3, [pc, #136]	; (8013dd0 <HAL_RTC_GetTime+0xb4>)
 8013d48:	4013      	ands	r3, r2
 8013d4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	0c1b      	lsrs	r3, r3, #16
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	0a1b      	lsrs	r3, r3, #8
 8013d60:	b2db      	uxtb	r3, r3
 8013d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d66:	b2da      	uxtb	r2, r3
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d74:	b2da      	uxtb	r2, r3
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	0d9b      	lsrs	r3, r3, #22
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	f003 0301 	and.w	r3, r3, #1
 8013d84:	b2da      	uxtb	r2, r3
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d11a      	bne.n	8013dc6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f000 f9ab 	bl	80140f0 <RTC_Bcd2ToByte>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	785b      	ldrb	r3, [r3, #1]
 8013da6:	4618      	mov	r0, r3
 8013da8:	f000 f9a2 	bl	80140f0 <RTC_Bcd2ToByte>
 8013dac:	4603      	mov	r3, r0
 8013dae:	461a      	mov	r2, r3
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	789b      	ldrb	r3, [r3, #2]
 8013db8:	4618      	mov	r0, r3
 8013dba:	f000 f999 	bl	80140f0 <RTC_Bcd2ToByte>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8013dc6:	2300      	movs	r3, #0
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3718      	adds	r7, #24
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	007f7f7f 	.word	0x007f7f7f

08013dd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013dd4:	b590      	push	{r4, r7, lr}
 8013dd6:	b087      	sub	sp, #28
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013de6:	2b01      	cmp	r3, #1
 8013de8:	d101      	bne.n	8013dee <HAL_RTC_SetDate+0x1a>
 8013dea:	2302      	movs	r3, #2
 8013dec:	e073      	b.n	8013ed6 <HAL_RTC_SetDate+0x102>
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2201      	movs	r2, #1
 8013df2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2202      	movs	r2, #2
 8013dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d10e      	bne.n	8013e22 <HAL_RTC_SetDate+0x4e>
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	785b      	ldrb	r3, [r3, #1]
 8013e08:	f003 0310 	and.w	r3, r3, #16
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d008      	beq.n	8013e22 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	785b      	ldrb	r3, [r3, #1]
 8013e14:	f023 0310 	bic.w	r3, r3, #16
 8013e18:	b2db      	uxtb	r3, r3
 8013e1a:	330a      	adds	r3, #10
 8013e1c:	b2da      	uxtb	r2, r3
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d11c      	bne.n	8013e62 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	78db      	ldrb	r3, [r3, #3]
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f000 f93f 	bl	80140b0 <RTC_ByteToBcd2>
 8013e32:	4603      	mov	r3, r0
 8013e34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	785b      	ldrb	r3, [r3, #1]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f000 f938 	bl	80140b0 <RTC_ByteToBcd2>
 8013e40:	4603      	mov	r3, r0
 8013e42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013e44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	789b      	ldrb	r3, [r3, #2]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f000 f930 	bl	80140b0 <RTC_ByteToBcd2>
 8013e50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013e52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	617b      	str	r3, [r7, #20]
 8013e60:	e00e      	b.n	8013e80 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	78db      	ldrb	r3, [r3, #3]
 8013e66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	785b      	ldrb	r3, [r3, #1]
 8013e6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013e6e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8013e70:	68ba      	ldr	r2, [r7, #8]
 8013e72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8013e74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013e7c:	4313      	orrs	r3, r2
 8013e7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	22ca      	movs	r2, #202	; 0xca
 8013e86:	625a      	str	r2, [r3, #36]	; 0x24
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	2253      	movs	r2, #83	; 0x53
 8013e8e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013e90:	68f8      	ldr	r0, [r7, #12]
 8013e92:	f000 f89b 	bl	8013fcc <RTC_EnterInitMode>
 8013e96:	4603      	mov	r3, r0
 8013e98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8013e9a:	7cfb      	ldrb	r3, [r7, #19]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d10a      	bne.n	8013eb6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	681a      	ldr	r2, [r3, #0]
 8013ea4:	6979      	ldr	r1, [r7, #20]
 8013ea6:	4b0e      	ldr	r3, [pc, #56]	; (8013ee0 <HAL_RTC_SetDate+0x10c>)
 8013ea8:	400b      	ands	r3, r1
 8013eaa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013eac:	68f8      	ldr	r0, [r7, #12]
 8013eae:	f000 f8c1 	bl	8014034 <RTC_ExitInitMode>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	22ff      	movs	r2, #255	; 0xff
 8013ebc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8013ebe:	7cfb      	ldrb	r3, [r7, #19]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d103      	bne.n	8013ecc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8013ed4:	7cfb      	ldrb	r3, [r7, #19]


}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	371c      	adds	r7, #28
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd90      	pop	{r4, r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	00ffff3f 	.word	0x00ffff3f

08013ee4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b086      	sub	sp, #24
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	685a      	ldr	r2, [r3, #4]
 8013ef6:	4b21      	ldr	r3, [pc, #132]	; (8013f7c <HAL_RTC_GetDate+0x98>)
 8013ef8:	4013      	ands	r3, r2
 8013efa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	0c1b      	lsrs	r3, r3, #16
 8013f00:	b2da      	uxtb	r2, r3
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	0a1b      	lsrs	r3, r3, #8
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	f003 031f 	and.w	r3, r3, #31
 8013f10:	b2da      	uxtb	r2, r3
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f1e:	b2da      	uxtb	r2, r3
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	0b5b      	lsrs	r3, r3, #13
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	f003 0307 	and.w	r3, r3, #7
 8013f2e:	b2da      	uxtb	r2, r3
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d11a      	bne.n	8013f70 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	78db      	ldrb	r3, [r3, #3]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f000 f8d6 	bl	80140f0 <RTC_Bcd2ToByte>
 8013f44:	4603      	mov	r3, r0
 8013f46:	461a      	mov	r2, r3
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	785b      	ldrb	r3, [r3, #1]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 f8cd 	bl	80140f0 <RTC_Bcd2ToByte>
 8013f56:	4603      	mov	r3, r0
 8013f58:	461a      	mov	r2, r3
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	789b      	ldrb	r3, [r3, #2]
 8013f62:	4618      	mov	r0, r3
 8013f64:	f000 f8c4 	bl	80140f0 <RTC_Bcd2ToByte>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3718      	adds	r7, #24
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
 8013f7a:	bf00      	nop
 8013f7c:	00ffff3f 	.word	0x00ffff3f

08013f80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b084      	sub	sp, #16
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	68da      	ldr	r2, [r3, #12]
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8013f96:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8013f98:	f7f6 f810 	bl	8009fbc <HAL_GetTick>
 8013f9c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013f9e:	e009      	b.n	8013fb4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013fa0:	f7f6 f80c 	bl	8009fbc <HAL_GetTick>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	1ad3      	subs	r3, r2, r3
 8013faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013fae:	d901      	bls.n	8013fb4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8013fb0:	2303      	movs	r3, #3
 8013fb2:	e007      	b.n	8013fc4 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	f003 0320 	and.w	r3, r3, #32
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d0ee      	beq.n	8013fa0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8013fc2:	2300      	movs	r3, #0
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3710      	adds	r7, #16
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}

08013fcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b084      	sub	sp, #16
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	68db      	ldr	r3, [r3, #12]
 8013fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d120      	bne.n	8014028 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	f04f 32ff 	mov.w	r2, #4294967295
 8013fee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8013ff0:	f7f5 ffe4 	bl	8009fbc <HAL_GetTick>
 8013ff4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013ff6:	e00d      	b.n	8014014 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8013ff8:	f7f5 ffe0 	bl	8009fbc <HAL_GetTick>
 8013ffc:	4602      	mov	r2, r0
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014006:	d905      	bls.n	8014014 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8014008:	2303      	movs	r3, #3
 801400a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2203      	movs	r2, #3
 8014010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801401e:	2b00      	cmp	r3, #0
 8014020:	d102      	bne.n	8014028 <RTC_EnterInitMode+0x5c>
 8014022:	7bfb      	ldrb	r3, [r7, #15]
 8014024:	2b03      	cmp	r3, #3
 8014026:	d1e7      	bne.n	8013ff8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8014028:	7bfb      	ldrb	r3, [r7, #15]
}
 801402a:	4618      	mov	r0, r3
 801402c:	3710      	adds	r7, #16
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
	...

08014034 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b084      	sub	sp, #16
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801403c:	2300      	movs	r3, #0
 801403e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8014040:	4b1a      	ldr	r3, [pc, #104]	; (80140ac <RTC_ExitInitMode+0x78>)
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	4a19      	ldr	r2, [pc, #100]	; (80140ac <RTC_ExitInitMode+0x78>)
 8014046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801404a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801404c:	4b17      	ldr	r3, [pc, #92]	; (80140ac <RTC_ExitInitMode+0x78>)
 801404e:	689b      	ldr	r3, [r3, #8]
 8014050:	f003 0320 	and.w	r3, r3, #32
 8014054:	2b00      	cmp	r3, #0
 8014056:	d10c      	bne.n	8014072 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7ff ff91 	bl	8013f80 <HAL_RTC_WaitForSynchro>
 801405e:	4603      	mov	r3, r0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d01e      	beq.n	80140a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2203      	movs	r2, #3
 8014068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 801406c:	2303      	movs	r3, #3
 801406e:	73fb      	strb	r3, [r7, #15]
 8014070:	e017      	b.n	80140a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8014072:	4b0e      	ldr	r3, [pc, #56]	; (80140ac <RTC_ExitInitMode+0x78>)
 8014074:	689b      	ldr	r3, [r3, #8]
 8014076:	4a0d      	ldr	r2, [pc, #52]	; (80140ac <RTC_ExitInitMode+0x78>)
 8014078:	f023 0320 	bic.w	r3, r3, #32
 801407c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f7ff ff7e 	bl	8013f80 <HAL_RTC_WaitForSynchro>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d005      	beq.n	8014096 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2203      	movs	r2, #3
 801408e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8014092:	2303      	movs	r3, #3
 8014094:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8014096:	4b05      	ldr	r3, [pc, #20]	; (80140ac <RTC_ExitInitMode+0x78>)
 8014098:	689b      	ldr	r3, [r3, #8]
 801409a:	4a04      	ldr	r2, [pc, #16]	; (80140ac <RTC_ExitInitMode+0x78>)
 801409c:	f043 0320 	orr.w	r3, r3, #32
 80140a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80140a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	58004000 	.word	0x58004000

080140b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b085      	sub	sp, #20
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	4603      	mov	r3, r0
 80140b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80140ba:	2300      	movs	r3, #0
 80140bc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80140be:	79fb      	ldrb	r3, [r7, #7]
 80140c0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80140c2:	e005      	b.n	80140d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	3301      	adds	r3, #1
 80140c8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80140ca:	7afb      	ldrb	r3, [r7, #11]
 80140cc:	3b0a      	subs	r3, #10
 80140ce:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80140d0:	7afb      	ldrb	r3, [r7, #11]
 80140d2:	2b09      	cmp	r3, #9
 80140d4:	d8f6      	bhi.n	80140c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	011b      	lsls	r3, r3, #4
 80140dc:	b2da      	uxtb	r2, r3
 80140de:	7afb      	ldrb	r3, [r7, #11]
 80140e0:	4313      	orrs	r3, r2
 80140e2:	b2db      	uxtb	r3, r3
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3714      	adds	r7, #20
 80140e8:	46bd      	mov	sp, r7
 80140ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ee:	4770      	bx	lr

080140f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b085      	sub	sp, #20
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	4603      	mov	r3, r0
 80140f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80140fa:	79fb      	ldrb	r3, [r7, #7]
 80140fc:	091b      	lsrs	r3, r3, #4
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	461a      	mov	r2, r3
 8014102:	0092      	lsls	r2, r2, #2
 8014104:	4413      	add	r3, r2
 8014106:	005b      	lsls	r3, r3, #1
 8014108:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801410a:	79fb      	ldrb	r3, [r7, #7]
 801410c:	f003 030f 	and.w	r3, r3, #15
 8014110:	b2da      	uxtb	r2, r3
 8014112:	7bfb      	ldrb	r3, [r7, #15]
 8014114:	4413      	add	r3, r2
 8014116:	b2db      	uxtb	r3, r3
}
 8014118:	4618      	mov	r0, r3
 801411a:	3714      	adds	r7, #20
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr

08014124 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8014124:	b480      	push	{r7}
 8014126:	b087      	sub	sp, #28
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	3350      	adds	r3, #80	; 0x50
 8014136:	617b      	str	r3, [r7, #20]
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	009b      	lsls	r3, r3, #2
 801413c:	697a      	ldr	r2, [r7, #20]
 801413e:	4413      	add	r3, r2
 8014140:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	687a      	ldr	r2, [r7, #4]
 8014146:	601a      	str	r2, [r3, #0]
}
 8014148:	bf00      	nop
 801414a:	371c      	adds	r7, #28
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr

08014154 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8014154:	b480      	push	{r7}
 8014156:	b085      	sub	sp, #20
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	6039      	str	r1, [r7, #0]
  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	3350      	adds	r3, #80	; 0x50
 8014164:	60fb      	str	r3, [r7, #12]
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	68fa      	ldr	r2, [r7, #12]
 801416c:	4413      	add	r3, r2
 801416e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	681b      	ldr	r3, [r3, #0]
}
 8014174:	4618      	mov	r0, r3
 8014176:	3714      	adds	r7, #20
 8014178:	46bd      	mov	sp, r7
 801417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417e:	4770      	bx	lr

08014180 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b08a      	sub	sp, #40	; 0x28
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d101      	bne.n	8014192 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801418e:	2301      	movs	r3, #1
 8014190:	e075      	b.n	801427e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014198:	b2db      	uxtb	r3, r3
 801419a:	2b00      	cmp	r3, #0
 801419c:	d105      	bne.n	80141aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2200      	movs	r2, #0
 80141a2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f7f3 fcd5 	bl	8007b54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2204      	movs	r2, #4
 80141ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f000 f868 	bl	8014288 <HAL_SD_InitCard>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d001      	beq.n	80141c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80141be:	2301      	movs	r3, #1
 80141c0:	e05d      	b.n	801427e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80141c2:	f107 0308 	add.w	r3, r7, #8
 80141c6:	4619      	mov	r1, r3
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f000 fda9 	bl	8014d20 <HAL_SD_GetCardStatus>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d001      	beq.n	80141d8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80141d4:	2301      	movs	r3, #1
 80141d6:	e052      	b.n	801427e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80141d8:	7e3b      	ldrb	r3, [r7, #24]
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80141de:	7e7b      	ldrb	r3, [r7, #25]
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d10a      	bne.n	8014202 <HAL_SD_Init+0x82>
 80141ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d102      	bne.n	80141f8 <HAL_SD_Init+0x78>
 80141f2:	6a3b      	ldr	r3, [r7, #32]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d004      	beq.n	8014202 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141fe:	659a      	str	r2, [r3, #88]	; 0x58
 8014200:	e00b      	b.n	801421a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014206:	2b01      	cmp	r3, #1
 8014208:	d104      	bne.n	8014214 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014210:	659a      	str	r2, [r3, #88]	; 0x58
 8014212:	e002      	b.n	801421a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2200      	movs	r2, #0
 8014218:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	4619      	mov	r1, r3
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f000 fe67 	bl	8014ef4 <HAL_SD_ConfigWideBusOperation>
 8014226:	4603      	mov	r3, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d001      	beq.n	8014230 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 801422c:	2301      	movs	r3, #1
 801422e:	e026      	b.n	801427e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8014230:	f7f5 fec4 	bl	8009fbc <HAL_GetTick>
 8014234:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8014236:	e011      	b.n	801425c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8014238:	f7f5 fec0 	bl	8009fbc <HAL_GetTick>
 801423c:	4602      	mov	r2, r0
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	1ad3      	subs	r3, r2, r3
 8014242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014246:	d109      	bne.n	801425c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801424e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2201      	movs	r2, #1
 8014254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8014258:	2303      	movs	r3, #3
 801425a:	e010      	b.n	801427e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f000 ff5b 	bl	8015118 <HAL_SD_GetCardState>
 8014262:	4603      	mov	r3, r0
 8014264:	2b04      	cmp	r3, #4
 8014266:	d1e7      	bne.n	8014238 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2200      	movs	r2, #0
 801426c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2200      	movs	r2, #0
 8014272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2201      	movs	r2, #1
 8014278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 801427c:	2300      	movs	r3, #0
}
 801427e:	4618      	mov	r0, r3
 8014280:	3728      	adds	r7, #40	; 0x28
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
	...

08014288 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8014288:	b590      	push	{r4, r7, lr}
 801428a:	b08d      	sub	sp, #52	; 0x34
 801428c:	af02      	add	r7, sp, #8
 801428e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8014290:	2300      	movs	r3, #0
 8014292:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8014294:	2300      	movs	r3, #0
 8014296:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8014298:	2300      	movs	r3, #0
 801429a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801429c:	2300      	movs	r3, #0
 801429e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80142a0:	2300      	movs	r3, #0
 80142a2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80142a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80142a8:	f7fe f9dc 	bl	8012664 <HAL_RCCEx_GetPeriphCLKFreq>
 80142ac:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80142ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d109      	bne.n	80142c8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2201      	movs	r2, #1
 80142b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80142c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80142c4:	2301      	movs	r3, #1
 80142c6:	e06a      	b.n	801439e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80142c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ca:	0a1b      	lsrs	r3, r3, #8
 80142cc:	4a36      	ldr	r2, [pc, #216]	; (80143a8 <HAL_SD_InitCard+0x120>)
 80142ce:	fba2 2303 	umull	r2, r3, r2, r3
 80142d2:	091b      	lsrs	r3, r3, #4
 80142d4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	681c      	ldr	r4, [r3, #0]
 80142da:	466a      	mov	r2, sp
 80142dc:	f107 0318 	add.w	r3, r7, #24
 80142e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80142e8:	f107 030c 	add.w	r3, r7, #12
 80142ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80142ee:	4620      	mov	r0, r4
 80142f0:	f006 f8ce 	bl	801a490 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	4618      	mov	r0, r3
 80142fa:	f006 f911 	bl	801a520 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80142fe:	69fb      	ldr	r3, [r7, #28]
 8014300:	005b      	lsls	r3, r3, #1
 8014302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014304:	fbb2 f3f3 	udiv	r3, r2, r3
 8014308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801430a:	4a28      	ldr	r2, [pc, #160]	; (80143ac <HAL_SD_InitCard+0x124>)
 801430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014312:	3301      	adds	r3, #1
 8014314:	4618      	mov	r0, r3
 8014316:	f7f5 fe5d 	bl	8009fd4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 ffea 	bl	80152f4 <SD_PowerON>
 8014320:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8014322:	6a3b      	ldr	r3, [r7, #32]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d00b      	beq.n	8014340 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2201      	movs	r2, #1
 801432c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014334:	6a3b      	ldr	r3, [r7, #32]
 8014336:	431a      	orrs	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801433c:	2301      	movs	r3, #1
 801433e:	e02e      	b.n	801439e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 ff09 	bl	8015158 <SD_InitCard>
 8014346:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8014348:	6a3b      	ldr	r3, [r7, #32]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d00b      	beq.n	8014366 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2201      	movs	r2, #1
 8014352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801435a:	6a3b      	ldr	r3, [r7, #32]
 801435c:	431a      	orrs	r2, r3
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8014362:	2301      	movs	r3, #1
 8014364:	e01b      	b.n	801439e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801436e:	4618      	mov	r0, r3
 8014370:	f006 f96c 	bl	801a64c <SDMMC_CmdBlockLength>
 8014374:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8014376:	6a3b      	ldr	r3, [r7, #32]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d00f      	beq.n	801439c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4a0b      	ldr	r2, [pc, #44]	; (80143b0 <HAL_SD_InitCard+0x128>)
 8014382:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	431a      	orrs	r2, r3
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2201      	movs	r2, #1
 8014394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8014398:	2301      	movs	r3, #1
 801439a:	e000      	b.n	801439e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	372c      	adds	r7, #44	; 0x2c
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd90      	pop	{r4, r7, pc}
 80143a6:	bf00      	nop
 80143a8:	014f8b59 	.word	0x014f8b59
 80143ac:	00012110 	.word	0x00012110
 80143b0:	1fe00fff 	.word	0x1fe00fff

080143b4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b08c      	sub	sp, #48	; 0x30
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	607a      	str	r2, [r7, #4]
 80143c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d107      	bne.n	80143dc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80143d8:	2301      	movs	r3, #1
 80143da:	e08d      	b.n	80144f8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	f040 8086 	bne.w	80144f6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	2200      	movs	r2, #0
 80143ee:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80143f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	441a      	add	r2, r3
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d907      	bls.n	801440e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014402:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801440a:	2301      	movs	r3, #1
 801440c:	e074      	b.n	80144f8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	2203      	movs	r2, #3
 8014412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2200      	movs	r2, #0
 801441c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	68ba      	ldr	r2, [r7, #8]
 8014422:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	025a      	lsls	r2, r3, #9
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014430:	2b01      	cmp	r3, #1
 8014432:	d002      	beq.n	801443a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8014434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014436:	025b      	lsls	r3, r3, #9
 8014438:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801443a:	f04f 33ff 	mov.w	r3, #4294967295
 801443e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	025b      	lsls	r3, r3, #9
 8014444:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014446:	2390      	movs	r3, #144	; 0x90
 8014448:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801444a:	2302      	movs	r3, #2
 801444c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801444e:	2300      	movs	r3, #0
 8014450:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8014452:	2300      	movs	r3, #0
 8014454:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f107 0210 	add.w	r2, r7, #16
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f006 f8c7 	bl	801a5f4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	68da      	ldr	r2, [r3, #12]
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014474:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	68ba      	ldr	r2, [r7, #8]
 801447c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2201      	movs	r2, #1
 8014484:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d90a      	bls.n	80144a2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2282      	movs	r2, #130	; 0x82
 8014490:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014498:	4618      	mov	r0, r3
 801449a:	f006 f91d 	bl	801a6d8 <SDMMC_CmdReadMultiBlock>
 801449e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80144a0:	e009      	b.n	80144b6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2281      	movs	r2, #129	; 0x81
 80144a6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80144ae:	4618      	mov	r0, r3
 80144b0:	f006 f8ef 	bl	801a692 <SDMMC_CmdReadSingleBlock>
 80144b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80144b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d012      	beq.n	80144e2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4a0f      	ldr	r2, [pc, #60]	; (8014500 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80144c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80144c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ca:	431a      	orrs	r2, r3
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	2201      	movs	r2, #1
 80144d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2200      	movs	r2, #0
 80144dc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80144de:	2301      	movs	r3, #1
 80144e0:	e00a      	b.n	80144f8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80144f0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80144f2:	2300      	movs	r3, #0
 80144f4:	e000      	b.n	80144f8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80144f6:	2302      	movs	r3, #2
  }
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3730      	adds	r7, #48	; 0x30
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	1fe00fff 	.word	0x1fe00fff

08014504 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b08c      	sub	sp, #48	; 0x30
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
 8014510:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d107      	bne.n	801452c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014520:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8014528:	2301      	movs	r3, #1
 801452a:	e08d      	b.n	8014648 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014532:	b2db      	uxtb	r3, r3
 8014534:	2b01      	cmp	r3, #1
 8014536:	f040 8086 	bne.w	8014646 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	441a      	add	r2, r3
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801454a:	429a      	cmp	r2, r3
 801454c:	d907      	bls.n	801455e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014552:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801455a:	2301      	movs	r3, #1
 801455c:	e074      	b.n	8014648 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2203      	movs	r2, #3
 8014562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	2200      	movs	r2, #0
 801456c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	68ba      	ldr	r2, [r7, #8]
 8014572:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	025a      	lsls	r2, r3, #9
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014580:	2b01      	cmp	r3, #1
 8014582:	d002      	beq.n	801458a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8014584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014586:	025b      	lsls	r3, r3, #9
 8014588:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801458a:	f04f 33ff 	mov.w	r3, #4294967295
 801458e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	025b      	lsls	r3, r3, #9
 8014594:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014596:	2390      	movs	r3, #144	; 0x90
 8014598:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801459a:	2300      	movs	r3, #0
 801459c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801459e:	2300      	movs	r3, #0
 80145a0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80145a2:	2300      	movs	r3, #0
 80145a4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	f107 0210 	add.w	r2, r7, #16
 80145ae:	4611      	mov	r1, r2
 80145b0:	4618      	mov	r0, r3
 80145b2:	f006 f81f 	bl	801a5f4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	68da      	ldr	r2, [r3, #12]
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80145c4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	68ba      	ldr	r2, [r7, #8]
 80145cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2201      	movs	r2, #1
 80145d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d90a      	bls.n	80145f2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	22a0      	movs	r2, #160	; 0xa0
 80145e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80145e8:	4618      	mov	r0, r3
 80145ea:	f006 f8bb 	bl	801a764 <SDMMC_CmdWriteMultiBlock>
 80145ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80145f0:	e009      	b.n	8014606 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2290      	movs	r2, #144	; 0x90
 80145f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80145fe:	4618      	mov	r0, r3
 8014600:	f006 f88d 	bl	801a71e <SDMMC_CmdWriteSingleBlock>
 8014604:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8014606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014608:	2b00      	cmp	r3, #0
 801460a:	d012      	beq.n	8014632 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a0f      	ldr	r2, [pc, #60]	; (8014650 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8014612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801461a:	431a      	orrs	r2, r3
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2201      	movs	r2, #1
 8014624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2200      	movs	r2, #0
 801462c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801462e:	2301      	movs	r3, #1
 8014630:	e00a      	b.n	8014648 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8014640:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8014642:	2300      	movs	r3, #0
 8014644:	e000      	b.n	8014648 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8014646:	2302      	movs	r3, #2
  }
}
 8014648:	4618      	mov	r0, r3
 801464a:	3730      	adds	r7, #48	; 0x30
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	1fe00fff 	.word	0x1fe00fff

08014654 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014660:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801466c:	2b00      	cmp	r3, #0
 801466e:	d008      	beq.n	8014682 <HAL_SD_IRQHandler+0x2e>
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	f003 0308 	and.w	r3, r3, #8
 8014676:	2b00      	cmp	r3, #0
 8014678:	d003      	beq.n	8014682 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f001 f926 	bl	80158cc <SD_Read_IT>
 8014680:	e19a      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801468c:	2b00      	cmp	r3, #0
 801468e:	f000 80ac 	beq.w	80147ea <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f44f 7280 	mov.w	r2, #256	; 0x100
 801469a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	4b59      	ldr	r3, [pc, #356]	; (801480c <HAL_SD_IRQHandler+0x1b8>)
 80146a8:	400b      	ands	r3, r1
 80146aa:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80146ba:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	68da      	ldr	r2, [r3, #12]
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80146ca:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f003 0308 	and.w	r3, r3, #8
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d038      	beq.n	8014748 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	f003 0302 	and.w	r3, r3, #2
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d104      	bne.n	80146ea <HAL_SD_IRQHandler+0x96>
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f003 0320 	and.w	r3, r3, #32
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d011      	beq.n	801470e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	4618      	mov	r0, r3
 80146f0:	f006 f85c 	bl	801a7ac <SDMMC_CmdStopTransfer>
 80146f4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d008      	beq.n	801470e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	431a      	orrs	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 f95b 	bl	80149c4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	4a3f      	ldr	r2, [pc, #252]	; (8014810 <HAL_SD_IRQHandler+0x1bc>)
 8014714:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2201      	movs	r2, #1
 801471a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2200      	movs	r2, #0
 8014722:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	f003 0301 	and.w	r3, r3, #1
 801472a:	2b00      	cmp	r3, #0
 801472c:	d104      	bne.n	8014738 <HAL_SD_IRQHandler+0xe4>
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f003 0302 	and.w	r3, r3, #2
 8014734:	2b00      	cmp	r3, #0
 8014736:	d003      	beq.n	8014740 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f006 fd0f 	bl	801b15c <HAL_SD_RxCpltCallback>
 801473e:	e13b      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f006 fd01 	bl	801b148 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014746:	e137      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801474e:	2b00      	cmp	r3, #0
 8014750:	f000 8132 	beq.w	80149b8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	2200      	movs	r2, #0
 801475a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2200      	movs	r2, #0
 8014762:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2200      	movs	r2, #0
 801476a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	f003 0302 	and.w	r3, r3, #2
 8014772:	2b00      	cmp	r3, #0
 8014774:	d104      	bne.n	8014780 <HAL_SD_IRQHandler+0x12c>
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	f003 0320 	and.w	r3, r3, #32
 801477c:	2b00      	cmp	r3, #0
 801477e:	d011      	beq.n	80147a4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4618      	mov	r0, r3
 8014786:	f006 f811 	bl	801a7ac <SDMMC_CmdStopTransfer>
 801478a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d008      	beq.n	80147a4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	431a      	orrs	r2, r3
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 f910 	bl	80149c4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2201      	movs	r2, #1
 80147a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2200      	movs	r2, #0
 80147b0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	f003 0310 	and.w	r3, r3, #16
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d104      	bne.n	80147c6 <HAL_SD_IRQHandler+0x172>
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	f003 0320 	and.w	r3, r3, #32
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d002      	beq.n	80147cc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f006 fcbe 	bl	801b148 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f003 0301 	and.w	r3, r3, #1
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d105      	bne.n	80147e2 <HAL_SD_IRQHandler+0x18e>
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f003 0302 	and.w	r3, r3, #2
 80147dc:	2b00      	cmp	r3, #0
 80147de:	f000 80eb 	beq.w	80149b8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f006 fcba 	bl	801b15c <HAL_SD_RxCpltCallback>
}
 80147e8:	e0e6      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d00d      	beq.n	8014814 <HAL_SD_IRQHandler+0x1c0>
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	f003 0308 	and.w	r3, r3, #8
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d008      	beq.n	8014814 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f001 f8a8 	bl	8015958 <SD_Write_IT>
 8014808:	e0d6      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
 801480a:	bf00      	nop
 801480c:	ffff3ec5 	.word	0xffff3ec5
 8014810:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801481a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 801481e:	2b00      	cmp	r3, #0
 8014820:	f000 809d 	beq.w	801495e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801482a:	f003 0302 	and.w	r3, r3, #2
 801482e:	2b00      	cmp	r3, #0
 8014830:	d005      	beq.n	801483e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014836:	f043 0202 	orr.w	r2, r3, #2
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014844:	f003 0308 	and.w	r3, r3, #8
 8014848:	2b00      	cmp	r3, #0
 801484a:	d005      	beq.n	8014858 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014850:	f043 0208 	orr.w	r2, r3, #8
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801485e:	f003 0320 	and.w	r3, r3, #32
 8014862:	2b00      	cmp	r3, #0
 8014864:	d005      	beq.n	8014872 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801486a:	f043 0220 	orr.w	r2, r3, #32
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014878:	f003 0310 	and.w	r3, r3, #16
 801487c:	2b00      	cmp	r3, #0
 801487e:	d005      	beq.n	801488c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014884:	f043 0210 	orr.w	r2, r3, #16
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	4a4b      	ldr	r2, [pc, #300]	; (80149c0 <HAL_SD_IRQHandler+0x36c>)
 8014892:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80148a2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	68da      	ldr	r2, [r3, #12]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148b2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80148c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	68da      	ldr	r2, [r3, #12]
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80148d2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	4618      	mov	r0, r3
 80148da:	f005 ff67 	bl	801a7ac <SDMMC_CmdStopTransfer>
 80148de:	4602      	mov	r2, r0
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148e4:	431a      	orrs	r2, r3
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	68da      	ldr	r2, [r3, #12]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80148f8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014902:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f003 0308 	and.w	r3, r3, #8
 801490a:	2b00      	cmp	r3, #0
 801490c:	d00a      	beq.n	8014924 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2201      	movs	r2, #1
 8014912:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2200      	movs	r2, #0
 801491a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 f851 	bl	80149c4 <HAL_SD_ErrorCallback>
}
 8014922:	e049      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801492a:	2b00      	cmp	r3, #0
 801492c:	d044      	beq.n	80149b8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014932:	2b00      	cmp	r3, #0
 8014934:	d040      	beq.n	80149b8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8014944:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	2200      	movs	r2, #0
 801494c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2201      	movs	r2, #1
 8014952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f000 f834 	bl	80149c4 <HAL_SD_ErrorCallback>
}
 801495c:	e02c      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014968:	2b00      	cmp	r3, #0
 801496a:	d025      	beq.n	80149b8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014974:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801497c:	f003 0304 	and.w	r3, r3, #4
 8014980:	2b00      	cmp	r3, #0
 8014982:	d10c      	bne.n	801499e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f003 0320 	and.w	r3, r3, #32
 801498a:	2b00      	cmp	r3, #0
 801498c:	d003      	beq.n	8014996 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f001 f84a 	bl	8015a28 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8014994:	e010      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f001 f832 	bl	8015a00 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 801499c:	e00c      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	f003 0320 	and.w	r3, r3, #32
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d003      	beq.n	80149b0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f001 f833 	bl	8015a14 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80149ae:	e003      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f001 f81b 	bl	80159ec <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80149b6:	e7ff      	b.n	80149b8 <HAL_SD_IRQHandler+0x364>
 80149b8:	bf00      	nop
 80149ba:	3710      	adds	r7, #16
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	18000f3a 	.word	0x18000f3a

080149c4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80149c4:	b480      	push	{r7}
 80149c6:	b083      	sub	sp, #12
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80149cc:	bf00      	nop
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80149d8:	b480      	push	{r7}
 80149da:	b083      	sub	sp, #12
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149e6:	0f9b      	lsrs	r3, r3, #30
 80149e8:	b2da      	uxtb	r2, r3
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149f2:	0e9b      	lsrs	r3, r3, #26
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	f003 030f 	and.w	r3, r3, #15
 80149fa:	b2da      	uxtb	r2, r3
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a04:	0e1b      	lsrs	r3, r3, #24
 8014a06:	b2db      	uxtb	r3, r3
 8014a08:	f003 0303 	and.w	r3, r3, #3
 8014a0c:	b2da      	uxtb	r2, r3
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a16:	0c1b      	lsrs	r3, r3, #16
 8014a18:	b2da      	uxtb	r2, r3
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a22:	0a1b      	lsrs	r3, r3, #8
 8014a24:	b2da      	uxtb	r2, r3
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a2e:	b2da      	uxtb	r2, r3
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a38:	0d1b      	lsrs	r3, r3, #20
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a44:	0c1b      	lsrs	r3, r3, #16
 8014a46:	b2db      	uxtb	r3, r3
 8014a48:	f003 030f 	and.w	r3, r3, #15
 8014a4c:	b2da      	uxtb	r2, r3
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a56:	0bdb      	lsrs	r3, r3, #15
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	f003 0301 	and.w	r3, r3, #1
 8014a5e:	b2da      	uxtb	r2, r3
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a68:	0b9b      	lsrs	r3, r3, #14
 8014a6a:	b2db      	uxtb	r3, r3
 8014a6c:	f003 0301 	and.w	r3, r3, #1
 8014a70:	b2da      	uxtb	r2, r3
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a7a:	0b5b      	lsrs	r3, r3, #13
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	b2da      	uxtb	r2, r3
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a8c:	0b1b      	lsrs	r3, r3, #12
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	f003 0301 	and.w	r3, r3, #1
 8014a94:	b2da      	uxtb	r2, r3
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d163      	bne.n	8014b70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014aac:	009a      	lsls	r2, r3, #2
 8014aae:	f640 73fc 	movw	r3, #4092	; 0xffc
 8014ab2:	4013      	ands	r3, r2
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8014ab8:	0f92      	lsrs	r2, r2, #30
 8014aba:	431a      	orrs	r2, r3
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ac4:	0edb      	lsrs	r3, r3, #27
 8014ac6:	b2db      	uxtb	r3, r3
 8014ac8:	f003 0307 	and.w	r3, r3, #7
 8014acc:	b2da      	uxtb	r2, r3
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ad6:	0e1b      	lsrs	r3, r3, #24
 8014ad8:	b2db      	uxtb	r3, r3
 8014ada:	f003 0307 	and.w	r3, r3, #7
 8014ade:	b2da      	uxtb	r2, r3
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014ae8:	0d5b      	lsrs	r3, r3, #21
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	f003 0307 	and.w	r3, r3, #7
 8014af0:	b2da      	uxtb	r2, r3
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014afa:	0c9b      	lsrs	r3, r3, #18
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	f003 0307 	and.w	r3, r3, #7
 8014b02:	b2da      	uxtb	r2, r3
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b0c:	0bdb      	lsrs	r3, r3, #15
 8014b0e:	b2db      	uxtb	r3, r3
 8014b10:	f003 0307 	and.w	r3, r3, #7
 8014b14:	b2da      	uxtb	r2, r3
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	691b      	ldr	r3, [r3, #16]
 8014b1e:	1c5a      	adds	r2, r3, #1
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	7e1b      	ldrb	r3, [r3, #24]
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	f003 0307 	and.w	r3, r3, #7
 8014b2e:	3302      	adds	r3, #2
 8014b30:	2201      	movs	r2, #1
 8014b32:	fa02 f303 	lsl.w	r3, r2, r3
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014b3a:	fb03 f202 	mul.w	r2, r3, r2
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	7a1b      	ldrb	r3, [r3, #8]
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	f003 030f 	and.w	r3, r3, #15
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	409a      	lsls	r2, r3
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b58:	687a      	ldr	r2, [r7, #4]
 8014b5a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8014b5c:	0a52      	lsrs	r2, r2, #9
 8014b5e:	fb03 f202 	mul.w	r2, r3, r2
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b6c:	655a      	str	r2, [r3, #84]	; 0x54
 8014b6e:	e031      	b.n	8014bd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b74:	2b01      	cmp	r3, #1
 8014b76:	d11d      	bne.n	8014bb4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014b7c:	041b      	lsls	r3, r3, #16
 8014b7e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b86:	0c1b      	lsrs	r3, r3, #16
 8014b88:	431a      	orrs	r2, r3
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	691b      	ldr	r3, [r3, #16]
 8014b92:	3301      	adds	r3, #1
 8014b94:	029a      	lsls	r2, r3, #10
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ba8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8014bb2:	e00f      	b.n	8014bd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	4a58      	ldr	r2, [pc, #352]	; (8014d1c <HAL_SD_GetCardCSD+0x344>)
 8014bba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2201      	movs	r2, #1
 8014bcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	e09d      	b.n	8014d10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014bd8:	0b9b      	lsrs	r3, r3, #14
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	f003 0301 	and.w	r3, r3, #1
 8014be0:	b2da      	uxtb	r2, r3
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014bea:	09db      	lsrs	r3, r3, #7
 8014bec:	b2db      	uxtb	r3, r3
 8014bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bf2:	b2da      	uxtb	r2, r3
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014bfc:	b2db      	uxtb	r3, r3
 8014bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c02:	b2da      	uxtb	r2, r3
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c0c:	0fdb      	lsrs	r3, r3, #31
 8014c0e:	b2da      	uxtb	r2, r3
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c18:	0f5b      	lsrs	r3, r3, #29
 8014c1a:	b2db      	uxtb	r3, r3
 8014c1c:	f003 0303 	and.w	r3, r3, #3
 8014c20:	b2da      	uxtb	r2, r3
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c2a:	0e9b      	lsrs	r3, r3, #26
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	f003 0307 	and.w	r3, r3, #7
 8014c32:	b2da      	uxtb	r2, r3
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c3c:	0d9b      	lsrs	r3, r3, #22
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	f003 030f 	and.w	r3, r3, #15
 8014c44:	b2da      	uxtb	r2, r3
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c4e:	0d5b      	lsrs	r3, r3, #21
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	f003 0301 	and.w	r3, r3, #1
 8014c56:	b2da      	uxtb	r2, r3
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	2200      	movs	r2, #0
 8014c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c6a:	0c1b      	lsrs	r3, r3, #16
 8014c6c:	b2db      	uxtb	r3, r3
 8014c6e:	f003 0301 	and.w	r3, r3, #1
 8014c72:	b2da      	uxtb	r2, r3
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c7e:	0bdb      	lsrs	r3, r3, #15
 8014c80:	b2db      	uxtb	r3, r3
 8014c82:	f003 0301 	and.w	r3, r3, #1
 8014c86:	b2da      	uxtb	r2, r3
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c92:	0b9b      	lsrs	r3, r3, #14
 8014c94:	b2db      	uxtb	r3, r3
 8014c96:	f003 0301 	and.w	r3, r3, #1
 8014c9a:	b2da      	uxtb	r2, r3
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ca6:	0b5b      	lsrs	r3, r3, #13
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	f003 0301 	and.w	r3, r3, #1
 8014cae:	b2da      	uxtb	r2, r3
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014cba:	0b1b      	lsrs	r3, r3, #12
 8014cbc:	b2db      	uxtb	r3, r3
 8014cbe:	f003 0301 	and.w	r3, r3, #1
 8014cc2:	b2da      	uxtb	r2, r3
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014cce:	0a9b      	lsrs	r3, r3, #10
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	f003 0303 	and.w	r3, r3, #3
 8014cd6:	b2da      	uxtb	r2, r3
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ce2:	0a1b      	lsrs	r3, r3, #8
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	f003 0303 	and.w	r3, r3, #3
 8014cea:	b2da      	uxtb	r2, r3
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014cf6:	085b      	lsrs	r3, r3, #1
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cfe:	b2da      	uxtb	r2, r3
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	2201      	movs	r2, #1
 8014d0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8014d0e:	2300      	movs	r3, #0
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	370c      	adds	r7, #12
 8014d14:	46bd      	mov	sp, r7
 8014d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1a:	4770      	bx	lr
 8014d1c:	1fe00fff 	.word	0x1fe00fff

08014d20 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b094      	sub	sp, #80	; 0x50
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	2b03      	cmp	r3, #3
 8014d3a:	d101      	bne.n	8014d40 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	e0a7      	b.n	8014e90 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8014d40:	f107 0308 	add.w	r3, r7, #8
 8014d44:	4619      	mov	r1, r3
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f000 fb62 	bl	8015410 <SD_SendSDStatus>
 8014d4c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8014d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d011      	beq.n	8014d78 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	4a4f      	ldr	r2, [pc, #316]	; (8014e98 <HAL_SD_GetCardStatus+0x178>)
 8014d5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d62:	431a      	orrs	r2, r3
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2201      	movs	r2, #1
 8014d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8014d70:	2301      	movs	r3, #1
 8014d72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8014d76:	e070      	b.n	8014e5a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	099b      	lsrs	r3, r3, #6
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	f003 0303 	and.w	r3, r3, #3
 8014d82:	b2da      	uxtb	r2, r3
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	095b      	lsrs	r3, r3, #5
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	f003 0301 	and.w	r3, r3, #1
 8014d92:	b2da      	uxtb	r2, r3
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	0a1b      	lsrs	r3, r3, #8
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	0e1b      	lsrs	r3, r3, #24
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	4313      	orrs	r3, r2
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	061a      	lsls	r2, r3, #24
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	021b      	lsls	r3, r3, #8
 8014dba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014dbe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	0a1b      	lsrs	r3, r3, #8
 8014dc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8014dc8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	0e1b      	lsrs	r3, r3, #24
 8014dce:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	b2da      	uxtb	r2, r3
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	0a1b      	lsrs	r3, r3, #8
 8014de0:	b2da      	uxtb	r2, r3
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	0d1b      	lsrs	r3, r3, #20
 8014dea:	b2db      	uxtb	r3, r3
 8014dec:	f003 030f 	and.w	r3, r3, #15
 8014df0:	b2da      	uxtb	r2, r3
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	0c1b      	lsrs	r3, r3, #16
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014e00:	b29a      	uxth	r2, r3
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	b2db      	uxtb	r3, r3
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	4313      	orrs	r3, r2
 8014e0c:	b29a      	uxth	r2, r3
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	0a9b      	lsrs	r3, r3, #10
 8014e16:	b2db      	uxtb	r3, r3
 8014e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e1c:	b2da      	uxtb	r2, r3
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	0a1b      	lsrs	r3, r3, #8
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	f003 0303 	and.w	r3, r3, #3
 8014e2c:	b2da      	uxtb	r2, r3
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	091b      	lsrs	r3, r3, #4
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	f003 030f 	and.w	r3, r3, #15
 8014e3c:	b2da      	uxtb	r2, r3
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	f003 030f 	and.w	r3, r3, #15
 8014e4a:	b2da      	uxtb	r2, r3
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8014e50:	69bb      	ldr	r3, [r7, #24]
 8014e52:	0e1b      	lsrs	r3, r3, #24
 8014e54:	b2da      	uxtb	r2, r3
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014e62:	4618      	mov	r0, r3
 8014e64:	f005 fbf2 	bl	801a64c <SDMMC_CmdBlockLength>
 8014e68:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8014e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d00d      	beq.n	8014e8c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	4a08      	ldr	r2, [pc, #32]	; (8014e98 <HAL_SD_GetCardStatus+0x178>)
 8014e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e7c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2201      	movs	r2, #1
 8014e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8014e86:	2301      	movs	r3, #1
 8014e88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8014e8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3750      	adds	r7, #80	; 0x50
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	1fe00fff 	.word	0x1fe00fff

08014e9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b083      	sub	sp, #12
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
 8014ea4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8014ee6:	2300      	movs	r3, #0
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	370c      	adds	r7, #12
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr

08014ef4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8014ef4:	b590      	push	{r4, r7, lr}
 8014ef6:	b08d      	sub	sp, #52	; 0x34
 8014ef8:	af02      	add	r7, sp, #8
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8014efe:	2300      	movs	r3, #0
 8014f00:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8014f02:	2300      	movs	r3, #0
 8014f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2203      	movs	r2, #3
 8014f0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f14:	2b03      	cmp	r3, #3
 8014f16:	d02e      	beq.n	8014f76 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f1e:	d106      	bne.n	8014f2e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8014f2c:	e029      	b.n	8014f82 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014f34:	d10a      	bne.n	8014f4c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f000 fb62 	bl	8015600 <SD_WideBus_Enable>
 8014f3c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014f42:	69fb      	ldr	r3, [r7, #28]
 8014f44:	431a      	orrs	r2, r3
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	635a      	str	r2, [r3, #52]	; 0x34
 8014f4a:	e01a      	b.n	8014f82 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d10a      	bne.n	8014f68 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f000 fb9f 	bl	8015696 <SD_WideBus_Disable>
 8014f58:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	431a      	orrs	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	635a      	str	r2, [r3, #52]	; 0x34
 8014f66:	e00c      	b.n	8014f82 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	635a      	str	r2, [r3, #52]	; 0x34
 8014f74:	e005      	b.n	8014f82 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d007      	beq.n	8014f9a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	4a5e      	ldr	r2, [pc, #376]	; (8015108 <HAL_SD_ConfigWideBusOperation+0x214>)
 8014f90:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8014f92:	2301      	movs	r3, #1
 8014f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f98:	e094      	b.n	80150c4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8014f9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8014f9e:	f7fd fb61 	bl	8012664 <HAL_RCCEx_GetPeriphCLKFreq>
 8014fa2:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8014fa4:	6a3b      	ldr	r3, [r7, #32]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	f000 8083 	beq.w	80150b2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	689b      	ldr	r3, [r3, #8]
 8014fb6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	691b      	ldr	r3, [r3, #16]
 8014fc0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	695a      	ldr	r2, [r3, #20]
 8014fc6:	6a3b      	ldr	r3, [r7, #32]
 8014fc8:	4950      	ldr	r1, [pc, #320]	; (801510c <HAL_SD_ConfigWideBusOperation+0x218>)
 8014fca:	fba1 1303 	umull	r1, r3, r1, r3
 8014fce:	0e1b      	lsrs	r3, r3, #24
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d303      	bcc.n	8014fdc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	695b      	ldr	r3, [r3, #20]
 8014fd8:	61bb      	str	r3, [r7, #24]
 8014fda:	e05a      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fe4:	d103      	bne.n	8014fee <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	695b      	ldr	r3, [r3, #20]
 8014fea:	61bb      	str	r3, [r7, #24]
 8014fec:	e051      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ff6:	d126      	bne.n	8015046 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	695b      	ldr	r3, [r3, #20]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d10e      	bne.n	801501e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8015000:	6a3b      	ldr	r3, [r7, #32]
 8015002:	4a43      	ldr	r2, [pc, #268]	; (8015110 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8015004:	4293      	cmp	r3, r2
 8015006:	d906      	bls.n	8015016 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8015008:	6a3b      	ldr	r3, [r7, #32]
 801500a:	4a40      	ldr	r2, [pc, #256]	; (801510c <HAL_SD_ConfigWideBusOperation+0x218>)
 801500c:	fba2 2303 	umull	r2, r3, r2, r3
 8015010:	0e5b      	lsrs	r3, r3, #25
 8015012:	61bb      	str	r3, [r7, #24]
 8015014:	e03d      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	695b      	ldr	r3, [r3, #20]
 801501a:	61bb      	str	r3, [r7, #24]
 801501c:	e039      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	695b      	ldr	r3, [r3, #20]
 8015022:	005b      	lsls	r3, r3, #1
 8015024:	6a3a      	ldr	r2, [r7, #32]
 8015026:	fbb2 f3f3 	udiv	r3, r2, r3
 801502a:	4a39      	ldr	r2, [pc, #228]	; (8015110 <HAL_SD_ConfigWideBusOperation+0x21c>)
 801502c:	4293      	cmp	r3, r2
 801502e:	d906      	bls.n	801503e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8015030:	6a3b      	ldr	r3, [r7, #32]
 8015032:	4a36      	ldr	r2, [pc, #216]	; (801510c <HAL_SD_ConfigWideBusOperation+0x218>)
 8015034:	fba2 2303 	umull	r2, r3, r2, r3
 8015038:	0e5b      	lsrs	r3, r3, #25
 801503a:	61bb      	str	r3, [r7, #24]
 801503c:	e029      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	695b      	ldr	r3, [r3, #20]
 8015042:	61bb      	str	r3, [r7, #24]
 8015044:	e025      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	695b      	ldr	r3, [r3, #20]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d10e      	bne.n	801506c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 801504e:	6a3b      	ldr	r3, [r7, #32]
 8015050:	4a30      	ldr	r2, [pc, #192]	; (8015114 <HAL_SD_ConfigWideBusOperation+0x220>)
 8015052:	4293      	cmp	r3, r2
 8015054:	d906      	bls.n	8015064 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8015056:	6a3b      	ldr	r3, [r7, #32]
 8015058:	4a2c      	ldr	r2, [pc, #176]	; (801510c <HAL_SD_ConfigWideBusOperation+0x218>)
 801505a:	fba2 2303 	umull	r2, r3, r2, r3
 801505e:	0e1b      	lsrs	r3, r3, #24
 8015060:	61bb      	str	r3, [r7, #24]
 8015062:	e016      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	695b      	ldr	r3, [r3, #20]
 8015068:	61bb      	str	r3, [r7, #24]
 801506a:	e012      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	695b      	ldr	r3, [r3, #20]
 8015070:	005b      	lsls	r3, r3, #1
 8015072:	6a3a      	ldr	r2, [r7, #32]
 8015074:	fbb2 f3f3 	udiv	r3, r2, r3
 8015078:	4a26      	ldr	r2, [pc, #152]	; (8015114 <HAL_SD_ConfigWideBusOperation+0x220>)
 801507a:	4293      	cmp	r3, r2
 801507c:	d906      	bls.n	801508c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801507e:	6a3b      	ldr	r3, [r7, #32]
 8015080:	4a22      	ldr	r2, [pc, #136]	; (801510c <HAL_SD_ConfigWideBusOperation+0x218>)
 8015082:	fba2 2303 	umull	r2, r3, r2, r3
 8015086:	0e1b      	lsrs	r3, r3, #24
 8015088:	61bb      	str	r3, [r7, #24]
 801508a:	e002      	b.n	8015092 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	695b      	ldr	r3, [r3, #20]
 8015090:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681c      	ldr	r4, [r3, #0]
 8015096:	466a      	mov	r2, sp
 8015098:	f107 0314 	add.w	r3, r7, #20
 801509c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80150a0:	e882 0003 	stmia.w	r2, {r0, r1}
 80150a4:	f107 0308 	add.w	r3, r7, #8
 80150a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80150aa:	4620      	mov	r0, r4
 80150ac:	f005 f9f0 	bl	801a490 <SDMMC_Init>
 80150b0:	e008      	b.n	80150c4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80150be:	2301      	movs	r3, #1
 80150c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80150cc:	4618      	mov	r0, r3
 80150ce:	f005 fabd 	bl	801a64c <SDMMC_CmdBlockLength>
 80150d2:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d00c      	beq.n	80150f4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	4a0a      	ldr	r2, [pc, #40]	; (8015108 <HAL_SD_ConfigWideBusOperation+0x214>)
 80150e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	431a      	orrs	r2, r3
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80150ee:	2301      	movs	r3, #1
 80150f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2201      	movs	r2, #1
 80150f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80150fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015100:	4618      	mov	r0, r3
 8015102:	372c      	adds	r7, #44	; 0x2c
 8015104:	46bd      	mov	sp, r7
 8015106:	bd90      	pop	{r4, r7, pc}
 8015108:	1fe00fff 	.word	0x1fe00fff
 801510c:	55e63b89 	.word	0x55e63b89
 8015110:	02faf080 	.word	0x02faf080
 8015114:	017d7840 	.word	0x017d7840

08015118 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b086      	sub	sp, #24
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8015120:	2300      	movs	r3, #0
 8015122:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8015124:	f107 030c 	add.w	r3, r7, #12
 8015128:	4619      	mov	r1, r3
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f000 fa40 	bl	80155b0 <SD_SendStatus>
 8015130:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015132:	697b      	ldr	r3, [r7, #20]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d005      	beq.n	8015144 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	431a      	orrs	r2, r3
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	0a5b      	lsrs	r3, r3, #9
 8015148:	f003 030f 	and.w	r3, r3, #15
 801514c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801514e:	693b      	ldr	r3, [r7, #16]
}
 8015150:	4618      	mov	r0, r3
 8015152:	3718      	adds	r7, #24
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b090      	sub	sp, #64	; 0x40
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8015160:	2300      	movs	r3, #0
 8015162:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8015164:	f7f4 ff2a 	bl	8009fbc <HAL_GetTick>
 8015168:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	4618      	mov	r0, r3
 8015170:	f005 f9e7 	bl	801a542 <SDMMC_GetPowerState>
 8015174:	4603      	mov	r3, r0
 8015176:	2b00      	cmp	r3, #0
 8015178:	d102      	bne.n	8015180 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801517a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801517e:	e0b5      	b.n	80152ec <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015184:	2b03      	cmp	r3, #3
 8015186:	d02e      	beq.n	80151e6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4618      	mov	r0, r3
 801518e:	f005 fc32 	bl	801a9f6 <SDMMC_CmdSendCID>
 8015192:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8015194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015196:	2b00      	cmp	r3, #0
 8015198:	d001      	beq.n	801519e <SD_InitCard+0x46>
    {
      return errorstate;
 801519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801519c:	e0a6      	b.n	80152ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	2100      	movs	r1, #0
 80151a4:	4618      	mov	r0, r3
 80151a6:	f005 fa12 	bl	801a5ce <SDMMC_GetResponse>
 80151aa:	4602      	mov	r2, r0
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	2104      	movs	r1, #4
 80151b6:	4618      	mov	r0, r3
 80151b8:	f005 fa09 	bl	801a5ce <SDMMC_GetResponse>
 80151bc:	4602      	mov	r2, r0
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	2108      	movs	r1, #8
 80151c8:	4618      	mov	r0, r3
 80151ca:	f005 fa00 	bl	801a5ce <SDMMC_GetResponse>
 80151ce:	4602      	mov	r2, r0
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	210c      	movs	r1, #12
 80151da:	4618      	mov	r0, r3
 80151dc:	f005 f9f7 	bl	801a5ce <SDMMC_GetResponse>
 80151e0:	4602      	mov	r2, r0
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d01d      	beq.n	801522a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80151ee:	e019      	b.n	8015224 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	f107 020a 	add.w	r2, r7, #10
 80151f8:	4611      	mov	r1, r2
 80151fa:	4618      	mov	r0, r3
 80151fc:	f005 fc3a 	bl	801aa74 <SDMMC_CmdSetRelAdd>
 8015200:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8015202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015204:	2b00      	cmp	r3, #0
 8015206:	d001      	beq.n	801520c <SD_InitCard+0xb4>
      {
        return errorstate;
 8015208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801520a:	e06f      	b.n	80152ec <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 801520c:	f7f4 fed6 	bl	8009fbc <HAL_GetTick>
 8015210:	4602      	mov	r2, r0
 8015212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	f241 3287 	movw	r2, #4999	; 0x1387
 801521a:	4293      	cmp	r3, r2
 801521c:	d902      	bls.n	8015224 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801521e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015222:	e063      	b.n	80152ec <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8015224:	897b      	ldrh	r3, [r7, #10]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d0e2      	beq.n	80151f0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801522e:	2b03      	cmp	r3, #3
 8015230:	d036      	beq.n	80152a0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8015232:	897b      	ldrh	r3, [r7, #10]
 8015234:	461a      	mov	r2, r3
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015242:	041b      	lsls	r3, r3, #16
 8015244:	4619      	mov	r1, r3
 8015246:	4610      	mov	r0, r2
 8015248:	f005 fbf4 	bl	801aa34 <SDMMC_CmdSendCSD>
 801524c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015250:	2b00      	cmp	r3, #0
 8015252:	d001      	beq.n	8015258 <SD_InitCard+0x100>
    {
      return errorstate;
 8015254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015256:	e049      	b.n	80152ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2100      	movs	r1, #0
 801525e:	4618      	mov	r0, r3
 8015260:	f005 f9b5 	bl	801a5ce <SDMMC_GetResponse>
 8015264:	4602      	mov	r2, r0
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2104      	movs	r1, #4
 8015270:	4618      	mov	r0, r3
 8015272:	f005 f9ac 	bl	801a5ce <SDMMC_GetResponse>
 8015276:	4602      	mov	r2, r0
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2108      	movs	r1, #8
 8015282:	4618      	mov	r0, r3
 8015284:	f005 f9a3 	bl	801a5ce <SDMMC_GetResponse>
 8015288:	4602      	mov	r2, r0
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	210c      	movs	r1, #12
 8015294:	4618      	mov	r0, r3
 8015296:	f005 f99a 	bl	801a5ce <SDMMC_GetResponse>
 801529a:	4602      	mov	r2, r0
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	2104      	movs	r1, #4
 80152a6:	4618      	mov	r0, r3
 80152a8:	f005 f991 	bl	801a5ce <SDMMC_GetResponse>
 80152ac:	4603      	mov	r3, r0
 80152ae:	0d1a      	lsrs	r2, r3, #20
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80152b4:	f107 030c 	add.w	r3, r7, #12
 80152b8:	4619      	mov	r1, r3
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f7ff fb8c 	bl	80149d8 <HAL_SD_GetCardCSD>
 80152c0:	4603      	mov	r3, r0
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d002      	beq.n	80152cc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80152c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80152ca:	e00f      	b.n	80152ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152d4:	041b      	lsls	r3, r3, #16
 80152d6:	4619      	mov	r1, r3
 80152d8:	4610      	mov	r0, r2
 80152da:	f005 faa3 	bl	801a824 <SDMMC_CmdSelDesel>
 80152de:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80152e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d001      	beq.n	80152ea <SD_InitCard+0x192>
  {
    return errorstate;
 80152e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e8:	e000      	b.n	80152ec <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80152ea:	2300      	movs	r3, #0
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3740      	adds	r7, #64	; 0x40
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b086      	sub	sp, #24
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80152fc:	2300      	movs	r3, #0
 80152fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8015300:	2300      	movs	r3, #0
 8015302:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8015304:	2300      	movs	r3, #0
 8015306:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	4618      	mov	r0, r3
 801530e:	f005 faac 	bl	801a86a <SDMMC_CmdGoIdleState>
 8015312:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d001      	beq.n	801531e <SD_PowerON+0x2a>
  {
    return errorstate;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	e072      	b.n	8015404 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	4618      	mov	r0, r3
 8015324:	f005 fabf 	bl	801a8a6 <SDMMC_CmdOperCond>
 8015328:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015330:	d10d      	bne.n	801534e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2200      	movs	r2, #0
 8015336:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	4618      	mov	r0, r3
 801533e:	f005 fa94 	bl	801a86a <SDMMC_CmdGoIdleState>
 8015342:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d004      	beq.n	8015354 <SD_PowerON+0x60>
    {
      return errorstate;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	e05a      	b.n	8015404 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2201      	movs	r2, #1
 8015352:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015358:	2b01      	cmp	r3, #1
 801535a:	d137      	bne.n	80153cc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	2100      	movs	r1, #0
 8015362:	4618      	mov	r0, r3
 8015364:	f005 fabf 	bl	801a8e6 <SDMMC_CmdAppCommand>
 8015368:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d02d      	beq.n	80153cc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015370:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015374:	e046      	b.n	8015404 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	2100      	movs	r1, #0
 801537c:	4618      	mov	r0, r3
 801537e:	f005 fab2 	bl	801a8e6 <SDMMC_CmdAppCommand>
 8015382:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d001      	beq.n	801538e <SD_PowerON+0x9a>
    {
      return errorstate;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	e03a      	b.n	8015404 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	491e      	ldr	r1, [pc, #120]	; (801540c <SD_PowerON+0x118>)
 8015394:	4618      	mov	r0, r3
 8015396:	f005 fac9 	bl	801a92c <SDMMC_CmdAppOperCommand>
 801539a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d002      	beq.n	80153a8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80153a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80153a6:	e02d      	b.n	8015404 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	2100      	movs	r1, #0
 80153ae:	4618      	mov	r0, r3
 80153b0:	f005 f90d 	bl	801a5ce <SDMMC_GetResponse>
 80153b4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80153b6:	697b      	ldr	r3, [r7, #20]
 80153b8:	0fdb      	lsrs	r3, r3, #31
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d101      	bne.n	80153c2 <SD_PowerON+0xce>
 80153be:	2301      	movs	r3, #1
 80153c0:	e000      	b.n	80153c4 <SD_PowerON+0xd0>
 80153c2:	2300      	movs	r3, #0
 80153c4:	613b      	str	r3, [r7, #16]

    count++;
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	3301      	adds	r3, #1
 80153ca:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d802      	bhi.n	80153dc <SD_PowerON+0xe8>
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d0cc      	beq.n	8015376 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80153e2:	4293      	cmp	r3, r2
 80153e4:	d902      	bls.n	80153ec <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80153e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80153ea:	e00b      	b.n	8015404 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2200      	movs	r2, #0
 80153f0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d002      	beq.n	8015402 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2201      	movs	r2, #1
 8015400:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	3718      	adds	r7, #24
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}
 801540c:	c1100000 	.word	0xc1100000

08015410 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b08c      	sub	sp, #48	; 0x30
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801541a:	f7f4 fdcf 	bl	8009fbc <HAL_GetTick>
 801541e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	2100      	movs	r1, #0
 801542a:	4618      	mov	r0, r3
 801542c:	f005 f8cf 	bl	801a5ce <SDMMC_GetResponse>
 8015430:	4603      	mov	r3, r0
 8015432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801543a:	d102      	bne.n	8015442 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801543c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015440:	e0b0      	b.n	80155a4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2140      	movs	r1, #64	; 0x40
 8015448:	4618      	mov	r0, r3
 801544a:	f005 f8ff 	bl	801a64c <SDMMC_CmdBlockLength>
 801544e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015450:	6a3b      	ldr	r3, [r7, #32]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d005      	beq.n	8015462 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 801545e:	6a3b      	ldr	r3, [r7, #32]
 8015460:	e0a0      	b.n	80155a4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681a      	ldr	r2, [r3, #0]
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801546a:	041b      	lsls	r3, r3, #16
 801546c:	4619      	mov	r1, r3
 801546e:	4610      	mov	r0, r2
 8015470:	f005 fa39 	bl	801a8e6 <SDMMC_CmdAppCommand>
 8015474:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015476:	6a3b      	ldr	r3, [r7, #32]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d005      	beq.n	8015488 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8015484:	6a3b      	ldr	r3, [r7, #32]
 8015486:	e08d      	b.n	80155a4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8015488:	f04f 33ff 	mov.w	r3, #4294967295
 801548c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801548e:	2340      	movs	r3, #64	; 0x40
 8015490:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8015492:	2360      	movs	r3, #96	; 0x60
 8015494:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8015496:	2302      	movs	r3, #2
 8015498:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801549a:	2300      	movs	r3, #0
 801549c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801549e:	2301      	movs	r3, #1
 80154a0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	f107 0208 	add.w	r2, r7, #8
 80154aa:	4611      	mov	r1, r2
 80154ac:	4618      	mov	r0, r3
 80154ae:	f005 f8a1 	bl	801a5f4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f005 fb21 	bl	801aafe <SDMMC_CmdStatusRegister>
 80154bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80154be:	6a3b      	ldr	r3, [r7, #32]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d02b      	beq.n	801551c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80154cc:	6a3b      	ldr	r3, [r7, #32]
 80154ce:	e069      	b.n	80155a4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d013      	beq.n	8015506 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80154de:	2300      	movs	r3, #0
 80154e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154e2:	e00d      	b.n	8015500 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	4618      	mov	r0, r3
 80154ea:	f004 fffb 	bl	801a4e4 <SDMMC_ReadFIFO>
 80154ee:	4602      	mov	r2, r0
 80154f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f2:	601a      	str	r2, [r3, #0]
        pData++;
 80154f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f6:	3304      	adds	r3, #4
 80154f8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80154fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fc:	3301      	adds	r3, #1
 80154fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015502:	2b07      	cmp	r3, #7
 8015504:	d9ee      	bls.n	80154e4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015506:	f7f4 fd59 	bl	8009fbc <HAL_GetTick>
 801550a:	4602      	mov	r2, r0
 801550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550e:	1ad3      	subs	r3, r2, r3
 8015510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015514:	d102      	bne.n	801551c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8015516:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801551a:	e043      	b.n	80155a4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015522:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8015526:	2b00      	cmp	r3, #0
 8015528:	d0d2      	beq.n	80154d0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015530:	f003 0308 	and.w	r3, r3, #8
 8015534:	2b00      	cmp	r3, #0
 8015536:	d001      	beq.n	801553c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8015538:	2308      	movs	r3, #8
 801553a:	e033      	b.n	80155a4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015542:	f003 0302 	and.w	r3, r3, #2
 8015546:	2b00      	cmp	r3, #0
 8015548:	d001      	beq.n	801554e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801554a:	2302      	movs	r3, #2
 801554c:	e02a      	b.n	80155a4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015554:	f003 0320 	and.w	r3, r3, #32
 8015558:	2b00      	cmp	r3, #0
 801555a:	d017      	beq.n	801558c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 801555c:	2320      	movs	r3, #32
 801555e:	e021      	b.n	80155a4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	4618      	mov	r0, r3
 8015566:	f004 ffbd 	bl	801a4e4 <SDMMC_ReadFIFO>
 801556a:	4602      	mov	r2, r0
 801556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801556e:	601a      	str	r2, [r3, #0]
    pData++;
 8015570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015572:	3304      	adds	r3, #4
 8015574:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015576:	f7f4 fd21 	bl	8009fbc <HAL_GetTick>
 801557a:	4602      	mov	r2, r0
 801557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015584:	d102      	bne.n	801558c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8015586:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801558a:	e00b      	b.n	80155a4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015596:	2b00      	cmp	r3, #0
 8015598:	d1e2      	bne.n	8015560 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	4a03      	ldr	r2, [pc, #12]	; (80155ac <SD_SendSDStatus+0x19c>)
 80155a0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80155a2:	2300      	movs	r3, #0
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3730      	adds	r7, #48	; 0x30
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}
 80155ac:	18000f3a 	.word	0x18000f3a

080155b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d102      	bne.n	80155c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80155c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80155c4:	e018      	b.n	80155f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155ce:	041b      	lsls	r3, r3, #16
 80155d0:	4619      	mov	r1, r3
 80155d2:	4610      	mov	r0, r2
 80155d4:	f005 fa70 	bl	801aab8 <SDMMC_CmdSendStatus>
 80155d8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d001      	beq.n	80155e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	e009      	b.n	80155f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	2100      	movs	r1, #0
 80155ea:	4618      	mov	r0, r3
 80155ec:	f004 ffef 	bl	801a5ce <SDMMC_GetResponse>
 80155f0:	4602      	mov	r2, r0
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80155f6:	2300      	movs	r3, #0
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3710      	adds	r7, #16
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b086      	sub	sp, #24
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8015608:	2300      	movs	r3, #0
 801560a:	60fb      	str	r3, [r7, #12]
 801560c:	2300      	movs	r3, #0
 801560e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	2100      	movs	r1, #0
 8015616:	4618      	mov	r0, r3
 8015618:	f004 ffd9 	bl	801a5ce <SDMMC_GetResponse>
 801561c:	4603      	mov	r3, r0
 801561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015626:	d102      	bne.n	801562e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801562c:	e02f      	b.n	801568e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801562e:	f107 030c 	add.w	r3, r7, #12
 8015632:	4619      	mov	r1, r3
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f000 f879 	bl	801572c <SD_FindSCR>
 801563a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d001      	beq.n	8015646 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	e023      	b.n	801568e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801564c:	2b00      	cmp	r3, #0
 801564e:	d01c      	beq.n	801568a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015658:	041b      	lsls	r3, r3, #16
 801565a:	4619      	mov	r1, r3
 801565c:	4610      	mov	r0, r2
 801565e:	f005 f942 	bl	801a8e6 <SDMMC_CmdAppCommand>
 8015662:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d001      	beq.n	801566e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	e00f      	b.n	801568e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	2102      	movs	r1, #2
 8015674:	4618      	mov	r0, r3
 8015676:	f005 f979 	bl	801a96c <SDMMC_CmdBusWidth>
 801567a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d001      	beq.n	8015686 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	e003      	b.n	801568e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8015686:	2300      	movs	r3, #0
 8015688:	e001      	b.n	801568e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801568a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801568e:	4618      	mov	r0, r3
 8015690:	3718      	adds	r7, #24
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}

08015696 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8015696:	b580      	push	{r7, lr}
 8015698:	b086      	sub	sp, #24
 801569a:	af00      	add	r7, sp, #0
 801569c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801569e:	2300      	movs	r3, #0
 80156a0:	60fb      	str	r3, [r7, #12]
 80156a2:	2300      	movs	r3, #0
 80156a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	2100      	movs	r1, #0
 80156ac:	4618      	mov	r0, r3
 80156ae:	f004 ff8e 	bl	801a5ce <SDMMC_GetResponse>
 80156b2:	4603      	mov	r3, r0
 80156b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80156b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80156bc:	d102      	bne.n	80156c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80156be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80156c2:	e02f      	b.n	8015724 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80156c4:	f107 030c 	add.w	r3, r7, #12
 80156c8:	4619      	mov	r1, r3
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 f82e 	bl	801572c <SD_FindSCR>
 80156d0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d001      	beq.n	80156dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	e023      	b.n	8015724 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d01c      	beq.n	8015720 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681a      	ldr	r2, [r3, #0]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156ee:	041b      	lsls	r3, r3, #16
 80156f0:	4619      	mov	r1, r3
 80156f2:	4610      	mov	r0, r2
 80156f4:	f005 f8f7 	bl	801a8e6 <SDMMC_CmdAppCommand>
 80156f8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d001      	beq.n	8015704 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8015700:	697b      	ldr	r3, [r7, #20]
 8015702:	e00f      	b.n	8015724 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	2100      	movs	r1, #0
 801570a:	4618      	mov	r0, r3
 801570c:	f005 f92e 	bl	801a96c <SDMMC_CmdBusWidth>
 8015710:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d001      	beq.n	801571c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	e003      	b.n	8015724 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801571c:	2300      	movs	r3, #0
 801571e:	e001      	b.n	8015724 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015720:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8015724:	4618      	mov	r0, r3
 8015726:	3718      	adds	r7, #24
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b08e      	sub	sp, #56	; 0x38
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8015736:	f7f4 fc41 	bl	8009fbc <HAL_GetTick>
 801573a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801573c:	2300      	movs	r3, #0
 801573e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8015740:	2300      	movs	r3, #0
 8015742:	60bb      	str	r3, [r7, #8]
 8015744:	2300      	movs	r3, #0
 8015746:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2108      	movs	r1, #8
 8015752:	4618      	mov	r0, r3
 8015754:	f004 ff7a 	bl	801a64c <SDMMC_CmdBlockLength>
 8015758:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575c:	2b00      	cmp	r3, #0
 801575e:	d001      	beq.n	8015764 <SD_FindSCR+0x38>
  {
    return errorstate;
 8015760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015762:	e0ad      	b.n	80158c0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801576c:	041b      	lsls	r3, r3, #16
 801576e:	4619      	mov	r1, r3
 8015770:	4610      	mov	r0, r2
 8015772:	f005 f8b8 	bl	801a8e6 <SDMMC_CmdAppCommand>
 8015776:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	2b00      	cmp	r3, #0
 801577c:	d001      	beq.n	8015782 <SD_FindSCR+0x56>
  {
    return errorstate;
 801577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015780:	e09e      	b.n	80158c0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8015782:	f04f 33ff 	mov.w	r3, #4294967295
 8015786:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8015788:	2308      	movs	r3, #8
 801578a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801578c:	2330      	movs	r3, #48	; 0x30
 801578e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8015790:	2302      	movs	r3, #2
 8015792:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8015794:	2300      	movs	r3, #0
 8015796:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8015798:	2301      	movs	r3, #1
 801579a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f107 0210 	add.w	r2, r7, #16
 80157a4:	4611      	mov	r1, r2
 80157a6:	4618      	mov	r0, r3
 80157a8:	f004 ff24 	bl	801a5f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	4618      	mov	r0, r3
 80157b2:	f005 f8fe 	bl	801a9b2 <SDMMC_CmdSendSCR>
 80157b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80157b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d027      	beq.n	801580e <SD_FindSCR+0xe2>
  {
    return errorstate;
 80157be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c0:	e07e      	b.n	80158c0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d113      	bne.n	80157f8 <SD_FindSCR+0xcc>
 80157d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d110      	bne.n	80157f8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	4618      	mov	r0, r3
 80157dc:	f004 fe82 	bl	801a4e4 <SDMMC_ReadFIFO>
 80157e0:	4603      	mov	r3, r0
 80157e2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	4618      	mov	r0, r3
 80157ea:	f004 fe7b 	bl	801a4e4 <SDMMC_ReadFIFO>
 80157ee:	4603      	mov	r3, r0
 80157f0:	60fb      	str	r3, [r7, #12]
      index++;
 80157f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157f4:	3301      	adds	r3, #1
 80157f6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80157f8:	f7f4 fbe0 	bl	8009fbc <HAL_GetTick>
 80157fc:	4602      	mov	r2, r0
 80157fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015806:	d102      	bne.n	801580e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8015808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801580c:	e058      	b.n	80158c0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015814:	f240 532a 	movw	r3, #1322	; 0x52a
 8015818:	4013      	ands	r3, r2
 801581a:	2b00      	cmp	r3, #0
 801581c:	d0d1      	beq.n	80157c2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015824:	f003 0308 	and.w	r3, r3, #8
 8015828:	2b00      	cmp	r3, #0
 801582a:	d005      	beq.n	8015838 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	2208      	movs	r2, #8
 8015832:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8015834:	2308      	movs	r3, #8
 8015836:	e043      	b.n	80158c0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801583e:	f003 0302 	and.w	r3, r3, #2
 8015842:	2b00      	cmp	r3, #0
 8015844:	d005      	beq.n	8015852 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	2202      	movs	r2, #2
 801584c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801584e:	2302      	movs	r3, #2
 8015850:	e036      	b.n	80158c0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015858:	f003 0320 	and.w	r3, r3, #32
 801585c:	2b00      	cmp	r3, #0
 801585e:	d005      	beq.n	801586c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	2220      	movs	r2, #32
 8015866:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8015868:	2320      	movs	r3, #32
 801586a:	e029      	b.n	80158c0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	4a15      	ldr	r2, [pc, #84]	; (80158c8 <SD_FindSCR+0x19c>)
 8015872:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	061a      	lsls	r2, r3, #24
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	021b      	lsls	r3, r3, #8
 801587c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015880:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	0a1b      	lsrs	r3, r3, #8
 8015886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801588a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	0e1b      	lsrs	r3, r3, #24
 8015890:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8015892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015894:	601a      	str	r2, [r3, #0]
    scr++;
 8015896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015898:	3304      	adds	r3, #4
 801589a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	061a      	lsls	r2, r3, #24
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	021b      	lsls	r3, r3, #8
 80158a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80158a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	0a1b      	lsrs	r3, r3, #8
 80158ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80158b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	0e1b      	lsrs	r3, r3, #24
 80158b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80158ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158bc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80158be:	2300      	movs	r3, #0
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3738      	adds	r7, #56	; 0x38
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}
 80158c8:	18000f3a 	.word	0x18000f3a

080158cc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b086      	sub	sp, #24
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158d8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158de:	2b1f      	cmp	r3, #31
 80158e0:	d936      	bls.n	8015950 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80158e2:	2300      	movs	r3, #0
 80158e4:	617b      	str	r3, [r7, #20]
 80158e6:	e027      	b.n	8015938 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	4618      	mov	r0, r3
 80158ee:	f004 fdf9 	bl	801a4e4 <SDMMC_ReadFIFO>
 80158f2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	b2da      	uxtb	r2, r3
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	3301      	adds	r3, #1
 8015900:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	0a1b      	lsrs	r3, r3, #8
 8015906:	b2da      	uxtb	r2, r3
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	3301      	adds	r3, #1
 8015910:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	0c1b      	lsrs	r3, r3, #16
 8015916:	b2da      	uxtb	r2, r3
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	3301      	adds	r3, #1
 8015920:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	0e1b      	lsrs	r3, r3, #24
 8015926:	b2da      	uxtb	r2, r3
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	3301      	adds	r3, #1
 8015930:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	3301      	adds	r3, #1
 8015936:	617b      	str	r3, [r7, #20]
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	2b07      	cmp	r3, #7
 801593c:	d9d4      	bls.n	80158e8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	693a      	ldr	r2, [r7, #16]
 8015942:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015948:	f1a3 0220 	sub.w	r2, r3, #32
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8015950:	bf00      	nop
 8015952:	3718      	adds	r7, #24
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}

08015958 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b086      	sub	sp, #24
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	69db      	ldr	r3, [r3, #28]
 8015964:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6a1b      	ldr	r3, [r3, #32]
 801596a:	2b1f      	cmp	r3, #31
 801596c:	d93a      	bls.n	80159e4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 801596e:	2300      	movs	r3, #0
 8015970:	617b      	str	r3, [r7, #20]
 8015972:	e02b      	b.n	80159cc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	60fb      	str	r3, [r7, #12]
      tmp++;
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	3301      	adds	r3, #1
 801597e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8015980:	693b      	ldr	r3, [r7, #16]
 8015982:	781b      	ldrb	r3, [r3, #0]
 8015984:	021a      	lsls	r2, r3, #8
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	4313      	orrs	r3, r2
 801598a:	60fb      	str	r3, [r7, #12]
      tmp++;
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	3301      	adds	r3, #1
 8015990:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	041a      	lsls	r2, r3, #16
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	4313      	orrs	r3, r2
 801599c:	60fb      	str	r3, [r7, #12]
      tmp++;
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	3301      	adds	r3, #1
 80159a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	061a      	lsls	r2, r3, #24
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	4313      	orrs	r3, r2
 80159ae:	60fb      	str	r3, [r7, #12]
      tmp++;
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	3301      	adds	r3, #1
 80159b4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	f107 020c 	add.w	r2, r7, #12
 80159be:	4611      	mov	r1, r2
 80159c0:	4618      	mov	r0, r3
 80159c2:	f004 fd9c 	bl	801a4fe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	3301      	adds	r3, #1
 80159ca:	617b      	str	r3, [r7, #20]
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	2b07      	cmp	r3, #7
 80159d0:	d9d0      	bls.n	8015974 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	693a      	ldr	r2, [r7, #16]
 80159d6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6a1b      	ldr	r3, [r3, #32]
 80159dc:	f1a3 0220 	sub.w	r2, r3, #32
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	621a      	str	r2, [r3, #32]
  }
}
 80159e4:	bf00      	nop
 80159e6:	3718      	adds	r7, #24
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}

080159ec <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b083      	sub	sp, #12
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80159f4:	bf00      	nop
 80159f6:	370c      	adds	r7, #12
 80159f8:	46bd      	mov	sp, r7
 80159fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fe:	4770      	bx	lr

08015a00 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8015a08:	bf00      	nop
 8015a0a:	370c      	adds	r7, #12
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a12:	4770      	bx	lr

08015a14 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8015a1c:	bf00      	nop
 8015a1e:	370c      	adds	r7, #12
 8015a20:	46bd      	mov	sp, r7
 8015a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a26:	4770      	bx	lr

08015a28 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8015a30:	bf00      	nop
 8015a32:	370c      	adds	r7, #12
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr

08015a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d101      	bne.n	8015a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	e049      	b.n	8015ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d106      	bne.n	8015a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f7f2 fcaa 	bl	80083bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2202      	movs	r2, #2
 8015a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681a      	ldr	r2, [r3, #0]
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	3304      	adds	r3, #4
 8015a78:	4619      	mov	r1, r3
 8015a7a:	4610      	mov	r0, r2
 8015a7c:	f001 f888 	bl	8016b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2201      	movs	r2, #1
 8015a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2201      	movs	r2, #1
 8015a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2201      	movs	r2, #1
 8015a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2201      	movs	r2, #1
 8015aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2201      	movs	r2, #1
 8015abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2201      	movs	r2, #1
 8015ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2201      	movs	r2, #1
 8015acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2201      	movs	r2, #1
 8015adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015ae0:	2300      	movs	r3, #0
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3708      	adds	r7, #8
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
	...

08015aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015aec:	b480      	push	{r7}
 8015aee:	b085      	sub	sp, #20
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	2b01      	cmp	r3, #1
 8015afe:	d001      	beq.n	8015b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015b00:	2301      	movs	r3, #1
 8015b02:	e054      	b.n	8015bae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2202      	movs	r2, #2
 8015b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	68da      	ldr	r2, [r3, #12]
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	f042 0201 	orr.w	r2, r2, #1
 8015b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	4a26      	ldr	r2, [pc, #152]	; (8015bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8015b22:	4293      	cmp	r3, r2
 8015b24:	d022      	beq.n	8015b6c <HAL_TIM_Base_Start_IT+0x80>
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015b2e:	d01d      	beq.n	8015b6c <HAL_TIM_Base_Start_IT+0x80>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	4a22      	ldr	r2, [pc, #136]	; (8015bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8015b36:	4293      	cmp	r3, r2
 8015b38:	d018      	beq.n	8015b6c <HAL_TIM_Base_Start_IT+0x80>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	4a21      	ldr	r2, [pc, #132]	; (8015bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d013      	beq.n	8015b6c <HAL_TIM_Base_Start_IT+0x80>
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	4a1f      	ldr	r2, [pc, #124]	; (8015bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8015b4a:	4293      	cmp	r3, r2
 8015b4c:	d00e      	beq.n	8015b6c <HAL_TIM_Base_Start_IT+0x80>
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4a1e      	ldr	r2, [pc, #120]	; (8015bcc <HAL_TIM_Base_Start_IT+0xe0>)
 8015b54:	4293      	cmp	r3, r2
 8015b56:	d009      	beq.n	8015b6c <HAL_TIM_Base_Start_IT+0x80>
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	4a1c      	ldr	r2, [pc, #112]	; (8015bd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8015b5e:	4293      	cmp	r3, r2
 8015b60:	d004      	beq.n	8015b6c <HAL_TIM_Base_Start_IT+0x80>
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	4a1b      	ldr	r2, [pc, #108]	; (8015bd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d115      	bne.n	8015b98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	689a      	ldr	r2, [r3, #8]
 8015b72:	4b19      	ldr	r3, [pc, #100]	; (8015bd8 <HAL_TIM_Base_Start_IT+0xec>)
 8015b74:	4013      	ands	r3, r2
 8015b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	2b06      	cmp	r3, #6
 8015b7c:	d015      	beq.n	8015baa <HAL_TIM_Base_Start_IT+0xbe>
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b84:	d011      	beq.n	8015baa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	681a      	ldr	r2, [r3, #0]
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f042 0201 	orr.w	r2, r2, #1
 8015b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015b96:	e008      	b.n	8015baa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f042 0201 	orr.w	r2, r2, #1
 8015ba6:	601a      	str	r2, [r3, #0]
 8015ba8:	e000      	b.n	8015bac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015baa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015bac:	2300      	movs	r3, #0
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3714      	adds	r7, #20
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb8:	4770      	bx	lr
 8015bba:	bf00      	nop
 8015bbc:	40010000 	.word	0x40010000
 8015bc0:	40000400 	.word	0x40000400
 8015bc4:	40000800 	.word	0x40000800
 8015bc8:	40000c00 	.word	0x40000c00
 8015bcc:	40010400 	.word	0x40010400
 8015bd0:	40001800 	.word	0x40001800
 8015bd4:	40014000 	.word	0x40014000
 8015bd8:	00010007 	.word	0x00010007

08015bdc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b082      	sub	sp, #8
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d101      	bne.n	8015bee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8015bea:	2301      	movs	r3, #1
 8015bec:	e049      	b.n	8015c82 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d106      	bne.n	8015c08 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f000 f841 	bl	8015c8a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2202      	movs	r2, #2
 8015c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681a      	ldr	r2, [r3, #0]
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	3304      	adds	r3, #4
 8015c18:	4619      	mov	r1, r3
 8015c1a:	4610      	mov	r0, r2
 8015c1c:	f000 ffb8 	bl	8016b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2201      	movs	r2, #1
 8015c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2201      	movs	r2, #1
 8015c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2201      	movs	r2, #1
 8015c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2201      	movs	r2, #1
 8015c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2201      	movs	r2, #1
 8015c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	2201      	movs	r2, #1
 8015c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2201      	movs	r2, #1
 8015c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2201      	movs	r2, #1
 8015c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2201      	movs	r2, #1
 8015c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2201      	movs	r2, #1
 8015c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015c80:	2300      	movs	r3, #0
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}

08015c8a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8015c8a:	b480      	push	{r7}
 8015c8c:	b083      	sub	sp, #12
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8015c92:	bf00      	nop
 8015c94:	370c      	adds	r7, #12
 8015c96:	46bd      	mov	sp, r7
 8015c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9c:	4770      	bx	lr
	...

08015ca0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b084      	sub	sp, #16
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d109      	bne.n	8015cc4 <HAL_TIM_OC_Start+0x24>
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	2b01      	cmp	r3, #1
 8015cba:	bf14      	ite	ne
 8015cbc:	2301      	movne	r3, #1
 8015cbe:	2300      	moveq	r3, #0
 8015cc0:	b2db      	uxtb	r3, r3
 8015cc2:	e03c      	b.n	8015d3e <HAL_TIM_OC_Start+0x9e>
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	2b04      	cmp	r3, #4
 8015cc8:	d109      	bne.n	8015cde <HAL_TIM_OC_Start+0x3e>
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	2b01      	cmp	r3, #1
 8015cd4:	bf14      	ite	ne
 8015cd6:	2301      	movne	r3, #1
 8015cd8:	2300      	moveq	r3, #0
 8015cda:	b2db      	uxtb	r3, r3
 8015cdc:	e02f      	b.n	8015d3e <HAL_TIM_OC_Start+0x9e>
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	2b08      	cmp	r3, #8
 8015ce2:	d109      	bne.n	8015cf8 <HAL_TIM_OC_Start+0x58>
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	bf14      	ite	ne
 8015cf0:	2301      	movne	r3, #1
 8015cf2:	2300      	moveq	r3, #0
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	e022      	b.n	8015d3e <HAL_TIM_OC_Start+0x9e>
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	2b0c      	cmp	r3, #12
 8015cfc:	d109      	bne.n	8015d12 <HAL_TIM_OC_Start+0x72>
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015d04:	b2db      	uxtb	r3, r3
 8015d06:	2b01      	cmp	r3, #1
 8015d08:	bf14      	ite	ne
 8015d0a:	2301      	movne	r3, #1
 8015d0c:	2300      	moveq	r3, #0
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	e015      	b.n	8015d3e <HAL_TIM_OC_Start+0x9e>
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	2b10      	cmp	r3, #16
 8015d16:	d109      	bne.n	8015d2c <HAL_TIM_OC_Start+0x8c>
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	2b01      	cmp	r3, #1
 8015d22:	bf14      	ite	ne
 8015d24:	2301      	movne	r3, #1
 8015d26:	2300      	moveq	r3, #0
 8015d28:	b2db      	uxtb	r3, r3
 8015d2a:	e008      	b.n	8015d3e <HAL_TIM_OC_Start+0x9e>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	bf14      	ite	ne
 8015d38:	2301      	movne	r3, #1
 8015d3a:	2300      	moveq	r3, #0
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d001      	beq.n	8015d46 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8015d42:	2301      	movs	r3, #1
 8015d44:	e0a1      	b.n	8015e8a <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d104      	bne.n	8015d56 <HAL_TIM_OC_Start+0xb6>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2202      	movs	r2, #2
 8015d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015d54:	e023      	b.n	8015d9e <HAL_TIM_OC_Start+0xfe>
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	2b04      	cmp	r3, #4
 8015d5a:	d104      	bne.n	8015d66 <HAL_TIM_OC_Start+0xc6>
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2202      	movs	r2, #2
 8015d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015d64:	e01b      	b.n	8015d9e <HAL_TIM_OC_Start+0xfe>
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	2b08      	cmp	r3, #8
 8015d6a:	d104      	bne.n	8015d76 <HAL_TIM_OC_Start+0xd6>
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2202      	movs	r2, #2
 8015d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015d74:	e013      	b.n	8015d9e <HAL_TIM_OC_Start+0xfe>
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	2b0c      	cmp	r3, #12
 8015d7a:	d104      	bne.n	8015d86 <HAL_TIM_OC_Start+0xe6>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2202      	movs	r2, #2
 8015d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015d84:	e00b      	b.n	8015d9e <HAL_TIM_OC_Start+0xfe>
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	2b10      	cmp	r3, #16
 8015d8a:	d104      	bne.n	8015d96 <HAL_TIM_OC_Start+0xf6>
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	2202      	movs	r2, #2
 8015d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015d94:	e003      	b.n	8015d9e <HAL_TIM_OC_Start+0xfe>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2202      	movs	r2, #2
 8015d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	2201      	movs	r2, #1
 8015da4:	6839      	ldr	r1, [r7, #0]
 8015da6:	4618      	mov	r0, r3
 8015da8:	f001 fb00 	bl	80173ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	4a38      	ldr	r2, [pc, #224]	; (8015e94 <HAL_TIM_OC_Start+0x1f4>)
 8015db2:	4293      	cmp	r3, r2
 8015db4:	d013      	beq.n	8015dde <HAL_TIM_OC_Start+0x13e>
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	4a37      	ldr	r2, [pc, #220]	; (8015e98 <HAL_TIM_OC_Start+0x1f8>)
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	d00e      	beq.n	8015dde <HAL_TIM_OC_Start+0x13e>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4a35      	ldr	r2, [pc, #212]	; (8015e9c <HAL_TIM_OC_Start+0x1fc>)
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	d009      	beq.n	8015dde <HAL_TIM_OC_Start+0x13e>
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	4a34      	ldr	r2, [pc, #208]	; (8015ea0 <HAL_TIM_OC_Start+0x200>)
 8015dd0:	4293      	cmp	r3, r2
 8015dd2:	d004      	beq.n	8015dde <HAL_TIM_OC_Start+0x13e>
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	4a32      	ldr	r2, [pc, #200]	; (8015ea4 <HAL_TIM_OC_Start+0x204>)
 8015dda:	4293      	cmp	r3, r2
 8015ddc:	d101      	bne.n	8015de2 <HAL_TIM_OC_Start+0x142>
 8015dde:	2301      	movs	r3, #1
 8015de0:	e000      	b.n	8015de4 <HAL_TIM_OC_Start+0x144>
 8015de2:	2300      	movs	r3, #0
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d007      	beq.n	8015df8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015df6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	4a25      	ldr	r2, [pc, #148]	; (8015e94 <HAL_TIM_OC_Start+0x1f4>)
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d022      	beq.n	8015e48 <HAL_TIM_OC_Start+0x1a8>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015e0a:	d01d      	beq.n	8015e48 <HAL_TIM_OC_Start+0x1a8>
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	4a25      	ldr	r2, [pc, #148]	; (8015ea8 <HAL_TIM_OC_Start+0x208>)
 8015e12:	4293      	cmp	r3, r2
 8015e14:	d018      	beq.n	8015e48 <HAL_TIM_OC_Start+0x1a8>
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4a24      	ldr	r2, [pc, #144]	; (8015eac <HAL_TIM_OC_Start+0x20c>)
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d013      	beq.n	8015e48 <HAL_TIM_OC_Start+0x1a8>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	4a22      	ldr	r2, [pc, #136]	; (8015eb0 <HAL_TIM_OC_Start+0x210>)
 8015e26:	4293      	cmp	r3, r2
 8015e28:	d00e      	beq.n	8015e48 <HAL_TIM_OC_Start+0x1a8>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	4a1a      	ldr	r2, [pc, #104]	; (8015e98 <HAL_TIM_OC_Start+0x1f8>)
 8015e30:	4293      	cmp	r3, r2
 8015e32:	d009      	beq.n	8015e48 <HAL_TIM_OC_Start+0x1a8>
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	4a1e      	ldr	r2, [pc, #120]	; (8015eb4 <HAL_TIM_OC_Start+0x214>)
 8015e3a:	4293      	cmp	r3, r2
 8015e3c:	d004      	beq.n	8015e48 <HAL_TIM_OC_Start+0x1a8>
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	4a16      	ldr	r2, [pc, #88]	; (8015e9c <HAL_TIM_OC_Start+0x1fc>)
 8015e44:	4293      	cmp	r3, r2
 8015e46:	d115      	bne.n	8015e74 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	689a      	ldr	r2, [r3, #8]
 8015e4e:	4b1a      	ldr	r3, [pc, #104]	; (8015eb8 <HAL_TIM_OC_Start+0x218>)
 8015e50:	4013      	ands	r3, r2
 8015e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2b06      	cmp	r3, #6
 8015e58:	d015      	beq.n	8015e86 <HAL_TIM_OC_Start+0x1e6>
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e60:	d011      	beq.n	8015e86 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	681a      	ldr	r2, [r3, #0]
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	f042 0201 	orr.w	r2, r2, #1
 8015e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e72:	e008      	b.n	8015e86 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f042 0201 	orr.w	r2, r2, #1
 8015e82:	601a      	str	r2, [r3, #0]
 8015e84:	e000      	b.n	8015e88 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015e88:	2300      	movs	r3, #0
}
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	3710      	adds	r7, #16
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}
 8015e92:	bf00      	nop
 8015e94:	40010000 	.word	0x40010000
 8015e98:	40010400 	.word	0x40010400
 8015e9c:	40014000 	.word	0x40014000
 8015ea0:	40014400 	.word	0x40014400
 8015ea4:	40014800 	.word	0x40014800
 8015ea8:	40000400 	.word	0x40000400
 8015eac:	40000800 	.word	0x40000800
 8015eb0:	40000c00 	.word	0x40000c00
 8015eb4:	40001800 	.word	0x40001800
 8015eb8:	00010007 	.word	0x00010007

08015ebc <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f001 fa6c 	bl	80173ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4a3e      	ldr	r2, [pc, #248]	; (8015fd4 <HAL_TIM_OC_Stop+0x118>)
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d013      	beq.n	8015f06 <HAL_TIM_OC_Stop+0x4a>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4a3d      	ldr	r2, [pc, #244]	; (8015fd8 <HAL_TIM_OC_Stop+0x11c>)
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d00e      	beq.n	8015f06 <HAL_TIM_OC_Stop+0x4a>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	4a3b      	ldr	r2, [pc, #236]	; (8015fdc <HAL_TIM_OC_Stop+0x120>)
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	d009      	beq.n	8015f06 <HAL_TIM_OC_Stop+0x4a>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a3a      	ldr	r2, [pc, #232]	; (8015fe0 <HAL_TIM_OC_Stop+0x124>)
 8015ef8:	4293      	cmp	r3, r2
 8015efa:	d004      	beq.n	8015f06 <HAL_TIM_OC_Stop+0x4a>
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	4a38      	ldr	r2, [pc, #224]	; (8015fe4 <HAL_TIM_OC_Stop+0x128>)
 8015f02:	4293      	cmp	r3, r2
 8015f04:	d101      	bne.n	8015f0a <HAL_TIM_OC_Stop+0x4e>
 8015f06:	2301      	movs	r3, #1
 8015f08:	e000      	b.n	8015f0c <HAL_TIM_OC_Stop+0x50>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d017      	beq.n	8015f40 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	6a1a      	ldr	r2, [r3, #32]
 8015f16:	f241 1311 	movw	r3, #4369	; 0x1111
 8015f1a:	4013      	ands	r3, r2
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d10f      	bne.n	8015f40 <HAL_TIM_OC_Stop+0x84>
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	6a1a      	ldr	r2, [r3, #32]
 8015f26:	f240 4344 	movw	r3, #1092	; 0x444
 8015f2a:	4013      	ands	r3, r2
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d107      	bne.n	8015f40 <HAL_TIM_OC_Stop+0x84>
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015f3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	6a1a      	ldr	r2, [r3, #32]
 8015f46:	f241 1311 	movw	r3, #4369	; 0x1111
 8015f4a:	4013      	ands	r3, r2
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d10f      	bne.n	8015f70 <HAL_TIM_OC_Stop+0xb4>
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	6a1a      	ldr	r2, [r3, #32]
 8015f56:	f240 4344 	movw	r3, #1092	; 0x444
 8015f5a:	4013      	ands	r3, r2
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d107      	bne.n	8015f70 <HAL_TIM_OC_Stop+0xb4>
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f022 0201 	bic.w	r2, r2, #1
 8015f6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d104      	bne.n	8015f80 <HAL_TIM_OC_Stop+0xc4>
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	2201      	movs	r2, #1
 8015f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015f7e:	e023      	b.n	8015fc8 <HAL_TIM_OC_Stop+0x10c>
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	2b04      	cmp	r3, #4
 8015f84:	d104      	bne.n	8015f90 <HAL_TIM_OC_Stop+0xd4>
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2201      	movs	r2, #1
 8015f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015f8e:	e01b      	b.n	8015fc8 <HAL_TIM_OC_Stop+0x10c>
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	2b08      	cmp	r3, #8
 8015f94:	d104      	bne.n	8015fa0 <HAL_TIM_OC_Stop+0xe4>
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	2201      	movs	r2, #1
 8015f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015f9e:	e013      	b.n	8015fc8 <HAL_TIM_OC_Stop+0x10c>
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	2b0c      	cmp	r3, #12
 8015fa4:	d104      	bne.n	8015fb0 <HAL_TIM_OC_Stop+0xf4>
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2201      	movs	r2, #1
 8015faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015fae:	e00b      	b.n	8015fc8 <HAL_TIM_OC_Stop+0x10c>
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	2b10      	cmp	r3, #16
 8015fb4:	d104      	bne.n	8015fc0 <HAL_TIM_OC_Stop+0x104>
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	2201      	movs	r2, #1
 8015fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015fbe:	e003      	b.n	8015fc8 <HAL_TIM_OC_Stop+0x10c>
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8015fc8:	2300      	movs	r3, #0
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	3708      	adds	r7, #8
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}
 8015fd2:	bf00      	nop
 8015fd4:	40010000 	.word	0x40010000
 8015fd8:	40010400 	.word	0x40010400
 8015fdc:	40014000 	.word	0x40014000
 8015fe0:	40014400 	.word	0x40014400
 8015fe4:	40014800 	.word	0x40014800

08015fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d101      	bne.n	8015ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015ff6:	2301      	movs	r3, #1
 8015ff8:	e049      	b.n	801608e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016000:	b2db      	uxtb	r3, r3
 8016002:	2b00      	cmp	r3, #0
 8016004:	d106      	bne.n	8016014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2200      	movs	r2, #0
 801600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f000 f841 	bl	8016096 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2202      	movs	r2, #2
 8016018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	681a      	ldr	r2, [r3, #0]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	3304      	adds	r3, #4
 8016024:	4619      	mov	r1, r3
 8016026:	4610      	mov	r0, r2
 8016028:	f000 fdb2 	bl	8016b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2201      	movs	r2, #1
 8016030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2201      	movs	r2, #1
 8016038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2201      	movs	r2, #1
 8016040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2201      	movs	r2, #1
 8016048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2201      	movs	r2, #1
 8016050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2201      	movs	r2, #1
 8016058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2201      	movs	r2, #1
 8016060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2201      	movs	r2, #1
 8016068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2201      	movs	r2, #1
 8016070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2201      	movs	r2, #1
 8016078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2201      	movs	r2, #1
 8016080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2201      	movs	r2, #1
 8016088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801608c:	2300      	movs	r3, #0
}
 801608e:	4618      	mov	r0, r3
 8016090:	3708      	adds	r7, #8
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}

08016096 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8016096:	b480      	push	{r7}
 8016098:	b083      	sub	sp, #12
 801609a:	af00      	add	r7, sp, #0
 801609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801609e:	bf00      	nop
 80160a0:	370c      	adds	r7, #12
 80160a2:	46bd      	mov	sp, r7
 80160a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a8:	4770      	bx	lr
	...

080160ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b084      	sub	sp, #16
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
 80160b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d109      	bne.n	80160d0 <HAL_TIM_PWM_Start+0x24>
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80160c2:	b2db      	uxtb	r3, r3
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	bf14      	ite	ne
 80160c8:	2301      	movne	r3, #1
 80160ca:	2300      	moveq	r3, #0
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	e03c      	b.n	801614a <HAL_TIM_PWM_Start+0x9e>
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	2b04      	cmp	r3, #4
 80160d4:	d109      	bne.n	80160ea <HAL_TIM_PWM_Start+0x3e>
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80160dc:	b2db      	uxtb	r3, r3
 80160de:	2b01      	cmp	r3, #1
 80160e0:	bf14      	ite	ne
 80160e2:	2301      	movne	r3, #1
 80160e4:	2300      	moveq	r3, #0
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	e02f      	b.n	801614a <HAL_TIM_PWM_Start+0x9e>
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	2b08      	cmp	r3, #8
 80160ee:	d109      	bne.n	8016104 <HAL_TIM_PWM_Start+0x58>
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80160f6:	b2db      	uxtb	r3, r3
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	bf14      	ite	ne
 80160fc:	2301      	movne	r3, #1
 80160fe:	2300      	moveq	r3, #0
 8016100:	b2db      	uxtb	r3, r3
 8016102:	e022      	b.n	801614a <HAL_TIM_PWM_Start+0x9e>
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	2b0c      	cmp	r3, #12
 8016108:	d109      	bne.n	801611e <HAL_TIM_PWM_Start+0x72>
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016110:	b2db      	uxtb	r3, r3
 8016112:	2b01      	cmp	r3, #1
 8016114:	bf14      	ite	ne
 8016116:	2301      	movne	r3, #1
 8016118:	2300      	moveq	r3, #0
 801611a:	b2db      	uxtb	r3, r3
 801611c:	e015      	b.n	801614a <HAL_TIM_PWM_Start+0x9e>
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	2b10      	cmp	r3, #16
 8016122:	d109      	bne.n	8016138 <HAL_TIM_PWM_Start+0x8c>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801612a:	b2db      	uxtb	r3, r3
 801612c:	2b01      	cmp	r3, #1
 801612e:	bf14      	ite	ne
 8016130:	2301      	movne	r3, #1
 8016132:	2300      	moveq	r3, #0
 8016134:	b2db      	uxtb	r3, r3
 8016136:	e008      	b.n	801614a <HAL_TIM_PWM_Start+0x9e>
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801613e:	b2db      	uxtb	r3, r3
 8016140:	2b01      	cmp	r3, #1
 8016142:	bf14      	ite	ne
 8016144:	2301      	movne	r3, #1
 8016146:	2300      	moveq	r3, #0
 8016148:	b2db      	uxtb	r3, r3
 801614a:	2b00      	cmp	r3, #0
 801614c:	d001      	beq.n	8016152 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801614e:	2301      	movs	r3, #1
 8016150:	e0a1      	b.n	8016296 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d104      	bne.n	8016162 <HAL_TIM_PWM_Start+0xb6>
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	2202      	movs	r2, #2
 801615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016160:	e023      	b.n	80161aa <HAL_TIM_PWM_Start+0xfe>
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	2b04      	cmp	r3, #4
 8016166:	d104      	bne.n	8016172 <HAL_TIM_PWM_Start+0xc6>
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2202      	movs	r2, #2
 801616c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016170:	e01b      	b.n	80161aa <HAL_TIM_PWM_Start+0xfe>
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	2b08      	cmp	r3, #8
 8016176:	d104      	bne.n	8016182 <HAL_TIM_PWM_Start+0xd6>
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2202      	movs	r2, #2
 801617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016180:	e013      	b.n	80161aa <HAL_TIM_PWM_Start+0xfe>
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	2b0c      	cmp	r3, #12
 8016186:	d104      	bne.n	8016192 <HAL_TIM_PWM_Start+0xe6>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2202      	movs	r2, #2
 801618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016190:	e00b      	b.n	80161aa <HAL_TIM_PWM_Start+0xfe>
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	2b10      	cmp	r3, #16
 8016196:	d104      	bne.n	80161a2 <HAL_TIM_PWM_Start+0xf6>
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2202      	movs	r2, #2
 801619c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80161a0:	e003      	b.n	80161aa <HAL_TIM_PWM_Start+0xfe>
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2202      	movs	r2, #2
 80161a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	2201      	movs	r2, #1
 80161b0:	6839      	ldr	r1, [r7, #0]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f001 f8fa 	bl	80173ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	4a38      	ldr	r2, [pc, #224]	; (80162a0 <HAL_TIM_PWM_Start+0x1f4>)
 80161be:	4293      	cmp	r3, r2
 80161c0:	d013      	beq.n	80161ea <HAL_TIM_PWM_Start+0x13e>
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	4a37      	ldr	r2, [pc, #220]	; (80162a4 <HAL_TIM_PWM_Start+0x1f8>)
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d00e      	beq.n	80161ea <HAL_TIM_PWM_Start+0x13e>
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	4a35      	ldr	r2, [pc, #212]	; (80162a8 <HAL_TIM_PWM_Start+0x1fc>)
 80161d2:	4293      	cmp	r3, r2
 80161d4:	d009      	beq.n	80161ea <HAL_TIM_PWM_Start+0x13e>
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	4a34      	ldr	r2, [pc, #208]	; (80162ac <HAL_TIM_PWM_Start+0x200>)
 80161dc:	4293      	cmp	r3, r2
 80161de:	d004      	beq.n	80161ea <HAL_TIM_PWM_Start+0x13e>
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	4a32      	ldr	r2, [pc, #200]	; (80162b0 <HAL_TIM_PWM_Start+0x204>)
 80161e6:	4293      	cmp	r3, r2
 80161e8:	d101      	bne.n	80161ee <HAL_TIM_PWM_Start+0x142>
 80161ea:	2301      	movs	r3, #1
 80161ec:	e000      	b.n	80161f0 <HAL_TIM_PWM_Start+0x144>
 80161ee:	2300      	movs	r3, #0
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d007      	beq.n	8016204 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016202:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4a25      	ldr	r2, [pc, #148]	; (80162a0 <HAL_TIM_PWM_Start+0x1f4>)
 801620a:	4293      	cmp	r3, r2
 801620c:	d022      	beq.n	8016254 <HAL_TIM_PWM_Start+0x1a8>
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016216:	d01d      	beq.n	8016254 <HAL_TIM_PWM_Start+0x1a8>
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	4a25      	ldr	r2, [pc, #148]	; (80162b4 <HAL_TIM_PWM_Start+0x208>)
 801621e:	4293      	cmp	r3, r2
 8016220:	d018      	beq.n	8016254 <HAL_TIM_PWM_Start+0x1a8>
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	4a24      	ldr	r2, [pc, #144]	; (80162b8 <HAL_TIM_PWM_Start+0x20c>)
 8016228:	4293      	cmp	r3, r2
 801622a:	d013      	beq.n	8016254 <HAL_TIM_PWM_Start+0x1a8>
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	4a22      	ldr	r2, [pc, #136]	; (80162bc <HAL_TIM_PWM_Start+0x210>)
 8016232:	4293      	cmp	r3, r2
 8016234:	d00e      	beq.n	8016254 <HAL_TIM_PWM_Start+0x1a8>
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4a1a      	ldr	r2, [pc, #104]	; (80162a4 <HAL_TIM_PWM_Start+0x1f8>)
 801623c:	4293      	cmp	r3, r2
 801623e:	d009      	beq.n	8016254 <HAL_TIM_PWM_Start+0x1a8>
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	4a1e      	ldr	r2, [pc, #120]	; (80162c0 <HAL_TIM_PWM_Start+0x214>)
 8016246:	4293      	cmp	r3, r2
 8016248:	d004      	beq.n	8016254 <HAL_TIM_PWM_Start+0x1a8>
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	4a16      	ldr	r2, [pc, #88]	; (80162a8 <HAL_TIM_PWM_Start+0x1fc>)
 8016250:	4293      	cmp	r3, r2
 8016252:	d115      	bne.n	8016280 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	689a      	ldr	r2, [r3, #8]
 801625a:	4b1a      	ldr	r3, [pc, #104]	; (80162c4 <HAL_TIM_PWM_Start+0x218>)
 801625c:	4013      	ands	r3, r2
 801625e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	2b06      	cmp	r3, #6
 8016264:	d015      	beq.n	8016292 <HAL_TIM_PWM_Start+0x1e6>
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801626c:	d011      	beq.n	8016292 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	681a      	ldr	r2, [r3, #0]
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	f042 0201 	orr.w	r2, r2, #1
 801627c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801627e:	e008      	b.n	8016292 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	f042 0201 	orr.w	r2, r2, #1
 801628e:	601a      	str	r2, [r3, #0]
 8016290:	e000      	b.n	8016294 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016294:	2300      	movs	r3, #0
}
 8016296:	4618      	mov	r0, r3
 8016298:	3710      	adds	r7, #16
 801629a:	46bd      	mov	sp, r7
 801629c:	bd80      	pop	{r7, pc}
 801629e:	bf00      	nop
 80162a0:	40010000 	.word	0x40010000
 80162a4:	40010400 	.word	0x40010400
 80162a8:	40014000 	.word	0x40014000
 80162ac:	40014400 	.word	0x40014400
 80162b0:	40014800 	.word	0x40014800
 80162b4:	40000400 	.word	0x40000400
 80162b8:	40000800 	.word	0x40000800
 80162bc:	40000c00 	.word	0x40000c00
 80162c0:	40001800 	.word	0x40001800
 80162c4:	00010007 	.word	0x00010007

080162c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	2200      	movs	r2, #0
 80162d8:	6839      	ldr	r1, [r7, #0]
 80162da:	4618      	mov	r0, r3
 80162dc:	f001 f866 	bl	80173ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	4a3e      	ldr	r2, [pc, #248]	; (80163e0 <HAL_TIM_PWM_Stop+0x118>)
 80162e6:	4293      	cmp	r3, r2
 80162e8:	d013      	beq.n	8016312 <HAL_TIM_PWM_Stop+0x4a>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	4a3d      	ldr	r2, [pc, #244]	; (80163e4 <HAL_TIM_PWM_Stop+0x11c>)
 80162f0:	4293      	cmp	r3, r2
 80162f2:	d00e      	beq.n	8016312 <HAL_TIM_PWM_Stop+0x4a>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	4a3b      	ldr	r2, [pc, #236]	; (80163e8 <HAL_TIM_PWM_Stop+0x120>)
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d009      	beq.n	8016312 <HAL_TIM_PWM_Stop+0x4a>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	4a3a      	ldr	r2, [pc, #232]	; (80163ec <HAL_TIM_PWM_Stop+0x124>)
 8016304:	4293      	cmp	r3, r2
 8016306:	d004      	beq.n	8016312 <HAL_TIM_PWM_Stop+0x4a>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	4a38      	ldr	r2, [pc, #224]	; (80163f0 <HAL_TIM_PWM_Stop+0x128>)
 801630e:	4293      	cmp	r3, r2
 8016310:	d101      	bne.n	8016316 <HAL_TIM_PWM_Stop+0x4e>
 8016312:	2301      	movs	r3, #1
 8016314:	e000      	b.n	8016318 <HAL_TIM_PWM_Stop+0x50>
 8016316:	2300      	movs	r3, #0
 8016318:	2b00      	cmp	r3, #0
 801631a:	d017      	beq.n	801634c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	6a1a      	ldr	r2, [r3, #32]
 8016322:	f241 1311 	movw	r3, #4369	; 0x1111
 8016326:	4013      	ands	r3, r2
 8016328:	2b00      	cmp	r3, #0
 801632a:	d10f      	bne.n	801634c <HAL_TIM_PWM_Stop+0x84>
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	6a1a      	ldr	r2, [r3, #32]
 8016332:	f240 4344 	movw	r3, #1092	; 0x444
 8016336:	4013      	ands	r3, r2
 8016338:	2b00      	cmp	r3, #0
 801633a:	d107      	bne.n	801634c <HAL_TIM_PWM_Stop+0x84>
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801634a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	6a1a      	ldr	r2, [r3, #32]
 8016352:	f241 1311 	movw	r3, #4369	; 0x1111
 8016356:	4013      	ands	r3, r2
 8016358:	2b00      	cmp	r3, #0
 801635a:	d10f      	bne.n	801637c <HAL_TIM_PWM_Stop+0xb4>
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	6a1a      	ldr	r2, [r3, #32]
 8016362:	f240 4344 	movw	r3, #1092	; 0x444
 8016366:	4013      	ands	r3, r2
 8016368:	2b00      	cmp	r3, #0
 801636a:	d107      	bne.n	801637c <HAL_TIM_PWM_Stop+0xb4>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	f022 0201 	bic.w	r2, r2, #1
 801637a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d104      	bne.n	801638c <HAL_TIM_PWM_Stop+0xc4>
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2201      	movs	r2, #1
 8016386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801638a:	e023      	b.n	80163d4 <HAL_TIM_PWM_Stop+0x10c>
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	2b04      	cmp	r3, #4
 8016390:	d104      	bne.n	801639c <HAL_TIM_PWM_Stop+0xd4>
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2201      	movs	r2, #1
 8016396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801639a:	e01b      	b.n	80163d4 <HAL_TIM_PWM_Stop+0x10c>
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	2b08      	cmp	r3, #8
 80163a0:	d104      	bne.n	80163ac <HAL_TIM_PWM_Stop+0xe4>
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2201      	movs	r2, #1
 80163a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80163aa:	e013      	b.n	80163d4 <HAL_TIM_PWM_Stop+0x10c>
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	2b0c      	cmp	r3, #12
 80163b0:	d104      	bne.n	80163bc <HAL_TIM_PWM_Stop+0xf4>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2201      	movs	r2, #1
 80163b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80163ba:	e00b      	b.n	80163d4 <HAL_TIM_PWM_Stop+0x10c>
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	2b10      	cmp	r3, #16
 80163c0:	d104      	bne.n	80163cc <HAL_TIM_PWM_Stop+0x104>
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80163ca:	e003      	b.n	80163d4 <HAL_TIM_PWM_Stop+0x10c>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2201      	movs	r2, #1
 80163d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80163d4:	2300      	movs	r3, #0
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3708      	adds	r7, #8
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	40010000 	.word	0x40010000
 80163e4:	40010400 	.word	0x40010400
 80163e8:	40014000 	.word	0x40014000
 80163ec:	40014400 	.word	0x40014400
 80163f0:	40014800 	.word	0x40014800

080163f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	691b      	ldr	r3, [r3, #16]
 8016402:	f003 0302 	and.w	r3, r3, #2
 8016406:	2b02      	cmp	r3, #2
 8016408:	d122      	bne.n	8016450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	68db      	ldr	r3, [r3, #12]
 8016410:	f003 0302 	and.w	r3, r3, #2
 8016414:	2b02      	cmp	r3, #2
 8016416:	d11b      	bne.n	8016450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	f06f 0202 	mvn.w	r2, #2
 8016420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2201      	movs	r2, #1
 8016426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	699b      	ldr	r3, [r3, #24]
 801642e:	f003 0303 	and.w	r3, r3, #3
 8016432:	2b00      	cmp	r3, #0
 8016434:	d003      	beq.n	801643e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f000 fb8c 	bl	8016b54 <HAL_TIM_IC_CaptureCallback>
 801643c:	e005      	b.n	801644a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f000 fb7e 	bl	8016b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016444:	6878      	ldr	r0, [r7, #4]
 8016446:	f000 fb8f 	bl	8016b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	2200      	movs	r2, #0
 801644e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	691b      	ldr	r3, [r3, #16]
 8016456:	f003 0304 	and.w	r3, r3, #4
 801645a:	2b04      	cmp	r3, #4
 801645c:	d122      	bne.n	80164a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	f003 0304 	and.w	r3, r3, #4
 8016468:	2b04      	cmp	r3, #4
 801646a:	d11b      	bne.n	80164a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	f06f 0204 	mvn.w	r2, #4
 8016474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2202      	movs	r2, #2
 801647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	699b      	ldr	r3, [r3, #24]
 8016482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016486:	2b00      	cmp	r3, #0
 8016488:	d003      	beq.n	8016492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	f000 fb62 	bl	8016b54 <HAL_TIM_IC_CaptureCallback>
 8016490:	e005      	b.n	801649e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f000 fb54 	bl	8016b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	f000 fb65 	bl	8016b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2200      	movs	r2, #0
 80164a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	691b      	ldr	r3, [r3, #16]
 80164aa:	f003 0308 	and.w	r3, r3, #8
 80164ae:	2b08      	cmp	r3, #8
 80164b0:	d122      	bne.n	80164f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	68db      	ldr	r3, [r3, #12]
 80164b8:	f003 0308 	and.w	r3, r3, #8
 80164bc:	2b08      	cmp	r3, #8
 80164be:	d11b      	bne.n	80164f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	f06f 0208 	mvn.w	r2, #8
 80164c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2204      	movs	r2, #4
 80164ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	69db      	ldr	r3, [r3, #28]
 80164d6:	f003 0303 	and.w	r3, r3, #3
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d003      	beq.n	80164e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f000 fb38 	bl	8016b54 <HAL_TIM_IC_CaptureCallback>
 80164e4:	e005      	b.n	80164f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f000 fb2a 	bl	8016b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f000 fb3b 	bl	8016b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2200      	movs	r2, #0
 80164f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	691b      	ldr	r3, [r3, #16]
 80164fe:	f003 0310 	and.w	r3, r3, #16
 8016502:	2b10      	cmp	r3, #16
 8016504:	d122      	bne.n	801654c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	f003 0310 	and.w	r3, r3, #16
 8016510:	2b10      	cmp	r3, #16
 8016512:	d11b      	bne.n	801654c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	f06f 0210 	mvn.w	r2, #16
 801651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2208      	movs	r2, #8
 8016522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	69db      	ldr	r3, [r3, #28]
 801652a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801652e:	2b00      	cmp	r3, #0
 8016530:	d003      	beq.n	801653a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	f000 fb0e 	bl	8016b54 <HAL_TIM_IC_CaptureCallback>
 8016538:	e005      	b.n	8016546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f000 fb00 	bl	8016b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f000 fb11 	bl	8016b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2200      	movs	r2, #0
 801654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	691b      	ldr	r3, [r3, #16]
 8016552:	f003 0301 	and.w	r3, r3, #1
 8016556:	2b01      	cmp	r3, #1
 8016558:	d10e      	bne.n	8016578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	f003 0301 	and.w	r3, r3, #1
 8016564:	2b01      	cmp	r3, #1
 8016566:	d107      	bne.n	8016578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	f06f 0201 	mvn.w	r2, #1
 8016570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7f1 f964 	bl	8007840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	691b      	ldr	r3, [r3, #16]
 801657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016582:	2b80      	cmp	r3, #128	; 0x80
 8016584:	d10e      	bne.n	80165a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	68db      	ldr	r3, [r3, #12]
 801658c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016590:	2b80      	cmp	r3, #128	; 0x80
 8016592:	d107      	bne.n	80165a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f001 f840 	bl	8017624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	691b      	ldr	r3, [r3, #16]
 80165aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80165ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165b2:	d10e      	bne.n	80165d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	68db      	ldr	r3, [r3, #12]
 80165ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165be:	2b80      	cmp	r3, #128	; 0x80
 80165c0:	d107      	bne.n	80165d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80165ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80165cc:	6878      	ldr	r0, [r7, #4]
 80165ce:	f001 f833 	bl	8017638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	691b      	ldr	r3, [r3, #16]
 80165d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165dc:	2b40      	cmp	r3, #64	; 0x40
 80165de:	d10e      	bne.n	80165fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	68db      	ldr	r3, [r3, #12]
 80165e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165ea:	2b40      	cmp	r3, #64	; 0x40
 80165ec:	d107      	bne.n	80165fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80165f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f000 fabf 	bl	8016b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	691b      	ldr	r3, [r3, #16]
 8016604:	f003 0320 	and.w	r3, r3, #32
 8016608:	2b20      	cmp	r3, #32
 801660a:	d10e      	bne.n	801662a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	68db      	ldr	r3, [r3, #12]
 8016612:	f003 0320 	and.w	r3, r3, #32
 8016616:	2b20      	cmp	r3, #32
 8016618:	d107      	bne.n	801662a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	f06f 0220 	mvn.w	r2, #32
 8016622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016624:	6878      	ldr	r0, [r7, #4]
 8016626:	f000 fff3 	bl	8017610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801662a:	bf00      	nop
 801662c:	3708      	adds	r7, #8
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
	...

08016634 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b086      	sub	sp, #24
 8016638:	af00      	add	r7, sp, #0
 801663a:	60f8      	str	r0, [r7, #12]
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016640:	2300      	movs	r3, #0
 8016642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801664a:	2b01      	cmp	r3, #1
 801664c:	d101      	bne.n	8016652 <HAL_TIM_OC_ConfigChannel+0x1e>
 801664e:	2302      	movs	r3, #2
 8016650:	e066      	b.n	8016720 <HAL_TIM_OC_ConfigChannel+0xec>
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	2201      	movs	r2, #1
 8016656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2b14      	cmp	r3, #20
 801665e:	d857      	bhi.n	8016710 <HAL_TIM_OC_ConfigChannel+0xdc>
 8016660:	a201      	add	r2, pc, #4	; (adr r2, 8016668 <HAL_TIM_OC_ConfigChannel+0x34>)
 8016662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016666:	bf00      	nop
 8016668:	080166bd 	.word	0x080166bd
 801666c:	08016711 	.word	0x08016711
 8016670:	08016711 	.word	0x08016711
 8016674:	08016711 	.word	0x08016711
 8016678:	080166cb 	.word	0x080166cb
 801667c:	08016711 	.word	0x08016711
 8016680:	08016711 	.word	0x08016711
 8016684:	08016711 	.word	0x08016711
 8016688:	080166d9 	.word	0x080166d9
 801668c:	08016711 	.word	0x08016711
 8016690:	08016711 	.word	0x08016711
 8016694:	08016711 	.word	0x08016711
 8016698:	080166e7 	.word	0x080166e7
 801669c:	08016711 	.word	0x08016711
 80166a0:	08016711 	.word	0x08016711
 80166a4:	08016711 	.word	0x08016711
 80166a8:	080166f5 	.word	0x080166f5
 80166ac:	08016711 	.word	0x08016711
 80166b0:	08016711 	.word	0x08016711
 80166b4:	08016711 	.word	0x08016711
 80166b8:	08016703 	.word	0x08016703
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	68b9      	ldr	r1, [r7, #8]
 80166c2:	4618      	mov	r0, r3
 80166c4:	f000 fafe 	bl	8016cc4 <TIM_OC1_SetConfig>
      break;
 80166c8:	e025      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	68b9      	ldr	r1, [r7, #8]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f000 fb87 	bl	8016de4 <TIM_OC2_SetConfig>
      break;
 80166d6:	e01e      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	68b9      	ldr	r1, [r7, #8]
 80166de:	4618      	mov	r0, r3
 80166e0:	f000 fc0a 	bl	8016ef8 <TIM_OC3_SetConfig>
      break;
 80166e4:	e017      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	68b9      	ldr	r1, [r7, #8]
 80166ec:	4618      	mov	r0, r3
 80166ee:	f000 fc8b 	bl	8017008 <TIM_OC4_SetConfig>
      break;
 80166f2:	e010      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	68b9      	ldr	r1, [r7, #8]
 80166fa:	4618      	mov	r0, r3
 80166fc:	f000 fcee 	bl	80170dc <TIM_OC5_SetConfig>
      break;
 8016700:	e009      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	68b9      	ldr	r1, [r7, #8]
 8016708:	4618      	mov	r0, r3
 801670a:	f000 fd4b 	bl	80171a4 <TIM_OC6_SetConfig>
      break;
 801670e:	e002      	b.n	8016716 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8016710:	2301      	movs	r3, #1
 8016712:	75fb      	strb	r3, [r7, #23]
      break;
 8016714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2200      	movs	r2, #0
 801671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801671e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016720:	4618      	mov	r0, r3
 8016722:	3718      	adds	r7, #24
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b086      	sub	sp, #24
 801672c:	af00      	add	r7, sp, #0
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	60b9      	str	r1, [r7, #8]
 8016732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016734:	2300      	movs	r3, #0
 8016736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801673e:	2b01      	cmp	r3, #1
 8016740:	d101      	bne.n	8016746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016742:	2302      	movs	r3, #2
 8016744:	e0ff      	b.n	8016946 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	2201      	movs	r2, #1
 801674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2b14      	cmp	r3, #20
 8016752:	f200 80f0 	bhi.w	8016936 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016756:	a201      	add	r2, pc, #4	; (adr r2, 801675c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801675c:	080167b1 	.word	0x080167b1
 8016760:	08016937 	.word	0x08016937
 8016764:	08016937 	.word	0x08016937
 8016768:	08016937 	.word	0x08016937
 801676c:	080167f1 	.word	0x080167f1
 8016770:	08016937 	.word	0x08016937
 8016774:	08016937 	.word	0x08016937
 8016778:	08016937 	.word	0x08016937
 801677c:	08016833 	.word	0x08016833
 8016780:	08016937 	.word	0x08016937
 8016784:	08016937 	.word	0x08016937
 8016788:	08016937 	.word	0x08016937
 801678c:	08016873 	.word	0x08016873
 8016790:	08016937 	.word	0x08016937
 8016794:	08016937 	.word	0x08016937
 8016798:	08016937 	.word	0x08016937
 801679c:	080168b5 	.word	0x080168b5
 80167a0:	08016937 	.word	0x08016937
 80167a4:	08016937 	.word	0x08016937
 80167a8:	08016937 	.word	0x08016937
 80167ac:	080168f5 	.word	0x080168f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	68b9      	ldr	r1, [r7, #8]
 80167b6:	4618      	mov	r0, r3
 80167b8:	f000 fa84 	bl	8016cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	699a      	ldr	r2, [r3, #24]
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	f042 0208 	orr.w	r2, r2, #8
 80167ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	699a      	ldr	r2, [r3, #24]
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	f022 0204 	bic.w	r2, r2, #4
 80167da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	6999      	ldr	r1, [r3, #24]
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	691a      	ldr	r2, [r3, #16]
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	430a      	orrs	r2, r1
 80167ec:	619a      	str	r2, [r3, #24]
      break;
 80167ee:	e0a5      	b.n	801693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	68b9      	ldr	r1, [r7, #8]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f000 faf4 	bl	8016de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	699a      	ldr	r2, [r3, #24]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801680a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	699a      	ldr	r2, [r3, #24]
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801681a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	6999      	ldr	r1, [r3, #24]
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	691b      	ldr	r3, [r3, #16]
 8016826:	021a      	lsls	r2, r3, #8
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	430a      	orrs	r2, r1
 801682e:	619a      	str	r2, [r3, #24]
      break;
 8016830:	e084      	b.n	801693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	68b9      	ldr	r1, [r7, #8]
 8016838:	4618      	mov	r0, r3
 801683a:	f000 fb5d 	bl	8016ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	69da      	ldr	r2, [r3, #28]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	f042 0208 	orr.w	r2, r2, #8
 801684c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	69da      	ldr	r2, [r3, #28]
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	f022 0204 	bic.w	r2, r2, #4
 801685c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	69d9      	ldr	r1, [r3, #28]
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	691a      	ldr	r2, [r3, #16]
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	430a      	orrs	r2, r1
 801686e:	61da      	str	r2, [r3, #28]
      break;
 8016870:	e064      	b.n	801693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	68b9      	ldr	r1, [r7, #8]
 8016878:	4618      	mov	r0, r3
 801687a:	f000 fbc5 	bl	8017008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	69da      	ldr	r2, [r3, #28]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801688c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	69da      	ldr	r2, [r3, #28]
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801689c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	69d9      	ldr	r1, [r3, #28]
 80168a4:	68bb      	ldr	r3, [r7, #8]
 80168a6:	691b      	ldr	r3, [r3, #16]
 80168a8:	021a      	lsls	r2, r3, #8
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	430a      	orrs	r2, r1
 80168b0:	61da      	str	r2, [r3, #28]
      break;
 80168b2:	e043      	b.n	801693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	68b9      	ldr	r1, [r7, #8]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f000 fc0e 	bl	80170dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	f042 0208 	orr.w	r2, r2, #8
 80168ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	f022 0204 	bic.w	r2, r2, #4
 80168de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	691a      	ldr	r2, [r3, #16]
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	430a      	orrs	r2, r1
 80168f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80168f2:	e023      	b.n	801693c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	68b9      	ldr	r1, [r7, #8]
 80168fa:	4618      	mov	r0, r3
 80168fc:	f000 fc52 	bl	80171a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801690e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801691e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	691b      	ldr	r3, [r3, #16]
 801692a:	021a      	lsls	r2, r3, #8
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	430a      	orrs	r2, r1
 8016932:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8016934:	e002      	b.n	801693c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016936:	2301      	movs	r3, #1
 8016938:	75fb      	strb	r3, [r7, #23]
      break;
 801693a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2200      	movs	r2, #0
 8016940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8016944:	7dfb      	ldrb	r3, [r7, #23]
}
 8016946:	4618      	mov	r0, r3
 8016948:	3718      	adds	r7, #24
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop

08016950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b084      	sub	sp, #16
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801695a:	2300      	movs	r3, #0
 801695c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016964:	2b01      	cmp	r3, #1
 8016966:	d101      	bne.n	801696c <HAL_TIM_ConfigClockSource+0x1c>
 8016968:	2302      	movs	r3, #2
 801696a:	e0dc      	b.n	8016b26 <HAL_TIM_ConfigClockSource+0x1d6>
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2201      	movs	r2, #1
 8016970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2202      	movs	r2, #2
 8016978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	689b      	ldr	r3, [r3, #8]
 8016982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016984:	68ba      	ldr	r2, [r7, #8]
 8016986:	4b6a      	ldr	r3, [pc, #424]	; (8016b30 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016988:	4013      	ands	r3, r2
 801698a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	68ba      	ldr	r2, [r7, #8]
 801699a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801699c:	683b      	ldr	r3, [r7, #0]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	4a64      	ldr	r2, [pc, #400]	; (8016b34 <HAL_TIM_ConfigClockSource+0x1e4>)
 80169a2:	4293      	cmp	r3, r2
 80169a4:	f000 80a9 	beq.w	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 80169a8:	4a62      	ldr	r2, [pc, #392]	; (8016b34 <HAL_TIM_ConfigClockSource+0x1e4>)
 80169aa:	4293      	cmp	r3, r2
 80169ac:	f200 80ae 	bhi.w	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 80169b0:	4a61      	ldr	r2, [pc, #388]	; (8016b38 <HAL_TIM_ConfigClockSource+0x1e8>)
 80169b2:	4293      	cmp	r3, r2
 80169b4:	f000 80a1 	beq.w	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 80169b8:	4a5f      	ldr	r2, [pc, #380]	; (8016b38 <HAL_TIM_ConfigClockSource+0x1e8>)
 80169ba:	4293      	cmp	r3, r2
 80169bc:	f200 80a6 	bhi.w	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 80169c0:	4a5e      	ldr	r2, [pc, #376]	; (8016b3c <HAL_TIM_ConfigClockSource+0x1ec>)
 80169c2:	4293      	cmp	r3, r2
 80169c4:	f000 8099 	beq.w	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 80169c8:	4a5c      	ldr	r2, [pc, #368]	; (8016b3c <HAL_TIM_ConfigClockSource+0x1ec>)
 80169ca:	4293      	cmp	r3, r2
 80169cc:	f200 809e 	bhi.w	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 80169d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80169d4:	f000 8091 	beq.w	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 80169d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80169dc:	f200 8096 	bhi.w	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 80169e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80169e4:	f000 8089 	beq.w	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 80169e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80169ec:	f200 808e 	bhi.w	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 80169f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80169f4:	d03e      	beq.n	8016a74 <HAL_TIM_ConfigClockSource+0x124>
 80169f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80169fa:	f200 8087 	bhi.w	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 80169fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016a02:	f000 8086 	beq.w	8016b12 <HAL_TIM_ConfigClockSource+0x1c2>
 8016a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016a0a:	d87f      	bhi.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 8016a0c:	2b70      	cmp	r3, #112	; 0x70
 8016a0e:	d01a      	beq.n	8016a46 <HAL_TIM_ConfigClockSource+0xf6>
 8016a10:	2b70      	cmp	r3, #112	; 0x70
 8016a12:	d87b      	bhi.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 8016a14:	2b60      	cmp	r3, #96	; 0x60
 8016a16:	d050      	beq.n	8016aba <HAL_TIM_ConfigClockSource+0x16a>
 8016a18:	2b60      	cmp	r3, #96	; 0x60
 8016a1a:	d877      	bhi.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 8016a1c:	2b50      	cmp	r3, #80	; 0x50
 8016a1e:	d03c      	beq.n	8016a9a <HAL_TIM_ConfigClockSource+0x14a>
 8016a20:	2b50      	cmp	r3, #80	; 0x50
 8016a22:	d873      	bhi.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 8016a24:	2b40      	cmp	r3, #64	; 0x40
 8016a26:	d058      	beq.n	8016ada <HAL_TIM_ConfigClockSource+0x18a>
 8016a28:	2b40      	cmp	r3, #64	; 0x40
 8016a2a:	d86f      	bhi.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 8016a2c:	2b30      	cmp	r3, #48	; 0x30
 8016a2e:	d064      	beq.n	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 8016a30:	2b30      	cmp	r3, #48	; 0x30
 8016a32:	d86b      	bhi.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 8016a34:	2b20      	cmp	r3, #32
 8016a36:	d060      	beq.n	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 8016a38:	2b20      	cmp	r3, #32
 8016a3a:	d867      	bhi.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d05c      	beq.n	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 8016a40:	2b10      	cmp	r3, #16
 8016a42:	d05a      	beq.n	8016afa <HAL_TIM_ConfigClockSource+0x1aa>
 8016a44:	e062      	b.n	8016b0c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	6818      	ldr	r0, [r3, #0]
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	6899      	ldr	r1, [r3, #8]
 8016a4e:	683b      	ldr	r3, [r7, #0]
 8016a50:	685a      	ldr	r2, [r3, #4]
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	68db      	ldr	r3, [r3, #12]
 8016a56:	f000 fc89 	bl	801736c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	689b      	ldr	r3, [r3, #8]
 8016a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016a62:	68bb      	ldr	r3, [r7, #8]
 8016a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8016a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	68ba      	ldr	r2, [r7, #8]
 8016a70:	609a      	str	r2, [r3, #8]
      break;
 8016a72:	e04f      	b.n	8016b14 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	6818      	ldr	r0, [r3, #0]
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	6899      	ldr	r1, [r3, #8]
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	685a      	ldr	r2, [r3, #4]
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	68db      	ldr	r3, [r3, #12]
 8016a84:	f000 fc72 	bl	801736c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	689a      	ldr	r2, [r3, #8]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016a96:	609a      	str	r2, [r3, #8]
      break;
 8016a98:	e03c      	b.n	8016b14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	6818      	ldr	r0, [r3, #0]
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	6859      	ldr	r1, [r3, #4]
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	68db      	ldr	r3, [r3, #12]
 8016aa6:	461a      	mov	r2, r3
 8016aa8:	f000 fbe2 	bl	8017270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	2150      	movs	r1, #80	; 0x50
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f000 fc3c 	bl	8017330 <TIM_ITRx_SetConfig>
      break;
 8016ab8:	e02c      	b.n	8016b14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6818      	ldr	r0, [r3, #0]
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	6859      	ldr	r1, [r3, #4]
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	68db      	ldr	r3, [r3, #12]
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	f000 fc01 	bl	80172ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	2160      	movs	r1, #96	; 0x60
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f000 fc2c 	bl	8017330 <TIM_ITRx_SetConfig>
      break;
 8016ad8:	e01c      	b.n	8016b14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	6818      	ldr	r0, [r3, #0]
 8016ade:	683b      	ldr	r3, [r7, #0]
 8016ae0:	6859      	ldr	r1, [r3, #4]
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	68db      	ldr	r3, [r3, #12]
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	f000 fbc2 	bl	8017270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	2140      	movs	r1, #64	; 0x40
 8016af2:	4618      	mov	r0, r3
 8016af4:	f000 fc1c 	bl	8017330 <TIM_ITRx_SetConfig>
      break;
 8016af8:	e00c      	b.n	8016b14 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	681a      	ldr	r2, [r3, #0]
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	4619      	mov	r1, r3
 8016b04:	4610      	mov	r0, r2
 8016b06:	f000 fc13 	bl	8017330 <TIM_ITRx_SetConfig>
      break;
 8016b0a:	e003      	b.n	8016b14 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8016b10:	e000      	b.n	8016b14 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8016b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2201      	movs	r2, #1
 8016b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8016b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3710      	adds	r7, #16
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	ffceff88 	.word	0xffceff88
 8016b34:	00100040 	.word	0x00100040
 8016b38:	00100030 	.word	0x00100030
 8016b3c:	00100020 	.word	0x00100020

08016b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016b40:	b480      	push	{r7}
 8016b42:	b083      	sub	sp, #12
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016b48:	bf00      	nop
 8016b4a:	370c      	adds	r7, #12
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr

08016b54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016b54:	b480      	push	{r7}
 8016b56:	b083      	sub	sp, #12
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016b5c:	bf00      	nop
 8016b5e:	370c      	adds	r7, #12
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b083      	sub	sp, #12
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016b70:	bf00      	nop
 8016b72:	370c      	adds	r7, #12
 8016b74:	46bd      	mov	sp, r7
 8016b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7a:	4770      	bx	lr

08016b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016b84:	bf00      	nop
 8016b86:	370c      	adds	r7, #12
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8e:	4770      	bx	lr

08016b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8016b90:	b480      	push	{r7}
 8016b92:	b085      	sub	sp, #20
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	4a40      	ldr	r2, [pc, #256]	; (8016ca4 <TIM_Base_SetConfig+0x114>)
 8016ba4:	4293      	cmp	r3, r2
 8016ba6:	d013      	beq.n	8016bd0 <TIM_Base_SetConfig+0x40>
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016bae:	d00f      	beq.n	8016bd0 <TIM_Base_SetConfig+0x40>
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	4a3d      	ldr	r2, [pc, #244]	; (8016ca8 <TIM_Base_SetConfig+0x118>)
 8016bb4:	4293      	cmp	r3, r2
 8016bb6:	d00b      	beq.n	8016bd0 <TIM_Base_SetConfig+0x40>
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	4a3c      	ldr	r2, [pc, #240]	; (8016cac <TIM_Base_SetConfig+0x11c>)
 8016bbc:	4293      	cmp	r3, r2
 8016bbe:	d007      	beq.n	8016bd0 <TIM_Base_SetConfig+0x40>
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	4a3b      	ldr	r2, [pc, #236]	; (8016cb0 <TIM_Base_SetConfig+0x120>)
 8016bc4:	4293      	cmp	r3, r2
 8016bc6:	d003      	beq.n	8016bd0 <TIM_Base_SetConfig+0x40>
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	4a3a      	ldr	r2, [pc, #232]	; (8016cb4 <TIM_Base_SetConfig+0x124>)
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d108      	bne.n	8016be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	68fa      	ldr	r2, [r7, #12]
 8016bde:	4313      	orrs	r3, r2
 8016be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	4a2f      	ldr	r2, [pc, #188]	; (8016ca4 <TIM_Base_SetConfig+0x114>)
 8016be6:	4293      	cmp	r3, r2
 8016be8:	d01f      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016bf0:	d01b      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	4a2c      	ldr	r2, [pc, #176]	; (8016ca8 <TIM_Base_SetConfig+0x118>)
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	d017      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	4a2b      	ldr	r2, [pc, #172]	; (8016cac <TIM_Base_SetConfig+0x11c>)
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	d013      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	4a2a      	ldr	r2, [pc, #168]	; (8016cb0 <TIM_Base_SetConfig+0x120>)
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d00f      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	4a29      	ldr	r2, [pc, #164]	; (8016cb4 <TIM_Base_SetConfig+0x124>)
 8016c0e:	4293      	cmp	r3, r2
 8016c10:	d00b      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	4a28      	ldr	r2, [pc, #160]	; (8016cb8 <TIM_Base_SetConfig+0x128>)
 8016c16:	4293      	cmp	r3, r2
 8016c18:	d007      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	4a27      	ldr	r2, [pc, #156]	; (8016cbc <TIM_Base_SetConfig+0x12c>)
 8016c1e:	4293      	cmp	r3, r2
 8016c20:	d003      	beq.n	8016c2a <TIM_Base_SetConfig+0x9a>
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	4a26      	ldr	r2, [pc, #152]	; (8016cc0 <TIM_Base_SetConfig+0x130>)
 8016c26:	4293      	cmp	r3, r2
 8016c28:	d108      	bne.n	8016c3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	68fa      	ldr	r2, [r7, #12]
 8016c38:	4313      	orrs	r3, r2
 8016c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	695b      	ldr	r3, [r3, #20]
 8016c46:	4313      	orrs	r3, r2
 8016c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	68fa      	ldr	r2, [r7, #12]
 8016c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	689a      	ldr	r2, [r3, #8]
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	681a      	ldr	r2, [r3, #0]
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	4a10      	ldr	r2, [pc, #64]	; (8016ca4 <TIM_Base_SetConfig+0x114>)
 8016c64:	4293      	cmp	r3, r2
 8016c66:	d00f      	beq.n	8016c88 <TIM_Base_SetConfig+0xf8>
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	4a12      	ldr	r2, [pc, #72]	; (8016cb4 <TIM_Base_SetConfig+0x124>)
 8016c6c:	4293      	cmp	r3, r2
 8016c6e:	d00b      	beq.n	8016c88 <TIM_Base_SetConfig+0xf8>
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	4a11      	ldr	r2, [pc, #68]	; (8016cb8 <TIM_Base_SetConfig+0x128>)
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d007      	beq.n	8016c88 <TIM_Base_SetConfig+0xf8>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	4a10      	ldr	r2, [pc, #64]	; (8016cbc <TIM_Base_SetConfig+0x12c>)
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	d003      	beq.n	8016c88 <TIM_Base_SetConfig+0xf8>
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	4a0f      	ldr	r2, [pc, #60]	; (8016cc0 <TIM_Base_SetConfig+0x130>)
 8016c84:	4293      	cmp	r3, r2
 8016c86:	d103      	bne.n	8016c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	691a      	ldr	r2, [r3, #16]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2201      	movs	r2, #1
 8016c94:	615a      	str	r2, [r3, #20]
}
 8016c96:	bf00      	nop
 8016c98:	3714      	adds	r7, #20
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca0:	4770      	bx	lr
 8016ca2:	bf00      	nop
 8016ca4:	40010000 	.word	0x40010000
 8016ca8:	40000400 	.word	0x40000400
 8016cac:	40000800 	.word	0x40000800
 8016cb0:	40000c00 	.word	0x40000c00
 8016cb4:	40010400 	.word	0x40010400
 8016cb8:	40014000 	.word	0x40014000
 8016cbc:	40014400 	.word	0x40014400
 8016cc0:	40014800 	.word	0x40014800

08016cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b087      	sub	sp, #28
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	6a1b      	ldr	r3, [r3, #32]
 8016cd2:	f023 0201 	bic.w	r2, r3, #1
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6a1b      	ldr	r3, [r3, #32]
 8016cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	685b      	ldr	r3, [r3, #4]
 8016ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	699b      	ldr	r3, [r3, #24]
 8016cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016cec:	68fa      	ldr	r2, [r7, #12]
 8016cee:	4b37      	ldr	r3, [pc, #220]	; (8016dcc <TIM_OC1_SetConfig+0x108>)
 8016cf0:	4013      	ands	r3, r2
 8016cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	f023 0303 	bic.w	r3, r3, #3
 8016cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	68fa      	ldr	r2, [r7, #12]
 8016d02:	4313      	orrs	r3, r2
 8016d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	f023 0302 	bic.w	r3, r3, #2
 8016d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	689b      	ldr	r3, [r3, #8]
 8016d12:	697a      	ldr	r2, [r7, #20]
 8016d14:	4313      	orrs	r3, r2
 8016d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	4a2d      	ldr	r2, [pc, #180]	; (8016dd0 <TIM_OC1_SetConfig+0x10c>)
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d00f      	beq.n	8016d40 <TIM_OC1_SetConfig+0x7c>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	4a2c      	ldr	r2, [pc, #176]	; (8016dd4 <TIM_OC1_SetConfig+0x110>)
 8016d24:	4293      	cmp	r3, r2
 8016d26:	d00b      	beq.n	8016d40 <TIM_OC1_SetConfig+0x7c>
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	4a2b      	ldr	r2, [pc, #172]	; (8016dd8 <TIM_OC1_SetConfig+0x114>)
 8016d2c:	4293      	cmp	r3, r2
 8016d2e:	d007      	beq.n	8016d40 <TIM_OC1_SetConfig+0x7c>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	4a2a      	ldr	r2, [pc, #168]	; (8016ddc <TIM_OC1_SetConfig+0x118>)
 8016d34:	4293      	cmp	r3, r2
 8016d36:	d003      	beq.n	8016d40 <TIM_OC1_SetConfig+0x7c>
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	4a29      	ldr	r2, [pc, #164]	; (8016de0 <TIM_OC1_SetConfig+0x11c>)
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	d10c      	bne.n	8016d5a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	f023 0308 	bic.w	r3, r3, #8
 8016d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	697a      	ldr	r2, [r7, #20]
 8016d4e:	4313      	orrs	r3, r2
 8016d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	f023 0304 	bic.w	r3, r3, #4
 8016d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4a1c      	ldr	r2, [pc, #112]	; (8016dd0 <TIM_OC1_SetConfig+0x10c>)
 8016d5e:	4293      	cmp	r3, r2
 8016d60:	d00f      	beq.n	8016d82 <TIM_OC1_SetConfig+0xbe>
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	4a1b      	ldr	r2, [pc, #108]	; (8016dd4 <TIM_OC1_SetConfig+0x110>)
 8016d66:	4293      	cmp	r3, r2
 8016d68:	d00b      	beq.n	8016d82 <TIM_OC1_SetConfig+0xbe>
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	4a1a      	ldr	r2, [pc, #104]	; (8016dd8 <TIM_OC1_SetConfig+0x114>)
 8016d6e:	4293      	cmp	r3, r2
 8016d70:	d007      	beq.n	8016d82 <TIM_OC1_SetConfig+0xbe>
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	4a19      	ldr	r2, [pc, #100]	; (8016ddc <TIM_OC1_SetConfig+0x118>)
 8016d76:	4293      	cmp	r3, r2
 8016d78:	d003      	beq.n	8016d82 <TIM_OC1_SetConfig+0xbe>
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	4a18      	ldr	r2, [pc, #96]	; (8016de0 <TIM_OC1_SetConfig+0x11c>)
 8016d7e:	4293      	cmp	r3, r2
 8016d80:	d111      	bne.n	8016da6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	695b      	ldr	r3, [r3, #20]
 8016d96:	693a      	ldr	r2, [r7, #16]
 8016d98:	4313      	orrs	r3, r2
 8016d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	699b      	ldr	r3, [r3, #24]
 8016da0:	693a      	ldr	r2, [r7, #16]
 8016da2:	4313      	orrs	r3, r2
 8016da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	693a      	ldr	r2, [r7, #16]
 8016daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	68fa      	ldr	r2, [r7, #12]
 8016db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	685a      	ldr	r2, [r3, #4]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	697a      	ldr	r2, [r7, #20]
 8016dbe:	621a      	str	r2, [r3, #32]
}
 8016dc0:	bf00      	nop
 8016dc2:	371c      	adds	r7, #28
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dca:	4770      	bx	lr
 8016dcc:	fffeff8f 	.word	0xfffeff8f
 8016dd0:	40010000 	.word	0x40010000
 8016dd4:	40010400 	.word	0x40010400
 8016dd8:	40014000 	.word	0x40014000
 8016ddc:	40014400 	.word	0x40014400
 8016de0:	40014800 	.word	0x40014800

08016de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016de4:	b480      	push	{r7}
 8016de6:	b087      	sub	sp, #28
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
 8016dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	6a1b      	ldr	r3, [r3, #32]
 8016df2:	f023 0210 	bic.w	r2, r3, #16
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	6a1b      	ldr	r3, [r3, #32]
 8016dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	699b      	ldr	r3, [r3, #24]
 8016e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016e0c:	68fa      	ldr	r2, [r7, #12]
 8016e0e:	4b34      	ldr	r3, [pc, #208]	; (8016ee0 <TIM_OC2_SetConfig+0xfc>)
 8016e10:	4013      	ands	r3, r2
 8016e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	021b      	lsls	r3, r3, #8
 8016e22:	68fa      	ldr	r2, [r7, #12]
 8016e24:	4313      	orrs	r3, r2
 8016e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	f023 0320 	bic.w	r3, r3, #32
 8016e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016e30:	683b      	ldr	r3, [r7, #0]
 8016e32:	689b      	ldr	r3, [r3, #8]
 8016e34:	011b      	lsls	r3, r3, #4
 8016e36:	697a      	ldr	r2, [r7, #20]
 8016e38:	4313      	orrs	r3, r2
 8016e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	4a29      	ldr	r2, [pc, #164]	; (8016ee4 <TIM_OC2_SetConfig+0x100>)
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d003      	beq.n	8016e4c <TIM_OC2_SetConfig+0x68>
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	4a28      	ldr	r2, [pc, #160]	; (8016ee8 <TIM_OC2_SetConfig+0x104>)
 8016e48:	4293      	cmp	r3, r2
 8016e4a:	d10d      	bne.n	8016e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	011b      	lsls	r3, r3, #4
 8016e5a:	697a      	ldr	r2, [r7, #20]
 8016e5c:	4313      	orrs	r3, r2
 8016e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016e60:	697b      	ldr	r3, [r7, #20]
 8016e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	4a1e      	ldr	r2, [pc, #120]	; (8016ee4 <TIM_OC2_SetConfig+0x100>)
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d00f      	beq.n	8016e90 <TIM_OC2_SetConfig+0xac>
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	4a1d      	ldr	r2, [pc, #116]	; (8016ee8 <TIM_OC2_SetConfig+0x104>)
 8016e74:	4293      	cmp	r3, r2
 8016e76:	d00b      	beq.n	8016e90 <TIM_OC2_SetConfig+0xac>
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	4a1c      	ldr	r2, [pc, #112]	; (8016eec <TIM_OC2_SetConfig+0x108>)
 8016e7c:	4293      	cmp	r3, r2
 8016e7e:	d007      	beq.n	8016e90 <TIM_OC2_SetConfig+0xac>
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	4a1b      	ldr	r2, [pc, #108]	; (8016ef0 <TIM_OC2_SetConfig+0x10c>)
 8016e84:	4293      	cmp	r3, r2
 8016e86:	d003      	beq.n	8016e90 <TIM_OC2_SetConfig+0xac>
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	4a1a      	ldr	r2, [pc, #104]	; (8016ef4 <TIM_OC2_SetConfig+0x110>)
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	d113      	bne.n	8016eb8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016e90:	693b      	ldr	r3, [r7, #16]
 8016e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	695b      	ldr	r3, [r3, #20]
 8016ea4:	009b      	lsls	r3, r3, #2
 8016ea6:	693a      	ldr	r2, [r7, #16]
 8016ea8:	4313      	orrs	r3, r2
 8016eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016eac:	683b      	ldr	r3, [r7, #0]
 8016eae:	699b      	ldr	r3, [r3, #24]
 8016eb0:	009b      	lsls	r3, r3, #2
 8016eb2:	693a      	ldr	r2, [r7, #16]
 8016eb4:	4313      	orrs	r3, r2
 8016eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	693a      	ldr	r2, [r7, #16]
 8016ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	68fa      	ldr	r2, [r7, #12]
 8016ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	685a      	ldr	r2, [r3, #4]
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	697a      	ldr	r2, [r7, #20]
 8016ed0:	621a      	str	r2, [r3, #32]
}
 8016ed2:	bf00      	nop
 8016ed4:	371c      	adds	r7, #28
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016edc:	4770      	bx	lr
 8016ede:	bf00      	nop
 8016ee0:	feff8fff 	.word	0xfeff8fff
 8016ee4:	40010000 	.word	0x40010000
 8016ee8:	40010400 	.word	0x40010400
 8016eec:	40014000 	.word	0x40014000
 8016ef0:	40014400 	.word	0x40014400
 8016ef4:	40014800 	.word	0x40014800

08016ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016ef8:	b480      	push	{r7}
 8016efa:	b087      	sub	sp, #28
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	6a1b      	ldr	r3, [r3, #32]
 8016f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6a1b      	ldr	r3, [r3, #32]
 8016f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	69db      	ldr	r3, [r3, #28]
 8016f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016f20:	68fa      	ldr	r2, [r7, #12]
 8016f22:	4b33      	ldr	r3, [pc, #204]	; (8016ff0 <TIM_OC3_SetConfig+0xf8>)
 8016f24:	4013      	ands	r3, r2
 8016f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f023 0303 	bic.w	r3, r3, #3
 8016f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016f30:	683b      	ldr	r3, [r7, #0]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	68fa      	ldr	r2, [r7, #12]
 8016f36:	4313      	orrs	r3, r2
 8016f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	689b      	ldr	r3, [r3, #8]
 8016f46:	021b      	lsls	r3, r3, #8
 8016f48:	697a      	ldr	r2, [r7, #20]
 8016f4a:	4313      	orrs	r3, r2
 8016f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	4a28      	ldr	r2, [pc, #160]	; (8016ff4 <TIM_OC3_SetConfig+0xfc>)
 8016f52:	4293      	cmp	r3, r2
 8016f54:	d003      	beq.n	8016f5e <TIM_OC3_SetConfig+0x66>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	4a27      	ldr	r2, [pc, #156]	; (8016ff8 <TIM_OC3_SetConfig+0x100>)
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	d10d      	bne.n	8016f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	68db      	ldr	r3, [r3, #12]
 8016f6a:	021b      	lsls	r3, r3, #8
 8016f6c:	697a      	ldr	r2, [r7, #20]
 8016f6e:	4313      	orrs	r3, r2
 8016f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016f72:	697b      	ldr	r3, [r7, #20]
 8016f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	4a1d      	ldr	r2, [pc, #116]	; (8016ff4 <TIM_OC3_SetConfig+0xfc>)
 8016f7e:	4293      	cmp	r3, r2
 8016f80:	d00f      	beq.n	8016fa2 <TIM_OC3_SetConfig+0xaa>
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	4a1c      	ldr	r2, [pc, #112]	; (8016ff8 <TIM_OC3_SetConfig+0x100>)
 8016f86:	4293      	cmp	r3, r2
 8016f88:	d00b      	beq.n	8016fa2 <TIM_OC3_SetConfig+0xaa>
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	4a1b      	ldr	r2, [pc, #108]	; (8016ffc <TIM_OC3_SetConfig+0x104>)
 8016f8e:	4293      	cmp	r3, r2
 8016f90:	d007      	beq.n	8016fa2 <TIM_OC3_SetConfig+0xaa>
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	4a1a      	ldr	r2, [pc, #104]	; (8017000 <TIM_OC3_SetConfig+0x108>)
 8016f96:	4293      	cmp	r3, r2
 8016f98:	d003      	beq.n	8016fa2 <TIM_OC3_SetConfig+0xaa>
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	4a19      	ldr	r2, [pc, #100]	; (8017004 <TIM_OC3_SetConfig+0x10c>)
 8016f9e:	4293      	cmp	r3, r2
 8016fa0:	d113      	bne.n	8016fca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016fa2:	693b      	ldr	r3, [r7, #16]
 8016fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016faa:	693b      	ldr	r3, [r7, #16]
 8016fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	695b      	ldr	r3, [r3, #20]
 8016fb6:	011b      	lsls	r3, r3, #4
 8016fb8:	693a      	ldr	r2, [r7, #16]
 8016fba:	4313      	orrs	r3, r2
 8016fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	699b      	ldr	r3, [r3, #24]
 8016fc2:	011b      	lsls	r3, r3, #4
 8016fc4:	693a      	ldr	r2, [r7, #16]
 8016fc6:	4313      	orrs	r3, r2
 8016fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	693a      	ldr	r2, [r7, #16]
 8016fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	68fa      	ldr	r2, [r7, #12]
 8016fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	685a      	ldr	r2, [r3, #4]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	697a      	ldr	r2, [r7, #20]
 8016fe2:	621a      	str	r2, [r3, #32]
}
 8016fe4:	bf00      	nop
 8016fe6:	371c      	adds	r7, #28
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fee:	4770      	bx	lr
 8016ff0:	fffeff8f 	.word	0xfffeff8f
 8016ff4:	40010000 	.word	0x40010000
 8016ff8:	40010400 	.word	0x40010400
 8016ffc:	40014000 	.word	0x40014000
 8017000:	40014400 	.word	0x40014400
 8017004:	40014800 	.word	0x40014800

08017008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017008:	b480      	push	{r7}
 801700a:	b087      	sub	sp, #28
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
 8017010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	6a1b      	ldr	r3, [r3, #32]
 8017016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	6a1b      	ldr	r3, [r3, #32]
 8017022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	69db      	ldr	r3, [r3, #28]
 801702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017030:	68fa      	ldr	r2, [r7, #12]
 8017032:	4b24      	ldr	r3, [pc, #144]	; (80170c4 <TIM_OC4_SetConfig+0xbc>)
 8017034:	4013      	ands	r3, r2
 8017036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801703e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	021b      	lsls	r3, r3, #8
 8017046:	68fa      	ldr	r2, [r7, #12]
 8017048:	4313      	orrs	r3, r2
 801704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	689b      	ldr	r3, [r3, #8]
 8017058:	031b      	lsls	r3, r3, #12
 801705a:	693a      	ldr	r2, [r7, #16]
 801705c:	4313      	orrs	r3, r2
 801705e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	4a19      	ldr	r2, [pc, #100]	; (80170c8 <TIM_OC4_SetConfig+0xc0>)
 8017064:	4293      	cmp	r3, r2
 8017066:	d00f      	beq.n	8017088 <TIM_OC4_SetConfig+0x80>
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	4a18      	ldr	r2, [pc, #96]	; (80170cc <TIM_OC4_SetConfig+0xc4>)
 801706c:	4293      	cmp	r3, r2
 801706e:	d00b      	beq.n	8017088 <TIM_OC4_SetConfig+0x80>
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	4a17      	ldr	r2, [pc, #92]	; (80170d0 <TIM_OC4_SetConfig+0xc8>)
 8017074:	4293      	cmp	r3, r2
 8017076:	d007      	beq.n	8017088 <TIM_OC4_SetConfig+0x80>
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	4a16      	ldr	r2, [pc, #88]	; (80170d4 <TIM_OC4_SetConfig+0xcc>)
 801707c:	4293      	cmp	r3, r2
 801707e:	d003      	beq.n	8017088 <TIM_OC4_SetConfig+0x80>
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	4a15      	ldr	r2, [pc, #84]	; (80170d8 <TIM_OC4_SetConfig+0xd0>)
 8017084:	4293      	cmp	r3, r2
 8017086:	d109      	bne.n	801709c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017088:	697b      	ldr	r3, [r7, #20]
 801708a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801708e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	695b      	ldr	r3, [r3, #20]
 8017094:	019b      	lsls	r3, r3, #6
 8017096:	697a      	ldr	r2, [r7, #20]
 8017098:	4313      	orrs	r3, r2
 801709a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	697a      	ldr	r2, [r7, #20]
 80170a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	68fa      	ldr	r2, [r7, #12]
 80170a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	685a      	ldr	r2, [r3, #4]
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	693a      	ldr	r2, [r7, #16]
 80170b4:	621a      	str	r2, [r3, #32]
}
 80170b6:	bf00      	nop
 80170b8:	371c      	adds	r7, #28
 80170ba:	46bd      	mov	sp, r7
 80170bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c0:	4770      	bx	lr
 80170c2:	bf00      	nop
 80170c4:	feff8fff 	.word	0xfeff8fff
 80170c8:	40010000 	.word	0x40010000
 80170cc:	40010400 	.word	0x40010400
 80170d0:	40014000 	.word	0x40014000
 80170d4:	40014400 	.word	0x40014400
 80170d8:	40014800 	.word	0x40014800

080170dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80170dc:	b480      	push	{r7}
 80170de:	b087      	sub	sp, #28
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6a1b      	ldr	r3, [r3, #32]
 80170ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6a1b      	ldr	r3, [r3, #32]
 80170f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017104:	68fa      	ldr	r2, [r7, #12]
 8017106:	4b21      	ldr	r3, [pc, #132]	; (801718c <TIM_OC5_SetConfig+0xb0>)
 8017108:	4013      	ands	r3, r2
 801710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	68fa      	ldr	r2, [r7, #12]
 8017112:	4313      	orrs	r3, r2
 8017114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801711c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	689b      	ldr	r3, [r3, #8]
 8017122:	041b      	lsls	r3, r3, #16
 8017124:	693a      	ldr	r2, [r7, #16]
 8017126:	4313      	orrs	r3, r2
 8017128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	4a18      	ldr	r2, [pc, #96]	; (8017190 <TIM_OC5_SetConfig+0xb4>)
 801712e:	4293      	cmp	r3, r2
 8017130:	d00f      	beq.n	8017152 <TIM_OC5_SetConfig+0x76>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	4a17      	ldr	r2, [pc, #92]	; (8017194 <TIM_OC5_SetConfig+0xb8>)
 8017136:	4293      	cmp	r3, r2
 8017138:	d00b      	beq.n	8017152 <TIM_OC5_SetConfig+0x76>
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	4a16      	ldr	r2, [pc, #88]	; (8017198 <TIM_OC5_SetConfig+0xbc>)
 801713e:	4293      	cmp	r3, r2
 8017140:	d007      	beq.n	8017152 <TIM_OC5_SetConfig+0x76>
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4a15      	ldr	r2, [pc, #84]	; (801719c <TIM_OC5_SetConfig+0xc0>)
 8017146:	4293      	cmp	r3, r2
 8017148:	d003      	beq.n	8017152 <TIM_OC5_SetConfig+0x76>
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	4a14      	ldr	r2, [pc, #80]	; (80171a0 <TIM_OC5_SetConfig+0xc4>)
 801714e:	4293      	cmp	r3, r2
 8017150:	d109      	bne.n	8017166 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	695b      	ldr	r3, [r3, #20]
 801715e:	021b      	lsls	r3, r3, #8
 8017160:	697a      	ldr	r2, [r7, #20]
 8017162:	4313      	orrs	r3, r2
 8017164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	697a      	ldr	r2, [r7, #20]
 801716a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	685a      	ldr	r2, [r3, #4]
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	693a      	ldr	r2, [r7, #16]
 801717e:	621a      	str	r2, [r3, #32]
}
 8017180:	bf00      	nop
 8017182:	371c      	adds	r7, #28
 8017184:	46bd      	mov	sp, r7
 8017186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718a:	4770      	bx	lr
 801718c:	fffeff8f 	.word	0xfffeff8f
 8017190:	40010000 	.word	0x40010000
 8017194:	40010400 	.word	0x40010400
 8017198:	40014000 	.word	0x40014000
 801719c:	40014400 	.word	0x40014400
 80171a0:	40014800 	.word	0x40014800

080171a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80171a4:	b480      	push	{r7}
 80171a6:	b087      	sub	sp, #28
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	6a1b      	ldr	r3, [r3, #32]
 80171b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	6a1b      	ldr	r3, [r3, #32]
 80171be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	685b      	ldr	r3, [r3, #4]
 80171c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80171cc:	68fa      	ldr	r2, [r7, #12]
 80171ce:	4b22      	ldr	r3, [pc, #136]	; (8017258 <TIM_OC6_SetConfig+0xb4>)
 80171d0:	4013      	ands	r3, r2
 80171d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	021b      	lsls	r3, r3, #8
 80171da:	68fa      	ldr	r2, [r7, #12]
 80171dc:	4313      	orrs	r3, r2
 80171de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80171e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	689b      	ldr	r3, [r3, #8]
 80171ec:	051b      	lsls	r3, r3, #20
 80171ee:	693a      	ldr	r2, [r7, #16]
 80171f0:	4313      	orrs	r3, r2
 80171f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	4a19      	ldr	r2, [pc, #100]	; (801725c <TIM_OC6_SetConfig+0xb8>)
 80171f8:	4293      	cmp	r3, r2
 80171fa:	d00f      	beq.n	801721c <TIM_OC6_SetConfig+0x78>
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	4a18      	ldr	r2, [pc, #96]	; (8017260 <TIM_OC6_SetConfig+0xbc>)
 8017200:	4293      	cmp	r3, r2
 8017202:	d00b      	beq.n	801721c <TIM_OC6_SetConfig+0x78>
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	4a17      	ldr	r2, [pc, #92]	; (8017264 <TIM_OC6_SetConfig+0xc0>)
 8017208:	4293      	cmp	r3, r2
 801720a:	d007      	beq.n	801721c <TIM_OC6_SetConfig+0x78>
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	4a16      	ldr	r2, [pc, #88]	; (8017268 <TIM_OC6_SetConfig+0xc4>)
 8017210:	4293      	cmp	r3, r2
 8017212:	d003      	beq.n	801721c <TIM_OC6_SetConfig+0x78>
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	4a15      	ldr	r2, [pc, #84]	; (801726c <TIM_OC6_SetConfig+0xc8>)
 8017218:	4293      	cmp	r3, r2
 801721a:	d109      	bne.n	8017230 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801721c:	697b      	ldr	r3, [r7, #20]
 801721e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	695b      	ldr	r3, [r3, #20]
 8017228:	029b      	lsls	r3, r3, #10
 801722a:	697a      	ldr	r2, [r7, #20]
 801722c:	4313      	orrs	r3, r2
 801722e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	697a      	ldr	r2, [r7, #20]
 8017234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	68fa      	ldr	r2, [r7, #12]
 801723a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	685a      	ldr	r2, [r3, #4]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	693a      	ldr	r2, [r7, #16]
 8017248:	621a      	str	r2, [r3, #32]
}
 801724a:	bf00      	nop
 801724c:	371c      	adds	r7, #28
 801724e:	46bd      	mov	sp, r7
 8017250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017254:	4770      	bx	lr
 8017256:	bf00      	nop
 8017258:	feff8fff 	.word	0xfeff8fff
 801725c:	40010000 	.word	0x40010000
 8017260:	40010400 	.word	0x40010400
 8017264:	40014000 	.word	0x40014000
 8017268:	40014400 	.word	0x40014400
 801726c:	40014800 	.word	0x40014800

08017270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017270:	b480      	push	{r7}
 8017272:	b087      	sub	sp, #28
 8017274:	af00      	add	r7, sp, #0
 8017276:	60f8      	str	r0, [r7, #12]
 8017278:	60b9      	str	r1, [r7, #8]
 801727a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	6a1b      	ldr	r3, [r3, #32]
 8017280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	6a1b      	ldr	r3, [r3, #32]
 8017286:	f023 0201 	bic.w	r2, r3, #1
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	699b      	ldr	r3, [r3, #24]
 8017292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017294:	693b      	ldr	r3, [r7, #16]
 8017296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801729a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	011b      	lsls	r3, r3, #4
 80172a0:	693a      	ldr	r2, [r7, #16]
 80172a2:	4313      	orrs	r3, r2
 80172a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80172a6:	697b      	ldr	r3, [r7, #20]
 80172a8:	f023 030a 	bic.w	r3, r3, #10
 80172ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80172ae:	697a      	ldr	r2, [r7, #20]
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	4313      	orrs	r3, r2
 80172b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	693a      	ldr	r2, [r7, #16]
 80172ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	697a      	ldr	r2, [r7, #20]
 80172c0:	621a      	str	r2, [r3, #32]
}
 80172c2:	bf00      	nop
 80172c4:	371c      	adds	r7, #28
 80172c6:	46bd      	mov	sp, r7
 80172c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172cc:	4770      	bx	lr

080172ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80172ce:	b480      	push	{r7}
 80172d0:	b087      	sub	sp, #28
 80172d2:	af00      	add	r7, sp, #0
 80172d4:	60f8      	str	r0, [r7, #12]
 80172d6:	60b9      	str	r1, [r7, #8]
 80172d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	6a1b      	ldr	r3, [r3, #32]
 80172de:	f023 0210 	bic.w	r2, r3, #16
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	699b      	ldr	r3, [r3, #24]
 80172ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	6a1b      	ldr	r3, [r3, #32]
 80172f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80172f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	031b      	lsls	r3, r3, #12
 80172fe:	697a      	ldr	r2, [r7, #20]
 8017300:	4313      	orrs	r3, r2
 8017302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801730a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	011b      	lsls	r3, r3, #4
 8017310:	693a      	ldr	r2, [r7, #16]
 8017312:	4313      	orrs	r3, r2
 8017314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	697a      	ldr	r2, [r7, #20]
 801731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	693a      	ldr	r2, [r7, #16]
 8017320:	621a      	str	r2, [r3, #32]
}
 8017322:	bf00      	nop
 8017324:	371c      	adds	r7, #28
 8017326:	46bd      	mov	sp, r7
 8017328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732c:	4770      	bx	lr
	...

08017330 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017330:	b480      	push	{r7}
 8017332:	b085      	sub	sp, #20
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	689b      	ldr	r3, [r3, #8]
 801733e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017340:	68fa      	ldr	r2, [r7, #12]
 8017342:	4b09      	ldr	r3, [pc, #36]	; (8017368 <TIM_ITRx_SetConfig+0x38>)
 8017344:	4013      	ands	r3, r2
 8017346:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017348:	683a      	ldr	r2, [r7, #0]
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	4313      	orrs	r3, r2
 801734e:	f043 0307 	orr.w	r3, r3, #7
 8017352:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	68fa      	ldr	r2, [r7, #12]
 8017358:	609a      	str	r2, [r3, #8]
}
 801735a:	bf00      	nop
 801735c:	3714      	adds	r7, #20
 801735e:	46bd      	mov	sp, r7
 8017360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017364:	4770      	bx	lr
 8017366:	bf00      	nop
 8017368:	ffcfff8f 	.word	0xffcfff8f

0801736c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801736c:	b480      	push	{r7}
 801736e:	b087      	sub	sp, #28
 8017370:	af00      	add	r7, sp, #0
 8017372:	60f8      	str	r0, [r7, #12]
 8017374:	60b9      	str	r1, [r7, #8]
 8017376:	607a      	str	r2, [r7, #4]
 8017378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	689b      	ldr	r3, [r3, #8]
 801737e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	021a      	lsls	r2, r3, #8
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	431a      	orrs	r2, r3
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	4313      	orrs	r3, r2
 8017394:	697a      	ldr	r2, [r7, #20]
 8017396:	4313      	orrs	r3, r2
 8017398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	697a      	ldr	r2, [r7, #20]
 801739e:	609a      	str	r2, [r3, #8]
}
 80173a0:	bf00      	nop
 80173a2:	371c      	adds	r7, #28
 80173a4:	46bd      	mov	sp, r7
 80173a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173aa:	4770      	bx	lr

080173ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80173ac:	b480      	push	{r7}
 80173ae:	b087      	sub	sp, #28
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	60f8      	str	r0, [r7, #12]
 80173b4:	60b9      	str	r1, [r7, #8]
 80173b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	f003 031f 	and.w	r3, r3, #31
 80173be:	2201      	movs	r2, #1
 80173c0:	fa02 f303 	lsl.w	r3, r2, r3
 80173c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	6a1a      	ldr	r2, [r3, #32]
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	43db      	mvns	r3, r3
 80173ce:	401a      	ands	r2, r3
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	6a1a      	ldr	r2, [r3, #32]
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	f003 031f 	and.w	r3, r3, #31
 80173de:	6879      	ldr	r1, [r7, #4]
 80173e0:	fa01 f303 	lsl.w	r3, r1, r3
 80173e4:	431a      	orrs	r2, r3
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	621a      	str	r2, [r3, #32]
}
 80173ea:	bf00      	nop
 80173ec:	371c      	adds	r7, #28
 80173ee:	46bd      	mov	sp, r7
 80173f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f4:	4770      	bx	lr
	...

080173f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80173f8:	b480      	push	{r7}
 80173fa:	b085      	sub	sp, #20
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017408:	2b01      	cmp	r3, #1
 801740a:	d101      	bne.n	8017410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801740c:	2302      	movs	r3, #2
 801740e:	e06d      	b.n	80174ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2201      	movs	r2, #1
 8017414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2202      	movs	r2, #2
 801741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	685b      	ldr	r3, [r3, #4]
 8017426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	689b      	ldr	r3, [r3, #8]
 801742e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	4a30      	ldr	r2, [pc, #192]	; (80174f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8017436:	4293      	cmp	r3, r2
 8017438:	d004      	beq.n	8017444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	4a2f      	ldr	r2, [pc, #188]	; (80174fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8017440:	4293      	cmp	r3, r2
 8017442:	d108      	bne.n	8017456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801744a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801744c:	683b      	ldr	r3, [r7, #0]
 801744e:	685b      	ldr	r3, [r3, #4]
 8017450:	68fa      	ldr	r2, [r7, #12]
 8017452:	4313      	orrs	r3, r2
 8017454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801745c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	68fa      	ldr	r2, [r7, #12]
 8017464:	4313      	orrs	r3, r2
 8017466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	68fa      	ldr	r2, [r7, #12]
 801746e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	4a20      	ldr	r2, [pc, #128]	; (80174f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8017476:	4293      	cmp	r3, r2
 8017478:	d022      	beq.n	80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017482:	d01d      	beq.n	80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4a1d      	ldr	r2, [pc, #116]	; (8017500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801748a:	4293      	cmp	r3, r2
 801748c:	d018      	beq.n	80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	4a1c      	ldr	r2, [pc, #112]	; (8017504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8017494:	4293      	cmp	r3, r2
 8017496:	d013      	beq.n	80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4a1a      	ldr	r2, [pc, #104]	; (8017508 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801749e:	4293      	cmp	r3, r2
 80174a0:	d00e      	beq.n	80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	4a15      	ldr	r2, [pc, #84]	; (80174fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80174a8:	4293      	cmp	r3, r2
 80174aa:	d009      	beq.n	80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	4a16      	ldr	r2, [pc, #88]	; (801750c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80174b2:	4293      	cmp	r3, r2
 80174b4:	d004      	beq.n	80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	4a15      	ldr	r2, [pc, #84]	; (8017510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80174bc:	4293      	cmp	r3, r2
 80174be:	d10c      	bne.n	80174da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80174c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80174c8:	683b      	ldr	r3, [r7, #0]
 80174ca:	689b      	ldr	r3, [r3, #8]
 80174cc:	68ba      	ldr	r2, [r7, #8]
 80174ce:	4313      	orrs	r3, r2
 80174d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	68ba      	ldr	r2, [r7, #8]
 80174d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	2201      	movs	r2, #1
 80174de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2200      	movs	r2, #0
 80174e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80174ea:	2300      	movs	r3, #0
}
 80174ec:	4618      	mov	r0, r3
 80174ee:	3714      	adds	r7, #20
 80174f0:	46bd      	mov	sp, r7
 80174f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f6:	4770      	bx	lr
 80174f8:	40010000 	.word	0x40010000
 80174fc:	40010400 	.word	0x40010400
 8017500:	40000400 	.word	0x40000400
 8017504:	40000800 	.word	0x40000800
 8017508:	40000c00 	.word	0x40000c00
 801750c:	40001800 	.word	0x40001800
 8017510:	40014000 	.word	0x40014000

08017514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017514:	b480      	push	{r7}
 8017516:	b085      	sub	sp, #20
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
 801751c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801751e:	2300      	movs	r3, #0
 8017520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017528:	2b01      	cmp	r3, #1
 801752a:	d101      	bne.n	8017530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801752c:	2302      	movs	r3, #2
 801752e:	e065      	b.n	80175fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2201      	movs	r2, #1
 8017534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801753e:	683b      	ldr	r3, [r7, #0]
 8017540:	68db      	ldr	r3, [r3, #12]
 8017542:	4313      	orrs	r3, r2
 8017544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	689b      	ldr	r3, [r3, #8]
 8017550:	4313      	orrs	r3, r2
 8017552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	685b      	ldr	r3, [r3, #4]
 801755e:	4313      	orrs	r3, r2
 8017560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	4313      	orrs	r3, r2
 801756e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	691b      	ldr	r3, [r3, #16]
 801757a:	4313      	orrs	r3, r2
 801757c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	695b      	ldr	r3, [r3, #20]
 8017588:	4313      	orrs	r3, r2
 801758a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8017592:	683b      	ldr	r3, [r7, #0]
 8017594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017596:	4313      	orrs	r3, r2
 8017598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80175a0:	683b      	ldr	r3, [r7, #0]
 80175a2:	699b      	ldr	r3, [r3, #24]
 80175a4:	041b      	lsls	r3, r3, #16
 80175a6:	4313      	orrs	r3, r2
 80175a8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	4a16      	ldr	r2, [pc, #88]	; (8017608 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d004      	beq.n	80175be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	4a14      	ldr	r2, [pc, #80]	; (801760c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80175ba:	4293      	cmp	r3, r2
 80175bc:	d115      	bne.n	80175ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175c8:	051b      	lsls	r3, r3, #20
 80175ca:	4313      	orrs	r3, r2
 80175cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	69db      	ldr	r3, [r3, #28]
 80175d8:	4313      	orrs	r3, r2
 80175da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	6a1b      	ldr	r3, [r3, #32]
 80175e6:	4313      	orrs	r3, r2
 80175e8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	68fa      	ldr	r2, [r7, #12]
 80175f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	2200      	movs	r2, #0
 80175f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80175fa:	2300      	movs	r3, #0
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3714      	adds	r7, #20
 8017600:	46bd      	mov	sp, r7
 8017602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017606:	4770      	bx	lr
 8017608:	40010000 	.word	0x40010000
 801760c:	40010400 	.word	0x40010400

08017610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017610:	b480      	push	{r7}
 8017612:	b083      	sub	sp, #12
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017618:	bf00      	nop
 801761a:	370c      	adds	r7, #12
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr

08017624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017624:	b480      	push	{r7}
 8017626:	b083      	sub	sp, #12
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801762c:	bf00      	nop
 801762e:	370c      	adds	r7, #12
 8017630:	46bd      	mov	sp, r7
 8017632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017636:	4770      	bx	lr

08017638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017638:	b480      	push	{r7}
 801763a:	b083      	sub	sp, #12
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017640:	bf00      	nop
 8017642:	370c      	adds	r7, #12
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr

0801764c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b082      	sub	sp, #8
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d101      	bne.n	801765e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801765a:	2301      	movs	r3, #1
 801765c:	e042      	b.n	80176e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017664:	2b00      	cmp	r3, #0
 8017666:	d106      	bne.n	8017676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2200      	movs	r2, #0
 801766c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f7f1 f8a9 	bl	80087c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2224      	movs	r2, #36	; 0x24
 801767a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	681a      	ldr	r2, [r3, #0]
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	f022 0201 	bic.w	r2, r2, #1
 801768c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801768e:	6878      	ldr	r0, [r7, #4]
 8017690:	f000 fe04 	bl	801829c <UART_SetConfig>
 8017694:	4603      	mov	r3, r0
 8017696:	2b01      	cmp	r3, #1
 8017698:	d101      	bne.n	801769e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801769a:	2301      	movs	r3, #1
 801769c:	e022      	b.n	80176e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d002      	beq.n	80176ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80176a6:	6878      	ldr	r0, [r7, #4]
 80176a8:	f001 fb60 	bl	8018d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	685a      	ldr	r2, [r3, #4]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80176ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	689a      	ldr	r2, [r3, #8]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80176ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	f042 0201 	orr.w	r2, r2, #1
 80176da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f001 fbe7 	bl	8018eb0 <UART_CheckIdleState>
 80176e2:	4603      	mov	r3, r0
}
 80176e4:	4618      	mov	r0, r3
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b08a      	sub	sp, #40	; 0x28
 80176f0:	af02      	add	r7, sp, #8
 80176f2:	60f8      	str	r0, [r7, #12]
 80176f4:	60b9      	str	r1, [r7, #8]
 80176f6:	603b      	str	r3, [r7, #0]
 80176f8:	4613      	mov	r3, r2
 80176fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017702:	2b20      	cmp	r3, #32
 8017704:	f040 8083 	bne.w	801780e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d002      	beq.n	8017714 <HAL_UART_Transmit+0x28>
 801770e:	88fb      	ldrh	r3, [r7, #6]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d101      	bne.n	8017718 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017714:	2301      	movs	r3, #1
 8017716:	e07b      	b.n	8017810 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801771e:	2b01      	cmp	r3, #1
 8017720:	d101      	bne.n	8017726 <HAL_UART_Transmit+0x3a>
 8017722:	2302      	movs	r3, #2
 8017724:	e074      	b.n	8017810 <HAL_UART_Transmit+0x124>
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	2201      	movs	r2, #1
 801772a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	2200      	movs	r2, #0
 8017732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	2221      	movs	r2, #33	; 0x21
 801773a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801773e:	f7f2 fc3d 	bl	8009fbc <HAL_GetTick>
 8017742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	88fa      	ldrh	r2, [r7, #6]
 8017748:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	88fa      	ldrh	r2, [r7, #6]
 8017750:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	689b      	ldr	r3, [r3, #8]
 8017758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801775c:	d108      	bne.n	8017770 <HAL_UART_Transmit+0x84>
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	691b      	ldr	r3, [r3, #16]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d104      	bne.n	8017770 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8017766:	2300      	movs	r3, #0
 8017768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	61bb      	str	r3, [r7, #24]
 801776e:	e003      	b.n	8017778 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017774:	2300      	movs	r3, #0
 8017776:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	2200      	movs	r2, #0
 801777c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8017780:	e02c      	b.n	80177dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	9300      	str	r3, [sp, #0]
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	2200      	movs	r2, #0
 801778a:	2180      	movs	r1, #128	; 0x80
 801778c:	68f8      	ldr	r0, [r7, #12]
 801778e:	f001 fbda 	bl	8018f46 <UART_WaitOnFlagUntilTimeout>
 8017792:	4603      	mov	r3, r0
 8017794:	2b00      	cmp	r3, #0
 8017796:	d001      	beq.n	801779c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8017798:	2303      	movs	r3, #3
 801779a:	e039      	b.n	8017810 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801779c:	69fb      	ldr	r3, [r7, #28]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d10b      	bne.n	80177ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80177a2:	69bb      	ldr	r3, [r7, #24]
 80177a4:	881b      	ldrh	r3, [r3, #0]
 80177a6:	461a      	mov	r2, r3
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80177b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80177b2:	69bb      	ldr	r3, [r7, #24]
 80177b4:	3302      	adds	r3, #2
 80177b6:	61bb      	str	r3, [r7, #24]
 80177b8:	e007      	b.n	80177ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80177ba:	69fb      	ldr	r3, [r7, #28]
 80177bc:	781a      	ldrb	r2, [r3, #0]
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80177c4:	69fb      	ldr	r3, [r7, #28]
 80177c6:	3301      	adds	r3, #1
 80177c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	3b01      	subs	r3, #1
 80177d4:	b29a      	uxth	r2, r3
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80177e2:	b29b      	uxth	r3, r3
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d1cc      	bne.n	8017782 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	9300      	str	r3, [sp, #0]
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	2200      	movs	r2, #0
 80177f0:	2140      	movs	r1, #64	; 0x40
 80177f2:	68f8      	ldr	r0, [r7, #12]
 80177f4:	f001 fba7 	bl	8018f46 <UART_WaitOnFlagUntilTimeout>
 80177f8:	4603      	mov	r3, r0
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d001      	beq.n	8017802 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80177fe:	2303      	movs	r3, #3
 8017800:	e006      	b.n	8017810 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	2220      	movs	r2, #32
 8017806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801780a:	2300      	movs	r3, #0
 801780c:	e000      	b.n	8017810 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801780e:	2302      	movs	r3, #2
  }
}
 8017810:	4618      	mov	r0, r3
 8017812:	3720      	adds	r7, #32
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}

08017818 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b08a      	sub	sp, #40	; 0x28
 801781c:	af00      	add	r7, sp, #0
 801781e:	60f8      	str	r0, [r7, #12]
 8017820:	60b9      	str	r1, [r7, #8]
 8017822:	4613      	mov	r3, r2
 8017824:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801782c:	2b20      	cmp	r3, #32
 801782e:	d142      	bne.n	80178b6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8017830:	68bb      	ldr	r3, [r7, #8]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d002      	beq.n	801783c <HAL_UART_Receive_IT+0x24>
 8017836:	88fb      	ldrh	r3, [r7, #6]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d101      	bne.n	8017840 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801783c:	2301      	movs	r3, #1
 801783e:	e03b      	b.n	80178b8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8017846:	2b01      	cmp	r3, #1
 8017848:	d101      	bne.n	801784e <HAL_UART_Receive_IT+0x36>
 801784a:	2302      	movs	r3, #2
 801784c:	e034      	b.n	80178b8 <HAL_UART_Receive_IT+0xa0>
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	2201      	movs	r2, #1
 8017852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	2200      	movs	r2, #0
 801785a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	4a17      	ldr	r2, [pc, #92]	; (80178c0 <HAL_UART_Receive_IT+0xa8>)
 8017862:	4293      	cmp	r3, r2
 8017864:	d01f      	beq.n	80178a6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	685b      	ldr	r3, [r3, #4]
 801786c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017870:	2b00      	cmp	r3, #0
 8017872:	d018      	beq.n	80178a6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	e853 3f00 	ldrex	r3, [r3]
 8017880:	613b      	str	r3, [r7, #16]
   return(result);
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017888:	627b      	str	r3, [r7, #36]	; 0x24
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	461a      	mov	r2, r3
 8017890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017892:	623b      	str	r3, [r7, #32]
 8017894:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017896:	69f9      	ldr	r1, [r7, #28]
 8017898:	6a3a      	ldr	r2, [r7, #32]
 801789a:	e841 2300 	strex	r3, r2, [r1]
 801789e:	61bb      	str	r3, [r7, #24]
   return(result);
 80178a0:	69bb      	ldr	r3, [r7, #24]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d1e6      	bne.n	8017874 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80178a6:	88fb      	ldrh	r3, [r7, #6]
 80178a8:	461a      	mov	r2, r3
 80178aa:	68b9      	ldr	r1, [r7, #8]
 80178ac:	68f8      	ldr	r0, [r7, #12]
 80178ae:	f001 fc13 	bl	80190d8 <UART_Start_Receive_IT>
 80178b2:	4603      	mov	r3, r0
 80178b4:	e000      	b.n	80178b8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80178b6:	2302      	movs	r3, #2
  }
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3728      	adds	r7, #40	; 0x28
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	58000c00 	.word	0x58000c00

080178c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b08a      	sub	sp, #40	; 0x28
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	4613      	mov	r3, r2
 80178d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80178d8:	2b20      	cmp	r3, #32
 80178da:	d17a      	bne.n	80179d2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80178dc:	68bb      	ldr	r3, [r7, #8]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d002      	beq.n	80178e8 <HAL_UART_Transmit_DMA+0x24>
 80178e2:	88fb      	ldrh	r3, [r7, #6]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d101      	bne.n	80178ec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80178e8:	2301      	movs	r3, #1
 80178ea:	e073      	b.n	80179d4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80178f2:	2b01      	cmp	r3, #1
 80178f4:	d101      	bne.n	80178fa <HAL_UART_Transmit_DMA+0x36>
 80178f6:	2302      	movs	r3, #2
 80178f8:	e06c      	b.n	80179d4 <HAL_UART_Transmit_DMA+0x110>
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	2201      	movs	r2, #1
 80178fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	68ba      	ldr	r2, [r7, #8]
 8017906:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	88fa      	ldrh	r2, [r7, #6]
 801790c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	88fa      	ldrh	r2, [r7, #6]
 8017914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	2200      	movs	r2, #0
 801791c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	2221      	movs	r2, #33	; 0x21
 8017924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801792c:	2b00      	cmp	r3, #0
 801792e:	d02c      	beq.n	801798a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017934:	4a29      	ldr	r2, [pc, #164]	; (80179dc <HAL_UART_Transmit_DMA+0x118>)
 8017936:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801793c:	4a28      	ldr	r2, [pc, #160]	; (80179e0 <HAL_UART_Transmit_DMA+0x11c>)
 801793e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017944:	4a27      	ldr	r2, [pc, #156]	; (80179e4 <HAL_UART_Transmit_DMA+0x120>)
 8017946:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801794c:	2200      	movs	r2, #0
 801794e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017958:	4619      	mov	r1, r3
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	3328      	adds	r3, #40	; 0x28
 8017960:	461a      	mov	r2, r3
 8017962:	88fb      	ldrh	r3, [r7, #6]
 8017964:	f7f4 fc9e 	bl	800c2a4 <HAL_DMA_Start_IT>
 8017968:	4603      	mov	r3, r0
 801796a:	2b00      	cmp	r3, #0
 801796c:	d00d      	beq.n	801798a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	2210      	movs	r2, #16
 8017972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	2200      	movs	r2, #0
 801797a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	2220      	movs	r2, #32
 8017982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8017986:	2301      	movs	r3, #1
 8017988:	e024      	b.n	80179d4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	2240      	movs	r2, #64	; 0x40
 8017990:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	2200      	movs	r2, #0
 8017996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	3308      	adds	r3, #8
 80179a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	e853 3f00 	ldrex	r3, [r3]
 80179a8:	613b      	str	r3, [r7, #16]
   return(result);
 80179aa:	693b      	ldr	r3, [r7, #16]
 80179ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179b0:	627b      	str	r3, [r7, #36]	; 0x24
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	3308      	adds	r3, #8
 80179b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179ba:	623a      	str	r2, [r7, #32]
 80179bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179be:	69f9      	ldr	r1, [r7, #28]
 80179c0:	6a3a      	ldr	r2, [r7, #32]
 80179c2:	e841 2300 	strex	r3, r2, [r1]
 80179c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80179c8:	69bb      	ldr	r3, [r7, #24]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d1e5      	bne.n	801799a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80179ce:	2300      	movs	r3, #0
 80179d0:	e000      	b.n	80179d4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80179d2:	2302      	movs	r3, #2
  }
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3728      	adds	r7, #40	; 0x28
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	080195cd 	.word	0x080195cd
 80179e0:	08019663 	.word	0x08019663
 80179e4:	080197d9 	.word	0x080197d9

080179e8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b090      	sub	sp, #64	; 0x40
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80179f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80179fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	689b      	ldr	r3, [r3, #8]
 8017a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a0a:	2b80      	cmp	r3, #128	; 0x80
 8017a0c:	d139      	bne.n	8017a82 <HAL_UART_DMAStop+0x9a>
 8017a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a10:	2b21      	cmp	r3, #33	; 0x21
 8017a12:	d136      	bne.n	8017a82 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	3308      	adds	r3, #8
 8017a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a1c:	6a3b      	ldr	r3, [r7, #32]
 8017a1e:	e853 3f00 	ldrex	r3, [r3]
 8017a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a24:	69fb      	ldr	r3, [r7, #28]
 8017a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	3308      	adds	r3, #8
 8017a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a3c:	e841 2300 	strex	r3, r2, [r1]
 8017a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d1e5      	bne.n	8017a14 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d015      	beq.n	8017a7c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7f4 fe8f 	bl	800c778 <HAL_DMA_Abort>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d00d      	beq.n	8017a7c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a64:	4618      	mov	r0, r3
 8017a66:	f7f6 fb15 	bl	800e094 <HAL_DMA_GetError>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	2b20      	cmp	r3, #32
 8017a6e:	d105      	bne.n	8017a7c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2210      	movs	r2, #16
 8017a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8017a78:	2303      	movs	r3, #3
 8017a7a:	e044      	b.n	8017b06 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f001 fcfd 	bl	801947c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	689b      	ldr	r3, [r3, #8]
 8017a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a8c:	2b40      	cmp	r3, #64	; 0x40
 8017a8e:	d139      	bne.n	8017b04 <HAL_UART_DMAStop+0x11c>
 8017a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a92:	2b22      	cmp	r3, #34	; 0x22
 8017a94:	d136      	bne.n	8017b04 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	3308      	adds	r3, #8
 8017a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	e853 3f00 	ldrex	r3, [r3]
 8017aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8017aa6:	68bb      	ldr	r3, [r7, #8]
 8017aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017aac:	633b      	str	r3, [r7, #48]	; 0x30
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	3308      	adds	r3, #8
 8017ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ab6:	61ba      	str	r2, [r7, #24]
 8017ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aba:	6979      	ldr	r1, [r7, #20]
 8017abc:	69ba      	ldr	r2, [r7, #24]
 8017abe:	e841 2300 	strex	r3, r2, [r1]
 8017ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d1e5      	bne.n	8017a96 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d015      	beq.n	8017afe <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f4 fe4e 	bl	800c778 <HAL_DMA_Abort>
 8017adc:	4603      	mov	r3, r0
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d00d      	beq.n	8017afe <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7f6 fad4 	bl	800e094 <HAL_DMA_GetError>
 8017aec:	4603      	mov	r3, r0
 8017aee:	2b20      	cmp	r3, #32
 8017af0:	d105      	bne.n	8017afe <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2210      	movs	r2, #16
 8017af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8017afa:	2303      	movs	r3, #3
 8017afc:	e003      	b.n	8017b06 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8017afe:	6878      	ldr	r0, [r7, #4]
 8017b00:	f001 fcfe 	bl	8019500 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8017b04:	2300      	movs	r3, #0
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	3740      	adds	r7, #64	; 0x40
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}
	...

08017b10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b0ba      	sub	sp, #232	; 0xe8
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	69db      	ldr	r3, [r3, #28]
 8017b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	689b      	ldr	r3, [r3, #8]
 8017b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017b36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8017b3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8017b3e:	4013      	ands	r3, r2
 8017b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8017b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d11b      	bne.n	8017b84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b50:	f003 0320 	and.w	r3, r3, #32
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d015      	beq.n	8017b84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b5c:	f003 0320 	and.w	r3, r3, #32
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d105      	bne.n	8017b70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d009      	beq.n	8017b84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	f000 835a 	beq.w	801822e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	4798      	blx	r3
      }
      return;
 8017b82:	e354      	b.n	801822e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	f000 811f 	beq.w	8017dcc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017b8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8017b92:	4b8b      	ldr	r3, [pc, #556]	; (8017dc0 <HAL_UART_IRQHandler+0x2b0>)
 8017b94:	4013      	ands	r3, r2
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d106      	bne.n	8017ba8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017b9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017b9e:	4b89      	ldr	r3, [pc, #548]	; (8017dc4 <HAL_UART_IRQHandler+0x2b4>)
 8017ba0:	4013      	ands	r3, r2
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	f000 8112 	beq.w	8017dcc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017bac:	f003 0301 	and.w	r3, r3, #1
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d011      	beq.n	8017bd8 <HAL_UART_IRQHandler+0xc8>
 8017bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d00b      	beq.n	8017bd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	2201      	movs	r2, #1
 8017bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017bce:	f043 0201 	orr.w	r2, r3, #1
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017bdc:	f003 0302 	and.w	r3, r3, #2
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d011      	beq.n	8017c08 <HAL_UART_IRQHandler+0xf8>
 8017be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017be8:	f003 0301 	and.w	r3, r3, #1
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d00b      	beq.n	8017c08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	2202      	movs	r2, #2
 8017bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017bfe:	f043 0204 	orr.w	r2, r3, #4
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c0c:	f003 0304 	and.w	r3, r3, #4
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d011      	beq.n	8017c38 <HAL_UART_IRQHandler+0x128>
 8017c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017c18:	f003 0301 	and.w	r3, r3, #1
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d00b      	beq.n	8017c38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2204      	movs	r2, #4
 8017c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017c2e:	f043 0202 	orr.w	r2, r3, #2
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c3c:	f003 0308 	and.w	r3, r3, #8
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d017      	beq.n	8017c74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c48:	f003 0320 	and.w	r3, r3, #32
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d105      	bne.n	8017c5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8017c54:	4b5a      	ldr	r3, [pc, #360]	; (8017dc0 <HAL_UART_IRQHandler+0x2b0>)
 8017c56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d00b      	beq.n	8017c74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2208      	movs	r2, #8
 8017c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017c6a:	f043 0208 	orr.w	r2, r3, #8
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d012      	beq.n	8017ca6 <HAL_UART_IRQHandler+0x196>
 8017c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d00c      	beq.n	8017ca6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017c94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017c9c:	f043 0220 	orr.w	r2, r3, #32
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	f000 82c0 	beq.w	8018232 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017cb6:	f003 0320 	and.w	r3, r3, #32
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d013      	beq.n	8017ce6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017cc2:	f003 0320 	and.w	r3, r3, #32
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d105      	bne.n	8017cd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d007      	beq.n	8017ce6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d003      	beq.n	8017ce6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ce2:	6878      	ldr	r0, [r7, #4]
 8017ce4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017cec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	689b      	ldr	r3, [r3, #8]
 8017cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017cfa:	2b40      	cmp	r3, #64	; 0x40
 8017cfc:	d005      	beq.n	8017d0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017d02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d04f      	beq.n	8017daa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f001 fbf8 	bl	8019500 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	689b      	ldr	r3, [r3, #8]
 8017d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d1a:	2b40      	cmp	r3, #64	; 0x40
 8017d1c:	d141      	bne.n	8017da2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	3308      	adds	r3, #8
 8017d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017d2c:	e853 3f00 	ldrex	r3, [r3]
 8017d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8017d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	3308      	adds	r3, #8
 8017d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8017d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8017d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017d5a:	e841 2300 	strex	r3, r2, [r1]
 8017d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d1d9      	bne.n	8017d1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d013      	beq.n	8017d9a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d76:	4a14      	ldr	r2, [pc, #80]	; (8017dc8 <HAL_UART_IRQHandler+0x2b8>)
 8017d78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7f5 f818 	bl	800cdb4 <HAL_DMA_Abort_IT>
 8017d84:	4603      	mov	r3, r0
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d017      	beq.n	8017dba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d90:	687a      	ldr	r2, [r7, #4]
 8017d92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8017d94:	4610      	mov	r0, r2
 8017d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d98:	e00f      	b.n	8017dba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017d9a:	6878      	ldr	r0, [r7, #4]
 8017d9c:	f000 fa74 	bl	8018288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017da0:	e00b      	b.n	8017dba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017da2:	6878      	ldr	r0, [r7, #4]
 8017da4:	f000 fa70 	bl	8018288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017da8:	e007      	b.n	8017dba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f000 fa6c 	bl	8018288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	2200      	movs	r2, #0
 8017db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8017db8:	e23b      	b.n	8018232 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017dba:	bf00      	nop
    return;
 8017dbc:	e239      	b.n	8018232 <HAL_UART_IRQHandler+0x722>
 8017dbe:	bf00      	nop
 8017dc0:	10000001 	.word	0x10000001
 8017dc4:	04000120 	.word	0x04000120
 8017dc8:	08019859 	.word	0x08019859

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	f040 81ce 	bne.w	8018172 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017dda:	f003 0310 	and.w	r3, r3, #16
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	f000 81c7 	beq.w	8018172 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017de8:	f003 0310 	and.w	r3, r3, #16
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	f000 81c0 	beq.w	8018172 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	2210      	movs	r2, #16
 8017df8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	689b      	ldr	r3, [r3, #8]
 8017e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e04:	2b40      	cmp	r3, #64	; 0x40
 8017e06:	f040 813b 	bne.w	8018080 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	4a8b      	ldr	r2, [pc, #556]	; (8018040 <HAL_UART_IRQHandler+0x530>)
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d059      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	4a89      	ldr	r2, [pc, #548]	; (8018044 <HAL_UART_IRQHandler+0x534>)
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d053      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4a87      	ldr	r2, [pc, #540]	; (8018048 <HAL_UART_IRQHandler+0x538>)
 8017e2a:	4293      	cmp	r3, r2
 8017e2c:	d04d      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	4a85      	ldr	r2, [pc, #532]	; (801804c <HAL_UART_IRQHandler+0x53c>)
 8017e36:	4293      	cmp	r3, r2
 8017e38:	d047      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	4a83      	ldr	r2, [pc, #524]	; (8018050 <HAL_UART_IRQHandler+0x540>)
 8017e42:	4293      	cmp	r3, r2
 8017e44:	d041      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	4a81      	ldr	r2, [pc, #516]	; (8018054 <HAL_UART_IRQHandler+0x544>)
 8017e4e:	4293      	cmp	r3, r2
 8017e50:	d03b      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	4a7f      	ldr	r2, [pc, #508]	; (8018058 <HAL_UART_IRQHandler+0x548>)
 8017e5a:	4293      	cmp	r3, r2
 8017e5c:	d035      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	4a7d      	ldr	r2, [pc, #500]	; (801805c <HAL_UART_IRQHandler+0x54c>)
 8017e66:	4293      	cmp	r3, r2
 8017e68:	d02f      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	4a7b      	ldr	r2, [pc, #492]	; (8018060 <HAL_UART_IRQHandler+0x550>)
 8017e72:	4293      	cmp	r3, r2
 8017e74:	d029      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	4a79      	ldr	r2, [pc, #484]	; (8018064 <HAL_UART_IRQHandler+0x554>)
 8017e7e:	4293      	cmp	r3, r2
 8017e80:	d023      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	4a77      	ldr	r2, [pc, #476]	; (8018068 <HAL_UART_IRQHandler+0x558>)
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	d01d      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	4a75      	ldr	r2, [pc, #468]	; (801806c <HAL_UART_IRQHandler+0x55c>)
 8017e96:	4293      	cmp	r3, r2
 8017e98:	d017      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	4a73      	ldr	r2, [pc, #460]	; (8018070 <HAL_UART_IRQHandler+0x560>)
 8017ea2:	4293      	cmp	r3, r2
 8017ea4:	d011      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	4a71      	ldr	r2, [pc, #452]	; (8018074 <HAL_UART_IRQHandler+0x564>)
 8017eae:	4293      	cmp	r3, r2
 8017eb0:	d00b      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	4a6f      	ldr	r2, [pc, #444]	; (8018078 <HAL_UART_IRQHandler+0x568>)
 8017eba:	4293      	cmp	r3, r2
 8017ebc:	d005      	beq.n	8017eca <HAL_UART_IRQHandler+0x3ba>
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	4a6d      	ldr	r2, [pc, #436]	; (801807c <HAL_UART_IRQHandler+0x56c>)
 8017ec6:	4293      	cmp	r3, r2
 8017ec8:	d105      	bne.n	8017ed6 <HAL_UART_IRQHandler+0x3c6>
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	685b      	ldr	r3, [r3, #4]
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	e004      	b.n	8017ee0 <HAL_UART_IRQHandler+0x3d0>
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	685b      	ldr	r3, [r3, #4]
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017ee4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	f000 81a4 	beq.w	8018236 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017ef4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	f080 819c 	bcs.w	8018236 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017f04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f0c:	69db      	ldr	r3, [r3, #28]
 8017f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017f12:	f000 8086 	beq.w	8018022 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017f22:	e853 3f00 	ldrex	r3, [r3]
 8017f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017f32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	461a      	mov	r2, r3
 8017f3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017f40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017f44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017f4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017f50:	e841 2300 	strex	r3, r2, [r1]
 8017f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d1da      	bne.n	8017f16 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	3308      	adds	r3, #8
 8017f66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017f6a:	e853 3f00 	ldrex	r3, [r3]
 8017f6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017f72:	f023 0301 	bic.w	r3, r3, #1
 8017f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	3308      	adds	r3, #8
 8017f80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017f84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017f88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017f8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017f90:	e841 2300 	strex	r3, r2, [r1]
 8017f94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d1e1      	bne.n	8017f60 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	3308      	adds	r3, #8
 8017fa2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017fa6:	e853 3f00 	ldrex	r3, [r3]
 8017faa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	3308      	adds	r3, #8
 8017fbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017fc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017fc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017fc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017fc8:	e841 2300 	strex	r3, r2, [r1]
 8017fcc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d1e3      	bne.n	8017f9c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	2220      	movs	r2, #32
 8017fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fea:	e853 3f00 	ldrex	r3, [r3]
 8017fee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ff2:	f023 0310 	bic.w	r3, r3, #16
 8017ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	461a      	mov	r2, r3
 8018000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018004:	65bb      	str	r3, [r7, #88]	; 0x58
 8018006:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018008:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801800a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801800c:	e841 2300 	strex	r3, r2, [r1]
 8018010:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8018012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018014:	2b00      	cmp	r3, #0
 8018016:	d1e4      	bne.n	8017fe2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801801c:	4618      	mov	r0, r3
 801801e:	f7f4 fbab 	bl	800c778 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801802e:	b29b      	uxth	r3, r3
 8018030:	1ad3      	subs	r3, r2, r3
 8018032:	b29b      	uxth	r3, r3
 8018034:	4619      	mov	r1, r3
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	f7ee fd0a 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801803c:	e0fb      	b.n	8018236 <HAL_UART_IRQHandler+0x726>
 801803e:	bf00      	nop
 8018040:	40020010 	.word	0x40020010
 8018044:	40020028 	.word	0x40020028
 8018048:	40020040 	.word	0x40020040
 801804c:	40020058 	.word	0x40020058
 8018050:	40020070 	.word	0x40020070
 8018054:	40020088 	.word	0x40020088
 8018058:	400200a0 	.word	0x400200a0
 801805c:	400200b8 	.word	0x400200b8
 8018060:	40020410 	.word	0x40020410
 8018064:	40020428 	.word	0x40020428
 8018068:	40020440 	.word	0x40020440
 801806c:	40020458 	.word	0x40020458
 8018070:	40020470 	.word	0x40020470
 8018074:	40020488 	.word	0x40020488
 8018078:	400204a0 	.word	0x400204a0
 801807c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801808c:	b29b      	uxth	r3, r3
 801808e:	1ad3      	subs	r3, r2, r3
 8018090:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801809a:	b29b      	uxth	r3, r3
 801809c:	2b00      	cmp	r3, #0
 801809e:	f000 80cc 	beq.w	801823a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80180a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	f000 80c7 	beq.w	801823a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b4:	e853 3f00 	ldrex	r3, [r3]
 80180b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80180ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80180c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	461a      	mov	r2, r3
 80180ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80180ce:	647b      	str	r3, [r7, #68]	; 0x44
 80180d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80180d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80180d6:	e841 2300 	strex	r3, r2, [r1]
 80180da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80180dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d1e4      	bne.n	80180ac <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	3308      	adds	r3, #8
 80180e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ec:	e853 3f00 	ldrex	r3, [r3]
 80180f0:	623b      	str	r3, [r7, #32]
   return(result);
 80180f2:	6a3a      	ldr	r2, [r7, #32]
 80180f4:	4b54      	ldr	r3, [pc, #336]	; (8018248 <HAL_UART_IRQHandler+0x738>)
 80180f6:	4013      	ands	r3, r2
 80180f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	3308      	adds	r3, #8
 8018102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018106:	633a      	str	r2, [r7, #48]	; 0x30
 8018108:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801810a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801810c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801810e:	e841 2300 	strex	r3, r2, [r1]
 8018112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018116:	2b00      	cmp	r3, #0
 8018118:	d1e3      	bne.n	80180e2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2220      	movs	r2, #32
 801811e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2200      	movs	r2, #0
 8018126:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	2200      	movs	r2, #0
 801812c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	e853 3f00 	ldrex	r3, [r3]
 801813a:	60fb      	str	r3, [r7, #12]
   return(result);
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	f023 0310 	bic.w	r3, r3, #16
 8018142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	461a      	mov	r2, r3
 801814c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018150:	61fb      	str	r3, [r7, #28]
 8018152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018154:	69b9      	ldr	r1, [r7, #24]
 8018156:	69fa      	ldr	r2, [r7, #28]
 8018158:	e841 2300 	strex	r3, r2, [r1]
 801815c:	617b      	str	r3, [r7, #20]
   return(result);
 801815e:	697b      	ldr	r3, [r7, #20]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d1e4      	bne.n	801812e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8018168:	4619      	mov	r1, r3
 801816a:	6878      	ldr	r0, [r7, #4]
 801816c:	f7ee fc70 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018170:	e063      	b.n	801823a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801817a:	2b00      	cmp	r3, #0
 801817c:	d00e      	beq.n	801819c <HAL_UART_IRQHandler+0x68c>
 801817e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018186:	2b00      	cmp	r3, #0
 8018188:	d008      	beq.n	801819c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8018192:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f001 fffd 	bl	801a194 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801819a:	e051      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801819c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80181a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d014      	beq.n	80181d2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80181a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80181ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d105      	bne.n	80181c0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80181b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80181b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d008      	beq.n	80181d2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d03a      	beq.n	801823e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	4798      	blx	r3
    }
    return;
 80181d0:	e035      	b.n	801823e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80181d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80181d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d009      	beq.n	80181f2 <HAL_UART_IRQHandler+0x6e2>
 80181de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80181e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d003      	beq.n	80181f2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80181ea:	6878      	ldr	r0, [r7, #4]
 80181ec:	f001 fb4a 	bl	8019884 <UART_EndTransmit_IT>
    return;
 80181f0:	e026      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80181f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80181f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d009      	beq.n	8018212 <HAL_UART_IRQHandler+0x702>
 80181fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018202:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018206:	2b00      	cmp	r3, #0
 8018208:	d003      	beq.n	8018212 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801820a:	6878      	ldr	r0, [r7, #4]
 801820c:	f001 ffd6 	bl	801a1bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018210:	e016      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801821a:	2b00      	cmp	r3, #0
 801821c:	d010      	beq.n	8018240 <HAL_UART_IRQHandler+0x730>
 801821e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018222:	2b00      	cmp	r3, #0
 8018224:	da0c      	bge.n	8018240 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	f001 ffbe 	bl	801a1a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801822c:	e008      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
      return;
 801822e:	bf00      	nop
 8018230:	e006      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
    return;
 8018232:	bf00      	nop
 8018234:	e004      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
      return;
 8018236:	bf00      	nop
 8018238:	e002      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
      return;
 801823a:	bf00      	nop
 801823c:	e000      	b.n	8018240 <HAL_UART_IRQHandler+0x730>
    return;
 801823e:	bf00      	nop
  }
}
 8018240:	37e8      	adds	r7, #232	; 0xe8
 8018242:	46bd      	mov	sp, r7
 8018244:	bd80      	pop	{r7, pc}
 8018246:	bf00      	nop
 8018248:	effffffe 	.word	0xeffffffe

0801824c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801824c:	b480      	push	{r7}
 801824e:	b083      	sub	sp, #12
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018254:	bf00      	nop
 8018256:	370c      	adds	r7, #12
 8018258:	46bd      	mov	sp, r7
 801825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825e:	4770      	bx	lr

08018260 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018260:	b480      	push	{r7}
 8018262:	b083      	sub	sp, #12
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8018268:	bf00      	nop
 801826a:	370c      	adds	r7, #12
 801826c:	46bd      	mov	sp, r7
 801826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018272:	4770      	bx	lr

08018274 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018274:	b480      	push	{r7}
 8018276:	b083      	sub	sp, #12
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801827c:	bf00      	nop
 801827e:	370c      	adds	r7, #12
 8018280:	46bd      	mov	sp, r7
 8018282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018286:	4770      	bx	lr

08018288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018288:	b480      	push	{r7}
 801828a:	b083      	sub	sp, #12
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018290:	bf00      	nop
 8018292:	370c      	adds	r7, #12
 8018294:	46bd      	mov	sp, r7
 8018296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829a:	4770      	bx	lr

0801829c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801829c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80182a0:	b092      	sub	sp, #72	; 0x48
 80182a2:	af00      	add	r7, sp, #0
 80182a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80182a6:	2300      	movs	r3, #0
 80182a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80182ac:	697b      	ldr	r3, [r7, #20]
 80182ae:	689a      	ldr	r2, [r3, #8]
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	691b      	ldr	r3, [r3, #16]
 80182b4:	431a      	orrs	r2, r3
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	695b      	ldr	r3, [r3, #20]
 80182ba:	431a      	orrs	r2, r3
 80182bc:	697b      	ldr	r3, [r7, #20]
 80182be:	69db      	ldr	r3, [r3, #28]
 80182c0:	4313      	orrs	r3, r2
 80182c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80182c4:	697b      	ldr	r3, [r7, #20]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	681a      	ldr	r2, [r3, #0]
 80182ca:	4bbe      	ldr	r3, [pc, #760]	; (80185c4 <UART_SetConfig+0x328>)
 80182cc:	4013      	ands	r3, r2
 80182ce:	697a      	ldr	r2, [r7, #20]
 80182d0:	6812      	ldr	r2, [r2, #0]
 80182d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80182d4:	430b      	orrs	r3, r1
 80182d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80182d8:	697b      	ldr	r3, [r7, #20]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	685b      	ldr	r3, [r3, #4]
 80182de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80182e2:	697b      	ldr	r3, [r7, #20]
 80182e4:	68da      	ldr	r2, [r3, #12]
 80182e6:	697b      	ldr	r3, [r7, #20]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	430a      	orrs	r2, r1
 80182ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80182ee:	697b      	ldr	r3, [r7, #20]
 80182f0:	699b      	ldr	r3, [r3, #24]
 80182f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80182f4:	697b      	ldr	r3, [r7, #20]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	4ab3      	ldr	r2, [pc, #716]	; (80185c8 <UART_SetConfig+0x32c>)
 80182fa:	4293      	cmp	r3, r2
 80182fc:	d004      	beq.n	8018308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	6a1b      	ldr	r3, [r3, #32]
 8018302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018304:	4313      	orrs	r3, r2
 8018306:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018308:	697b      	ldr	r3, [r7, #20]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	689a      	ldr	r2, [r3, #8]
 801830e:	4baf      	ldr	r3, [pc, #700]	; (80185cc <UART_SetConfig+0x330>)
 8018310:	4013      	ands	r3, r2
 8018312:	697a      	ldr	r2, [r7, #20]
 8018314:	6812      	ldr	r2, [r2, #0]
 8018316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018318:	430b      	orrs	r3, r1
 801831a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801831c:	697b      	ldr	r3, [r7, #20]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018322:	f023 010f 	bic.w	r1, r3, #15
 8018326:	697b      	ldr	r3, [r7, #20]
 8018328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801832a:	697b      	ldr	r3, [r7, #20]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	430a      	orrs	r2, r1
 8018330:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4aa6      	ldr	r2, [pc, #664]	; (80185d0 <UART_SetConfig+0x334>)
 8018338:	4293      	cmp	r3, r2
 801833a:	d177      	bne.n	801842c <UART_SetConfig+0x190>
 801833c:	4ba5      	ldr	r3, [pc, #660]	; (80185d4 <UART_SetConfig+0x338>)
 801833e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8018344:	2b28      	cmp	r3, #40	; 0x28
 8018346:	d86d      	bhi.n	8018424 <UART_SetConfig+0x188>
 8018348:	a201      	add	r2, pc, #4	; (adr r2, 8018350 <UART_SetConfig+0xb4>)
 801834a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801834e:	bf00      	nop
 8018350:	080183f5 	.word	0x080183f5
 8018354:	08018425 	.word	0x08018425
 8018358:	08018425 	.word	0x08018425
 801835c:	08018425 	.word	0x08018425
 8018360:	08018425 	.word	0x08018425
 8018364:	08018425 	.word	0x08018425
 8018368:	08018425 	.word	0x08018425
 801836c:	08018425 	.word	0x08018425
 8018370:	080183fd 	.word	0x080183fd
 8018374:	08018425 	.word	0x08018425
 8018378:	08018425 	.word	0x08018425
 801837c:	08018425 	.word	0x08018425
 8018380:	08018425 	.word	0x08018425
 8018384:	08018425 	.word	0x08018425
 8018388:	08018425 	.word	0x08018425
 801838c:	08018425 	.word	0x08018425
 8018390:	08018405 	.word	0x08018405
 8018394:	08018425 	.word	0x08018425
 8018398:	08018425 	.word	0x08018425
 801839c:	08018425 	.word	0x08018425
 80183a0:	08018425 	.word	0x08018425
 80183a4:	08018425 	.word	0x08018425
 80183a8:	08018425 	.word	0x08018425
 80183ac:	08018425 	.word	0x08018425
 80183b0:	0801840d 	.word	0x0801840d
 80183b4:	08018425 	.word	0x08018425
 80183b8:	08018425 	.word	0x08018425
 80183bc:	08018425 	.word	0x08018425
 80183c0:	08018425 	.word	0x08018425
 80183c4:	08018425 	.word	0x08018425
 80183c8:	08018425 	.word	0x08018425
 80183cc:	08018425 	.word	0x08018425
 80183d0:	08018415 	.word	0x08018415
 80183d4:	08018425 	.word	0x08018425
 80183d8:	08018425 	.word	0x08018425
 80183dc:	08018425 	.word	0x08018425
 80183e0:	08018425 	.word	0x08018425
 80183e4:	08018425 	.word	0x08018425
 80183e8:	08018425 	.word	0x08018425
 80183ec:	08018425 	.word	0x08018425
 80183f0:	0801841d 	.word	0x0801841d
 80183f4:	2301      	movs	r3, #1
 80183f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80183fa:	e222      	b.n	8018842 <UART_SetConfig+0x5a6>
 80183fc:	2304      	movs	r3, #4
 80183fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018402:	e21e      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018404:	2308      	movs	r3, #8
 8018406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801840a:	e21a      	b.n	8018842 <UART_SetConfig+0x5a6>
 801840c:	2310      	movs	r3, #16
 801840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018412:	e216      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018414:	2320      	movs	r3, #32
 8018416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801841a:	e212      	b.n	8018842 <UART_SetConfig+0x5a6>
 801841c:	2340      	movs	r3, #64	; 0x40
 801841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018422:	e20e      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018424:	2380      	movs	r3, #128	; 0x80
 8018426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801842a:	e20a      	b.n	8018842 <UART_SetConfig+0x5a6>
 801842c:	697b      	ldr	r3, [r7, #20]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	4a69      	ldr	r2, [pc, #420]	; (80185d8 <UART_SetConfig+0x33c>)
 8018432:	4293      	cmp	r3, r2
 8018434:	d130      	bne.n	8018498 <UART_SetConfig+0x1fc>
 8018436:	4b67      	ldr	r3, [pc, #412]	; (80185d4 <UART_SetConfig+0x338>)
 8018438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801843a:	f003 0307 	and.w	r3, r3, #7
 801843e:	2b05      	cmp	r3, #5
 8018440:	d826      	bhi.n	8018490 <UART_SetConfig+0x1f4>
 8018442:	a201      	add	r2, pc, #4	; (adr r2, 8018448 <UART_SetConfig+0x1ac>)
 8018444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018448:	08018461 	.word	0x08018461
 801844c:	08018469 	.word	0x08018469
 8018450:	08018471 	.word	0x08018471
 8018454:	08018479 	.word	0x08018479
 8018458:	08018481 	.word	0x08018481
 801845c:	08018489 	.word	0x08018489
 8018460:	2300      	movs	r3, #0
 8018462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018466:	e1ec      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018468:	2304      	movs	r3, #4
 801846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801846e:	e1e8      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018470:	2308      	movs	r3, #8
 8018472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018476:	e1e4      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018478:	2310      	movs	r3, #16
 801847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801847e:	e1e0      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018480:	2320      	movs	r3, #32
 8018482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018486:	e1dc      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018488:	2340      	movs	r3, #64	; 0x40
 801848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801848e:	e1d8      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018490:	2380      	movs	r3, #128	; 0x80
 8018492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018496:	e1d4      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	4a4f      	ldr	r2, [pc, #316]	; (80185dc <UART_SetConfig+0x340>)
 801849e:	4293      	cmp	r3, r2
 80184a0:	d130      	bne.n	8018504 <UART_SetConfig+0x268>
 80184a2:	4b4c      	ldr	r3, [pc, #304]	; (80185d4 <UART_SetConfig+0x338>)
 80184a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184a6:	f003 0307 	and.w	r3, r3, #7
 80184aa:	2b05      	cmp	r3, #5
 80184ac:	d826      	bhi.n	80184fc <UART_SetConfig+0x260>
 80184ae:	a201      	add	r2, pc, #4	; (adr r2, 80184b4 <UART_SetConfig+0x218>)
 80184b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184b4:	080184cd 	.word	0x080184cd
 80184b8:	080184d5 	.word	0x080184d5
 80184bc:	080184dd 	.word	0x080184dd
 80184c0:	080184e5 	.word	0x080184e5
 80184c4:	080184ed 	.word	0x080184ed
 80184c8:	080184f5 	.word	0x080184f5
 80184cc:	2300      	movs	r3, #0
 80184ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80184d2:	e1b6      	b.n	8018842 <UART_SetConfig+0x5a6>
 80184d4:	2304      	movs	r3, #4
 80184d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80184da:	e1b2      	b.n	8018842 <UART_SetConfig+0x5a6>
 80184dc:	2308      	movs	r3, #8
 80184de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80184e2:	e1ae      	b.n	8018842 <UART_SetConfig+0x5a6>
 80184e4:	2310      	movs	r3, #16
 80184e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80184ea:	e1aa      	b.n	8018842 <UART_SetConfig+0x5a6>
 80184ec:	2320      	movs	r3, #32
 80184ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80184f2:	e1a6      	b.n	8018842 <UART_SetConfig+0x5a6>
 80184f4:	2340      	movs	r3, #64	; 0x40
 80184f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80184fa:	e1a2      	b.n	8018842 <UART_SetConfig+0x5a6>
 80184fc:	2380      	movs	r3, #128	; 0x80
 80184fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018502:	e19e      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018504:	697b      	ldr	r3, [r7, #20]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	4a35      	ldr	r2, [pc, #212]	; (80185e0 <UART_SetConfig+0x344>)
 801850a:	4293      	cmp	r3, r2
 801850c:	d130      	bne.n	8018570 <UART_SetConfig+0x2d4>
 801850e:	4b31      	ldr	r3, [pc, #196]	; (80185d4 <UART_SetConfig+0x338>)
 8018510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018512:	f003 0307 	and.w	r3, r3, #7
 8018516:	2b05      	cmp	r3, #5
 8018518:	d826      	bhi.n	8018568 <UART_SetConfig+0x2cc>
 801851a:	a201      	add	r2, pc, #4	; (adr r2, 8018520 <UART_SetConfig+0x284>)
 801851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018520:	08018539 	.word	0x08018539
 8018524:	08018541 	.word	0x08018541
 8018528:	08018549 	.word	0x08018549
 801852c:	08018551 	.word	0x08018551
 8018530:	08018559 	.word	0x08018559
 8018534:	08018561 	.word	0x08018561
 8018538:	2300      	movs	r3, #0
 801853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801853e:	e180      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018540:	2304      	movs	r3, #4
 8018542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018546:	e17c      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018548:	2308      	movs	r3, #8
 801854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801854e:	e178      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018550:	2310      	movs	r3, #16
 8018552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018556:	e174      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018558:	2320      	movs	r3, #32
 801855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801855e:	e170      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018560:	2340      	movs	r3, #64	; 0x40
 8018562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018566:	e16c      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018568:	2380      	movs	r3, #128	; 0x80
 801856a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801856e:	e168      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018570:	697b      	ldr	r3, [r7, #20]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4a1b      	ldr	r2, [pc, #108]	; (80185e4 <UART_SetConfig+0x348>)
 8018576:	4293      	cmp	r3, r2
 8018578:	d142      	bne.n	8018600 <UART_SetConfig+0x364>
 801857a:	4b16      	ldr	r3, [pc, #88]	; (80185d4 <UART_SetConfig+0x338>)
 801857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801857e:	f003 0307 	and.w	r3, r3, #7
 8018582:	2b05      	cmp	r3, #5
 8018584:	d838      	bhi.n	80185f8 <UART_SetConfig+0x35c>
 8018586:	a201      	add	r2, pc, #4	; (adr r2, 801858c <UART_SetConfig+0x2f0>)
 8018588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801858c:	080185a5 	.word	0x080185a5
 8018590:	080185ad 	.word	0x080185ad
 8018594:	080185b5 	.word	0x080185b5
 8018598:	080185bd 	.word	0x080185bd
 801859c:	080185e9 	.word	0x080185e9
 80185a0:	080185f1 	.word	0x080185f1
 80185a4:	2300      	movs	r3, #0
 80185a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80185aa:	e14a      	b.n	8018842 <UART_SetConfig+0x5a6>
 80185ac:	2304      	movs	r3, #4
 80185ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80185b2:	e146      	b.n	8018842 <UART_SetConfig+0x5a6>
 80185b4:	2308      	movs	r3, #8
 80185b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80185ba:	e142      	b.n	8018842 <UART_SetConfig+0x5a6>
 80185bc:	2310      	movs	r3, #16
 80185be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80185c2:	e13e      	b.n	8018842 <UART_SetConfig+0x5a6>
 80185c4:	cfff69f3 	.word	0xcfff69f3
 80185c8:	58000c00 	.word	0x58000c00
 80185cc:	11fff4ff 	.word	0x11fff4ff
 80185d0:	40011000 	.word	0x40011000
 80185d4:	58024400 	.word	0x58024400
 80185d8:	40004400 	.word	0x40004400
 80185dc:	40004800 	.word	0x40004800
 80185e0:	40004c00 	.word	0x40004c00
 80185e4:	40005000 	.word	0x40005000
 80185e8:	2320      	movs	r3, #32
 80185ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80185ee:	e128      	b.n	8018842 <UART_SetConfig+0x5a6>
 80185f0:	2340      	movs	r3, #64	; 0x40
 80185f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80185f6:	e124      	b.n	8018842 <UART_SetConfig+0x5a6>
 80185f8:	2380      	movs	r3, #128	; 0x80
 80185fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80185fe:	e120      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	4acb      	ldr	r2, [pc, #812]	; (8018934 <UART_SetConfig+0x698>)
 8018606:	4293      	cmp	r3, r2
 8018608:	d176      	bne.n	80186f8 <UART_SetConfig+0x45c>
 801860a:	4bcb      	ldr	r3, [pc, #812]	; (8018938 <UART_SetConfig+0x69c>)
 801860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801860e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8018612:	2b28      	cmp	r3, #40	; 0x28
 8018614:	d86c      	bhi.n	80186f0 <UART_SetConfig+0x454>
 8018616:	a201      	add	r2, pc, #4	; (adr r2, 801861c <UART_SetConfig+0x380>)
 8018618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801861c:	080186c1 	.word	0x080186c1
 8018620:	080186f1 	.word	0x080186f1
 8018624:	080186f1 	.word	0x080186f1
 8018628:	080186f1 	.word	0x080186f1
 801862c:	080186f1 	.word	0x080186f1
 8018630:	080186f1 	.word	0x080186f1
 8018634:	080186f1 	.word	0x080186f1
 8018638:	080186f1 	.word	0x080186f1
 801863c:	080186c9 	.word	0x080186c9
 8018640:	080186f1 	.word	0x080186f1
 8018644:	080186f1 	.word	0x080186f1
 8018648:	080186f1 	.word	0x080186f1
 801864c:	080186f1 	.word	0x080186f1
 8018650:	080186f1 	.word	0x080186f1
 8018654:	080186f1 	.word	0x080186f1
 8018658:	080186f1 	.word	0x080186f1
 801865c:	080186d1 	.word	0x080186d1
 8018660:	080186f1 	.word	0x080186f1
 8018664:	080186f1 	.word	0x080186f1
 8018668:	080186f1 	.word	0x080186f1
 801866c:	080186f1 	.word	0x080186f1
 8018670:	080186f1 	.word	0x080186f1
 8018674:	080186f1 	.word	0x080186f1
 8018678:	080186f1 	.word	0x080186f1
 801867c:	080186d9 	.word	0x080186d9
 8018680:	080186f1 	.word	0x080186f1
 8018684:	080186f1 	.word	0x080186f1
 8018688:	080186f1 	.word	0x080186f1
 801868c:	080186f1 	.word	0x080186f1
 8018690:	080186f1 	.word	0x080186f1
 8018694:	080186f1 	.word	0x080186f1
 8018698:	080186f1 	.word	0x080186f1
 801869c:	080186e1 	.word	0x080186e1
 80186a0:	080186f1 	.word	0x080186f1
 80186a4:	080186f1 	.word	0x080186f1
 80186a8:	080186f1 	.word	0x080186f1
 80186ac:	080186f1 	.word	0x080186f1
 80186b0:	080186f1 	.word	0x080186f1
 80186b4:	080186f1 	.word	0x080186f1
 80186b8:	080186f1 	.word	0x080186f1
 80186bc:	080186e9 	.word	0x080186e9
 80186c0:	2301      	movs	r3, #1
 80186c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80186c6:	e0bc      	b.n	8018842 <UART_SetConfig+0x5a6>
 80186c8:	2304      	movs	r3, #4
 80186ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80186ce:	e0b8      	b.n	8018842 <UART_SetConfig+0x5a6>
 80186d0:	2308      	movs	r3, #8
 80186d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80186d6:	e0b4      	b.n	8018842 <UART_SetConfig+0x5a6>
 80186d8:	2310      	movs	r3, #16
 80186da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80186de:	e0b0      	b.n	8018842 <UART_SetConfig+0x5a6>
 80186e0:	2320      	movs	r3, #32
 80186e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80186e6:	e0ac      	b.n	8018842 <UART_SetConfig+0x5a6>
 80186e8:	2340      	movs	r3, #64	; 0x40
 80186ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80186ee:	e0a8      	b.n	8018842 <UART_SetConfig+0x5a6>
 80186f0:	2380      	movs	r3, #128	; 0x80
 80186f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80186f6:	e0a4      	b.n	8018842 <UART_SetConfig+0x5a6>
 80186f8:	697b      	ldr	r3, [r7, #20]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	4a8f      	ldr	r2, [pc, #572]	; (801893c <UART_SetConfig+0x6a0>)
 80186fe:	4293      	cmp	r3, r2
 8018700:	d130      	bne.n	8018764 <UART_SetConfig+0x4c8>
 8018702:	4b8d      	ldr	r3, [pc, #564]	; (8018938 <UART_SetConfig+0x69c>)
 8018704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018706:	f003 0307 	and.w	r3, r3, #7
 801870a:	2b05      	cmp	r3, #5
 801870c:	d826      	bhi.n	801875c <UART_SetConfig+0x4c0>
 801870e:	a201      	add	r2, pc, #4	; (adr r2, 8018714 <UART_SetConfig+0x478>)
 8018710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018714:	0801872d 	.word	0x0801872d
 8018718:	08018735 	.word	0x08018735
 801871c:	0801873d 	.word	0x0801873d
 8018720:	08018745 	.word	0x08018745
 8018724:	0801874d 	.word	0x0801874d
 8018728:	08018755 	.word	0x08018755
 801872c:	2300      	movs	r3, #0
 801872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018732:	e086      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018734:	2304      	movs	r3, #4
 8018736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801873a:	e082      	b.n	8018842 <UART_SetConfig+0x5a6>
 801873c:	2308      	movs	r3, #8
 801873e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018742:	e07e      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018744:	2310      	movs	r3, #16
 8018746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801874a:	e07a      	b.n	8018842 <UART_SetConfig+0x5a6>
 801874c:	2320      	movs	r3, #32
 801874e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018752:	e076      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018754:	2340      	movs	r3, #64	; 0x40
 8018756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801875a:	e072      	b.n	8018842 <UART_SetConfig+0x5a6>
 801875c:	2380      	movs	r3, #128	; 0x80
 801875e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018762:	e06e      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	4a75      	ldr	r2, [pc, #468]	; (8018940 <UART_SetConfig+0x6a4>)
 801876a:	4293      	cmp	r3, r2
 801876c:	d130      	bne.n	80187d0 <UART_SetConfig+0x534>
 801876e:	4b72      	ldr	r3, [pc, #456]	; (8018938 <UART_SetConfig+0x69c>)
 8018770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018772:	f003 0307 	and.w	r3, r3, #7
 8018776:	2b05      	cmp	r3, #5
 8018778:	d826      	bhi.n	80187c8 <UART_SetConfig+0x52c>
 801877a:	a201      	add	r2, pc, #4	; (adr r2, 8018780 <UART_SetConfig+0x4e4>)
 801877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018780:	08018799 	.word	0x08018799
 8018784:	080187a1 	.word	0x080187a1
 8018788:	080187a9 	.word	0x080187a9
 801878c:	080187b1 	.word	0x080187b1
 8018790:	080187b9 	.word	0x080187b9
 8018794:	080187c1 	.word	0x080187c1
 8018798:	2300      	movs	r3, #0
 801879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801879e:	e050      	b.n	8018842 <UART_SetConfig+0x5a6>
 80187a0:	2304      	movs	r3, #4
 80187a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80187a6:	e04c      	b.n	8018842 <UART_SetConfig+0x5a6>
 80187a8:	2308      	movs	r3, #8
 80187aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80187ae:	e048      	b.n	8018842 <UART_SetConfig+0x5a6>
 80187b0:	2310      	movs	r3, #16
 80187b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80187b6:	e044      	b.n	8018842 <UART_SetConfig+0x5a6>
 80187b8:	2320      	movs	r3, #32
 80187ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80187be:	e040      	b.n	8018842 <UART_SetConfig+0x5a6>
 80187c0:	2340      	movs	r3, #64	; 0x40
 80187c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80187c6:	e03c      	b.n	8018842 <UART_SetConfig+0x5a6>
 80187c8:	2380      	movs	r3, #128	; 0x80
 80187ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80187ce:	e038      	b.n	8018842 <UART_SetConfig+0x5a6>
 80187d0:	697b      	ldr	r3, [r7, #20]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	4a5b      	ldr	r2, [pc, #364]	; (8018944 <UART_SetConfig+0x6a8>)
 80187d6:	4293      	cmp	r3, r2
 80187d8:	d130      	bne.n	801883c <UART_SetConfig+0x5a0>
 80187da:	4b57      	ldr	r3, [pc, #348]	; (8018938 <UART_SetConfig+0x69c>)
 80187dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187de:	f003 0307 	and.w	r3, r3, #7
 80187e2:	2b05      	cmp	r3, #5
 80187e4:	d826      	bhi.n	8018834 <UART_SetConfig+0x598>
 80187e6:	a201      	add	r2, pc, #4	; (adr r2, 80187ec <UART_SetConfig+0x550>)
 80187e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187ec:	08018805 	.word	0x08018805
 80187f0:	0801880d 	.word	0x0801880d
 80187f4:	08018815 	.word	0x08018815
 80187f8:	0801881d 	.word	0x0801881d
 80187fc:	08018825 	.word	0x08018825
 8018800:	0801882d 	.word	0x0801882d
 8018804:	2302      	movs	r3, #2
 8018806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801880a:	e01a      	b.n	8018842 <UART_SetConfig+0x5a6>
 801880c:	2304      	movs	r3, #4
 801880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018812:	e016      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018814:	2308      	movs	r3, #8
 8018816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801881a:	e012      	b.n	8018842 <UART_SetConfig+0x5a6>
 801881c:	2310      	movs	r3, #16
 801881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018822:	e00e      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018824:	2320      	movs	r3, #32
 8018826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801882a:	e00a      	b.n	8018842 <UART_SetConfig+0x5a6>
 801882c:	2340      	movs	r3, #64	; 0x40
 801882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8018832:	e006      	b.n	8018842 <UART_SetConfig+0x5a6>
 8018834:	2380      	movs	r3, #128	; 0x80
 8018836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801883a:	e002      	b.n	8018842 <UART_SetConfig+0x5a6>
 801883c:	2380      	movs	r3, #128	; 0x80
 801883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	4a3f      	ldr	r2, [pc, #252]	; (8018944 <UART_SetConfig+0x6a8>)
 8018848:	4293      	cmp	r3, r2
 801884a:	f040 80f8 	bne.w	8018a3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801884e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018852:	2b20      	cmp	r3, #32
 8018854:	dc46      	bgt.n	80188e4 <UART_SetConfig+0x648>
 8018856:	2b02      	cmp	r3, #2
 8018858:	f2c0 8082 	blt.w	8018960 <UART_SetConfig+0x6c4>
 801885c:	3b02      	subs	r3, #2
 801885e:	2b1e      	cmp	r3, #30
 8018860:	d87e      	bhi.n	8018960 <UART_SetConfig+0x6c4>
 8018862:	a201      	add	r2, pc, #4	; (adr r2, 8018868 <UART_SetConfig+0x5cc>)
 8018864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018868:	080188eb 	.word	0x080188eb
 801886c:	08018961 	.word	0x08018961
 8018870:	080188f3 	.word	0x080188f3
 8018874:	08018961 	.word	0x08018961
 8018878:	08018961 	.word	0x08018961
 801887c:	08018961 	.word	0x08018961
 8018880:	08018903 	.word	0x08018903
 8018884:	08018961 	.word	0x08018961
 8018888:	08018961 	.word	0x08018961
 801888c:	08018961 	.word	0x08018961
 8018890:	08018961 	.word	0x08018961
 8018894:	08018961 	.word	0x08018961
 8018898:	08018961 	.word	0x08018961
 801889c:	08018961 	.word	0x08018961
 80188a0:	08018913 	.word	0x08018913
 80188a4:	08018961 	.word	0x08018961
 80188a8:	08018961 	.word	0x08018961
 80188ac:	08018961 	.word	0x08018961
 80188b0:	08018961 	.word	0x08018961
 80188b4:	08018961 	.word	0x08018961
 80188b8:	08018961 	.word	0x08018961
 80188bc:	08018961 	.word	0x08018961
 80188c0:	08018961 	.word	0x08018961
 80188c4:	08018961 	.word	0x08018961
 80188c8:	08018961 	.word	0x08018961
 80188cc:	08018961 	.word	0x08018961
 80188d0:	08018961 	.word	0x08018961
 80188d4:	08018961 	.word	0x08018961
 80188d8:	08018961 	.word	0x08018961
 80188dc:	08018961 	.word	0x08018961
 80188e0:	08018953 	.word	0x08018953
 80188e4:	2b40      	cmp	r3, #64	; 0x40
 80188e6:	d037      	beq.n	8018958 <UART_SetConfig+0x6bc>
 80188e8:	e03a      	b.n	8018960 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80188ea:	f7fa fb8d 	bl	8013008 <HAL_RCCEx_GetD3PCLK1Freq>
 80188ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80188f0:	e03c      	b.n	801896c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80188f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7fa fb9c 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80188fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018900:	e034      	b.n	801896c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018902:	f107 0318 	add.w	r3, r7, #24
 8018906:	4618      	mov	r0, r3
 8018908:	f7fa fce8 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801890c:	69fb      	ldr	r3, [r7, #28]
 801890e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018910:	e02c      	b.n	801896c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018912:	4b09      	ldr	r3, [pc, #36]	; (8018938 <UART_SetConfig+0x69c>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	f003 0320 	and.w	r3, r3, #32
 801891a:	2b00      	cmp	r3, #0
 801891c:	d016      	beq.n	801894c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801891e:	4b06      	ldr	r3, [pc, #24]	; (8018938 <UART_SetConfig+0x69c>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	08db      	lsrs	r3, r3, #3
 8018924:	f003 0303 	and.w	r3, r3, #3
 8018928:	4a07      	ldr	r2, [pc, #28]	; (8018948 <UART_SetConfig+0x6ac>)
 801892a:	fa22 f303 	lsr.w	r3, r2, r3
 801892e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018930:	e01c      	b.n	801896c <UART_SetConfig+0x6d0>
 8018932:	bf00      	nop
 8018934:	40011400 	.word	0x40011400
 8018938:	58024400 	.word	0x58024400
 801893c:	40007800 	.word	0x40007800
 8018940:	40007c00 	.word	0x40007c00
 8018944:	58000c00 	.word	0x58000c00
 8018948:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801894c:	4b9d      	ldr	r3, [pc, #628]	; (8018bc4 <UART_SetConfig+0x928>)
 801894e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018950:	e00c      	b.n	801896c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018952:	4b9d      	ldr	r3, [pc, #628]	; (8018bc8 <UART_SetConfig+0x92c>)
 8018954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018956:	e009      	b.n	801896c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801895c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801895e:	e005      	b.n	801896c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8018960:	2300      	movs	r3, #0
 8018962:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8018964:	2301      	movs	r3, #1
 8018966:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801896a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801896c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801896e:	2b00      	cmp	r3, #0
 8018970:	f000 81de 	beq.w	8018d30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018974:	697b      	ldr	r3, [r7, #20]
 8018976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018978:	4a94      	ldr	r2, [pc, #592]	; (8018bcc <UART_SetConfig+0x930>)
 801897a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801897e:	461a      	mov	r2, r3
 8018980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018982:	fbb3 f3f2 	udiv	r3, r3, r2
 8018986:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018988:	697b      	ldr	r3, [r7, #20]
 801898a:	685a      	ldr	r2, [r3, #4]
 801898c:	4613      	mov	r3, r2
 801898e:	005b      	lsls	r3, r3, #1
 8018990:	4413      	add	r3, r2
 8018992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018994:	429a      	cmp	r2, r3
 8018996:	d305      	bcc.n	80189a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018998:	697b      	ldr	r3, [r7, #20]
 801899a:	685b      	ldr	r3, [r3, #4]
 801899c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801899e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d903      	bls.n	80189ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80189a4:	2301      	movs	r3, #1
 80189a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80189aa:	e1c1      	b.n	8018d30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80189ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189ae:	2200      	movs	r2, #0
 80189b0:	60bb      	str	r3, [r7, #8]
 80189b2:	60fa      	str	r2, [r7, #12]
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b8:	4a84      	ldr	r2, [pc, #528]	; (8018bcc <UART_SetConfig+0x930>)
 80189ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80189be:	b29b      	uxth	r3, r3
 80189c0:	2200      	movs	r2, #0
 80189c2:	603b      	str	r3, [r7, #0]
 80189c4:	607a      	str	r2, [r7, #4]
 80189c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80189ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80189ce:	f7e7 feab 	bl	8000728 <__aeabi_uldivmod>
 80189d2:	4602      	mov	r2, r0
 80189d4:	460b      	mov	r3, r1
 80189d6:	4610      	mov	r0, r2
 80189d8:	4619      	mov	r1, r3
 80189da:	f04f 0200 	mov.w	r2, #0
 80189de:	f04f 0300 	mov.w	r3, #0
 80189e2:	020b      	lsls	r3, r1, #8
 80189e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80189e8:	0202      	lsls	r2, r0, #8
 80189ea:	6979      	ldr	r1, [r7, #20]
 80189ec:	6849      	ldr	r1, [r1, #4]
 80189ee:	0849      	lsrs	r1, r1, #1
 80189f0:	2000      	movs	r0, #0
 80189f2:	460c      	mov	r4, r1
 80189f4:	4605      	mov	r5, r0
 80189f6:	eb12 0804 	adds.w	r8, r2, r4
 80189fa:	eb43 0905 	adc.w	r9, r3, r5
 80189fe:	697b      	ldr	r3, [r7, #20]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	2200      	movs	r2, #0
 8018a04:	469a      	mov	sl, r3
 8018a06:	4693      	mov	fp, r2
 8018a08:	4652      	mov	r2, sl
 8018a0a:	465b      	mov	r3, fp
 8018a0c:	4640      	mov	r0, r8
 8018a0e:	4649      	mov	r1, r9
 8018a10:	f7e7 fe8a 	bl	8000728 <__aeabi_uldivmod>
 8018a14:	4602      	mov	r2, r0
 8018a16:	460b      	mov	r3, r1
 8018a18:	4613      	mov	r3, r2
 8018a1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018a22:	d308      	bcc.n	8018a36 <UART_SetConfig+0x79a>
 8018a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018a2a:	d204      	bcs.n	8018a36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a32:	60da      	str	r2, [r3, #12]
 8018a34:	e17c      	b.n	8018d30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8018a36:	2301      	movs	r3, #1
 8018a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8018a3c:	e178      	b.n	8018d30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018a3e:	697b      	ldr	r3, [r7, #20]
 8018a40:	69db      	ldr	r3, [r3, #28]
 8018a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018a46:	f040 80c5 	bne.w	8018bd4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8018a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018a4e:	2b20      	cmp	r3, #32
 8018a50:	dc48      	bgt.n	8018ae4 <UART_SetConfig+0x848>
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	db7b      	blt.n	8018b4e <UART_SetConfig+0x8b2>
 8018a56:	2b20      	cmp	r3, #32
 8018a58:	d879      	bhi.n	8018b4e <UART_SetConfig+0x8b2>
 8018a5a:	a201      	add	r2, pc, #4	; (adr r2, 8018a60 <UART_SetConfig+0x7c4>)
 8018a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a60:	08018aeb 	.word	0x08018aeb
 8018a64:	08018af3 	.word	0x08018af3
 8018a68:	08018b4f 	.word	0x08018b4f
 8018a6c:	08018b4f 	.word	0x08018b4f
 8018a70:	08018afb 	.word	0x08018afb
 8018a74:	08018b4f 	.word	0x08018b4f
 8018a78:	08018b4f 	.word	0x08018b4f
 8018a7c:	08018b4f 	.word	0x08018b4f
 8018a80:	08018b0b 	.word	0x08018b0b
 8018a84:	08018b4f 	.word	0x08018b4f
 8018a88:	08018b4f 	.word	0x08018b4f
 8018a8c:	08018b4f 	.word	0x08018b4f
 8018a90:	08018b4f 	.word	0x08018b4f
 8018a94:	08018b4f 	.word	0x08018b4f
 8018a98:	08018b4f 	.word	0x08018b4f
 8018a9c:	08018b4f 	.word	0x08018b4f
 8018aa0:	08018b1b 	.word	0x08018b1b
 8018aa4:	08018b4f 	.word	0x08018b4f
 8018aa8:	08018b4f 	.word	0x08018b4f
 8018aac:	08018b4f 	.word	0x08018b4f
 8018ab0:	08018b4f 	.word	0x08018b4f
 8018ab4:	08018b4f 	.word	0x08018b4f
 8018ab8:	08018b4f 	.word	0x08018b4f
 8018abc:	08018b4f 	.word	0x08018b4f
 8018ac0:	08018b4f 	.word	0x08018b4f
 8018ac4:	08018b4f 	.word	0x08018b4f
 8018ac8:	08018b4f 	.word	0x08018b4f
 8018acc:	08018b4f 	.word	0x08018b4f
 8018ad0:	08018b4f 	.word	0x08018b4f
 8018ad4:	08018b4f 	.word	0x08018b4f
 8018ad8:	08018b4f 	.word	0x08018b4f
 8018adc:	08018b4f 	.word	0x08018b4f
 8018ae0:	08018b41 	.word	0x08018b41
 8018ae4:	2b40      	cmp	r3, #64	; 0x40
 8018ae6:	d02e      	beq.n	8018b46 <UART_SetConfig+0x8aa>
 8018ae8:	e031      	b.n	8018b4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018aea:	f7f8 fe07 	bl	80116fc <HAL_RCC_GetPCLK1Freq>
 8018aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8018af0:	e033      	b.n	8018b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018af2:	f7f8 fe19 	bl	8011728 <HAL_RCC_GetPCLK2Freq>
 8018af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8018af8:	e02f      	b.n	8018b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018afe:	4618      	mov	r0, r3
 8018b00:	f7fa fa98 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018b08:	e027      	b.n	8018b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018b0a:	f107 0318 	add.w	r3, r7, #24
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f7fa fbe4 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018b14:	69fb      	ldr	r3, [r7, #28]
 8018b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018b18:	e01f      	b.n	8018b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018b1a:	4b2d      	ldr	r3, [pc, #180]	; (8018bd0 <UART_SetConfig+0x934>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f003 0320 	and.w	r3, r3, #32
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d009      	beq.n	8018b3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018b26:	4b2a      	ldr	r3, [pc, #168]	; (8018bd0 <UART_SetConfig+0x934>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	08db      	lsrs	r3, r3, #3
 8018b2c:	f003 0303 	and.w	r3, r3, #3
 8018b30:	4a24      	ldr	r2, [pc, #144]	; (8018bc4 <UART_SetConfig+0x928>)
 8018b32:	fa22 f303 	lsr.w	r3, r2, r3
 8018b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018b38:	e00f      	b.n	8018b5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018b3a:	4b22      	ldr	r3, [pc, #136]	; (8018bc4 <UART_SetConfig+0x928>)
 8018b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018b3e:	e00c      	b.n	8018b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018b40:	4b21      	ldr	r3, [pc, #132]	; (8018bc8 <UART_SetConfig+0x92c>)
 8018b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018b44:	e009      	b.n	8018b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018b4c:	e005      	b.n	8018b5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8018b52:	2301      	movs	r3, #1
 8018b54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8018b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	f000 80e7 	beq.w	8018d30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b66:	4a19      	ldr	r2, [pc, #100]	; (8018bcc <UART_SetConfig+0x930>)
 8018b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018b6c:	461a      	mov	r2, r3
 8018b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b74:	005a      	lsls	r2, r3, #1
 8018b76:	697b      	ldr	r3, [r7, #20]
 8018b78:	685b      	ldr	r3, [r3, #4]
 8018b7a:	085b      	lsrs	r3, r3, #1
 8018b7c:	441a      	add	r2, r3
 8018b7e:	697b      	ldr	r3, [r7, #20]
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8a:	2b0f      	cmp	r3, #15
 8018b8c:	d916      	bls.n	8018bbc <UART_SetConfig+0x920>
 8018b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018b94:	d212      	bcs.n	8018bbc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b98:	b29b      	uxth	r3, r3
 8018b9a:	f023 030f 	bic.w	r3, r3, #15
 8018b9e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ba2:	085b      	lsrs	r3, r3, #1
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	f003 0307 	and.w	r3, r3, #7
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8018bb2:	697b      	ldr	r3, [r7, #20]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018bb8:	60da      	str	r2, [r3, #12]
 8018bba:	e0b9      	b.n	8018d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8018bc2:	e0b5      	b.n	8018d30 <UART_SetConfig+0xa94>
 8018bc4:	03d09000 	.word	0x03d09000
 8018bc8:	003d0900 	.word	0x003d0900
 8018bcc:	08027c10 	.word	0x08027c10
 8018bd0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8018bd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018bd8:	2b20      	cmp	r3, #32
 8018bda:	dc49      	bgt.n	8018c70 <UART_SetConfig+0x9d4>
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	db7c      	blt.n	8018cda <UART_SetConfig+0xa3e>
 8018be0:	2b20      	cmp	r3, #32
 8018be2:	d87a      	bhi.n	8018cda <UART_SetConfig+0xa3e>
 8018be4:	a201      	add	r2, pc, #4	; (adr r2, 8018bec <UART_SetConfig+0x950>)
 8018be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bea:	bf00      	nop
 8018bec:	08018c77 	.word	0x08018c77
 8018bf0:	08018c7f 	.word	0x08018c7f
 8018bf4:	08018cdb 	.word	0x08018cdb
 8018bf8:	08018cdb 	.word	0x08018cdb
 8018bfc:	08018c87 	.word	0x08018c87
 8018c00:	08018cdb 	.word	0x08018cdb
 8018c04:	08018cdb 	.word	0x08018cdb
 8018c08:	08018cdb 	.word	0x08018cdb
 8018c0c:	08018c97 	.word	0x08018c97
 8018c10:	08018cdb 	.word	0x08018cdb
 8018c14:	08018cdb 	.word	0x08018cdb
 8018c18:	08018cdb 	.word	0x08018cdb
 8018c1c:	08018cdb 	.word	0x08018cdb
 8018c20:	08018cdb 	.word	0x08018cdb
 8018c24:	08018cdb 	.word	0x08018cdb
 8018c28:	08018cdb 	.word	0x08018cdb
 8018c2c:	08018ca7 	.word	0x08018ca7
 8018c30:	08018cdb 	.word	0x08018cdb
 8018c34:	08018cdb 	.word	0x08018cdb
 8018c38:	08018cdb 	.word	0x08018cdb
 8018c3c:	08018cdb 	.word	0x08018cdb
 8018c40:	08018cdb 	.word	0x08018cdb
 8018c44:	08018cdb 	.word	0x08018cdb
 8018c48:	08018cdb 	.word	0x08018cdb
 8018c4c:	08018cdb 	.word	0x08018cdb
 8018c50:	08018cdb 	.word	0x08018cdb
 8018c54:	08018cdb 	.word	0x08018cdb
 8018c58:	08018cdb 	.word	0x08018cdb
 8018c5c:	08018cdb 	.word	0x08018cdb
 8018c60:	08018cdb 	.word	0x08018cdb
 8018c64:	08018cdb 	.word	0x08018cdb
 8018c68:	08018cdb 	.word	0x08018cdb
 8018c6c:	08018ccd 	.word	0x08018ccd
 8018c70:	2b40      	cmp	r3, #64	; 0x40
 8018c72:	d02e      	beq.n	8018cd2 <UART_SetConfig+0xa36>
 8018c74:	e031      	b.n	8018cda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018c76:	f7f8 fd41 	bl	80116fc <HAL_RCC_GetPCLK1Freq>
 8018c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8018c7c:	e033      	b.n	8018ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018c7e:	f7f8 fd53 	bl	8011728 <HAL_RCC_GetPCLK2Freq>
 8018c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8018c84:	e02f      	b.n	8018ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7fa f9d2 	bl	8013034 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018c94:	e027      	b.n	8018ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018c96:	f107 0318 	add.w	r3, r7, #24
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7fa fb1e 	bl	80132dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018ca0:	69fb      	ldr	r3, [r7, #28]
 8018ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018ca4:	e01f      	b.n	8018ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018ca6:	4b2d      	ldr	r3, [pc, #180]	; (8018d5c <UART_SetConfig+0xac0>)
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	f003 0320 	and.w	r3, r3, #32
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d009      	beq.n	8018cc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018cb2:	4b2a      	ldr	r3, [pc, #168]	; (8018d5c <UART_SetConfig+0xac0>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	08db      	lsrs	r3, r3, #3
 8018cb8:	f003 0303 	and.w	r3, r3, #3
 8018cbc:	4a28      	ldr	r2, [pc, #160]	; (8018d60 <UART_SetConfig+0xac4>)
 8018cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8018cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018cc4:	e00f      	b.n	8018ce6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8018cc6:	4b26      	ldr	r3, [pc, #152]	; (8018d60 <UART_SetConfig+0xac4>)
 8018cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018cca:	e00c      	b.n	8018ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018ccc:	4b25      	ldr	r3, [pc, #148]	; (8018d64 <UART_SetConfig+0xac8>)
 8018cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018cd0:	e009      	b.n	8018ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8018cd8:	e005      	b.n	8018ce6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8018cda:	2300      	movs	r3, #0
 8018cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8018cde:	2301      	movs	r3, #1
 8018ce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8018ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8018ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d021      	beq.n	8018d30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018cec:	697b      	ldr	r3, [r7, #20]
 8018cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf0:	4a1d      	ldr	r2, [pc, #116]	; (8018d68 <UART_SetConfig+0xacc>)
 8018cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	085b      	lsrs	r3, r3, #1
 8018d04:	441a      	add	r2, r3
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d12:	2b0f      	cmp	r3, #15
 8018d14:	d909      	bls.n	8018d2a <UART_SetConfig+0xa8e>
 8018d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d1c:	d205      	bcs.n	8018d2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d20:	b29a      	uxth	r2, r3
 8018d22:	697b      	ldr	r3, [r7, #20]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	60da      	str	r2, [r3, #12]
 8018d28:	e002      	b.n	8018d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8018d2a:	2301      	movs	r3, #1
 8018d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	2201      	movs	r2, #1
 8018d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	2201      	movs	r2, #1
 8018d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	2200      	movs	r2, #0
 8018d44:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8018d46:	697b      	ldr	r3, [r7, #20]
 8018d48:	2200      	movs	r2, #0
 8018d4a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8018d4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3748      	adds	r7, #72	; 0x48
 8018d54:	46bd      	mov	sp, r7
 8018d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018d5a:	bf00      	nop
 8018d5c:	58024400 	.word	0x58024400
 8018d60:	03d09000 	.word	0x03d09000
 8018d64:	003d0900 	.word	0x003d0900
 8018d68:	08027c10 	.word	0x08027c10

08018d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d78:	f003 0301 	and.w	r3, r3, #1
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d00a      	beq.n	8018d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	430a      	orrs	r2, r1
 8018d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d9a:	f003 0302 	and.w	r3, r3, #2
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d00a      	beq.n	8018db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	430a      	orrs	r2, r1
 8018db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018dbc:	f003 0304 	and.w	r3, r3, #4
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d00a      	beq.n	8018dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	685b      	ldr	r3, [r3, #4]
 8018dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	430a      	orrs	r2, r1
 8018dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018dde:	f003 0308 	and.w	r3, r3, #8
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d00a      	beq.n	8018dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	685b      	ldr	r3, [r3, #4]
 8018dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	430a      	orrs	r2, r1
 8018dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e00:	f003 0310 	and.w	r3, r3, #16
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d00a      	beq.n	8018e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	689b      	ldr	r3, [r3, #8]
 8018e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	430a      	orrs	r2, r1
 8018e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e22:	f003 0320 	and.w	r3, r3, #32
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d00a      	beq.n	8018e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	689b      	ldr	r3, [r3, #8]
 8018e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	430a      	orrs	r2, r1
 8018e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d01a      	beq.n	8018e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	685b      	ldr	r3, [r3, #4]
 8018e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	430a      	orrs	r2, r1
 8018e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018e6a:	d10a      	bne.n	8018e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	685b      	ldr	r3, [r3, #4]
 8018e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	430a      	orrs	r2, r1
 8018e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d00a      	beq.n	8018ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	685b      	ldr	r3, [r3, #4]
 8018e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	430a      	orrs	r2, r1
 8018ea2:	605a      	str	r2, [r3, #4]
  }
}
 8018ea4:	bf00      	nop
 8018ea6:	370c      	adds	r7, #12
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eae:	4770      	bx	lr

08018eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b086      	sub	sp, #24
 8018eb4:	af02      	add	r7, sp, #8
 8018eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2200      	movs	r2, #0
 8018ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018ec0:	f7f1 f87c 	bl	8009fbc <HAL_GetTick>
 8018ec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	f003 0308 	and.w	r3, r3, #8
 8018ed0:	2b08      	cmp	r3, #8
 8018ed2:	d10e      	bne.n	8018ef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018ed8:	9300      	str	r3, [sp, #0]
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	2200      	movs	r2, #0
 8018ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018ee2:	6878      	ldr	r0, [r7, #4]
 8018ee4:	f000 f82f 	bl	8018f46 <UART_WaitOnFlagUntilTimeout>
 8018ee8:	4603      	mov	r3, r0
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d001      	beq.n	8018ef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018eee:	2303      	movs	r3, #3
 8018ef0:	e025      	b.n	8018f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	f003 0304 	and.w	r3, r3, #4
 8018efc:	2b04      	cmp	r3, #4
 8018efe:	d10e      	bne.n	8018f1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018f04:	9300      	str	r3, [sp, #0]
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f000 f819 	bl	8018f46 <UART_WaitOnFlagUntilTimeout>
 8018f14:	4603      	mov	r3, r0
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d001      	beq.n	8018f1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018f1a:	2303      	movs	r3, #3
 8018f1c:	e00f      	b.n	8018f3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2220      	movs	r2, #32
 8018f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	2220      	movs	r2, #32
 8018f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	2200      	movs	r2, #0
 8018f32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	2200      	movs	r2, #0
 8018f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018f3c:	2300      	movs	r3, #0
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	3710      	adds	r7, #16
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd80      	pop	{r7, pc}

08018f46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018f46:	b580      	push	{r7, lr}
 8018f48:	b09c      	sub	sp, #112	; 0x70
 8018f4a:	af00      	add	r7, sp, #0
 8018f4c:	60f8      	str	r0, [r7, #12]
 8018f4e:	60b9      	str	r1, [r7, #8]
 8018f50:	603b      	str	r3, [r7, #0]
 8018f52:	4613      	mov	r3, r2
 8018f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018f56:	e0a9      	b.n	80190ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f5e:	f000 80a5 	beq.w	80190ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018f62:	f7f1 f82b 	bl	8009fbc <HAL_GetTick>
 8018f66:	4602      	mov	r2, r0
 8018f68:	683b      	ldr	r3, [r7, #0]
 8018f6a:	1ad3      	subs	r3, r2, r3
 8018f6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	d302      	bcc.n	8018f78 <UART_WaitOnFlagUntilTimeout+0x32>
 8018f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d140      	bne.n	8018ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f80:	e853 3f00 	ldrex	r3, [r3]
 8018f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8018f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8018f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	461a      	mov	r2, r3
 8018f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018f98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018f9e:	e841 2300 	strex	r3, r2, [r1]
 8018fa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8018fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d1e6      	bne.n	8018f78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	3308      	adds	r3, #8
 8018fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018fb4:	e853 3f00 	ldrex	r3, [r3]
 8018fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fbc:	f023 0301 	bic.w	r3, r3, #1
 8018fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	3308      	adds	r3, #8
 8018fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018fca:	64ba      	str	r2, [r7, #72]	; 0x48
 8018fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018fd2:	e841 2300 	strex	r3, r2, [r1]
 8018fd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8018fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d1e5      	bne.n	8018faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	2220      	movs	r2, #32
 8018fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	2220      	movs	r2, #32
 8018fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8018ff6:	2303      	movs	r3, #3
 8018ff8:	e069      	b.n	80190ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	f003 0304 	and.w	r3, r3, #4
 8019004:	2b00      	cmp	r3, #0
 8019006:	d051      	beq.n	80190ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	69db      	ldr	r3, [r3, #28]
 801900e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019016:	d149      	bne.n	80190ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902a:	e853 3f00 	ldrex	r3, [r3]
 801902e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8019036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	461a      	mov	r2, r3
 801903e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019040:	637b      	str	r3, [r7, #52]	; 0x34
 8019042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019048:	e841 2300 	strex	r3, r2, [r1]
 801904c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019050:	2b00      	cmp	r3, #0
 8019052:	d1e6      	bne.n	8019022 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	3308      	adds	r3, #8
 801905a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	e853 3f00 	ldrex	r3, [r3]
 8019062:	613b      	str	r3, [r7, #16]
   return(result);
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	f023 0301 	bic.w	r3, r3, #1
 801906a:	66bb      	str	r3, [r7, #104]	; 0x68
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	3308      	adds	r3, #8
 8019072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019074:	623a      	str	r2, [r7, #32]
 8019076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019078:	69f9      	ldr	r1, [r7, #28]
 801907a:	6a3a      	ldr	r2, [r7, #32]
 801907c:	e841 2300 	strex	r3, r2, [r1]
 8019080:	61bb      	str	r3, [r7, #24]
   return(result);
 8019082:	69bb      	ldr	r3, [r7, #24]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d1e5      	bne.n	8019054 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	2220      	movs	r2, #32
 801908c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	2220      	movs	r2, #32
 8019094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	2220      	movs	r2, #32
 801909c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	2200      	movs	r2, #0
 80190a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80190a8:	2303      	movs	r3, #3
 80190aa:	e010      	b.n	80190ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	69da      	ldr	r2, [r3, #28]
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	4013      	ands	r3, r2
 80190b6:	68ba      	ldr	r2, [r7, #8]
 80190b8:	429a      	cmp	r2, r3
 80190ba:	bf0c      	ite	eq
 80190bc:	2301      	moveq	r3, #1
 80190be:	2300      	movne	r3, #0
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	461a      	mov	r2, r3
 80190c4:	79fb      	ldrb	r3, [r7, #7]
 80190c6:	429a      	cmp	r2, r3
 80190c8:	f43f af46 	beq.w	8018f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80190cc:	2300      	movs	r3, #0
}
 80190ce:	4618      	mov	r0, r3
 80190d0:	3770      	adds	r7, #112	; 0x70
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
	...

080190d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80190d8:	b480      	push	{r7}
 80190da:	b0a3      	sub	sp, #140	; 0x8c
 80190dc:	af00      	add	r7, sp, #0
 80190de:	60f8      	str	r0, [r7, #12]
 80190e0:	60b9      	str	r1, [r7, #8]
 80190e2:	4613      	mov	r3, r2
 80190e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	68ba      	ldr	r2, [r7, #8]
 80190ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	88fa      	ldrh	r2, [r7, #6]
 80190f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	88fa      	ldrh	r2, [r7, #6]
 80190f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	2200      	movs	r2, #0
 8019100:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	689b      	ldr	r3, [r3, #8]
 8019106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801910a:	d10e      	bne.n	801912a <UART_Start_Receive_IT+0x52>
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	691b      	ldr	r3, [r3, #16]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d105      	bne.n	8019120 <UART_Start_Receive_IT+0x48>
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	f240 12ff 	movw	r2, #511	; 0x1ff
 801911a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801911e:	e02d      	b.n	801917c <UART_Start_Receive_IT+0xa4>
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	22ff      	movs	r2, #255	; 0xff
 8019124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8019128:	e028      	b.n	801917c <UART_Start_Receive_IT+0xa4>
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	689b      	ldr	r3, [r3, #8]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d10d      	bne.n	801914e <UART_Start_Receive_IT+0x76>
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	691b      	ldr	r3, [r3, #16]
 8019136:	2b00      	cmp	r3, #0
 8019138:	d104      	bne.n	8019144 <UART_Start_Receive_IT+0x6c>
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	22ff      	movs	r2, #255	; 0xff
 801913e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8019142:	e01b      	b.n	801917c <UART_Start_Receive_IT+0xa4>
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	227f      	movs	r2, #127	; 0x7f
 8019148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801914c:	e016      	b.n	801917c <UART_Start_Receive_IT+0xa4>
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	689b      	ldr	r3, [r3, #8]
 8019152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8019156:	d10d      	bne.n	8019174 <UART_Start_Receive_IT+0x9c>
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	691b      	ldr	r3, [r3, #16]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d104      	bne.n	801916a <UART_Start_Receive_IT+0x92>
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	227f      	movs	r2, #127	; 0x7f
 8019164:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8019168:	e008      	b.n	801917c <UART_Start_Receive_IT+0xa4>
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	223f      	movs	r2, #63	; 0x3f
 801916e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8019172:	e003      	b.n	801917c <UART_Start_Receive_IT+0xa4>
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2200      	movs	r2, #0
 8019178:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	2200      	movs	r2, #0
 8019180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	2222      	movs	r2, #34	; 0x22
 8019188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	3308      	adds	r3, #8
 8019192:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019196:	e853 3f00 	ldrex	r3, [r3]
 801919a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801919c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801919e:	f043 0301 	orr.w	r3, r3, #1
 80191a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	3308      	adds	r3, #8
 80191ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80191b0:	673a      	str	r2, [r7, #112]	; 0x70
 80191b2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80191b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80191b8:	e841 2300 	strex	r3, r2, [r1]
 80191bc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80191be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d1e3      	bne.n	801918c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80191c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80191cc:	d153      	bne.n	8019276 <UART_Start_Receive_IT+0x19e>
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80191d4:	88fa      	ldrh	r2, [r7, #6]
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d34d      	bcc.n	8019276 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	689b      	ldr	r3, [r3, #8]
 80191de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80191e2:	d107      	bne.n	80191f4 <UART_Start_Receive_IT+0x11c>
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	691b      	ldr	r3, [r3, #16]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d103      	bne.n	80191f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	4a4b      	ldr	r2, [pc, #300]	; (801931c <UART_Start_Receive_IT+0x244>)
 80191f0:	671a      	str	r2, [r3, #112]	; 0x70
 80191f2:	e002      	b.n	80191fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	4a4a      	ldr	r2, [pc, #296]	; (8019320 <UART_Start_Receive_IT+0x248>)
 80191f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	2200      	movs	r2, #0
 80191fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	691b      	ldr	r3, [r3, #16]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d01a      	beq.n	8019240 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019212:	e853 3f00 	ldrex	r3, [r3]
 8019216:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8019218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801921a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801921e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	461a      	mov	r2, r3
 8019228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801922c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801922e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019232:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019234:	e841 2300 	strex	r3, r2, [r1]
 8019238:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801923a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801923c:	2b00      	cmp	r3, #0
 801923e:	d1e4      	bne.n	801920a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	3308      	adds	r3, #8
 8019246:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801924a:	e853 3f00 	ldrex	r3, [r3]
 801924e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019256:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	3308      	adds	r3, #8
 801925e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019260:	64ba      	str	r2, [r7, #72]	; 0x48
 8019262:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019264:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019268:	e841 2300 	strex	r3, r2, [r1]
 801926c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801926e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019270:	2b00      	cmp	r3, #0
 8019272:	d1e5      	bne.n	8019240 <UART_Start_Receive_IT+0x168>
 8019274:	e04a      	b.n	801930c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	689b      	ldr	r3, [r3, #8]
 801927a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801927e:	d107      	bne.n	8019290 <UART_Start_Receive_IT+0x1b8>
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	691b      	ldr	r3, [r3, #16]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d103      	bne.n	8019290 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	4a26      	ldr	r2, [pc, #152]	; (8019324 <UART_Start_Receive_IT+0x24c>)
 801928c:	671a      	str	r2, [r3, #112]	; 0x70
 801928e:	e002      	b.n	8019296 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	4a25      	ldr	r2, [pc, #148]	; (8019328 <UART_Start_Receive_IT+0x250>)
 8019294:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	2200      	movs	r2, #0
 801929a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	691b      	ldr	r3, [r3, #16]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d019      	beq.n	80192da <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ae:	e853 3f00 	ldrex	r3, [r3]
 80192b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80192b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80192ba:	677b      	str	r3, [r7, #116]	; 0x74
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	461a      	mov	r2, r3
 80192c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80192c4:	637b      	str	r3, [r7, #52]	; 0x34
 80192c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80192ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80192cc:	e841 2300 	strex	r3, r2, [r1]
 80192d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80192d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d1e6      	bne.n	80192a6 <UART_Start_Receive_IT+0x1ce>
 80192d8:	e018      	b.n	801930c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192e0:	697b      	ldr	r3, [r7, #20]
 80192e2:	e853 3f00 	ldrex	r3, [r3]
 80192e6:	613b      	str	r3, [r7, #16]
   return(result);
 80192e8:	693b      	ldr	r3, [r7, #16]
 80192ea:	f043 0320 	orr.w	r3, r3, #32
 80192ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	461a      	mov	r2, r3
 80192f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80192f8:	623b      	str	r3, [r7, #32]
 80192fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192fc:	69f9      	ldr	r1, [r7, #28]
 80192fe:	6a3a      	ldr	r2, [r7, #32]
 8019300:	e841 2300 	strex	r3, r2, [r1]
 8019304:	61bb      	str	r3, [r7, #24]
   return(result);
 8019306:	69bb      	ldr	r3, [r7, #24]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d1e6      	bne.n	80192da <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 801930c:	2300      	movs	r3, #0
}
 801930e:	4618      	mov	r0, r3
 8019310:	378c      	adds	r7, #140	; 0x8c
 8019312:	46bd      	mov	sp, r7
 8019314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019318:	4770      	bx	lr
 801931a:	bf00      	nop
 801931c:	08019e95 	.word	0x08019e95
 8019320:	08019b9d 	.word	0x08019b9d
 8019324:	08019a3b 	.word	0x08019a3b
 8019328:	080198db 	.word	0x080198db

0801932c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b096      	sub	sp, #88	; 0x58
 8019330:	af00      	add	r7, sp, #0
 8019332:	60f8      	str	r0, [r7, #12]
 8019334:	60b9      	str	r1, [r7, #8]
 8019336:	4613      	mov	r3, r2
 8019338:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	68ba      	ldr	r2, [r7, #8]
 801933e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	88fa      	ldrh	r2, [r7, #6]
 8019344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	2200      	movs	r2, #0
 801934c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	2222      	movs	r2, #34	; 0x22
 8019354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801935c:	2b00      	cmp	r3, #0
 801935e:	d02c      	beq.n	80193ba <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019364:	4a42      	ldr	r2, [pc, #264]	; (8019470 <UART_Start_Receive_DMA+0x144>)
 8019366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801936c:	4a41      	ldr	r2, [pc, #260]	; (8019474 <UART_Start_Receive_DMA+0x148>)
 801936e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019374:	4a40      	ldr	r2, [pc, #256]	; (8019478 <UART_Start_Receive_DMA+0x14c>)
 8019376:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801937c:	2200      	movs	r2, #0
 801937e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	3324      	adds	r3, #36	; 0x24
 801938a:	4619      	mov	r1, r3
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019390:	461a      	mov	r2, r3
 8019392:	88fb      	ldrh	r3, [r7, #6]
 8019394:	f7f2 ff86 	bl	800c2a4 <HAL_DMA_Start_IT>
 8019398:	4603      	mov	r3, r0
 801939a:	2b00      	cmp	r3, #0
 801939c:	d00d      	beq.n	80193ba <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	2210      	movs	r2, #16
 80193a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	2200      	movs	r2, #0
 80193aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	2220      	movs	r2, #32
 80193b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80193b6:	2301      	movs	r3, #1
 80193b8:	e055      	b.n	8019466 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2200      	movs	r2, #0
 80193be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	691b      	ldr	r3, [r3, #16]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d018      	beq.n	80193fc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193d2:	e853 3f00 	ldrex	r3, [r3]
 80193d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80193d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80193de:	657b      	str	r3, [r7, #84]	; 0x54
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	461a      	mov	r2, r3
 80193e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80193ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80193ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80193f0:	e841 2300 	strex	r3, r2, [r1]
 80193f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80193f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d1e6      	bne.n	80193ca <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	3308      	adds	r3, #8
 8019402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019406:	e853 3f00 	ldrex	r3, [r3]
 801940a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801940e:	f043 0301 	orr.w	r3, r3, #1
 8019412:	653b      	str	r3, [r7, #80]	; 0x50
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	3308      	adds	r3, #8
 801941a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801941c:	637a      	str	r2, [r7, #52]	; 0x34
 801941e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019424:	e841 2300 	strex	r3, r2, [r1]
 8019428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801942c:	2b00      	cmp	r3, #0
 801942e:	d1e5      	bne.n	80193fc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	3308      	adds	r3, #8
 8019436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019438:	697b      	ldr	r3, [r7, #20]
 801943a:	e853 3f00 	ldrex	r3, [r3]
 801943e:	613b      	str	r3, [r7, #16]
   return(result);
 8019440:	693b      	ldr	r3, [r7, #16]
 8019442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	3308      	adds	r3, #8
 801944e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019450:	623a      	str	r2, [r7, #32]
 8019452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019454:	69f9      	ldr	r1, [r7, #28]
 8019456:	6a3a      	ldr	r2, [r7, #32]
 8019458:	e841 2300 	strex	r3, r2, [r1]
 801945c:	61bb      	str	r3, [r7, #24]
   return(result);
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d1e5      	bne.n	8019430 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8019464:	2300      	movs	r3, #0
}
 8019466:	4618      	mov	r0, r3
 8019468:	3758      	adds	r7, #88	; 0x58
 801946a:	46bd      	mov	sp, r7
 801946c:	bd80      	pop	{r7, pc}
 801946e:	bf00      	nop
 8019470:	0801967f 	.word	0x0801967f
 8019474:	080197a1 	.word	0x080197a1
 8019478:	080197d9 	.word	0x080197d9

0801947c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801947c:	b480      	push	{r7}
 801947e:	b08f      	sub	sp, #60	; 0x3c
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801948a:	6a3b      	ldr	r3, [r7, #32]
 801948c:	e853 3f00 	ldrex	r3, [r3]
 8019490:	61fb      	str	r3, [r7, #28]
   return(result);
 8019492:	69fb      	ldr	r3, [r7, #28]
 8019494:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8019498:	637b      	str	r3, [r7, #52]	; 0x34
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	461a      	mov	r2, r3
 80194a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80194a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194aa:	e841 2300 	strex	r3, r2, [r1]
 80194ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80194b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d1e6      	bne.n	8019484 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	3308      	adds	r3, #8
 80194bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	e853 3f00 	ldrex	r3, [r3]
 80194c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80194cc:	633b      	str	r3, [r7, #48]	; 0x30
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	3308      	adds	r3, #8
 80194d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80194d6:	61ba      	str	r2, [r7, #24]
 80194d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194da:	6979      	ldr	r1, [r7, #20]
 80194dc:	69ba      	ldr	r2, [r7, #24]
 80194de:	e841 2300 	strex	r3, r2, [r1]
 80194e2:	613b      	str	r3, [r7, #16]
   return(result);
 80194e4:	693b      	ldr	r3, [r7, #16]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d1e5      	bne.n	80194b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	2220      	movs	r2, #32
 80194ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80194f2:	bf00      	nop
 80194f4:	373c      	adds	r7, #60	; 0x3c
 80194f6:	46bd      	mov	sp, r7
 80194f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fc:	4770      	bx	lr
	...

08019500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019500:	b480      	push	{r7}
 8019502:	b095      	sub	sp, #84	; 0x54
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801950e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019510:	e853 3f00 	ldrex	r3, [r3]
 8019514:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801951c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	461a      	mov	r2, r3
 8019524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019526:	643b      	str	r3, [r7, #64]	; 0x40
 8019528:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801952a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801952c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801952e:	e841 2300 	strex	r3, r2, [r1]
 8019532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019536:	2b00      	cmp	r3, #0
 8019538:	d1e6      	bne.n	8019508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	3308      	adds	r3, #8
 8019540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019542:	6a3b      	ldr	r3, [r7, #32]
 8019544:	e853 3f00 	ldrex	r3, [r3]
 8019548:	61fb      	str	r3, [r7, #28]
   return(result);
 801954a:	69fa      	ldr	r2, [r7, #28]
 801954c:	4b1e      	ldr	r3, [pc, #120]	; (80195c8 <UART_EndRxTransfer+0xc8>)
 801954e:	4013      	ands	r3, r2
 8019550:	64bb      	str	r3, [r7, #72]	; 0x48
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	3308      	adds	r3, #8
 8019558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801955a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801955c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801955e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019562:	e841 2300 	strex	r3, r2, [r1]
 8019566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801956a:	2b00      	cmp	r3, #0
 801956c:	d1e5      	bne.n	801953a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019572:	2b01      	cmp	r3, #1
 8019574:	d118      	bne.n	80195a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	e853 3f00 	ldrex	r3, [r3]
 8019582:	60bb      	str	r3, [r7, #8]
   return(result);
 8019584:	68bb      	ldr	r3, [r7, #8]
 8019586:	f023 0310 	bic.w	r3, r3, #16
 801958a:	647b      	str	r3, [r7, #68]	; 0x44
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	461a      	mov	r2, r3
 8019592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019594:	61bb      	str	r3, [r7, #24]
 8019596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019598:	6979      	ldr	r1, [r7, #20]
 801959a:	69ba      	ldr	r2, [r7, #24]
 801959c:	e841 2300 	strex	r3, r2, [r1]
 80195a0:	613b      	str	r3, [r7, #16]
   return(result);
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d1e6      	bne.n	8019576 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	2220      	movs	r2, #32
 80195ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2200      	movs	r2, #0
 80195b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2200      	movs	r2, #0
 80195ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 80195bc:	bf00      	nop
 80195be:	3754      	adds	r7, #84	; 0x54
 80195c0:	46bd      	mov	sp, r7
 80195c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c6:	4770      	bx	lr
 80195c8:	effffffe 	.word	0xeffffffe

080195cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b090      	sub	sp, #64	; 0x40
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	69db      	ldr	r3, [r3, #28]
 80195de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80195e2:	d037      	beq.n	8019654 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80195e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195e6:	2200      	movs	r2, #0
 80195e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80195ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	3308      	adds	r3, #8
 80195f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80195f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f6:	e853 3f00 	ldrex	r3, [r3]
 80195fa:	623b      	str	r3, [r7, #32]
   return(result);
 80195fc:	6a3b      	ldr	r3, [r7, #32]
 80195fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019602:	63bb      	str	r3, [r7, #56]	; 0x38
 8019604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	3308      	adds	r3, #8
 801960a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801960c:	633a      	str	r2, [r7, #48]	; 0x30
 801960e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019614:	e841 2300 	strex	r3, r2, [r1]
 8019618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801961c:	2b00      	cmp	r3, #0
 801961e:	d1e5      	bne.n	80195ec <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019626:	693b      	ldr	r3, [r7, #16]
 8019628:	e853 3f00 	ldrex	r3, [r3]
 801962c:	60fb      	str	r3, [r7, #12]
   return(result);
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019634:	637b      	str	r3, [r7, #52]	; 0x34
 8019636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	461a      	mov	r2, r3
 801963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801963e:	61fb      	str	r3, [r7, #28]
 8019640:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019642:	69b9      	ldr	r1, [r7, #24]
 8019644:	69fa      	ldr	r2, [r7, #28]
 8019646:	e841 2300 	strex	r3, r2, [r1]
 801964a:	617b      	str	r3, [r7, #20]
   return(result);
 801964c:	697b      	ldr	r3, [r7, #20]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d1e6      	bne.n	8019620 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8019652:	e002      	b.n	801965a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8019654:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019656:	f7fe fdf9 	bl	801824c <HAL_UART_TxCpltCallback>
}
 801965a:	bf00      	nop
 801965c:	3740      	adds	r7, #64	; 0x40
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}

08019662 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019662:	b580      	push	{r7, lr}
 8019664:	b084      	sub	sp, #16
 8019666:	af00      	add	r7, sp, #0
 8019668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801966e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8019670:	68f8      	ldr	r0, [r7, #12]
 8019672:	f7fe fdf5 	bl	8018260 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019676:	bf00      	nop
 8019678:	3710      	adds	r7, #16
 801967a:	46bd      	mov	sp, r7
 801967c:	bd80      	pop	{r7, pc}

0801967e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801967e:	b580      	push	{r7, lr}
 8019680:	b09c      	sub	sp, #112	; 0x70
 8019682:	af00      	add	r7, sp, #0
 8019684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801968a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	69db      	ldr	r3, [r3, #28]
 8019690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019694:	d071      	beq.n	801977a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8019696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019698:	2200      	movs	r2, #0
 801969a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801969e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196a6:	e853 3f00 	ldrex	r3, [r3]
 80196aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80196ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80196b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80196b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	461a      	mov	r2, r3
 80196ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80196bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80196be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80196c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80196c4:	e841 2300 	strex	r3, r2, [r1]
 80196c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80196ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d1e6      	bne.n	801969e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80196d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	3308      	adds	r3, #8
 80196d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196da:	e853 3f00 	ldrex	r3, [r3]
 80196de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80196e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196e2:	f023 0301 	bic.w	r3, r3, #1
 80196e6:	667b      	str	r3, [r7, #100]	; 0x64
 80196e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	3308      	adds	r3, #8
 80196ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80196f0:	647a      	str	r2, [r7, #68]	; 0x44
 80196f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80196f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80196f8:	e841 2300 	strex	r3, r2, [r1]
 80196fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80196fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019700:	2b00      	cmp	r3, #0
 8019702:	d1e5      	bne.n	80196d0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	3308      	adds	r3, #8
 801970a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801970e:	e853 3f00 	ldrex	r3, [r3]
 8019712:	623b      	str	r3, [r7, #32]
   return(result);
 8019714:	6a3b      	ldr	r3, [r7, #32]
 8019716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801971a:	663b      	str	r3, [r7, #96]	; 0x60
 801971c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	3308      	adds	r3, #8
 8019722:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019724:	633a      	str	r2, [r7, #48]	; 0x30
 8019726:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801972a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801972c:	e841 2300 	strex	r3, r2, [r1]
 8019730:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8019732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019734:	2b00      	cmp	r3, #0
 8019736:	d1e5      	bne.n	8019704 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8019738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801973a:	2220      	movs	r2, #32
 801973c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019744:	2b01      	cmp	r3, #1
 8019746:	d118      	bne.n	801977a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801974e:	693b      	ldr	r3, [r7, #16]
 8019750:	e853 3f00 	ldrex	r3, [r3]
 8019754:	60fb      	str	r3, [r7, #12]
   return(result);
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	f023 0310 	bic.w	r3, r3, #16
 801975c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801975e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	461a      	mov	r2, r3
 8019764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019766:	61fb      	str	r3, [r7, #28]
 8019768:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801976a:	69b9      	ldr	r1, [r7, #24]
 801976c:	69fa      	ldr	r2, [r7, #28]
 801976e:	e841 2300 	strex	r3, r2, [r1]
 8019772:	617b      	str	r3, [r7, #20]
   return(result);
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d1e6      	bne.n	8019748 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801977a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801977c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801977e:	2b01      	cmp	r3, #1
 8019780:	d107      	bne.n	8019792 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019788:	4619      	mov	r1, r3
 801978a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801978c:	f7ed f960 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8019790:	e002      	b.n	8019798 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8019792:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019794:	f7ed f920 	bl	80069d8 <HAL_UART_RxCpltCallback>
}
 8019798:	bf00      	nop
 801979a:	3770      	adds	r7, #112	; 0x70
 801979c:	46bd      	mov	sp, r7
 801979e:	bd80      	pop	{r7, pc}

080197a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197b2:	2b01      	cmp	r3, #1
 80197b4:	d109      	bne.n	80197ca <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80197bc:	085b      	lsrs	r3, r3, #1
 80197be:	b29b      	uxth	r3, r3
 80197c0:	4619      	mov	r1, r3
 80197c2:	68f8      	ldr	r0, [r7, #12]
 80197c4:	f7ed f944 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80197c8:	e002      	b.n	80197d0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80197ca:	68f8      	ldr	r0, [r7, #12]
 80197cc:	f7fe fd52 	bl	8018274 <HAL_UART_RxHalfCpltCallback>
}
 80197d0:	bf00      	nop
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b086      	sub	sp, #24
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80197ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80197ee:	697b      	ldr	r3, [r7, #20]
 80197f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80197f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	689b      	ldr	r3, [r3, #8]
 80197fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019800:	2b80      	cmp	r3, #128	; 0x80
 8019802:	d109      	bne.n	8019818 <UART_DMAError+0x40>
 8019804:	693b      	ldr	r3, [r7, #16]
 8019806:	2b21      	cmp	r3, #33	; 0x21
 8019808:	d106      	bne.n	8019818 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801980a:	697b      	ldr	r3, [r7, #20]
 801980c:	2200      	movs	r2, #0
 801980e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8019812:	6978      	ldr	r0, [r7, #20]
 8019814:	f7ff fe32 	bl	801947c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8019818:	697b      	ldr	r3, [r7, #20]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	689b      	ldr	r3, [r3, #8]
 801981e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019822:	2b40      	cmp	r3, #64	; 0x40
 8019824:	d109      	bne.n	801983a <UART_DMAError+0x62>
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	2b22      	cmp	r3, #34	; 0x22
 801982a:	d106      	bne.n	801983a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801982c:	697b      	ldr	r3, [r7, #20]
 801982e:	2200      	movs	r2, #0
 8019830:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8019834:	6978      	ldr	r0, [r7, #20]
 8019836:	f7ff fe63 	bl	8019500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801983a:	697b      	ldr	r3, [r7, #20]
 801983c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019840:	f043 0210 	orr.w	r2, r3, #16
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801984a:	6978      	ldr	r0, [r7, #20]
 801984c:	f7fe fd1c 	bl	8018288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019850:	bf00      	nop
 8019852:	3718      	adds	r7, #24
 8019854:	46bd      	mov	sp, r7
 8019856:	bd80      	pop	{r7, pc}

08019858 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b084      	sub	sp, #16
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	2200      	movs	r2, #0
 801986a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	2200      	movs	r2, #0
 8019872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019876:	68f8      	ldr	r0, [r7, #12]
 8019878:	f7fe fd06 	bl	8018288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801987c:	bf00      	nop
 801987e:	3710      	adds	r7, #16
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}

08019884 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b088      	sub	sp, #32
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	e853 3f00 	ldrex	r3, [r3]
 8019898:	60bb      	str	r3, [r7, #8]
   return(result);
 801989a:	68bb      	ldr	r3, [r7, #8]
 801989c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80198a0:	61fb      	str	r3, [r7, #28]
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	461a      	mov	r2, r3
 80198a8:	69fb      	ldr	r3, [r7, #28]
 80198aa:	61bb      	str	r3, [r7, #24]
 80198ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198ae:	6979      	ldr	r1, [r7, #20]
 80198b0:	69ba      	ldr	r2, [r7, #24]
 80198b2:	e841 2300 	strex	r3, r2, [r1]
 80198b6:	613b      	str	r3, [r7, #16]
   return(result);
 80198b8:	693b      	ldr	r3, [r7, #16]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d1e6      	bne.n	801988c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	2220      	movs	r2, #32
 80198c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	2200      	movs	r2, #0
 80198ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f7fe fcbd 	bl	801824c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80198d2:	bf00      	nop
 80198d4:	3720      	adds	r7, #32
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}

080198da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80198da:	b580      	push	{r7, lr}
 80198dc:	b096      	sub	sp, #88	; 0x58
 80198de:	af00      	add	r7, sp, #0
 80198e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80198e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80198f2:	2b22      	cmp	r3, #34	; 0x22
 80198f4:	f040 8095 	bne.w	8019a22 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019902:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8019906:	b2d9      	uxtb	r1, r3
 8019908:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801990c:	b2da      	uxtb	r2, r3
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019912:	400a      	ands	r2, r1
 8019914:	b2d2      	uxtb	r2, r2
 8019916:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801991c:	1c5a      	adds	r2, r3, #1
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019928:	b29b      	uxth	r3, r3
 801992a:	3b01      	subs	r3, #1
 801992c:	b29a      	uxth	r2, r3
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801993a:	b29b      	uxth	r3, r3
 801993c:	2b00      	cmp	r3, #0
 801993e:	d178      	bne.n	8019a32 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019948:	e853 3f00 	ldrex	r3, [r3]
 801994c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8019954:	653b      	str	r3, [r7, #80]	; 0x50
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	461a      	mov	r2, r3
 801995c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801995e:	647b      	str	r3, [r7, #68]	; 0x44
 8019960:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019966:	e841 2300 	strex	r3, r2, [r1]
 801996a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801996c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801996e:	2b00      	cmp	r3, #0
 8019970:	d1e6      	bne.n	8019940 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	3308      	adds	r3, #8
 8019978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801997c:	e853 3f00 	ldrex	r3, [r3]
 8019980:	623b      	str	r3, [r7, #32]
   return(result);
 8019982:	6a3b      	ldr	r3, [r7, #32]
 8019984:	f023 0301 	bic.w	r3, r3, #1
 8019988:	64fb      	str	r3, [r7, #76]	; 0x4c
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	3308      	adds	r3, #8
 8019990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019992:	633a      	str	r2, [r7, #48]	; 0x30
 8019994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801999a:	e841 2300 	strex	r3, r2, [r1]
 801999e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80199a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d1e5      	bne.n	8019972 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	2220      	movs	r2, #32
 80199aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	2200      	movs	r2, #0
 80199b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199b8:	2b01      	cmp	r3, #1
 80199ba:	d12e      	bne.n	8019a1a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	2200      	movs	r2, #0
 80199c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199c8:	693b      	ldr	r3, [r7, #16]
 80199ca:	e853 3f00 	ldrex	r3, [r3]
 80199ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	f023 0310 	bic.w	r3, r3, #16
 80199d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	461a      	mov	r2, r3
 80199de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80199e0:	61fb      	str	r3, [r7, #28]
 80199e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199e4:	69b9      	ldr	r1, [r7, #24]
 80199e6:	69fa      	ldr	r2, [r7, #28]
 80199e8:	e841 2300 	strex	r3, r2, [r1]
 80199ec:	617b      	str	r3, [r7, #20]
   return(result);
 80199ee:	697b      	ldr	r3, [r7, #20]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d1e6      	bne.n	80199c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	69db      	ldr	r3, [r3, #28]
 80199fa:	f003 0310 	and.w	r3, r3, #16
 80199fe:	2b10      	cmp	r3, #16
 8019a00:	d103      	bne.n	8019a0a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	2210      	movs	r2, #16
 8019a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019a10:	4619      	mov	r1, r3
 8019a12:	6878      	ldr	r0, [r7, #4]
 8019a14:	f7ed f81c 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019a18:	e00b      	b.n	8019a32 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8019a1a:	6878      	ldr	r0, [r7, #4]
 8019a1c:	f7ec ffdc 	bl	80069d8 <HAL_UART_RxCpltCallback>
}
 8019a20:	e007      	b.n	8019a32 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	699a      	ldr	r2, [r3, #24]
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	f042 0208 	orr.w	r2, r2, #8
 8019a30:	619a      	str	r2, [r3, #24]
}
 8019a32:	bf00      	nop
 8019a34:	3758      	adds	r7, #88	; 0x58
 8019a36:	46bd      	mov	sp, r7
 8019a38:	bd80      	pop	{r7, pc}

08019a3a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019a3a:	b580      	push	{r7, lr}
 8019a3c:	b096      	sub	sp, #88	; 0x58
 8019a3e:	af00      	add	r7, sp, #0
 8019a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019a48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a52:	2b22      	cmp	r3, #34	; 0x22
 8019a54:	f040 8095 	bne.w	8019b82 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a5e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019a66:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8019a68:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8019a6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8019a70:	4013      	ands	r3, r2
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a76:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019a7c:	1c9a      	adds	r2, r3, #2
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019a88:	b29b      	uxth	r3, r3
 8019a8a:	3b01      	subs	r3, #1
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019a9a:	b29b      	uxth	r3, r3
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d178      	bne.n	8019b92 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aa8:	e853 3f00 	ldrex	r3, [r3]
 8019aac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8019ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	461a      	mov	r2, r3
 8019abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019abe:	643b      	str	r3, [r7, #64]	; 0x40
 8019ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ac2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019ac6:	e841 2300 	strex	r3, r2, [r1]
 8019aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d1e6      	bne.n	8019aa0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	3308      	adds	r3, #8
 8019ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ada:	6a3b      	ldr	r3, [r7, #32]
 8019adc:	e853 3f00 	ldrex	r3, [r3]
 8019ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	f023 0301 	bic.w	r3, r3, #1
 8019ae8:	64bb      	str	r3, [r7, #72]	; 0x48
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	3308      	adds	r3, #8
 8019af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019afa:	e841 2300 	strex	r3, r2, [r1]
 8019afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d1e5      	bne.n	8019ad2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	2220      	movs	r2, #32
 8019b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	2200      	movs	r2, #0
 8019b12:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b18:	2b01      	cmp	r3, #1
 8019b1a:	d12e      	bne.n	8019b7a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	2200      	movs	r2, #0
 8019b20:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	e853 3f00 	ldrex	r3, [r3]
 8019b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	f023 0310 	bic.w	r3, r3, #16
 8019b36:	647b      	str	r3, [r7, #68]	; 0x44
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	461a      	mov	r2, r3
 8019b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b40:	61bb      	str	r3, [r7, #24]
 8019b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b44:	6979      	ldr	r1, [r7, #20]
 8019b46:	69ba      	ldr	r2, [r7, #24]
 8019b48:	e841 2300 	strex	r3, r2, [r1]
 8019b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8019b4e:	693b      	ldr	r3, [r7, #16]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d1e6      	bne.n	8019b22 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	69db      	ldr	r3, [r3, #28]
 8019b5a:	f003 0310 	and.w	r3, r3, #16
 8019b5e:	2b10      	cmp	r3, #16
 8019b60:	d103      	bne.n	8019b6a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	2210      	movs	r2, #16
 8019b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019b70:	4619      	mov	r1, r3
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f7ec ff6c 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019b78:	e00b      	b.n	8019b92 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8019b7a:	6878      	ldr	r0, [r7, #4]
 8019b7c:	f7ec ff2c 	bl	80069d8 <HAL_UART_RxCpltCallback>
}
 8019b80:	e007      	b.n	8019b92 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	699a      	ldr	r2, [r3, #24]
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	f042 0208 	orr.w	r2, r2, #8
 8019b90:	619a      	str	r2, [r3, #24]
}
 8019b92:	bf00      	nop
 8019b94:	3758      	adds	r7, #88	; 0x58
 8019b96:	46bd      	mov	sp, r7
 8019b98:	bd80      	pop	{r7, pc}
	...

08019b9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b0a6      	sub	sp, #152	; 0x98
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019baa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	69db      	ldr	r3, [r3, #28]
 8019bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	689b      	ldr	r3, [r3, #8]
 8019bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019bd2:	2b22      	cmp	r3, #34	; 0x22
 8019bd4:	f040 814d 	bne.w	8019e72 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019bde:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019be2:	e0f4      	b.n	8019dce <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019bee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8019bf2:	b2d9      	uxtb	r1, r3
 8019bf4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8019bf8:	b2da      	uxtb	r2, r3
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019bfe:	400a      	ands	r2, r1
 8019c00:	b2d2      	uxtb	r2, r2
 8019c02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019c08:	1c5a      	adds	r2, r3, #1
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019c14:	b29b      	uxth	r3, r3
 8019c16:	3b01      	subs	r3, #1
 8019c18:	b29a      	uxth	r2, r3
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	69db      	ldr	r3, [r3, #28]
 8019c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019c2e:	f003 0307 	and.w	r3, r3, #7
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d053      	beq.n	8019cde <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019c3a:	f003 0301 	and.w	r3, r3, #1
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d011      	beq.n	8019c66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8019c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d00b      	beq.n	8019c66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	2201      	movs	r2, #1
 8019c54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019c5c:	f043 0201 	orr.w	r2, r3, #1
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019c6a:	f003 0302 	and.w	r3, r3, #2
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d011      	beq.n	8019c96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019c76:	f003 0301 	and.w	r3, r3, #1
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d00b      	beq.n	8019c96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	2202      	movs	r2, #2
 8019c84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019c8c:	f043 0204 	orr.w	r2, r3, #4
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019c9a:	f003 0304 	and.w	r3, r3, #4
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d011      	beq.n	8019cc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019ca6:	f003 0301 	and.w	r3, r3, #1
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d00b      	beq.n	8019cc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	2204      	movs	r2, #4
 8019cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019cbc:	f043 0202 	orr.w	r2, r3, #2
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d006      	beq.n	8019cde <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019cd0:	6878      	ldr	r0, [r7, #4]
 8019cd2:	f7fe fad9 	bl	8018288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	2200      	movs	r2, #0
 8019cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d171      	bne.n	8019dce <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019cf2:	e853 3f00 	ldrex	r3, [r3]
 8019cf6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8019cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	461a      	mov	r2, r3
 8019d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8019d0e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8019d12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019d14:	e841 2300 	strex	r3, r2, [r1]
 8019d18:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8019d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d1e4      	bne.n	8019cea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	3308      	adds	r3, #8
 8019d26:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019d2a:	e853 3f00 	ldrex	r3, [r3]
 8019d2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8019d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019d32:	4b56      	ldr	r3, [pc, #344]	; (8019e8c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8019d34:	4013      	ands	r3, r2
 8019d36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	3308      	adds	r3, #8
 8019d3e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019d40:	657a      	str	r2, [r7, #84]	; 0x54
 8019d42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d44:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019d48:	e841 2300 	strex	r3, r2, [r1]
 8019d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8019d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d1e5      	bne.n	8019d20 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	2220      	movs	r2, #32
 8019d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	2200      	movs	r2, #0
 8019d60:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d66:	2b01      	cmp	r3, #1
 8019d68:	d12e      	bne.n	8019dc8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d78:	e853 3f00 	ldrex	r3, [r3]
 8019d7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d80:	f023 0310 	bic.w	r3, r3, #16
 8019d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	461a      	mov	r2, r3
 8019d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8019d90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019d96:	e841 2300 	strex	r3, r2, [r1]
 8019d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d1e6      	bne.n	8019d70 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	69db      	ldr	r3, [r3, #28]
 8019da8:	f003 0310 	and.w	r3, r3, #16
 8019dac:	2b10      	cmp	r3, #16
 8019dae:	d103      	bne.n	8019db8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	2210      	movs	r2, #16
 8019db6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019dbe:	4619      	mov	r1, r3
 8019dc0:	6878      	ldr	r0, [r7, #4]
 8019dc2:	f7ec fe45 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
 8019dc6:	e002      	b.n	8019dce <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	f7ec fe05 	bl	80069d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019dce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d006      	beq.n	8019de4 <UART_RxISR_8BIT_FIFOEN+0x248>
 8019dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019dda:	f003 0320 	and.w	r3, r3, #32
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	f47f af00 	bne.w	8019be4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019dea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019dee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d045      	beq.n	8019e82 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019dfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8019e00:	429a      	cmp	r2, r3
 8019e02:	d23e      	bcs.n	8019e82 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	3308      	adds	r3, #8
 8019e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e0c:	6a3b      	ldr	r3, [r7, #32]
 8019e0e:	e853 3f00 	ldrex	r3, [r3]
 8019e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8019e14:	69fb      	ldr	r3, [r7, #28]
 8019e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	3308      	adds	r3, #8
 8019e22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e2c:	e841 2300 	strex	r3, r2, [r1]
 8019e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d1e5      	bne.n	8019e04 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	4a15      	ldr	r2, [pc, #84]	; (8019e90 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8019e3c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	e853 3f00 	ldrex	r3, [r3]
 8019e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e4c:	68bb      	ldr	r3, [r7, #8]
 8019e4e:	f043 0320 	orr.w	r3, r3, #32
 8019e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	461a      	mov	r2, r3
 8019e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e5c:	61bb      	str	r3, [r7, #24]
 8019e5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e60:	6979      	ldr	r1, [r7, #20]
 8019e62:	69ba      	ldr	r2, [r7, #24]
 8019e64:	e841 2300 	strex	r3, r2, [r1]
 8019e68:	613b      	str	r3, [r7, #16]
   return(result);
 8019e6a:	693b      	ldr	r3, [r7, #16]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d1e6      	bne.n	8019e3e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019e70:	e007      	b.n	8019e82 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	699a      	ldr	r2, [r3, #24]
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	f042 0208 	orr.w	r2, r2, #8
 8019e80:	619a      	str	r2, [r3, #24]
}
 8019e82:	bf00      	nop
 8019e84:	3798      	adds	r7, #152	; 0x98
 8019e86:	46bd      	mov	sp, r7
 8019e88:	bd80      	pop	{r7, pc}
 8019e8a:	bf00      	nop
 8019e8c:	effffffe 	.word	0xeffffffe
 8019e90:	080198db 	.word	0x080198db

08019e94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b0a8      	sub	sp, #160	; 0xa0
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019ea2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	69db      	ldr	r3, [r3, #28]
 8019eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	689b      	ldr	r3, [r3, #8]
 8019ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019eca:	2b22      	cmp	r3, #34	; 0x22
 8019ecc:	f040 8151 	bne.w	801a172 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019ed6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019eda:	e0f8      	b.n	801a0ce <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ee2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019eea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8019eee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8019ef2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8019ef6:	4013      	ands	r3, r2
 8019ef8:	b29a      	uxth	r2, r3
 8019efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019efe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f04:	1c9a      	adds	r2, r3, #2
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	3b01      	subs	r3, #1
 8019f14:	b29a      	uxth	r2, r3
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	69db      	ldr	r3, [r3, #28]
 8019f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f2a:	f003 0307 	and.w	r3, r3, #7
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d053      	beq.n	8019fda <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f36:	f003 0301 	and.w	r3, r3, #1
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d011      	beq.n	8019f62 <UART_RxISR_16BIT_FIFOEN+0xce>
 8019f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d00b      	beq.n	8019f62 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	2201      	movs	r2, #1
 8019f50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019f58:	f043 0201 	orr.w	r2, r3, #1
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f66:	f003 0302 	and.w	r3, r3, #2
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d011      	beq.n	8019f92 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8019f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019f72:	f003 0301 	and.w	r3, r3, #1
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d00b      	beq.n	8019f92 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	2202      	movs	r2, #2
 8019f80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019f88:	f043 0204 	orr.w	r2, r3, #4
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f96:	f003 0304 	and.w	r3, r3, #4
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d011      	beq.n	8019fc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8019f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019fa2:	f003 0301 	and.w	r3, r3, #1
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d00b      	beq.n	8019fc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	2204      	movs	r2, #4
 8019fb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019fb8:	f043 0202 	orr.w	r2, r3, #2
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d006      	beq.n	8019fda <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019fcc:	6878      	ldr	r0, [r7, #4]
 8019fce:	f7fe f95b 	bl	8018288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019fe0:	b29b      	uxth	r3, r3
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d173      	bne.n	801a0ce <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019fee:	e853 3f00 	ldrex	r3, [r3]
 8019ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8019ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	461a      	mov	r2, r3
 801a004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a008:	66fb      	str	r3, [r7, #108]	; 0x6c
 801a00a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a00c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a00e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a010:	e841 2300 	strex	r3, r2, [r1]
 801a014:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801a016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d1e4      	bne.n	8019fe6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	3308      	adds	r3, #8
 801a022:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a026:	e853 3f00 	ldrex	r3, [r3]
 801a02a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801a02c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a02e:	4b57      	ldr	r3, [pc, #348]	; (801a18c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 801a030:	4013      	ands	r3, r2
 801a032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	3308      	adds	r3, #8
 801a03c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a040:	65ba      	str	r2, [r7, #88]	; 0x58
 801a042:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a048:	e841 2300 	strex	r3, r2, [r1]
 801a04c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801a04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a050:	2b00      	cmp	r3, #0
 801a052:	d1e3      	bne.n	801a01c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	2220      	movs	r2, #32
 801a058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2200      	movs	r2, #0
 801a060:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a066:	2b01      	cmp	r3, #1
 801a068:	d12e      	bne.n	801a0c8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	2200      	movs	r2, #0
 801a06e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a078:	e853 3f00 	ldrex	r3, [r3]
 801a07c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801a07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a080:	f023 0310 	bic.w	r3, r3, #16
 801a084:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	461a      	mov	r2, r3
 801a08c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a08e:	647b      	str	r3, [r7, #68]	; 0x44
 801a090:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a096:	e841 2300 	strex	r3, r2, [r1]
 801a09a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801a09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d1e6      	bne.n	801a070 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	69db      	ldr	r3, [r3, #28]
 801a0a8:	f003 0310 	and.w	r3, r3, #16
 801a0ac:	2b10      	cmp	r3, #16
 801a0ae:	d103      	bne.n	801a0b8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	2210      	movs	r2, #16
 801a0b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a0be:	4619      	mov	r1, r3
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f7ec fcc5 	bl	8006a50 <HAL_UARTEx_RxEventCallback>
 801a0c6:	e002      	b.n	801a0ce <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801a0c8:	6878      	ldr	r0, [r7, #4]
 801a0ca:	f7ec fc85 	bl	80069d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a0ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d006      	beq.n	801a0e4 <UART_RxISR_16BIT_FIFOEN+0x250>
 801a0d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a0da:	f003 0320 	and.w	r3, r3, #32
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	f47f aefc 	bne.w	8019edc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a0ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a0ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d045      	beq.n	801a182 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a0fc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801a100:	429a      	cmp	r2, r3
 801a102:	d23e      	bcs.n	801a182 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	3308      	adds	r3, #8
 801a10a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10e:	e853 3f00 	ldrex	r3, [r3]
 801a112:	623b      	str	r3, [r7, #32]
   return(result);
 801a114:	6a3b      	ldr	r3, [r7, #32]
 801a116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a11a:	677b      	str	r3, [r7, #116]	; 0x74
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	3308      	adds	r3, #8
 801a122:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a124:	633a      	str	r2, [r7, #48]	; 0x30
 801a126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a12c:	e841 2300 	strex	r3, r2, [r1]
 801a130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a134:	2b00      	cmp	r3, #0
 801a136:	d1e5      	bne.n	801a104 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	4a15      	ldr	r2, [pc, #84]	; (801a190 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801a13c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a144:	693b      	ldr	r3, [r7, #16]
 801a146:	e853 3f00 	ldrex	r3, [r3]
 801a14a:	60fb      	str	r3, [r7, #12]
   return(result);
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	f043 0320 	orr.w	r3, r3, #32
 801a152:	673b      	str	r3, [r7, #112]	; 0x70
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	461a      	mov	r2, r3
 801a15a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a15c:	61fb      	str	r3, [r7, #28]
 801a15e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a160:	69b9      	ldr	r1, [r7, #24]
 801a162:	69fa      	ldr	r2, [r7, #28]
 801a164:	e841 2300 	strex	r3, r2, [r1]
 801a168:	617b      	str	r3, [r7, #20]
   return(result);
 801a16a:	697b      	ldr	r3, [r7, #20]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d1e6      	bne.n	801a13e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a170:	e007      	b.n	801a182 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	699a      	ldr	r2, [r3, #24]
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	f042 0208 	orr.w	r2, r2, #8
 801a180:	619a      	str	r2, [r3, #24]
}
 801a182:	bf00      	nop
 801a184:	37a0      	adds	r7, #160	; 0xa0
 801a186:	46bd      	mov	sp, r7
 801a188:	bd80      	pop	{r7, pc}
 801a18a:	bf00      	nop
 801a18c:	effffffe 	.word	0xeffffffe
 801a190:	08019a3b 	.word	0x08019a3b

0801a194 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a194:	b480      	push	{r7}
 801a196:	b083      	sub	sp, #12
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a19c:	bf00      	nop
 801a19e:	370c      	adds	r7, #12
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a6:	4770      	bx	lr

0801a1a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a1a8:	b480      	push	{r7}
 801a1aa:	b083      	sub	sp, #12
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a1b0:	bf00      	nop
 801a1b2:	370c      	adds	r7, #12
 801a1b4:	46bd      	mov	sp, r7
 801a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ba:	4770      	bx	lr

0801a1bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a1bc:	b480      	push	{r7}
 801a1be:	b083      	sub	sp, #12
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a1c4:	bf00      	nop
 801a1c6:	370c      	adds	r7, #12
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ce:	4770      	bx	lr

0801a1d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a1d0:	b480      	push	{r7}
 801a1d2:	b085      	sub	sp, #20
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801a1de:	2b01      	cmp	r3, #1
 801a1e0:	d101      	bne.n	801a1e6 <HAL_UARTEx_DisableFifoMode+0x16>
 801a1e2:	2302      	movs	r3, #2
 801a1e4:	e027      	b.n	801a236 <HAL_UARTEx_DisableFifoMode+0x66>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	2201      	movs	r2, #1
 801a1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	2224      	movs	r2, #36	; 0x24
 801a1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	681a      	ldr	r2, [r3, #0]
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	f022 0201 	bic.w	r2, r2, #1
 801a20c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a214:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	2200      	movs	r2, #0
 801a21a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	68fa      	ldr	r2, [r7, #12]
 801a222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	2220      	movs	r2, #32
 801a228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	2200      	movs	r2, #0
 801a230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801a234:	2300      	movs	r3, #0
}
 801a236:	4618      	mov	r0, r3
 801a238:	3714      	adds	r7, #20
 801a23a:	46bd      	mov	sp, r7
 801a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a240:	4770      	bx	lr

0801a242 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a242:	b580      	push	{r7, lr}
 801a244:	b084      	sub	sp, #16
 801a246:	af00      	add	r7, sp, #0
 801a248:	6078      	str	r0, [r7, #4]
 801a24a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801a252:	2b01      	cmp	r3, #1
 801a254:	d101      	bne.n	801a25a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a256:	2302      	movs	r3, #2
 801a258:	e02d      	b.n	801a2b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	2201      	movs	r2, #1
 801a25e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	2224      	movs	r2, #36	; 0x24
 801a266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	681a      	ldr	r2, [r3, #0]
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	f022 0201 	bic.w	r2, r2, #1
 801a280:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	689b      	ldr	r3, [r3, #8]
 801a288:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	683a      	ldr	r2, [r7, #0]
 801a292:	430a      	orrs	r2, r1
 801a294:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a296:	6878      	ldr	r0, [r7, #4]
 801a298:	f000 f8ac 	bl	801a3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	68fa      	ldr	r2, [r7, #12]
 801a2a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	2220      	movs	r2, #32
 801a2a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801a2b4:	2300      	movs	r3, #0
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3710      	adds	r7, #16
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}

0801a2be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a2be:	b580      	push	{r7, lr}
 801a2c0:	b084      	sub	sp, #16
 801a2c2:	af00      	add	r7, sp, #0
 801a2c4:	6078      	str	r0, [r7, #4]
 801a2c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d101      	bne.n	801a2d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a2d2:	2302      	movs	r3, #2
 801a2d4:	e02d      	b.n	801a332 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	2201      	movs	r2, #1
 801a2da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	2224      	movs	r2, #36	; 0x24
 801a2e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	681a      	ldr	r2, [r3, #0]
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	f022 0201 	bic.w	r2, r2, #1
 801a2fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	689b      	ldr	r3, [r3, #8]
 801a304:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	683a      	ldr	r2, [r7, #0]
 801a30e:	430a      	orrs	r2, r1
 801a310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a312:	6878      	ldr	r0, [r7, #4]
 801a314:	f000 f86e 	bl	801a3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	68fa      	ldr	r2, [r7, #12]
 801a31e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2220      	movs	r2, #32
 801a324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	2200      	movs	r2, #0
 801a32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801a330:	2300      	movs	r3, #0
}
 801a332:	4618      	mov	r0, r3
 801a334:	3710      	adds	r7, #16
 801a336:	46bd      	mov	sp, r7
 801a338:	bd80      	pop	{r7, pc}

0801a33a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a33a:	b580      	push	{r7, lr}
 801a33c:	b08c      	sub	sp, #48	; 0x30
 801a33e:	af00      	add	r7, sp, #0
 801a340:	60f8      	str	r0, [r7, #12]
 801a342:	60b9      	str	r1, [r7, #8]
 801a344:	4613      	mov	r3, r2
 801a346:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a34e:	2b20      	cmp	r3, #32
 801a350:	d14a      	bne.n	801a3e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801a352:	68bb      	ldr	r3, [r7, #8]
 801a354:	2b00      	cmp	r3, #0
 801a356:	d002      	beq.n	801a35e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 801a358:	88fb      	ldrh	r3, [r7, #6]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d101      	bne.n	801a362 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801a35e:	2301      	movs	r3, #1
 801a360:	e043      	b.n	801a3ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801a368:	2b01      	cmp	r3, #1
 801a36a:	d101      	bne.n	801a370 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 801a36c:	2302      	movs	r3, #2
 801a36e:	e03c      	b.n	801a3ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	2201      	movs	r2, #1
 801a374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	2201      	movs	r2, #1
 801a37c:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801a37e:	88fb      	ldrh	r3, [r7, #6]
 801a380:	461a      	mov	r2, r3
 801a382:	68b9      	ldr	r1, [r7, #8]
 801a384:	68f8      	ldr	r0, [r7, #12]
 801a386:	f7fe ffd1 	bl	801932c <UART_Start_Receive_DMA>
 801a38a:	4603      	mov	r3, r0
 801a38c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801a390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a394:	2b00      	cmp	r3, #0
 801a396:	d124      	bne.n	801a3e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a39c:	2b01      	cmp	r3, #1
 801a39e:	d11d      	bne.n	801a3dc <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2210      	movs	r2, #16
 801a3a6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3ae:	69bb      	ldr	r3, [r7, #24]
 801a3b0:	e853 3f00 	ldrex	r3, [r3]
 801a3b4:	617b      	str	r3, [r7, #20]
   return(result);
 801a3b6:	697b      	ldr	r3, [r7, #20]
 801a3b8:	f043 0310 	orr.w	r3, r3, #16
 801a3bc:	62bb      	str	r3, [r7, #40]	; 0x28
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	461a      	mov	r2, r3
 801a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3c6:	627b      	str	r3, [r7, #36]	; 0x24
 801a3c8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3ca:	6a39      	ldr	r1, [r7, #32]
 801a3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3ce:	e841 2300 	strex	r3, r2, [r1]
 801a3d2:	61fb      	str	r3, [r7, #28]
   return(result);
 801a3d4:	69fb      	ldr	r3, [r7, #28]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d1e6      	bne.n	801a3a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 801a3da:	e002      	b.n	801a3e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801a3dc:	2301      	movs	r3, #1
 801a3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801a3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a3e6:	e000      	b.n	801a3ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801a3e8:	2302      	movs	r3, #2
  }
}
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	3730      	adds	r7, #48	; 0x30
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bd80      	pop	{r7, pc}
	...

0801a3f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a3f4:	b480      	push	{r7}
 801a3f6:	b085      	sub	sp, #20
 801a3f8:	af00      	add	r7, sp, #0
 801a3fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a400:	2b00      	cmp	r3, #0
 801a402:	d108      	bne.n	801a416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	2201      	movs	r2, #1
 801a408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	2201      	movs	r2, #1
 801a410:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a414:	e031      	b.n	801a47a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a416:	2310      	movs	r3, #16
 801a418:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a41a:	2310      	movs	r3, #16
 801a41c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	689b      	ldr	r3, [r3, #8]
 801a424:	0e5b      	lsrs	r3, r3, #25
 801a426:	b2db      	uxtb	r3, r3
 801a428:	f003 0307 	and.w	r3, r3, #7
 801a42c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	689b      	ldr	r3, [r3, #8]
 801a434:	0f5b      	lsrs	r3, r3, #29
 801a436:	b2db      	uxtb	r3, r3
 801a438:	f003 0307 	and.w	r3, r3, #7
 801a43c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a43e:	7bbb      	ldrb	r3, [r7, #14]
 801a440:	7b3a      	ldrb	r2, [r7, #12]
 801a442:	4911      	ldr	r1, [pc, #68]	; (801a488 <UARTEx_SetNbDataToProcess+0x94>)
 801a444:	5c8a      	ldrb	r2, [r1, r2]
 801a446:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a44a:	7b3a      	ldrb	r2, [r7, #12]
 801a44c:	490f      	ldr	r1, [pc, #60]	; (801a48c <UARTEx_SetNbDataToProcess+0x98>)
 801a44e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a450:	fb93 f3f2 	sdiv	r3, r3, r2
 801a454:	b29a      	uxth	r2, r3
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a45c:	7bfb      	ldrb	r3, [r7, #15]
 801a45e:	7b7a      	ldrb	r2, [r7, #13]
 801a460:	4909      	ldr	r1, [pc, #36]	; (801a488 <UARTEx_SetNbDataToProcess+0x94>)
 801a462:	5c8a      	ldrb	r2, [r1, r2]
 801a464:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a468:	7b7a      	ldrb	r2, [r7, #13]
 801a46a:	4908      	ldr	r1, [pc, #32]	; (801a48c <UARTEx_SetNbDataToProcess+0x98>)
 801a46c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a46e:	fb93 f3f2 	sdiv	r3, r3, r2
 801a472:	b29a      	uxth	r2, r3
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801a47a:	bf00      	nop
 801a47c:	3714      	adds	r7, #20
 801a47e:	46bd      	mov	sp, r7
 801a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a484:	4770      	bx	lr
 801a486:	bf00      	nop
 801a488:	08027c28 	.word	0x08027c28
 801a48c:	08027c30 	.word	0x08027c30

0801a490 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801a490:	b084      	sub	sp, #16
 801a492:	b480      	push	{r7}
 801a494:	b085      	sub	sp, #20
 801a496:	af00      	add	r7, sp, #0
 801a498:	6078      	str	r0, [r7, #4]
 801a49a:	f107 001c 	add.w	r0, r7, #28
 801a49e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801a4a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801a4a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801a4aa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801a4ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801a4b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 801a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801a4b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801a4b8:	68fa      	ldr	r2, [r7, #12]
 801a4ba:	4313      	orrs	r3, r2
 801a4bc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	685a      	ldr	r2, [r3, #4]
 801a4c2:	4b07      	ldr	r3, [pc, #28]	; (801a4e0 <SDMMC_Init+0x50>)
 801a4c4:	4013      	ands	r3, r2
 801a4c6:	68fa      	ldr	r2, [r7, #12]
 801a4c8:	431a      	orrs	r2, r3
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801a4ce:	2300      	movs	r3, #0
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3714      	adds	r7, #20
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4da:	b004      	add	sp, #16
 801a4dc:	4770      	bx	lr
 801a4de:	bf00      	nop
 801a4e0:	ffc02c00 	.word	0xffc02c00

0801a4e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b083      	sub	sp, #12
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	370c      	adds	r7, #12
 801a4f6:	46bd      	mov	sp, r7
 801a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fc:	4770      	bx	lr

0801a4fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801a4fe:	b480      	push	{r7}
 801a500:	b083      	sub	sp, #12
 801a502:	af00      	add	r7, sp, #0
 801a504:	6078      	str	r0, [r7, #4]
 801a506:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801a508:	683b      	ldr	r3, [r7, #0]
 801a50a:	681a      	ldr	r2, [r3, #0]
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801a512:	2300      	movs	r3, #0
}
 801a514:	4618      	mov	r0, r3
 801a516:	370c      	adds	r7, #12
 801a518:	46bd      	mov	sp, r7
 801a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51e:	4770      	bx	lr

0801a520 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801a520:	b480      	push	{r7}
 801a522:	b083      	sub	sp, #12
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	f043 0203 	orr.w	r2, r3, #3
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801a534:	2300      	movs	r3, #0
}
 801a536:	4618      	mov	r0, r3
 801a538:	370c      	adds	r7, #12
 801a53a:	46bd      	mov	sp, r7
 801a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a540:	4770      	bx	lr

0801a542 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801a542:	b480      	push	{r7}
 801a544:	b083      	sub	sp, #12
 801a546:	af00      	add	r7, sp, #0
 801a548:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	f003 0303 	and.w	r3, r3, #3
}
 801a552:	4618      	mov	r0, r3
 801a554:	370c      	adds	r7, #12
 801a556:	46bd      	mov	sp, r7
 801a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55c:	4770      	bx	lr
	...

0801a560 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801a560:	b480      	push	{r7}
 801a562:	b085      	sub	sp, #20
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801a56a:	2300      	movs	r3, #0
 801a56c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801a56e:	683b      	ldr	r3, [r7, #0]
 801a570:	681a      	ldr	r2, [r3, #0]
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801a576:	683b      	ldr	r3, [r7, #0]
 801a578:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801a57a:	683b      	ldr	r3, [r7, #0]
 801a57c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801a57e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801a580:	683b      	ldr	r3, [r7, #0]
 801a582:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801a584:	431a      	orrs	r2, r3
                       Command->CPSM);
 801a586:	683b      	ldr	r3, [r7, #0]
 801a588:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801a58a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801a58c:	68fa      	ldr	r2, [r7, #12]
 801a58e:	4313      	orrs	r3, r2
 801a590:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	68da      	ldr	r2, [r3, #12]
 801a596:	4b06      	ldr	r3, [pc, #24]	; (801a5b0 <SDMMC_SendCommand+0x50>)
 801a598:	4013      	ands	r3, r2
 801a59a:	68fa      	ldr	r2, [r7, #12]
 801a59c:	431a      	orrs	r2, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801a5a2:	2300      	movs	r3, #0
}
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	3714      	adds	r7, #20
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ae:	4770      	bx	lr
 801a5b0:	fffee0c0 	.word	0xfffee0c0

0801a5b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801a5b4:	b480      	push	{r7}
 801a5b6:	b083      	sub	sp, #12
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	691b      	ldr	r3, [r3, #16]
 801a5c0:	b2db      	uxtb	r3, r3
}
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	370c      	adds	r7, #12
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5cc:	4770      	bx	lr

0801a5ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801a5ce:	b480      	push	{r7}
 801a5d0:	b085      	sub	sp, #20
 801a5d2:	af00      	add	r7, sp, #0
 801a5d4:	6078      	str	r0, [r7, #4]
 801a5d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	3314      	adds	r3, #20
 801a5dc:	461a      	mov	r2, r3
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	4413      	add	r3, r2
 801a5e2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	681b      	ldr	r3, [r3, #0]
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3714      	adds	r7, #20
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f2:	4770      	bx	lr

0801a5f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801a5f4:	b480      	push	{r7}
 801a5f6:	b085      	sub	sp, #20
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
 801a5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801a5fe:	2300      	movs	r3, #0
 801a600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	681a      	ldr	r2, [r3, #0]
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	685a      	ldr	r2, [r3, #4]
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801a61a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801a61c:	683b      	ldr	r3, [r7, #0]
 801a61e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801a620:	431a      	orrs	r2, r3
                       Data->DPSM);
 801a622:	683b      	ldr	r3, [r7, #0]
 801a624:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801a626:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801a628:	68fa      	ldr	r2, [r7, #12]
 801a62a:	4313      	orrs	r3, r2
 801a62c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a632:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	431a      	orrs	r2, r3
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801a63e:	2300      	movs	r3, #0

}
 801a640:	4618      	mov	r0, r3
 801a642:	3714      	adds	r7, #20
 801a644:	46bd      	mov	sp, r7
 801a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64a:	4770      	bx	lr

0801a64c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b088      	sub	sp, #32
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
 801a654:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801a656:	683b      	ldr	r3, [r7, #0]
 801a658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801a65a:	2310      	movs	r3, #16
 801a65c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a65e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a664:	2300      	movs	r3, #0
 801a666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a66c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a66e:	f107 0308 	add.w	r3, r7, #8
 801a672:	4619      	mov	r1, r3
 801a674:	6878      	ldr	r0, [r7, #4]
 801a676:	f7ff ff73 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 801a67e:	2110      	movs	r1, #16
 801a680:	6878      	ldr	r0, [r7, #4]
 801a682:	f000 fa5f 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a688:	69fb      	ldr	r3, [r7, #28]
}
 801a68a:	4618      	mov	r0, r3
 801a68c:	3720      	adds	r7, #32
 801a68e:	46bd      	mov	sp, r7
 801a690:	bd80      	pop	{r7, pc}

0801a692 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801a692:	b580      	push	{r7, lr}
 801a694:	b088      	sub	sp, #32
 801a696:	af00      	add	r7, sp, #0
 801a698:	6078      	str	r0, [r7, #4]
 801a69a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801a69c:	683b      	ldr	r3, [r7, #0]
 801a69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801a6a0:	2311      	movs	r3, #17
 801a6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a6ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a6b4:	f107 0308 	add.w	r3, r7, #8
 801a6b8:	4619      	mov	r1, r3
 801a6ba:	6878      	ldr	r0, [r7, #4]
 801a6bc:	f7ff ff50 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801a6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 801a6c4:	2111      	movs	r1, #17
 801a6c6:	6878      	ldr	r0, [r7, #4]
 801a6c8:	f000 fa3c 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a6cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a6ce:	69fb      	ldr	r3, [r7, #28]
}
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	3720      	adds	r7, #32
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	bd80      	pop	{r7, pc}

0801a6d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b088      	sub	sp, #32
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
 801a6e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801a6e6:	2312      	movs	r3, #18
 801a6e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a6ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a6f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a6f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a6fa:	f107 0308 	add.w	r3, r7, #8
 801a6fe:	4619      	mov	r1, r3
 801a700:	6878      	ldr	r0, [r7, #4]
 801a702:	f7ff ff2d 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801a706:	f241 3288 	movw	r2, #5000	; 0x1388
 801a70a:	2112      	movs	r1, #18
 801a70c:	6878      	ldr	r0, [r7, #4]
 801a70e:	f000 fa19 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a714:	69fb      	ldr	r3, [r7, #28]
}
 801a716:	4618      	mov	r0, r3
 801a718:	3720      	adds	r7, #32
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}

0801a71e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801a71e:	b580      	push	{r7, lr}
 801a720:	b088      	sub	sp, #32
 801a722:	af00      	add	r7, sp, #0
 801a724:	6078      	str	r0, [r7, #4]
 801a726:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801a728:	683b      	ldr	r3, [r7, #0]
 801a72a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801a72c:	2318      	movs	r3, #24
 801a72e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a730:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a736:	2300      	movs	r3, #0
 801a738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a740:	f107 0308 	add.w	r3, r7, #8
 801a744:	4619      	mov	r1, r3
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f7ff ff0a 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801a74c:	f241 3288 	movw	r2, #5000	; 0x1388
 801a750:	2118      	movs	r1, #24
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	f000 f9f6 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a75a:	69fb      	ldr	r3, [r7, #28]
}
 801a75c:	4618      	mov	r0, r3
 801a75e:	3720      	adds	r7, #32
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}

0801a764 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b088      	sub	sp, #32
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
 801a76c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801a772:	2319      	movs	r3, #25
 801a774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a776:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a77a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a77c:	2300      	movs	r3, #0
 801a77e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a786:	f107 0308 	add.w	r3, r7, #8
 801a78a:	4619      	mov	r1, r3
 801a78c:	6878      	ldr	r0, [r7, #4]
 801a78e:	f7ff fee7 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801a792:	f241 3288 	movw	r2, #5000	; 0x1388
 801a796:	2119      	movs	r1, #25
 801a798:	6878      	ldr	r0, [r7, #4]
 801a79a:	f000 f9d3 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a79e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a7a0:	69fb      	ldr	r3, [r7, #28]
}
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	3720      	adds	r7, #32
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	bd80      	pop	{r7, pc}
	...

0801a7ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b088      	sub	sp, #32
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801a7b8:	230c      	movs	r3, #12
 801a7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a7bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a7c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a7ca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	68db      	ldr	r3, [r3, #12]
 801a7d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	68db      	ldr	r3, [r3, #12]
 801a7dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a7e4:	f107 0308 	add.w	r3, r7, #8
 801a7e8:	4619      	mov	r1, r3
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	f7ff feb8 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801a7f0:	4a0b      	ldr	r2, [pc, #44]	; (801a820 <SDMMC_CmdStopTransfer+0x74>)
 801a7f2:	210c      	movs	r1, #12
 801a7f4:	6878      	ldr	r0, [r7, #4]
 801a7f6:	f000 f9a5 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a7fa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	68db      	ldr	r3, [r3, #12]
 801a800:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801a808:	69fb      	ldr	r3, [r7, #28]
 801a80a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801a80e:	d101      	bne.n	801a814 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801a810:	2300      	movs	r3, #0
 801a812:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801a814:	69fb      	ldr	r3, [r7, #28]
}
 801a816:	4618      	mov	r0, r3
 801a818:	3720      	adds	r7, #32
 801a81a:	46bd      	mov	sp, r7
 801a81c:	bd80      	pop	{r7, pc}
 801a81e:	bf00      	nop
 801a820:	05f5e100 	.word	0x05f5e100

0801a824 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b088      	sub	sp, #32
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801a832:	2307      	movs	r3, #7
 801a834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a836:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a83c:	2300      	movs	r3, #0
 801a83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a846:	f107 0308 	add.w	r3, r7, #8
 801a84a:	4619      	mov	r1, r3
 801a84c:	6878      	ldr	r0, [r7, #4]
 801a84e:	f7ff fe87 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801a852:	f241 3288 	movw	r2, #5000	; 0x1388
 801a856:	2107      	movs	r1, #7
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	f000 f973 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a85e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a860:	69fb      	ldr	r3, [r7, #28]
}
 801a862:	4618      	mov	r0, r3
 801a864:	3720      	adds	r7, #32
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}

0801a86a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801a86a:	b580      	push	{r7, lr}
 801a86c:	b088      	sub	sp, #32
 801a86e:	af00      	add	r7, sp, #0
 801a870:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801a872:	2300      	movs	r3, #0
 801a874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801a876:	2300      	movs	r3, #0
 801a878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801a87a:	2300      	movs	r3, #0
 801a87c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a87e:	2300      	movs	r3, #0
 801a880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a886:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a888:	f107 0308 	add.w	r3, r7, #8
 801a88c:	4619      	mov	r1, r3
 801a88e:	6878      	ldr	r0, [r7, #4]
 801a890:	f7ff fe66 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801a894:	6878      	ldr	r0, [r7, #4]
 801a896:	f000 fb97 	bl	801afc8 <SDMMC_GetCmdError>
 801a89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a89c:	69fb      	ldr	r3, [r7, #28]
}
 801a89e:	4618      	mov	r0, r3
 801a8a0:	3720      	adds	r7, #32
 801a8a2:	46bd      	mov	sp, r7
 801a8a4:	bd80      	pop	{r7, pc}

0801a8a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801a8a6:	b580      	push	{r7, lr}
 801a8a8:	b088      	sub	sp, #32
 801a8aa:	af00      	add	r7, sp, #0
 801a8ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801a8ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801a8b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801a8b4:	2308      	movs	r3, #8
 801a8b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a8b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a8bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a8be:	2300      	movs	r3, #0
 801a8c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a8c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a8c8:	f107 0308 	add.w	r3, r7, #8
 801a8cc:	4619      	mov	r1, r3
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	f7ff fe46 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801a8d4:	6878      	ldr	r0, [r7, #4]
 801a8d6:	f000 fb29 	bl	801af2c <SDMMC_GetCmdResp7>
 801a8da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a8dc:	69fb      	ldr	r3, [r7, #28]
}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	3720      	adds	r7, #32
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}

0801a8e6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801a8e6:	b580      	push	{r7, lr}
 801a8e8:	b088      	sub	sp, #32
 801a8ea:	af00      	add	r7, sp, #0
 801a8ec:	6078      	str	r0, [r7, #4]
 801a8ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801a8f0:	683b      	ldr	r3, [r7, #0]
 801a8f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801a8f4:	2337      	movs	r3, #55	; 0x37
 801a8f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a8f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a8fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a8fe:	2300      	movs	r3, #0
 801a900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a906:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a908:	f107 0308 	add.w	r3, r7, #8
 801a90c:	4619      	mov	r1, r3
 801a90e:	6878      	ldr	r0, [r7, #4]
 801a910:	f7ff fe26 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801a914:	f241 3288 	movw	r2, #5000	; 0x1388
 801a918:	2137      	movs	r1, #55	; 0x37
 801a91a:	6878      	ldr	r0, [r7, #4]
 801a91c:	f000 f912 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a922:	69fb      	ldr	r3, [r7, #28]
}
 801a924:	4618      	mov	r0, r3
 801a926:	3720      	adds	r7, #32
 801a928:	46bd      	mov	sp, r7
 801a92a:	bd80      	pop	{r7, pc}

0801a92c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b088      	sub	sp, #32
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
 801a934:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801a936:	683b      	ldr	r3, [r7, #0]
 801a938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801a93a:	2329      	movs	r3, #41	; 0x29
 801a93c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a93e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a944:	2300      	movs	r3, #0
 801a946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a94c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a94e:	f107 0308 	add.w	r3, r7, #8
 801a952:	4619      	mov	r1, r3
 801a954:	6878      	ldr	r0, [r7, #4]
 801a956:	f7ff fe03 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801a95a:	6878      	ldr	r0, [r7, #4]
 801a95c:	f000 fa2e 	bl	801adbc <SDMMC_GetCmdResp3>
 801a960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a962:	69fb      	ldr	r3, [r7, #28]
}
 801a964:	4618      	mov	r0, r3
 801a966:	3720      	adds	r7, #32
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd80      	pop	{r7, pc}

0801a96c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b088      	sub	sp, #32
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
 801a974:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801a976:	683b      	ldr	r3, [r7, #0]
 801a978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801a97a:	2306      	movs	r3, #6
 801a97c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a97e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a984:	2300      	movs	r3, #0
 801a986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a98c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a98e:	f107 0308 	add.w	r3, r7, #8
 801a992:	4619      	mov	r1, r3
 801a994:	6878      	ldr	r0, [r7, #4]
 801a996:	f7ff fde3 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801a99a:	f241 3288 	movw	r2, #5000	; 0x1388
 801a99e:	2106      	movs	r1, #6
 801a9a0:	6878      	ldr	r0, [r7, #4]
 801a9a2:	f000 f8cf 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a9a8:	69fb      	ldr	r3, [r7, #28]
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	3720      	adds	r7, #32
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd80      	pop	{r7, pc}

0801a9b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801a9b2:	b580      	push	{r7, lr}
 801a9b4:	b088      	sub	sp, #32
 801a9b6:	af00      	add	r7, sp, #0
 801a9b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801a9be:	2333      	movs	r3, #51	; 0x33
 801a9c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801a9c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801a9cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a9d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801a9d2:	f107 0308 	add.w	r3, r7, #8
 801a9d6:	4619      	mov	r1, r3
 801a9d8:	6878      	ldr	r0, [r7, #4]
 801a9da:	f7ff fdc1 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801a9de:	f241 3288 	movw	r2, #5000	; 0x1388
 801a9e2:	2133      	movs	r1, #51	; 0x33
 801a9e4:	6878      	ldr	r0, [r7, #4]
 801a9e6:	f000 f8ad 	bl	801ab44 <SDMMC_GetCmdResp1>
 801a9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801a9ec:	69fb      	ldr	r3, [r7, #28]
}
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	3720      	adds	r7, #32
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	bd80      	pop	{r7, pc}

0801a9f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801a9f6:	b580      	push	{r7, lr}
 801a9f8:	b088      	sub	sp, #32
 801a9fa:	af00      	add	r7, sp, #0
 801a9fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801a9fe:	2300      	movs	r3, #0
 801aa00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801aa02:	2302      	movs	r3, #2
 801aa04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801aa06:	f44f 7340 	mov.w	r3, #768	; 0x300
 801aa0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801aa10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801aa16:	f107 0308 	add.w	r3, r7, #8
 801aa1a:	4619      	mov	r1, r3
 801aa1c:	6878      	ldr	r0, [r7, #4]
 801aa1e:	f7ff fd9f 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801aa22:	6878      	ldr	r0, [r7, #4]
 801aa24:	f000 f980 	bl	801ad28 <SDMMC_GetCmdResp2>
 801aa28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801aa2a:	69fb      	ldr	r3, [r7, #28]
}
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	3720      	adds	r7, #32
 801aa30:	46bd      	mov	sp, r7
 801aa32:	bd80      	pop	{r7, pc}

0801aa34 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b088      	sub	sp, #32
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
 801aa3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801aa42:	2309      	movs	r3, #9
 801aa44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801aa46:	f44f 7340 	mov.w	r3, #768	; 0x300
 801aa4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801aa50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801aa56:	f107 0308 	add.w	r3, r7, #8
 801aa5a:	4619      	mov	r1, r3
 801aa5c:	6878      	ldr	r0, [r7, #4]
 801aa5e:	f7ff fd7f 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801aa62:	6878      	ldr	r0, [r7, #4]
 801aa64:	f000 f960 	bl	801ad28 <SDMMC_GetCmdResp2>
 801aa68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801aa6a:	69fb      	ldr	r3, [r7, #28]
}
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	3720      	adds	r7, #32
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}

0801aa74 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b088      	sub	sp, #32
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
 801aa7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801aa7e:	2300      	movs	r3, #0
 801aa80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801aa82:	2303      	movs	r3, #3
 801aa84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801aa86:	f44f 7380 	mov.w	r3, #256	; 0x100
 801aa8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801aa90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aa94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801aa96:	f107 0308 	add.w	r3, r7, #8
 801aa9a:	4619      	mov	r1, r3
 801aa9c:	6878      	ldr	r0, [r7, #4]
 801aa9e:	f7ff fd5f 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801aaa2:	683a      	ldr	r2, [r7, #0]
 801aaa4:	2103      	movs	r1, #3
 801aaa6:	6878      	ldr	r0, [r7, #4]
 801aaa8:	f000 f9c8 	bl	801ae3c <SDMMC_GetCmdResp6>
 801aaac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801aaae:	69fb      	ldr	r3, [r7, #28]
}
 801aab0:	4618      	mov	r0, r3
 801aab2:	3720      	adds	r7, #32
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd80      	pop	{r7, pc}

0801aab8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b088      	sub	sp, #32
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
 801aac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801aac6:	230d      	movs	r3, #13
 801aac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801aaca:	f44f 7380 	mov.w	r3, #256	; 0x100
 801aace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801aad0:	2300      	movs	r3, #0
 801aad2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801aad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aad8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801aada:	f107 0308 	add.w	r3, r7, #8
 801aade:	4619      	mov	r1, r3
 801aae0:	6878      	ldr	r0, [r7, #4]
 801aae2:	f7ff fd3d 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801aae6:	f241 3288 	movw	r2, #5000	; 0x1388
 801aaea:	210d      	movs	r1, #13
 801aaec:	6878      	ldr	r0, [r7, #4]
 801aaee:	f000 f829 	bl	801ab44 <SDMMC_GetCmdResp1>
 801aaf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801aaf4:	69fb      	ldr	r3, [r7, #28]
}
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	3720      	adds	r7, #32
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}

0801aafe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801aafe:	b580      	push	{r7, lr}
 801ab00:	b088      	sub	sp, #32
 801ab02:	af00      	add	r7, sp, #0
 801ab04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801ab06:	2300      	movs	r3, #0
 801ab08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801ab0a:	230d      	movs	r3, #13
 801ab0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801ab0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ab12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801ab14:	2300      	movs	r3, #0
 801ab16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801ab18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ab1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801ab1e:	f107 0308 	add.w	r3, r7, #8
 801ab22:	4619      	mov	r1, r3
 801ab24:	6878      	ldr	r0, [r7, #4]
 801ab26:	f7ff fd1b 	bl	801a560 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801ab2a:	f241 3288 	movw	r2, #5000	; 0x1388
 801ab2e:	210d      	movs	r1, #13
 801ab30:	6878      	ldr	r0, [r7, #4]
 801ab32:	f000 f807 	bl	801ab44 <SDMMC_GetCmdResp1>
 801ab36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801ab38:	69fb      	ldr	r3, [r7, #28]
}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	3720      	adds	r7, #32
 801ab3e:	46bd      	mov	sp, r7
 801ab40:	bd80      	pop	{r7, pc}
	...

0801ab44 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b088      	sub	sp, #32
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	60f8      	str	r0, [r7, #12]
 801ab4c:	460b      	mov	r3, r1
 801ab4e:	607a      	str	r2, [r7, #4]
 801ab50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801ab52:	4b70      	ldr	r3, [pc, #448]	; (801ad14 <SDMMC_GetCmdResp1+0x1d0>)
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	4a70      	ldr	r2, [pc, #448]	; (801ad18 <SDMMC_GetCmdResp1+0x1d4>)
 801ab58:	fba2 2303 	umull	r2, r3, r2, r3
 801ab5c:	0a5a      	lsrs	r2, r3, #9
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	fb02 f303 	mul.w	r3, r2, r3
 801ab64:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801ab66:	69fb      	ldr	r3, [r7, #28]
 801ab68:	1e5a      	subs	r2, r3, #1
 801ab6a:	61fa      	str	r2, [r7, #28]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d102      	bne.n	801ab76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801ab70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ab74:	e0c9      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab7a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801ab7c:	69ba      	ldr	r2, [r7, #24]
 801ab7e:	4b67      	ldr	r3, [pc, #412]	; (801ad1c <SDMMC_GetCmdResp1+0x1d8>)
 801ab80:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d0ef      	beq.n	801ab66 <SDMMC_GetCmdResp1+0x22>
 801ab86:	69bb      	ldr	r3, [r7, #24]
 801ab88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d1ea      	bne.n	801ab66 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab94:	f003 0304 	and.w	r3, r3, #4
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d004      	beq.n	801aba6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2204      	movs	r2, #4
 801aba0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801aba2:	2304      	movs	r3, #4
 801aba4:	e0b1      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abaa:	f003 0301 	and.w	r3, r3, #1
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d004      	beq.n	801abbc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	2201      	movs	r2, #1
 801abb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801abb8:	2301      	movs	r3, #1
 801abba:	e0a6      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	4a58      	ldr	r2, [pc, #352]	; (801ad20 <SDMMC_GetCmdResp1+0x1dc>)
 801abc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801abc2:	68f8      	ldr	r0, [r7, #12]
 801abc4:	f7ff fcf6 	bl	801a5b4 <SDMMC_GetCommandResponse>
 801abc8:	4603      	mov	r3, r0
 801abca:	461a      	mov	r2, r3
 801abcc:	7afb      	ldrb	r3, [r7, #11]
 801abce:	4293      	cmp	r3, r2
 801abd0:	d001      	beq.n	801abd6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801abd2:	2301      	movs	r3, #1
 801abd4:	e099      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801abd6:	2100      	movs	r1, #0
 801abd8:	68f8      	ldr	r0, [r7, #12]
 801abda:	f7ff fcf8 	bl	801a5ce <SDMMC_GetResponse>
 801abde:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801abe0:	697a      	ldr	r2, [r7, #20]
 801abe2:	4b50      	ldr	r3, [pc, #320]	; (801ad24 <SDMMC_GetCmdResp1+0x1e0>)
 801abe4:	4013      	ands	r3, r2
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d101      	bne.n	801abee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801abea:	2300      	movs	r3, #0
 801abec:	e08d      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801abee:	697b      	ldr	r3, [r7, #20]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	da02      	bge.n	801abfa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801abf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801abf8:	e087      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d001      	beq.n	801ac08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801ac04:	2340      	movs	r3, #64	; 0x40
 801ac06:	e080      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801ac08:	697b      	ldr	r3, [r7, #20]
 801ac0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d001      	beq.n	801ac16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801ac12:	2380      	movs	r3, #128	; 0x80
 801ac14:	e079      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801ac16:	697b      	ldr	r3, [r7, #20]
 801ac18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d002      	beq.n	801ac26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801ac20:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ac24:	e071      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801ac26:	697b      	ldr	r3, [r7, #20]
 801ac28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d002      	beq.n	801ac36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801ac30:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ac34:	e069      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801ac36:	697b      	ldr	r3, [r7, #20]
 801ac38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d002      	beq.n	801ac46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801ac40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ac44:	e061      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d002      	beq.n	801ac56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801ac50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ac54:	e059      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801ac56:	697b      	ldr	r3, [r7, #20]
 801ac58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d002      	beq.n	801ac66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801ac60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ac64:	e051      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801ac66:	697b      	ldr	r3, [r7, #20]
 801ac68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d002      	beq.n	801ac76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801ac70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801ac74:	e049      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d002      	beq.n	801ac86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801ac80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ac84:	e041      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d002      	beq.n	801ac96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801ac90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac94:	e039      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801ac96:	697b      	ldr	r3, [r7, #20]
 801ac98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d002      	beq.n	801aca6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801aca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801aca4:	e031      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801aca6:	697b      	ldr	r3, [r7, #20]
 801aca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801acac:	2b00      	cmp	r3, #0
 801acae:	d002      	beq.n	801acb6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801acb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801acb4:	e029      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801acb6:	697b      	ldr	r3, [r7, #20]
 801acb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d002      	beq.n	801acc6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801acc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801acc4:	e021      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801accc:	2b00      	cmp	r3, #0
 801acce:	d002      	beq.n	801acd6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801acd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801acd4:	e019      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801acd6:	697b      	ldr	r3, [r7, #20]
 801acd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d002      	beq.n	801ace6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801ace0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801ace4:	e011      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801ace6:	697b      	ldr	r3, [r7, #20]
 801ace8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801acec:	2b00      	cmp	r3, #0
 801acee:	d002      	beq.n	801acf6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801acf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801acf4:	e009      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801acf6:	697b      	ldr	r3, [r7, #20]
 801acf8:	f003 0308 	and.w	r3, r3, #8
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d002      	beq.n	801ad06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801ad00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801ad04:	e001      	b.n	801ad0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801ad06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3720      	adds	r7, #32
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}
 801ad12:	bf00      	nop
 801ad14:	240002dc 	.word	0x240002dc
 801ad18:	10624dd3 	.word	0x10624dd3
 801ad1c:	00200045 	.word	0x00200045
 801ad20:	002000c5 	.word	0x002000c5
 801ad24:	fdffe008 	.word	0xfdffe008

0801ad28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801ad28:	b480      	push	{r7}
 801ad2a:	b085      	sub	sp, #20
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801ad30:	4b1f      	ldr	r3, [pc, #124]	; (801adb0 <SDMMC_GetCmdResp2+0x88>)
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	4a1f      	ldr	r2, [pc, #124]	; (801adb4 <SDMMC_GetCmdResp2+0x8c>)
 801ad36:	fba2 2303 	umull	r2, r3, r2, r3
 801ad3a:	0a5b      	lsrs	r3, r3, #9
 801ad3c:	f241 3288 	movw	r2, #5000	; 0x1388
 801ad40:	fb02 f303 	mul.w	r3, r2, r3
 801ad44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	1e5a      	subs	r2, r3, #1
 801ad4a:	60fa      	str	r2, [r7, #12]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d102      	bne.n	801ad56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801ad50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ad54:	e026      	b.n	801ada4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ad5c:	68bb      	ldr	r3, [r7, #8]
 801ad5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d0ef      	beq.n	801ad46 <SDMMC_GetCmdResp2+0x1e>
 801ad66:	68bb      	ldr	r3, [r7, #8]
 801ad68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d1ea      	bne.n	801ad46 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad74:	f003 0304 	and.w	r3, r3, #4
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d004      	beq.n	801ad86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	2204      	movs	r2, #4
 801ad80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801ad82:	2304      	movs	r3, #4
 801ad84:	e00e      	b.n	801ada4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad8a:	f003 0301 	and.w	r3, r3, #1
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d004      	beq.n	801ad9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	2201      	movs	r2, #1
 801ad96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801ad98:	2301      	movs	r3, #1
 801ad9a:	e003      	b.n	801ada4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	4a06      	ldr	r2, [pc, #24]	; (801adb8 <SDMMC_GetCmdResp2+0x90>)
 801ada0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801ada2:	2300      	movs	r3, #0
}
 801ada4:	4618      	mov	r0, r3
 801ada6:	3714      	adds	r7, #20
 801ada8:	46bd      	mov	sp, r7
 801adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adae:	4770      	bx	lr
 801adb0:	240002dc 	.word	0x240002dc
 801adb4:	10624dd3 	.word	0x10624dd3
 801adb8:	002000c5 	.word	0x002000c5

0801adbc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801adbc:	b480      	push	{r7}
 801adbe:	b085      	sub	sp, #20
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801adc4:	4b1a      	ldr	r3, [pc, #104]	; (801ae30 <SDMMC_GetCmdResp3+0x74>)
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	4a1a      	ldr	r2, [pc, #104]	; (801ae34 <SDMMC_GetCmdResp3+0x78>)
 801adca:	fba2 2303 	umull	r2, r3, r2, r3
 801adce:	0a5b      	lsrs	r3, r3, #9
 801add0:	f241 3288 	movw	r2, #5000	; 0x1388
 801add4:	fb02 f303 	mul.w	r3, r2, r3
 801add8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	1e5a      	subs	r2, r3, #1
 801adde:	60fa      	str	r2, [r7, #12]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d102      	bne.n	801adea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801ade4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ade8:	e01b      	b.n	801ae22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801adee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801adf0:	68bb      	ldr	r3, [r7, #8]
 801adf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d0ef      	beq.n	801adda <SDMMC_GetCmdResp3+0x1e>
 801adfa:	68bb      	ldr	r3, [r7, #8]
 801adfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d1ea      	bne.n	801adda <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae08:	f003 0304 	and.w	r3, r3, #4
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d004      	beq.n	801ae1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	2204      	movs	r2, #4
 801ae14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801ae16:	2304      	movs	r3, #4
 801ae18:	e003      	b.n	801ae22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	4a06      	ldr	r2, [pc, #24]	; (801ae38 <SDMMC_GetCmdResp3+0x7c>)
 801ae1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801ae20:	2300      	movs	r3, #0
}
 801ae22:	4618      	mov	r0, r3
 801ae24:	3714      	adds	r7, #20
 801ae26:	46bd      	mov	sp, r7
 801ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae2c:	4770      	bx	lr
 801ae2e:	bf00      	nop
 801ae30:	240002dc 	.word	0x240002dc
 801ae34:	10624dd3 	.word	0x10624dd3
 801ae38:	002000c5 	.word	0x002000c5

0801ae3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b088      	sub	sp, #32
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	60f8      	str	r0, [r7, #12]
 801ae44:	460b      	mov	r3, r1
 801ae46:	607a      	str	r2, [r7, #4]
 801ae48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801ae4a:	4b35      	ldr	r3, [pc, #212]	; (801af20 <SDMMC_GetCmdResp6+0xe4>)
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	4a35      	ldr	r2, [pc, #212]	; (801af24 <SDMMC_GetCmdResp6+0xe8>)
 801ae50:	fba2 2303 	umull	r2, r3, r2, r3
 801ae54:	0a5b      	lsrs	r3, r3, #9
 801ae56:	f241 3288 	movw	r2, #5000	; 0x1388
 801ae5a:	fb02 f303 	mul.w	r3, r2, r3
 801ae5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801ae60:	69fb      	ldr	r3, [r7, #28]
 801ae62:	1e5a      	subs	r2, r3, #1
 801ae64:	61fa      	str	r2, [r7, #28]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d102      	bne.n	801ae70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801ae6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ae6e:	e052      	b.n	801af16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae74:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ae76:	69bb      	ldr	r3, [r7, #24]
 801ae78:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d0ef      	beq.n	801ae60 <SDMMC_GetCmdResp6+0x24>
 801ae80:	69bb      	ldr	r3, [r7, #24]
 801ae82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d1ea      	bne.n	801ae60 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae8e:	f003 0304 	and.w	r3, r3, #4
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d004      	beq.n	801aea0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	2204      	movs	r2, #4
 801ae9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801ae9c:	2304      	movs	r3, #4
 801ae9e:	e03a      	b.n	801af16 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aea4:	f003 0301 	and.w	r3, r3, #1
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d004      	beq.n	801aeb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	2201      	movs	r2, #1
 801aeb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801aeb2:	2301      	movs	r3, #1
 801aeb4:	e02f      	b.n	801af16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801aeb6:	68f8      	ldr	r0, [r7, #12]
 801aeb8:	f7ff fb7c 	bl	801a5b4 <SDMMC_GetCommandResponse>
 801aebc:	4603      	mov	r3, r0
 801aebe:	461a      	mov	r2, r3
 801aec0:	7afb      	ldrb	r3, [r7, #11]
 801aec2:	4293      	cmp	r3, r2
 801aec4:	d001      	beq.n	801aeca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801aec6:	2301      	movs	r3, #1
 801aec8:	e025      	b.n	801af16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	4a16      	ldr	r2, [pc, #88]	; (801af28 <SDMMC_GetCmdResp6+0xec>)
 801aece:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801aed0:	2100      	movs	r1, #0
 801aed2:	68f8      	ldr	r0, [r7, #12]
 801aed4:	f7ff fb7b 	bl	801a5ce <SDMMC_GetResponse>
 801aed8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801aeda:	697b      	ldr	r3, [r7, #20]
 801aedc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d106      	bne.n	801aef2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801aee4:	697b      	ldr	r3, [r7, #20]
 801aee6:	0c1b      	lsrs	r3, r3, #16
 801aee8:	b29a      	uxth	r2, r3
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801aeee:	2300      	movs	r3, #0
 801aef0:	e011      	b.n	801af16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801aef2:	697b      	ldr	r3, [r7, #20]
 801aef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d002      	beq.n	801af02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801aefc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801af00:	e009      	b.n	801af16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801af02:	697b      	ldr	r3, [r7, #20]
 801af04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d002      	beq.n	801af12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801af0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801af10:	e001      	b.n	801af16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801af12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801af16:	4618      	mov	r0, r3
 801af18:	3720      	adds	r7, #32
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	240002dc 	.word	0x240002dc
 801af24:	10624dd3 	.word	0x10624dd3
 801af28:	002000c5 	.word	0x002000c5

0801af2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801af2c:	b480      	push	{r7}
 801af2e:	b085      	sub	sp, #20
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801af34:	4b22      	ldr	r3, [pc, #136]	; (801afc0 <SDMMC_GetCmdResp7+0x94>)
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	4a22      	ldr	r2, [pc, #136]	; (801afc4 <SDMMC_GetCmdResp7+0x98>)
 801af3a:	fba2 2303 	umull	r2, r3, r2, r3
 801af3e:	0a5b      	lsrs	r3, r3, #9
 801af40:	f241 3288 	movw	r2, #5000	; 0x1388
 801af44:	fb02 f303 	mul.w	r3, r2, r3
 801af48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	1e5a      	subs	r2, r3, #1
 801af4e:	60fa      	str	r2, [r7, #12]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d102      	bne.n	801af5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801af54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801af58:	e02c      	b.n	801afb4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801af60:	68bb      	ldr	r3, [r7, #8]
 801af62:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801af66:	2b00      	cmp	r3, #0
 801af68:	d0ef      	beq.n	801af4a <SDMMC_GetCmdResp7+0x1e>
 801af6a:	68bb      	ldr	r3, [r7, #8]
 801af6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801af70:	2b00      	cmp	r3, #0
 801af72:	d1ea      	bne.n	801af4a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af78:	f003 0304 	and.w	r3, r3, #4
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d004      	beq.n	801af8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	2204      	movs	r2, #4
 801af84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801af86:	2304      	movs	r3, #4
 801af88:	e014      	b.n	801afb4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af8e:	f003 0301 	and.w	r3, r3, #1
 801af92:	2b00      	cmp	r3, #0
 801af94:	d004      	beq.n	801afa0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	2201      	movs	r2, #1
 801af9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801af9c:	2301      	movs	r3, #1
 801af9e:	e009      	b.n	801afb4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801afa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d002      	beq.n	801afb2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	2240      	movs	r2, #64	; 0x40
 801afb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801afb2:	2300      	movs	r3, #0

}
 801afb4:	4618      	mov	r0, r3
 801afb6:	3714      	adds	r7, #20
 801afb8:	46bd      	mov	sp, r7
 801afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afbe:	4770      	bx	lr
 801afc0:	240002dc 	.word	0x240002dc
 801afc4:	10624dd3 	.word	0x10624dd3

0801afc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801afc8:	b480      	push	{r7}
 801afca:	b085      	sub	sp, #20
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801afd0:	4b11      	ldr	r3, [pc, #68]	; (801b018 <SDMMC_GetCmdError+0x50>)
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	4a11      	ldr	r2, [pc, #68]	; (801b01c <SDMMC_GetCmdError+0x54>)
 801afd6:	fba2 2303 	umull	r2, r3, r2, r3
 801afda:	0a5b      	lsrs	r3, r3, #9
 801afdc:	f241 3288 	movw	r2, #5000	; 0x1388
 801afe0:	fb02 f303 	mul.w	r3, r2, r3
 801afe4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	1e5a      	subs	r2, r3, #1
 801afea:	60fa      	str	r2, [r7, #12]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d102      	bne.n	801aff6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801aff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801aff4:	e009      	b.n	801b00a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801affa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801affe:	2b00      	cmp	r3, #0
 801b000:	d0f1      	beq.n	801afe6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	4a06      	ldr	r2, [pc, #24]	; (801b020 <SDMMC_GetCmdError+0x58>)
 801b006:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801b008:	2300      	movs	r3, #0
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	3714      	adds	r7, #20
 801b00e:	46bd      	mov	sp, r7
 801b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b014:	4770      	bx	lr
 801b016:	bf00      	nop
 801b018:	240002dc 	.word	0x240002dc
 801b01c:	10624dd3 	.word	0x10624dd3
 801b020:	002000c5 	.word	0x002000c5

0801b024 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801b028:	4904      	ldr	r1, [pc, #16]	; (801b03c <MX_FATFS_Init+0x18>)
 801b02a:	4805      	ldr	r0, [pc, #20]	; (801b040 <MX_FATFS_Init+0x1c>)
 801b02c:	f002 ff52 	bl	801ded4 <FATFS_LinkDriver>
 801b030:	4603      	mov	r3, r0
 801b032:	461a      	mov	r2, r3
 801b034:	4b03      	ldr	r3, [pc, #12]	; (801b044 <MX_FATFS_Init+0x20>)
 801b036:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801b038:	bf00      	nop
 801b03a:	bd80      	pop	{r7, pc}
 801b03c:	24003fec 	.word	0x24003fec
 801b040:	08027c38 	.word	0x08027c38
 801b044:	24003fe8 	.word	0x24003fe8

0801b048 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801b048:	b480      	push	{r7}
 801b04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801b04c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801b04e:	4618      	mov	r0, r3
 801b050:	46bd      	mov	sp, r7
 801b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b056:	4770      	bx	lr

0801b058 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b082      	sub	sp, #8
 801b05c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801b05e:	2300      	movs	r3, #0
 801b060:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801b062:	f000 f885 	bl	801b170 <BSP_SD_IsDetected>
 801b066:	4603      	mov	r3, r0
 801b068:	2b01      	cmp	r3, #1
 801b06a:	d001      	beq.n	801b070 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801b06c:	2302      	movs	r3, #2
 801b06e:	e012      	b.n	801b096 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801b070:	480b      	ldr	r0, [pc, #44]	; (801b0a0 <BSP_SD_Init+0x48>)
 801b072:	f7f9 f885 	bl	8014180 <HAL_SD_Init>
 801b076:	4603      	mov	r3, r0
 801b078:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801b07a:	79fb      	ldrb	r3, [r7, #7]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d109      	bne.n	801b094 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801b080:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b084:	4806      	ldr	r0, [pc, #24]	; (801b0a0 <BSP_SD_Init+0x48>)
 801b086:	f7f9 ff35 	bl	8014ef4 <HAL_SD_ConfigWideBusOperation>
 801b08a:	4603      	mov	r3, r0
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d001      	beq.n	801b094 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801b090:	2301      	movs	r3, #1
 801b092:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801b094:	79fb      	ldrb	r3, [r7, #7]
}
 801b096:	4618      	mov	r0, r3
 801b098:	3708      	adds	r7, #8
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bd80      	pop	{r7, pc}
 801b09e:	bf00      	nop
 801b0a0:	24003a88 	.word	0x24003a88

0801b0a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b086      	sub	sp, #24
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	60f8      	str	r0, [r7, #12]
 801b0ac:	60b9      	str	r1, [r7, #8]
 801b0ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	68ba      	ldr	r2, [r7, #8]
 801b0b8:	68f9      	ldr	r1, [r7, #12]
 801b0ba:	4806      	ldr	r0, [pc, #24]	; (801b0d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 801b0bc:	f7f9 f97a 	bl	80143b4 <HAL_SD_ReadBlocks_DMA>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d001      	beq.n	801b0ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801b0c6:	2301      	movs	r3, #1
 801b0c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801b0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	3718      	adds	r7, #24
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	bd80      	pop	{r7, pc}
 801b0d4:	24003a88 	.word	0x24003a88

0801b0d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b086      	sub	sp, #24
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	60f8      	str	r0, [r7, #12]
 801b0e0:	60b9      	str	r1, [r7, #8]
 801b0e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	68ba      	ldr	r2, [r7, #8]
 801b0ec:	68f9      	ldr	r1, [r7, #12]
 801b0ee:	4806      	ldr	r0, [pc, #24]	; (801b108 <BSP_SD_WriteBlocks_DMA+0x30>)
 801b0f0:	f7f9 fa08 	bl	8014504 <HAL_SD_WriteBlocks_DMA>
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d001      	beq.n	801b0fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801b0fa:	2301      	movs	r3, #1
 801b0fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801b0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 801b100:	4618      	mov	r0, r3
 801b102:	3718      	adds	r7, #24
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}
 801b108:	24003a88 	.word	0x24003a88

0801b10c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801b10c:	b580      	push	{r7, lr}
 801b10e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801b110:	4805      	ldr	r0, [pc, #20]	; (801b128 <BSP_SD_GetCardState+0x1c>)
 801b112:	f7fa f801 	bl	8015118 <HAL_SD_GetCardState>
 801b116:	4603      	mov	r3, r0
 801b118:	2b04      	cmp	r3, #4
 801b11a:	bf14      	ite	ne
 801b11c:	2301      	movne	r3, #1
 801b11e:	2300      	moveq	r3, #0
 801b120:	b2db      	uxtb	r3, r3
}
 801b122:	4618      	mov	r0, r3
 801b124:	bd80      	pop	{r7, pc}
 801b126:	bf00      	nop
 801b128:	24003a88 	.word	0x24003a88

0801b12c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b082      	sub	sp, #8
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801b134:	6879      	ldr	r1, [r7, #4]
 801b136:	4803      	ldr	r0, [pc, #12]	; (801b144 <BSP_SD_GetCardInfo+0x18>)
 801b138:	f7f9 feb0 	bl	8014e9c <HAL_SD_GetCardInfo>
}
 801b13c:	bf00      	nop
 801b13e:	3708      	adds	r7, #8
 801b140:	46bd      	mov	sp, r7
 801b142:	bd80      	pop	{r7, pc}
 801b144:	24003a88 	.word	0x24003a88

0801b148 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b082      	sub	sp, #8
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801b150:	f000 f990 	bl	801b474 <BSP_SD_WriteCpltCallback>
}
 801b154:	bf00      	nop
 801b156:	3708      	adds	r7, #8
 801b158:	46bd      	mov	sp, r7
 801b15a:	bd80      	pop	{r7, pc}

0801b15c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b082      	sub	sp, #8
 801b160:	af00      	add	r7, sp, #0
 801b162:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801b164:	f000 f998 	bl	801b498 <BSP_SD_ReadCpltCallback>
}
 801b168:	bf00      	nop
 801b16a:	3708      	adds	r7, #8
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}

0801b170 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801b170:	b480      	push	{r7}
 801b172:	b083      	sub	sp, #12
 801b174:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801b176:	2301      	movs	r3, #1
 801b178:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801b17a:	79fb      	ldrb	r3, [r7, #7]
 801b17c:	b2db      	uxtb	r3, r3
}
 801b17e:	4618      	mov	r0, r3
 801b180:	370c      	adds	r7, #12
 801b182:	46bd      	mov	sp, r7
 801b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b188:	4770      	bx	lr

0801b18a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801b18a:	b580      	push	{r7, lr}
 801b18c:	b084      	sub	sp, #16
 801b18e:	af00      	add	r7, sp, #0
 801b190:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 801b192:	f002 ffa5 	bl	801e0e0 <osKernelGetTickCount>
 801b196:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801b198:	e006      	b.n	801b1a8 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801b19a:	f7ff ffb7 	bl	801b10c <BSP_SD_GetCardState>
 801b19e:	4603      	mov	r3, r0
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d101      	bne.n	801b1a8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	e009      	b.n	801b1bc <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 801b1a8:	f002 ff9a 	bl	801e0e0 <osKernelGetTickCount>
 801b1ac:	4602      	mov	r2, r0
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	1ad3      	subs	r3, r2, r3
 801b1b2:	687a      	ldr	r2, [r7, #4]
 801b1b4:	429a      	cmp	r2, r3
 801b1b6:	d8f0      	bhi.n	801b19a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801b1b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b1bc:	4618      	mov	r0, r3
 801b1be:	3710      	adds	r7, #16
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bd80      	pop	{r7, pc}

0801b1c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b082      	sub	sp, #8
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801b1ce:	4b0b      	ldr	r3, [pc, #44]	; (801b1fc <SD_CheckStatus+0x38>)
 801b1d0:	2201      	movs	r2, #1
 801b1d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801b1d4:	f7ff ff9a 	bl	801b10c <BSP_SD_GetCardState>
 801b1d8:	4603      	mov	r3, r0
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d107      	bne.n	801b1ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801b1de:	4b07      	ldr	r3, [pc, #28]	; (801b1fc <SD_CheckStatus+0x38>)
 801b1e0:	781b      	ldrb	r3, [r3, #0]
 801b1e2:	b2db      	uxtb	r3, r3
 801b1e4:	f023 0301 	bic.w	r3, r3, #1
 801b1e8:	b2da      	uxtb	r2, r3
 801b1ea:	4b04      	ldr	r3, [pc, #16]	; (801b1fc <SD_CheckStatus+0x38>)
 801b1ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801b1ee:	4b03      	ldr	r3, [pc, #12]	; (801b1fc <SD_CheckStatus+0x38>)
 801b1f0:	781b      	ldrb	r3, [r3, #0]
 801b1f2:	b2db      	uxtb	r3, r3
}
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	3708      	adds	r7, #8
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd80      	pop	{r7, pc}
 801b1fc:	240002f1 	.word	0x240002f1

0801b200 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b082      	sub	sp, #8
 801b204:	af00      	add	r7, sp, #0
 801b206:	4603      	mov	r3, r0
 801b208:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801b20a:	4b1c      	ldr	r3, [pc, #112]	; (801b27c <SD_initialize+0x7c>)
 801b20c:	2201      	movs	r2, #1
 801b20e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801b210:	f002 ff1e 	bl	801e050 <osKernelGetState>
 801b214:	4603      	mov	r3, r0
 801b216:	2b02      	cmp	r3, #2
 801b218:	d129      	bne.n	801b26e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801b21a:	f7ff ff1d 	bl	801b058 <BSP_SD_Init>
 801b21e:	4603      	mov	r3, r0
 801b220:	2b00      	cmp	r3, #0
 801b222:	d107      	bne.n	801b234 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801b224:	79fb      	ldrb	r3, [r7, #7]
 801b226:	4618      	mov	r0, r3
 801b228:	f7ff ffcc 	bl	801b1c4 <SD_CheckStatus>
 801b22c:	4603      	mov	r3, r0
 801b22e:	461a      	mov	r2, r3
 801b230:	4b12      	ldr	r3, [pc, #72]	; (801b27c <SD_initialize+0x7c>)
 801b232:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801b234:	4b11      	ldr	r3, [pc, #68]	; (801b27c <SD_initialize+0x7c>)
 801b236:	781b      	ldrb	r3, [r3, #0]
 801b238:	b2db      	uxtb	r3, r3
 801b23a:	2b01      	cmp	r3, #1
 801b23c:	d017      	beq.n	801b26e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801b23e:	4b10      	ldr	r3, [pc, #64]	; (801b280 <SD_initialize+0x80>)
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d107      	bne.n	801b256 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 801b246:	2200      	movs	r2, #0
 801b248:	2102      	movs	r1, #2
 801b24a:	200a      	movs	r0, #10
 801b24c:	f003 fa60 	bl	801e710 <osMessageQueueNew>
 801b250:	4603      	mov	r3, r0
 801b252:	4a0b      	ldr	r2, [pc, #44]	; (801b280 <SD_initialize+0x80>)
 801b254:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 801b256:	4b0a      	ldr	r3, [pc, #40]	; (801b280 <SD_initialize+0x80>)
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d107      	bne.n	801b26e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801b25e:	4b07      	ldr	r3, [pc, #28]	; (801b27c <SD_initialize+0x7c>)
 801b260:	781b      	ldrb	r3, [r3, #0]
 801b262:	b2db      	uxtb	r3, r3
 801b264:	f043 0301 	orr.w	r3, r3, #1
 801b268:	b2da      	uxtb	r2, r3
 801b26a:	4b04      	ldr	r3, [pc, #16]	; (801b27c <SD_initialize+0x7c>)
 801b26c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801b26e:	4b03      	ldr	r3, [pc, #12]	; (801b27c <SD_initialize+0x7c>)
 801b270:	781b      	ldrb	r3, [r3, #0]
 801b272:	b2db      	uxtb	r3, r3
}
 801b274:	4618      	mov	r0, r3
 801b276:	3708      	adds	r7, #8
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd80      	pop	{r7, pc}
 801b27c:	240002f1 	.word	0x240002f1
 801b280:	24003ff0 	.word	0x24003ff0

0801b284 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801b284:	b580      	push	{r7, lr}
 801b286:	b082      	sub	sp, #8
 801b288:	af00      	add	r7, sp, #0
 801b28a:	4603      	mov	r3, r0
 801b28c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801b28e:	79fb      	ldrb	r3, [r7, #7]
 801b290:	4618      	mov	r0, r3
 801b292:	f7ff ff97 	bl	801b1c4 <SD_CheckStatus>
 801b296:	4603      	mov	r3, r0
}
 801b298:	4618      	mov	r0, r3
 801b29a:	3708      	adds	r7, #8
 801b29c:	46bd      	mov	sp, r7
 801b29e:	bd80      	pop	{r7, pc}

0801b2a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b088      	sub	sp, #32
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	60b9      	str	r1, [r7, #8]
 801b2a8:	607a      	str	r2, [r7, #4]
 801b2aa:	603b      	str	r3, [r7, #0]
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801b2b4:	f247 5030 	movw	r0, #30000	; 0x7530
 801b2b8:	f7ff ff67 	bl	801b18a <SD_CheckStatusWithTimeout>
 801b2bc:	4603      	mov	r3, r0
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	da01      	bge.n	801b2c6 <SD_read+0x26>
  {
    return res;
 801b2c2:	7ffb      	ldrb	r3, [r7, #31]
 801b2c4:	e02f      	b.n	801b326 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801b2c6:	683a      	ldr	r2, [r7, #0]
 801b2c8:	6879      	ldr	r1, [r7, #4]
 801b2ca:	68b8      	ldr	r0, [r7, #8]
 801b2cc:	f7ff feea 	bl	801b0a4 <BSP_SD_ReadBlocks_DMA>
 801b2d0:	4603      	mov	r3, r0
 801b2d2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 801b2d4:	7fbb      	ldrb	r3, [r7, #30]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d124      	bne.n	801b324 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801b2da:	4b15      	ldr	r3, [pc, #84]	; (801b330 <SD_read+0x90>)
 801b2dc:	6818      	ldr	r0, [r3, #0]
 801b2de:	f107 0112 	add.w	r1, r7, #18
 801b2e2:	f247 5330 	movw	r3, #30000	; 0x7530
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	f003 fae6 	bl	801e8b8 <osMessageQueueGet>
 801b2ec:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801b2ee:	69bb      	ldr	r3, [r7, #24]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d117      	bne.n	801b324 <SD_read+0x84>
 801b2f4:	8a7b      	ldrh	r3, [r7, #18]
 801b2f6:	2b01      	cmp	r3, #1
 801b2f8:	d114      	bne.n	801b324 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801b2fa:	f002 fef1 	bl	801e0e0 <osKernelGetTickCount>
 801b2fe:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801b300:	e007      	b.n	801b312 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801b302:	f7ff ff03 	bl	801b10c <BSP_SD_GetCardState>
 801b306:	4603      	mov	r3, r0
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d102      	bne.n	801b312 <SD_read+0x72>
              {
                res = RES_OK;
 801b30c:	2300      	movs	r3, #0
 801b30e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801b310:	e008      	b.n	801b324 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801b312:	f002 fee5 	bl	801e0e0 <osKernelGetTickCount>
 801b316:	4602      	mov	r2, r0
 801b318:	697b      	ldr	r3, [r7, #20]
 801b31a:	1ad3      	subs	r3, r2, r3
 801b31c:	f247 522f 	movw	r2, #29999	; 0x752f
 801b320:	4293      	cmp	r3, r2
 801b322:	d9ee      	bls.n	801b302 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 801b324:	7ffb      	ldrb	r3, [r7, #31]
}
 801b326:	4618      	mov	r0, r3
 801b328:	3720      	adds	r7, #32
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	24003ff0 	.word	0x24003ff0

0801b334 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801b334:	b580      	push	{r7, lr}
 801b336:	b088      	sub	sp, #32
 801b338:	af00      	add	r7, sp, #0
 801b33a:	60b9      	str	r1, [r7, #8]
 801b33c:	607a      	str	r2, [r7, #4]
 801b33e:	603b      	str	r3, [r7, #0]
 801b340:	4603      	mov	r3, r0
 801b342:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801b344:	2301      	movs	r3, #1
 801b346:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801b348:	f247 5030 	movw	r0, #30000	; 0x7530
 801b34c:	f7ff ff1d 	bl	801b18a <SD_CheckStatusWithTimeout>
 801b350:	4603      	mov	r3, r0
 801b352:	2b00      	cmp	r3, #0
 801b354:	da01      	bge.n	801b35a <SD_write+0x26>
  {
    return res;
 801b356:	7ffb      	ldrb	r3, [r7, #31]
 801b358:	e02d      	b.n	801b3b6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801b35a:	683a      	ldr	r2, [r7, #0]
 801b35c:	6879      	ldr	r1, [r7, #4]
 801b35e:	68b8      	ldr	r0, [r7, #8]
 801b360:	f7ff feba 	bl	801b0d8 <BSP_SD_WriteBlocks_DMA>
 801b364:	4603      	mov	r3, r0
 801b366:	2b00      	cmp	r3, #0
 801b368:	d124      	bne.n	801b3b4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801b36a:	4b15      	ldr	r3, [pc, #84]	; (801b3c0 <SD_write+0x8c>)
 801b36c:	6818      	ldr	r0, [r3, #0]
 801b36e:	f107 0112 	add.w	r1, r7, #18
 801b372:	f247 5330 	movw	r3, #30000	; 0x7530
 801b376:	2200      	movs	r2, #0
 801b378:	f003 fa9e 	bl	801e8b8 <osMessageQueueGet>
 801b37c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801b37e:	69bb      	ldr	r3, [r7, #24]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d117      	bne.n	801b3b4 <SD_write+0x80>
 801b384:	8a7b      	ldrh	r3, [r7, #18]
 801b386:	2b02      	cmp	r3, #2
 801b388:	d114      	bne.n	801b3b4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801b38a:	f002 fea9 	bl	801e0e0 <osKernelGetTickCount>
 801b38e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801b390:	e007      	b.n	801b3a2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801b392:	f7ff febb 	bl	801b10c <BSP_SD_GetCardState>
 801b396:	4603      	mov	r3, r0
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d102      	bne.n	801b3a2 <SD_write+0x6e>
          {
            res = RES_OK;
 801b39c:	2300      	movs	r3, #0
 801b39e:	77fb      	strb	r3, [r7, #31]
            break;
 801b3a0:	e008      	b.n	801b3b4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801b3a2:	f002 fe9d 	bl	801e0e0 <osKernelGetTickCount>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	697b      	ldr	r3, [r7, #20]
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	f247 522f 	movw	r2, #29999	; 0x752f
 801b3b0:	4293      	cmp	r3, r2
 801b3b2:	d9ee      	bls.n	801b392 <SD_write+0x5e>
    }

  }
#endif

  return res;
 801b3b4:	7ffb      	ldrb	r3, [r7, #31]
}
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	3720      	adds	r7, #32
 801b3ba:	46bd      	mov	sp, r7
 801b3bc:	bd80      	pop	{r7, pc}
 801b3be:	bf00      	nop
 801b3c0:	24003ff0 	.word	0x24003ff0

0801b3c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801b3c4:	b580      	push	{r7, lr}
 801b3c6:	b08c      	sub	sp, #48	; 0x30
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	4603      	mov	r3, r0
 801b3cc:	603a      	str	r2, [r7, #0]
 801b3ce:	71fb      	strb	r3, [r7, #7]
 801b3d0:	460b      	mov	r3, r1
 801b3d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801b3d4:	2301      	movs	r3, #1
 801b3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801b3da:	4b25      	ldr	r3, [pc, #148]	; (801b470 <SD_ioctl+0xac>)
 801b3dc:	781b      	ldrb	r3, [r3, #0]
 801b3de:	b2db      	uxtb	r3, r3
 801b3e0:	f003 0301 	and.w	r3, r3, #1
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d001      	beq.n	801b3ec <SD_ioctl+0x28>
 801b3e8:	2303      	movs	r3, #3
 801b3ea:	e03c      	b.n	801b466 <SD_ioctl+0xa2>

  switch (cmd)
 801b3ec:	79bb      	ldrb	r3, [r7, #6]
 801b3ee:	2b03      	cmp	r3, #3
 801b3f0:	d834      	bhi.n	801b45c <SD_ioctl+0x98>
 801b3f2:	a201      	add	r2, pc, #4	; (adr r2, 801b3f8 <SD_ioctl+0x34>)
 801b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3f8:	0801b409 	.word	0x0801b409
 801b3fc:	0801b411 	.word	0x0801b411
 801b400:	0801b429 	.word	0x0801b429
 801b404:	0801b443 	.word	0x0801b443
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801b408:	2300      	movs	r3, #0
 801b40a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801b40e:	e028      	b.n	801b462 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801b410:	f107 0308 	add.w	r3, r7, #8
 801b414:	4618      	mov	r0, r3
 801b416:	f7ff fe89 	bl	801b12c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801b41a:	6a3a      	ldr	r2, [r7, #32]
 801b41c:	683b      	ldr	r3, [r7, #0]
 801b41e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801b420:	2300      	movs	r3, #0
 801b422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801b426:	e01c      	b.n	801b462 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801b428:	f107 0308 	add.w	r3, r7, #8
 801b42c:	4618      	mov	r0, r3
 801b42e:	f7ff fe7d 	bl	801b12c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b434:	b29a      	uxth	r2, r3
 801b436:	683b      	ldr	r3, [r7, #0]
 801b438:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801b43a:	2300      	movs	r3, #0
 801b43c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801b440:	e00f      	b.n	801b462 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801b442:	f107 0308 	add.w	r3, r7, #8
 801b446:	4618      	mov	r0, r3
 801b448:	f7ff fe70 	bl	801b12c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b44e:	0a5a      	lsrs	r2, r3, #9
 801b450:	683b      	ldr	r3, [r7, #0]
 801b452:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801b454:	2300      	movs	r3, #0
 801b456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801b45a:	e002      	b.n	801b462 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801b45c:	2304      	movs	r3, #4
 801b45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801b462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801b466:	4618      	mov	r0, r3
 801b468:	3730      	adds	r7, #48	; 0x30
 801b46a:	46bd      	mov	sp, r7
 801b46c:	bd80      	pop	{r7, pc}
 801b46e:	bf00      	nop
 801b470:	240002f1 	.word	0x240002f1

0801b474 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b082      	sub	sp, #8
 801b478:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801b47a:	2302      	movs	r3, #2
 801b47c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801b47e:	4b05      	ldr	r3, [pc, #20]	; (801b494 <BSP_SD_WriteCpltCallback+0x20>)
 801b480:	6818      	ldr	r0, [r3, #0]
 801b482:	1db9      	adds	r1, r7, #6
 801b484:	2300      	movs	r3, #0
 801b486:	2200      	movs	r2, #0
 801b488:	f003 f9b6 	bl	801e7f8 <osMessageQueuePut>
#endif
}
 801b48c:	bf00      	nop
 801b48e:	3708      	adds	r7, #8
 801b490:	46bd      	mov	sp, r7
 801b492:	bd80      	pop	{r7, pc}
 801b494:	24003ff0 	.word	0x24003ff0

0801b498 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b082      	sub	sp, #8
 801b49c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801b49e:	2301      	movs	r3, #1
 801b4a0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801b4a2:	4b05      	ldr	r3, [pc, #20]	; (801b4b8 <BSP_SD_ReadCpltCallback+0x20>)
 801b4a4:	6818      	ldr	r0, [r3, #0]
 801b4a6:	1db9      	adds	r1, r7, #6
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	2200      	movs	r2, #0
 801b4ac:	f003 f9a4 	bl	801e7f8 <osMessageQueuePut>
#endif
}
 801b4b0:	bf00      	nop
 801b4b2:	3708      	adds	r7, #8
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}
 801b4b8:	24003ff0 	.word	0x24003ff0

0801b4bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b084      	sub	sp, #16
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801b4c6:	79fb      	ldrb	r3, [r7, #7]
 801b4c8:	4a08      	ldr	r2, [pc, #32]	; (801b4ec <disk_status+0x30>)
 801b4ca:	009b      	lsls	r3, r3, #2
 801b4cc:	4413      	add	r3, r2
 801b4ce:	685b      	ldr	r3, [r3, #4]
 801b4d0:	685b      	ldr	r3, [r3, #4]
 801b4d2:	79fa      	ldrb	r2, [r7, #7]
 801b4d4:	4905      	ldr	r1, [pc, #20]	; (801b4ec <disk_status+0x30>)
 801b4d6:	440a      	add	r2, r1
 801b4d8:	7a12      	ldrb	r2, [r2, #8]
 801b4da:	4610      	mov	r0, r2
 801b4dc:	4798      	blx	r3
 801b4de:	4603      	mov	r3, r0
 801b4e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801b4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	3710      	adds	r7, #16
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	bd80      	pop	{r7, pc}
 801b4ec:	2400401c 	.word	0x2400401c

0801b4f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	b084      	sub	sp, #16
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801b4fe:	79fb      	ldrb	r3, [r7, #7]
 801b500:	4a0d      	ldr	r2, [pc, #52]	; (801b538 <disk_initialize+0x48>)
 801b502:	5cd3      	ldrb	r3, [r2, r3]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d111      	bne.n	801b52c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801b508:	79fb      	ldrb	r3, [r7, #7]
 801b50a:	4a0b      	ldr	r2, [pc, #44]	; (801b538 <disk_initialize+0x48>)
 801b50c:	2101      	movs	r1, #1
 801b50e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801b510:	79fb      	ldrb	r3, [r7, #7]
 801b512:	4a09      	ldr	r2, [pc, #36]	; (801b538 <disk_initialize+0x48>)
 801b514:	009b      	lsls	r3, r3, #2
 801b516:	4413      	add	r3, r2
 801b518:	685b      	ldr	r3, [r3, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	79fa      	ldrb	r2, [r7, #7]
 801b51e:	4906      	ldr	r1, [pc, #24]	; (801b538 <disk_initialize+0x48>)
 801b520:	440a      	add	r2, r1
 801b522:	7a12      	ldrb	r2, [r2, #8]
 801b524:	4610      	mov	r0, r2
 801b526:	4798      	blx	r3
 801b528:	4603      	mov	r3, r0
 801b52a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801b52c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b52e:	4618      	mov	r0, r3
 801b530:	3710      	adds	r7, #16
 801b532:	46bd      	mov	sp, r7
 801b534:	bd80      	pop	{r7, pc}
 801b536:	bf00      	nop
 801b538:	2400401c 	.word	0x2400401c

0801b53c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801b53c:	b590      	push	{r4, r7, lr}
 801b53e:	b087      	sub	sp, #28
 801b540:	af00      	add	r7, sp, #0
 801b542:	60b9      	str	r1, [r7, #8]
 801b544:	607a      	str	r2, [r7, #4]
 801b546:	603b      	str	r3, [r7, #0]
 801b548:	4603      	mov	r3, r0
 801b54a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801b54c:	7bfb      	ldrb	r3, [r7, #15]
 801b54e:	4a0a      	ldr	r2, [pc, #40]	; (801b578 <disk_read+0x3c>)
 801b550:	009b      	lsls	r3, r3, #2
 801b552:	4413      	add	r3, r2
 801b554:	685b      	ldr	r3, [r3, #4]
 801b556:	689c      	ldr	r4, [r3, #8]
 801b558:	7bfb      	ldrb	r3, [r7, #15]
 801b55a:	4a07      	ldr	r2, [pc, #28]	; (801b578 <disk_read+0x3c>)
 801b55c:	4413      	add	r3, r2
 801b55e:	7a18      	ldrb	r0, [r3, #8]
 801b560:	683b      	ldr	r3, [r7, #0]
 801b562:	687a      	ldr	r2, [r7, #4]
 801b564:	68b9      	ldr	r1, [r7, #8]
 801b566:	47a0      	blx	r4
 801b568:	4603      	mov	r3, r0
 801b56a:	75fb      	strb	r3, [r7, #23]
  return res;
 801b56c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b56e:	4618      	mov	r0, r3
 801b570:	371c      	adds	r7, #28
 801b572:	46bd      	mov	sp, r7
 801b574:	bd90      	pop	{r4, r7, pc}
 801b576:	bf00      	nop
 801b578:	2400401c 	.word	0x2400401c

0801b57c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801b57c:	b590      	push	{r4, r7, lr}
 801b57e:	b087      	sub	sp, #28
 801b580:	af00      	add	r7, sp, #0
 801b582:	60b9      	str	r1, [r7, #8]
 801b584:	607a      	str	r2, [r7, #4]
 801b586:	603b      	str	r3, [r7, #0]
 801b588:	4603      	mov	r3, r0
 801b58a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801b58c:	7bfb      	ldrb	r3, [r7, #15]
 801b58e:	4a0a      	ldr	r2, [pc, #40]	; (801b5b8 <disk_write+0x3c>)
 801b590:	009b      	lsls	r3, r3, #2
 801b592:	4413      	add	r3, r2
 801b594:	685b      	ldr	r3, [r3, #4]
 801b596:	68dc      	ldr	r4, [r3, #12]
 801b598:	7bfb      	ldrb	r3, [r7, #15]
 801b59a:	4a07      	ldr	r2, [pc, #28]	; (801b5b8 <disk_write+0x3c>)
 801b59c:	4413      	add	r3, r2
 801b59e:	7a18      	ldrb	r0, [r3, #8]
 801b5a0:	683b      	ldr	r3, [r7, #0]
 801b5a2:	687a      	ldr	r2, [r7, #4]
 801b5a4:	68b9      	ldr	r1, [r7, #8]
 801b5a6:	47a0      	blx	r4
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	75fb      	strb	r3, [r7, #23]
  return res;
 801b5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	371c      	adds	r7, #28
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	bd90      	pop	{r4, r7, pc}
 801b5b6:	bf00      	nop
 801b5b8:	2400401c 	.word	0x2400401c

0801b5bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b084      	sub	sp, #16
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	603a      	str	r2, [r7, #0]
 801b5c6:	71fb      	strb	r3, [r7, #7]
 801b5c8:	460b      	mov	r3, r1
 801b5ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801b5cc:	79fb      	ldrb	r3, [r7, #7]
 801b5ce:	4a09      	ldr	r2, [pc, #36]	; (801b5f4 <disk_ioctl+0x38>)
 801b5d0:	009b      	lsls	r3, r3, #2
 801b5d2:	4413      	add	r3, r2
 801b5d4:	685b      	ldr	r3, [r3, #4]
 801b5d6:	691b      	ldr	r3, [r3, #16]
 801b5d8:	79fa      	ldrb	r2, [r7, #7]
 801b5da:	4906      	ldr	r1, [pc, #24]	; (801b5f4 <disk_ioctl+0x38>)
 801b5dc:	440a      	add	r2, r1
 801b5de:	7a10      	ldrb	r0, [r2, #8]
 801b5e0:	79b9      	ldrb	r1, [r7, #6]
 801b5e2:	683a      	ldr	r2, [r7, #0]
 801b5e4:	4798      	blx	r3
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	73fb      	strb	r3, [r7, #15]
  return res;
 801b5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	3710      	adds	r7, #16
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	bd80      	pop	{r7, pc}
 801b5f4:	2400401c 	.word	0x2400401c

0801b5f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801b5f8:	b480      	push	{r7}
 801b5fa:	b085      	sub	sp, #20
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	3301      	adds	r3, #1
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801b608:	89fb      	ldrh	r3, [r7, #14]
 801b60a:	021b      	lsls	r3, r3, #8
 801b60c:	b21a      	sxth	r2, r3
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	781b      	ldrb	r3, [r3, #0]
 801b612:	b21b      	sxth	r3, r3
 801b614:	4313      	orrs	r3, r2
 801b616:	b21b      	sxth	r3, r3
 801b618:	81fb      	strh	r3, [r7, #14]
	return rv;
 801b61a:	89fb      	ldrh	r3, [r7, #14]
}
 801b61c:	4618      	mov	r0, r3
 801b61e:	3714      	adds	r7, #20
 801b620:	46bd      	mov	sp, r7
 801b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b626:	4770      	bx	lr

0801b628 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801b628:	b480      	push	{r7}
 801b62a:	b085      	sub	sp, #20
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	3303      	adds	r3, #3
 801b634:	781b      	ldrb	r3, [r3, #0]
 801b636:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	021b      	lsls	r3, r3, #8
 801b63c:	687a      	ldr	r2, [r7, #4]
 801b63e:	3202      	adds	r2, #2
 801b640:	7812      	ldrb	r2, [r2, #0]
 801b642:	4313      	orrs	r3, r2
 801b644:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	021b      	lsls	r3, r3, #8
 801b64a:	687a      	ldr	r2, [r7, #4]
 801b64c:	3201      	adds	r2, #1
 801b64e:	7812      	ldrb	r2, [r2, #0]
 801b650:	4313      	orrs	r3, r2
 801b652:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	021b      	lsls	r3, r3, #8
 801b658:	687a      	ldr	r2, [r7, #4]
 801b65a:	7812      	ldrb	r2, [r2, #0]
 801b65c:	4313      	orrs	r3, r2
 801b65e:	60fb      	str	r3, [r7, #12]
	return rv;
 801b660:	68fb      	ldr	r3, [r7, #12]
}
 801b662:	4618      	mov	r0, r3
 801b664:	3714      	adds	r7, #20
 801b666:	46bd      	mov	sp, r7
 801b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b66c:	4770      	bx	lr

0801b66e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b66e:	b480      	push	{r7}
 801b670:	b083      	sub	sp, #12
 801b672:	af00      	add	r7, sp, #0
 801b674:	6078      	str	r0, [r7, #4]
 801b676:	460b      	mov	r3, r1
 801b678:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	1c5a      	adds	r2, r3, #1
 801b67e:	607a      	str	r2, [r7, #4]
 801b680:	887a      	ldrh	r2, [r7, #2]
 801b682:	b2d2      	uxtb	r2, r2
 801b684:	701a      	strb	r2, [r3, #0]
 801b686:	887b      	ldrh	r3, [r7, #2]
 801b688:	0a1b      	lsrs	r3, r3, #8
 801b68a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	1c5a      	adds	r2, r3, #1
 801b690:	607a      	str	r2, [r7, #4]
 801b692:	887a      	ldrh	r2, [r7, #2]
 801b694:	b2d2      	uxtb	r2, r2
 801b696:	701a      	strb	r2, [r3, #0]
}
 801b698:	bf00      	nop
 801b69a:	370c      	adds	r7, #12
 801b69c:	46bd      	mov	sp, r7
 801b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a2:	4770      	bx	lr

0801b6a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b6a4:	b480      	push	{r7}
 801b6a6:	b083      	sub	sp, #12
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
 801b6ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	1c5a      	adds	r2, r3, #1
 801b6b2:	607a      	str	r2, [r7, #4]
 801b6b4:	683a      	ldr	r2, [r7, #0]
 801b6b6:	b2d2      	uxtb	r2, r2
 801b6b8:	701a      	strb	r2, [r3, #0]
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	0a1b      	lsrs	r3, r3, #8
 801b6be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	1c5a      	adds	r2, r3, #1
 801b6c4:	607a      	str	r2, [r7, #4]
 801b6c6:	683a      	ldr	r2, [r7, #0]
 801b6c8:	b2d2      	uxtb	r2, r2
 801b6ca:	701a      	strb	r2, [r3, #0]
 801b6cc:	683b      	ldr	r3, [r7, #0]
 801b6ce:	0a1b      	lsrs	r3, r3, #8
 801b6d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	1c5a      	adds	r2, r3, #1
 801b6d6:	607a      	str	r2, [r7, #4]
 801b6d8:	683a      	ldr	r2, [r7, #0]
 801b6da:	b2d2      	uxtb	r2, r2
 801b6dc:	701a      	strb	r2, [r3, #0]
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	0a1b      	lsrs	r3, r3, #8
 801b6e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	1c5a      	adds	r2, r3, #1
 801b6e8:	607a      	str	r2, [r7, #4]
 801b6ea:	683a      	ldr	r2, [r7, #0]
 801b6ec:	b2d2      	uxtb	r2, r2
 801b6ee:	701a      	strb	r2, [r3, #0]
}
 801b6f0:	bf00      	nop
 801b6f2:	370c      	adds	r7, #12
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6fa:	4770      	bx	lr

0801b6fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b6fc:	b480      	push	{r7}
 801b6fe:	b087      	sub	sp, #28
 801b700:	af00      	add	r7, sp, #0
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	60b9      	str	r1, [r7, #8]
 801b706:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d00d      	beq.n	801b732 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b716:	693a      	ldr	r2, [r7, #16]
 801b718:	1c53      	adds	r3, r2, #1
 801b71a:	613b      	str	r3, [r7, #16]
 801b71c:	697b      	ldr	r3, [r7, #20]
 801b71e:	1c59      	adds	r1, r3, #1
 801b720:	6179      	str	r1, [r7, #20]
 801b722:	7812      	ldrb	r2, [r2, #0]
 801b724:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	3b01      	subs	r3, #1
 801b72a:	607b      	str	r3, [r7, #4]
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d1f1      	bne.n	801b716 <mem_cpy+0x1a>
	}
}
 801b732:	bf00      	nop
 801b734:	371c      	adds	r7, #28
 801b736:	46bd      	mov	sp, r7
 801b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73c:	4770      	bx	lr

0801b73e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b73e:	b480      	push	{r7}
 801b740:	b087      	sub	sp, #28
 801b742:	af00      	add	r7, sp, #0
 801b744:	60f8      	str	r0, [r7, #12]
 801b746:	60b9      	str	r1, [r7, #8]
 801b748:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b74e:	697b      	ldr	r3, [r7, #20]
 801b750:	1c5a      	adds	r2, r3, #1
 801b752:	617a      	str	r2, [r7, #20]
 801b754:	68ba      	ldr	r2, [r7, #8]
 801b756:	b2d2      	uxtb	r2, r2
 801b758:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	3b01      	subs	r3, #1
 801b75e:	607b      	str	r3, [r7, #4]
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d1f3      	bne.n	801b74e <mem_set+0x10>
}
 801b766:	bf00      	nop
 801b768:	bf00      	nop
 801b76a:	371c      	adds	r7, #28
 801b76c:	46bd      	mov	sp, r7
 801b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b772:	4770      	bx	lr

0801b774 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b774:	b480      	push	{r7}
 801b776:	b089      	sub	sp, #36	; 0x24
 801b778:	af00      	add	r7, sp, #0
 801b77a:	60f8      	str	r0, [r7, #12]
 801b77c:	60b9      	str	r1, [r7, #8]
 801b77e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	61fb      	str	r3, [r7, #28]
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b788:	2300      	movs	r3, #0
 801b78a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b78c:	69fb      	ldr	r3, [r7, #28]
 801b78e:	1c5a      	adds	r2, r3, #1
 801b790:	61fa      	str	r2, [r7, #28]
 801b792:	781b      	ldrb	r3, [r3, #0]
 801b794:	4619      	mov	r1, r3
 801b796:	69bb      	ldr	r3, [r7, #24]
 801b798:	1c5a      	adds	r2, r3, #1
 801b79a:	61ba      	str	r2, [r7, #24]
 801b79c:	781b      	ldrb	r3, [r3, #0]
 801b79e:	1acb      	subs	r3, r1, r3
 801b7a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	3b01      	subs	r3, #1
 801b7a6:	607b      	str	r3, [r7, #4]
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d002      	beq.n	801b7b4 <mem_cmp+0x40>
 801b7ae:	697b      	ldr	r3, [r7, #20]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d0eb      	beq.n	801b78c <mem_cmp+0x18>

	return r;
 801b7b4:	697b      	ldr	r3, [r7, #20]
}
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	3724      	adds	r7, #36	; 0x24
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c0:	4770      	bx	lr

0801b7c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b7c2:	b480      	push	{r7}
 801b7c4:	b083      	sub	sp, #12
 801b7c6:	af00      	add	r7, sp, #0
 801b7c8:	6078      	str	r0, [r7, #4]
 801b7ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b7cc:	e002      	b.n	801b7d4 <chk_chr+0x12>
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	3301      	adds	r3, #1
 801b7d2:	607b      	str	r3, [r7, #4]
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	781b      	ldrb	r3, [r3, #0]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d005      	beq.n	801b7e8 <chk_chr+0x26>
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	781b      	ldrb	r3, [r3, #0]
 801b7e0:	461a      	mov	r2, r3
 801b7e2:	683b      	ldr	r3, [r7, #0]
 801b7e4:	4293      	cmp	r3, r2
 801b7e6:	d1f2      	bne.n	801b7ce <chk_chr+0xc>
	return *str;
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	781b      	ldrb	r3, [r3, #0]
}
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	370c      	adds	r7, #12
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f6:	4770      	bx	lr

0801b7f8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801b7f8:	b580      	push	{r7, lr}
 801b7fa:	b082      	sub	sp, #8
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	2b00      	cmp	r3, #0
 801b804:	d009      	beq.n	801b81a <lock_fs+0x22>
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	691b      	ldr	r3, [r3, #16]
 801b80a:	4618      	mov	r0, r3
 801b80c:	f002 fb98 	bl	801df40 <ff_req_grant>
 801b810:	4603      	mov	r3, r0
 801b812:	2b00      	cmp	r3, #0
 801b814:	d001      	beq.n	801b81a <lock_fs+0x22>
 801b816:	2301      	movs	r3, #1
 801b818:	e000      	b.n	801b81c <lock_fs+0x24>
 801b81a:	2300      	movs	r3, #0
}
 801b81c:	4618      	mov	r0, r3
 801b81e:	3708      	adds	r7, #8
 801b820:	46bd      	mov	sp, r7
 801b822:	bd80      	pop	{r7, pc}

0801b824 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801b824:	b580      	push	{r7, lr}
 801b826:	b082      	sub	sp, #8
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
 801b82c:	460b      	mov	r3, r1
 801b82e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d00d      	beq.n	801b852 <unlock_fs+0x2e>
 801b836:	78fb      	ldrb	r3, [r7, #3]
 801b838:	2b0c      	cmp	r3, #12
 801b83a:	d00a      	beq.n	801b852 <unlock_fs+0x2e>
 801b83c:	78fb      	ldrb	r3, [r7, #3]
 801b83e:	2b0b      	cmp	r3, #11
 801b840:	d007      	beq.n	801b852 <unlock_fs+0x2e>
 801b842:	78fb      	ldrb	r3, [r7, #3]
 801b844:	2b0f      	cmp	r3, #15
 801b846:	d004      	beq.n	801b852 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	691b      	ldr	r3, [r3, #16]
 801b84c:	4618      	mov	r0, r3
 801b84e:	f002 fb8c 	bl	801df6a <ff_rel_grant>
	}
}
 801b852:	bf00      	nop
 801b854:	3708      	adds	r7, #8
 801b856:	46bd      	mov	sp, r7
 801b858:	bd80      	pop	{r7, pc}
	...

0801b85c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b85c:	b480      	push	{r7}
 801b85e:	b085      	sub	sp, #20
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
 801b864:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b866:	2300      	movs	r3, #0
 801b868:	60bb      	str	r3, [r7, #8]
 801b86a:	68bb      	ldr	r3, [r7, #8]
 801b86c:	60fb      	str	r3, [r7, #12]
 801b86e:	e029      	b.n	801b8c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b870:	4a27      	ldr	r2, [pc, #156]	; (801b910 <chk_lock+0xb4>)
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	011b      	lsls	r3, r3, #4
 801b876:	4413      	add	r3, r2
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d01d      	beq.n	801b8ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b87e:	4a24      	ldr	r2, [pc, #144]	; (801b910 <chk_lock+0xb4>)
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	011b      	lsls	r3, r3, #4
 801b884:	4413      	add	r3, r2
 801b886:	681a      	ldr	r2, [r3, #0]
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	429a      	cmp	r2, r3
 801b88e:	d116      	bne.n	801b8be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b890:	4a1f      	ldr	r2, [pc, #124]	; (801b910 <chk_lock+0xb4>)
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	011b      	lsls	r3, r3, #4
 801b896:	4413      	add	r3, r2
 801b898:	3304      	adds	r3, #4
 801b89a:	681a      	ldr	r2, [r3, #0]
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b8a0:	429a      	cmp	r2, r3
 801b8a2:	d10c      	bne.n	801b8be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b8a4:	4a1a      	ldr	r2, [pc, #104]	; (801b910 <chk_lock+0xb4>)
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	011b      	lsls	r3, r3, #4
 801b8aa:	4413      	add	r3, r2
 801b8ac:	3308      	adds	r3, #8
 801b8ae:	681a      	ldr	r2, [r3, #0]
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	d102      	bne.n	801b8be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b8b8:	e007      	b.n	801b8ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b8ba:	2301      	movs	r3, #1
 801b8bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	3301      	adds	r3, #1
 801b8c2:	60fb      	str	r3, [r7, #12]
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	2b01      	cmp	r3, #1
 801b8c8:	d9d2      	bls.n	801b870 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	2b02      	cmp	r3, #2
 801b8ce:	d109      	bne.n	801b8e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b8d0:	68bb      	ldr	r3, [r7, #8]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d102      	bne.n	801b8dc <chk_lock+0x80>
 801b8d6:	683b      	ldr	r3, [r7, #0]
 801b8d8:	2b02      	cmp	r3, #2
 801b8da:	d101      	bne.n	801b8e0 <chk_lock+0x84>
 801b8dc:	2300      	movs	r3, #0
 801b8de:	e010      	b.n	801b902 <chk_lock+0xa6>
 801b8e0:	2312      	movs	r3, #18
 801b8e2:	e00e      	b.n	801b902 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b8e4:	683b      	ldr	r3, [r7, #0]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d108      	bne.n	801b8fc <chk_lock+0xa0>
 801b8ea:	4a09      	ldr	r2, [pc, #36]	; (801b910 <chk_lock+0xb4>)
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	011b      	lsls	r3, r3, #4
 801b8f0:	4413      	add	r3, r2
 801b8f2:	330c      	adds	r3, #12
 801b8f4:	881b      	ldrh	r3, [r3, #0]
 801b8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b8fa:	d101      	bne.n	801b900 <chk_lock+0xa4>
 801b8fc:	2310      	movs	r3, #16
 801b8fe:	e000      	b.n	801b902 <chk_lock+0xa6>
 801b900:	2300      	movs	r3, #0
}
 801b902:	4618      	mov	r0, r3
 801b904:	3714      	adds	r7, #20
 801b906:	46bd      	mov	sp, r7
 801b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90c:	4770      	bx	lr
 801b90e:	bf00      	nop
 801b910:	24003ffc 	.word	0x24003ffc

0801b914 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b914:	b480      	push	{r7}
 801b916:	b083      	sub	sp, #12
 801b918:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b91a:	2300      	movs	r3, #0
 801b91c:	607b      	str	r3, [r7, #4]
 801b91e:	e002      	b.n	801b926 <enq_lock+0x12>
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	3301      	adds	r3, #1
 801b924:	607b      	str	r3, [r7, #4]
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	2b01      	cmp	r3, #1
 801b92a:	d806      	bhi.n	801b93a <enq_lock+0x26>
 801b92c:	4a09      	ldr	r2, [pc, #36]	; (801b954 <enq_lock+0x40>)
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	011b      	lsls	r3, r3, #4
 801b932:	4413      	add	r3, r2
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d1f2      	bne.n	801b920 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	2b02      	cmp	r3, #2
 801b93e:	bf14      	ite	ne
 801b940:	2301      	movne	r3, #1
 801b942:	2300      	moveq	r3, #0
 801b944:	b2db      	uxtb	r3, r3
}
 801b946:	4618      	mov	r0, r3
 801b948:	370c      	adds	r7, #12
 801b94a:	46bd      	mov	sp, r7
 801b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b950:	4770      	bx	lr
 801b952:	bf00      	nop
 801b954:	24003ffc 	.word	0x24003ffc

0801b958 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b958:	b480      	push	{r7}
 801b95a:	b085      	sub	sp, #20
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b962:	2300      	movs	r3, #0
 801b964:	60fb      	str	r3, [r7, #12]
 801b966:	e01f      	b.n	801b9a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b968:	4a41      	ldr	r2, [pc, #260]	; (801ba70 <inc_lock+0x118>)
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	011b      	lsls	r3, r3, #4
 801b96e:	4413      	add	r3, r2
 801b970:	681a      	ldr	r2, [r3, #0]
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	429a      	cmp	r2, r3
 801b978:	d113      	bne.n	801b9a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b97a:	4a3d      	ldr	r2, [pc, #244]	; (801ba70 <inc_lock+0x118>)
 801b97c:	68fb      	ldr	r3, [r7, #12]
 801b97e:	011b      	lsls	r3, r3, #4
 801b980:	4413      	add	r3, r2
 801b982:	3304      	adds	r3, #4
 801b984:	681a      	ldr	r2, [r3, #0]
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b98a:	429a      	cmp	r2, r3
 801b98c:	d109      	bne.n	801b9a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b98e:	4a38      	ldr	r2, [pc, #224]	; (801ba70 <inc_lock+0x118>)
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	011b      	lsls	r3, r3, #4
 801b994:	4413      	add	r3, r2
 801b996:	3308      	adds	r3, #8
 801b998:	681a      	ldr	r2, [r3, #0]
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	d006      	beq.n	801b9b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	3301      	adds	r3, #1
 801b9a6:	60fb      	str	r3, [r7, #12]
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	2b01      	cmp	r3, #1
 801b9ac:	d9dc      	bls.n	801b968 <inc_lock+0x10>
 801b9ae:	e000      	b.n	801b9b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b9b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	2b02      	cmp	r3, #2
 801b9b6:	d132      	bne.n	801ba1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	60fb      	str	r3, [r7, #12]
 801b9bc:	e002      	b.n	801b9c4 <inc_lock+0x6c>
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	3301      	adds	r3, #1
 801b9c2:	60fb      	str	r3, [r7, #12]
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	2b01      	cmp	r3, #1
 801b9c8:	d806      	bhi.n	801b9d8 <inc_lock+0x80>
 801b9ca:	4a29      	ldr	r2, [pc, #164]	; (801ba70 <inc_lock+0x118>)
 801b9cc:	68fb      	ldr	r3, [r7, #12]
 801b9ce:	011b      	lsls	r3, r3, #4
 801b9d0:	4413      	add	r3, r2
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d1f2      	bne.n	801b9be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	2b02      	cmp	r3, #2
 801b9dc:	d101      	bne.n	801b9e2 <inc_lock+0x8a>
 801b9de:	2300      	movs	r3, #0
 801b9e0:	e040      	b.n	801ba64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681a      	ldr	r2, [r3, #0]
 801b9e6:	4922      	ldr	r1, [pc, #136]	; (801ba70 <inc_lock+0x118>)
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	011b      	lsls	r3, r3, #4
 801b9ec:	440b      	add	r3, r1
 801b9ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	689a      	ldr	r2, [r3, #8]
 801b9f4:	491e      	ldr	r1, [pc, #120]	; (801ba70 <inc_lock+0x118>)
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	011b      	lsls	r3, r3, #4
 801b9fa:	440b      	add	r3, r1
 801b9fc:	3304      	adds	r3, #4
 801b9fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	695a      	ldr	r2, [r3, #20]
 801ba04:	491a      	ldr	r1, [pc, #104]	; (801ba70 <inc_lock+0x118>)
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	011b      	lsls	r3, r3, #4
 801ba0a:	440b      	add	r3, r1
 801ba0c:	3308      	adds	r3, #8
 801ba0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801ba10:	4a17      	ldr	r2, [pc, #92]	; (801ba70 <inc_lock+0x118>)
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	011b      	lsls	r3, r3, #4
 801ba16:	4413      	add	r3, r2
 801ba18:	330c      	adds	r3, #12
 801ba1a:	2200      	movs	r2, #0
 801ba1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801ba1e:	683b      	ldr	r3, [r7, #0]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d009      	beq.n	801ba38 <inc_lock+0xe0>
 801ba24:	4a12      	ldr	r2, [pc, #72]	; (801ba70 <inc_lock+0x118>)
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	011b      	lsls	r3, r3, #4
 801ba2a:	4413      	add	r3, r2
 801ba2c:	330c      	adds	r3, #12
 801ba2e:	881b      	ldrh	r3, [r3, #0]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d001      	beq.n	801ba38 <inc_lock+0xe0>
 801ba34:	2300      	movs	r3, #0
 801ba36:	e015      	b.n	801ba64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801ba38:	683b      	ldr	r3, [r7, #0]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d108      	bne.n	801ba50 <inc_lock+0xf8>
 801ba3e:	4a0c      	ldr	r2, [pc, #48]	; (801ba70 <inc_lock+0x118>)
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	011b      	lsls	r3, r3, #4
 801ba44:	4413      	add	r3, r2
 801ba46:	330c      	adds	r3, #12
 801ba48:	881b      	ldrh	r3, [r3, #0]
 801ba4a:	3301      	adds	r3, #1
 801ba4c:	b29a      	uxth	r2, r3
 801ba4e:	e001      	b.n	801ba54 <inc_lock+0xfc>
 801ba50:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ba54:	4906      	ldr	r1, [pc, #24]	; (801ba70 <inc_lock+0x118>)
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	011b      	lsls	r3, r3, #4
 801ba5a:	440b      	add	r3, r1
 801ba5c:	330c      	adds	r3, #12
 801ba5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	3301      	adds	r3, #1
}
 801ba64:	4618      	mov	r0, r3
 801ba66:	3714      	adds	r7, #20
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba6e:	4770      	bx	lr
 801ba70:	24003ffc 	.word	0x24003ffc

0801ba74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801ba74:	b480      	push	{r7}
 801ba76:	b085      	sub	sp, #20
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	3b01      	subs	r3, #1
 801ba80:	607b      	str	r3, [r7, #4]
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	2b01      	cmp	r3, #1
 801ba86:	d825      	bhi.n	801bad4 <dec_lock+0x60>
		n = Files[i].ctr;
 801ba88:	4a17      	ldr	r2, [pc, #92]	; (801bae8 <dec_lock+0x74>)
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	011b      	lsls	r3, r3, #4
 801ba8e:	4413      	add	r3, r2
 801ba90:	330c      	adds	r3, #12
 801ba92:	881b      	ldrh	r3, [r3, #0]
 801ba94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801ba96:	89fb      	ldrh	r3, [r7, #14]
 801ba98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ba9c:	d101      	bne.n	801baa2 <dec_lock+0x2e>
 801ba9e:	2300      	movs	r3, #0
 801baa0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801baa2:	89fb      	ldrh	r3, [r7, #14]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d002      	beq.n	801baae <dec_lock+0x3a>
 801baa8:	89fb      	ldrh	r3, [r7, #14]
 801baaa:	3b01      	subs	r3, #1
 801baac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801baae:	4a0e      	ldr	r2, [pc, #56]	; (801bae8 <dec_lock+0x74>)
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	011b      	lsls	r3, r3, #4
 801bab4:	4413      	add	r3, r2
 801bab6:	330c      	adds	r3, #12
 801bab8:	89fa      	ldrh	r2, [r7, #14]
 801baba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801babc:	89fb      	ldrh	r3, [r7, #14]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d105      	bne.n	801bace <dec_lock+0x5a>
 801bac2:	4a09      	ldr	r2, [pc, #36]	; (801bae8 <dec_lock+0x74>)
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	011b      	lsls	r3, r3, #4
 801bac8:	4413      	add	r3, r2
 801baca:	2200      	movs	r2, #0
 801bacc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801bace:	2300      	movs	r3, #0
 801bad0:	737b      	strb	r3, [r7, #13]
 801bad2:	e001      	b.n	801bad8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801bad4:	2302      	movs	r3, #2
 801bad6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801bad8:	7b7b      	ldrb	r3, [r7, #13]
}
 801bada:	4618      	mov	r0, r3
 801badc:	3714      	adds	r7, #20
 801bade:	46bd      	mov	sp, r7
 801bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bae4:	4770      	bx	lr
 801bae6:	bf00      	nop
 801bae8:	24003ffc 	.word	0x24003ffc

0801baec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801baec:	b480      	push	{r7}
 801baee:	b085      	sub	sp, #20
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801baf4:	2300      	movs	r3, #0
 801baf6:	60fb      	str	r3, [r7, #12]
 801baf8:	e010      	b.n	801bb1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801bafa:	4a0d      	ldr	r2, [pc, #52]	; (801bb30 <clear_lock+0x44>)
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	011b      	lsls	r3, r3, #4
 801bb00:	4413      	add	r3, r2
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	687a      	ldr	r2, [r7, #4]
 801bb06:	429a      	cmp	r2, r3
 801bb08:	d105      	bne.n	801bb16 <clear_lock+0x2a>
 801bb0a:	4a09      	ldr	r2, [pc, #36]	; (801bb30 <clear_lock+0x44>)
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	011b      	lsls	r3, r3, #4
 801bb10:	4413      	add	r3, r2
 801bb12:	2200      	movs	r2, #0
 801bb14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	3301      	adds	r3, #1
 801bb1a:	60fb      	str	r3, [r7, #12]
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	2b01      	cmp	r3, #1
 801bb20:	d9eb      	bls.n	801bafa <clear_lock+0xe>
	}
}
 801bb22:	bf00      	nop
 801bb24:	bf00      	nop
 801bb26:	3714      	adds	r7, #20
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb2e:	4770      	bx	lr
 801bb30:	24003ffc 	.word	0x24003ffc

0801bb34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b086      	sub	sp, #24
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801bb3c:	2300      	movs	r3, #0
 801bb3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	78db      	ldrb	r3, [r3, #3]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d034      	beq.n	801bbb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	7858      	ldrb	r0, [r3, #1]
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801bb58:	2301      	movs	r3, #1
 801bb5a:	697a      	ldr	r2, [r7, #20]
 801bb5c:	f7ff fd0e 	bl	801b57c <disk_write>
 801bb60:	4603      	mov	r3, r0
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d002      	beq.n	801bb6c <sync_window+0x38>
			res = FR_DISK_ERR;
 801bb66:	2301      	movs	r3, #1
 801bb68:	73fb      	strb	r3, [r7, #15]
 801bb6a:	e022      	b.n	801bbb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2200      	movs	r2, #0
 801bb70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb76:	697a      	ldr	r2, [r7, #20]
 801bb78:	1ad2      	subs	r2, r2, r3
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	6a1b      	ldr	r3, [r3, #32]
 801bb7e:	429a      	cmp	r2, r3
 801bb80:	d217      	bcs.n	801bbb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	789b      	ldrb	r3, [r3, #2]
 801bb86:	613b      	str	r3, [r7, #16]
 801bb88:	e010      	b.n	801bbac <sync_window+0x78>
					wsect += fs->fsize;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	6a1b      	ldr	r3, [r3, #32]
 801bb8e:	697a      	ldr	r2, [r7, #20]
 801bb90:	4413      	add	r3, r2
 801bb92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	7858      	ldrb	r0, [r3, #1]
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801bb9e:	2301      	movs	r3, #1
 801bba0:	697a      	ldr	r2, [r7, #20]
 801bba2:	f7ff fceb 	bl	801b57c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801bba6:	693b      	ldr	r3, [r7, #16]
 801bba8:	3b01      	subs	r3, #1
 801bbaa:	613b      	str	r3, [r7, #16]
 801bbac:	693b      	ldr	r3, [r7, #16]
 801bbae:	2b01      	cmp	r3, #1
 801bbb0:	d8eb      	bhi.n	801bb8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801bbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	3718      	adds	r7, #24
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bd80      	pop	{r7, pc}

0801bbbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801bbbc:	b580      	push	{r7, lr}
 801bbbe:	b084      	sub	sp, #16
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
 801bbc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801bbc6:	2300      	movs	r3, #0
 801bbc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbce:	683a      	ldr	r2, [r7, #0]
 801bbd0:	429a      	cmp	r2, r3
 801bbd2:	d01b      	beq.n	801bc0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	f7ff ffad 	bl	801bb34 <sync_window>
 801bbda:	4603      	mov	r3, r0
 801bbdc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801bbde:	7bfb      	ldrb	r3, [r7, #15]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d113      	bne.n	801bc0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	7858      	ldrb	r0, [r3, #1]
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801bbee:	2301      	movs	r3, #1
 801bbf0:	683a      	ldr	r2, [r7, #0]
 801bbf2:	f7ff fca3 	bl	801b53c <disk_read>
 801bbf6:	4603      	mov	r3, r0
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d004      	beq.n	801bc06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801bbfc:	f04f 33ff 	mov.w	r3, #4294967295
 801bc00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801bc02:	2301      	movs	r3, #1
 801bc04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	683a      	ldr	r2, [r7, #0]
 801bc0a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801bc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc0e:	4618      	mov	r0, r3
 801bc10:	3710      	adds	r7, #16
 801bc12:	46bd      	mov	sp, r7
 801bc14:	bd80      	pop	{r7, pc}
	...

0801bc18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b084      	sub	sp, #16
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801bc20:	6878      	ldr	r0, [r7, #4]
 801bc22:	f7ff ff87 	bl	801bb34 <sync_window>
 801bc26:	4603      	mov	r3, r0
 801bc28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801bc2a:	7bfb      	ldrb	r3, [r7, #15]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d159      	bne.n	801bce4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	781b      	ldrb	r3, [r3, #0]
 801bc34:	2b03      	cmp	r3, #3
 801bc36:	d149      	bne.n	801bccc <sync_fs+0xb4>
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	791b      	ldrb	r3, [r3, #4]
 801bc3c:	2b01      	cmp	r3, #1
 801bc3e:	d145      	bne.n	801bccc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	899b      	ldrh	r3, [r3, #12]
 801bc4a:	461a      	mov	r2, r3
 801bc4c:	2100      	movs	r1, #0
 801bc4e:	f7ff fd76 	bl	801b73e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	3338      	adds	r3, #56	; 0x38
 801bc56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801bc5a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801bc5e:	4618      	mov	r0, r3
 801bc60:	f7ff fd05 	bl	801b66e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	3338      	adds	r3, #56	; 0x38
 801bc68:	4921      	ldr	r1, [pc, #132]	; (801bcf0 <sync_fs+0xd8>)
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f7ff fd1a 	bl	801b6a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	3338      	adds	r3, #56	; 0x38
 801bc74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801bc78:	491e      	ldr	r1, [pc, #120]	; (801bcf4 <sync_fs+0xdc>)
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	f7ff fd12 	bl	801b6a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	3338      	adds	r3, #56	; 0x38
 801bc84:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	699b      	ldr	r3, [r3, #24]
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	4610      	mov	r0, r2
 801bc90:	f7ff fd08 	bl	801b6a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	3338      	adds	r3, #56	; 0x38
 801bc98:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	695b      	ldr	r3, [r3, #20]
 801bca0:	4619      	mov	r1, r3
 801bca2:	4610      	mov	r0, r2
 801bca4:	f7ff fcfe 	bl	801b6a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcac:	1c5a      	adds	r2, r3, #1
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	7858      	ldrb	r0, [r3, #1]
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bcc0:	2301      	movs	r3, #1
 801bcc2:	f7ff fc5b 	bl	801b57c <disk_write>
			fs->fsi_flag = 0;
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	2200      	movs	r2, #0
 801bcca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	785b      	ldrb	r3, [r3, #1]
 801bcd0:	2200      	movs	r2, #0
 801bcd2:	2100      	movs	r1, #0
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f7ff fc71 	bl	801b5bc <disk_ioctl>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d001      	beq.n	801bce4 <sync_fs+0xcc>
 801bce0:	2301      	movs	r3, #1
 801bce2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801bce4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bce6:	4618      	mov	r0, r3
 801bce8:	3710      	adds	r7, #16
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}
 801bcee:	bf00      	nop
 801bcf0:	41615252 	.word	0x41615252
 801bcf4:	61417272 	.word	0x61417272

0801bcf8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801bcf8:	b480      	push	{r7}
 801bcfa:	b083      	sub	sp, #12
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	6078      	str	r0, [r7, #4]
 801bd00:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	3b02      	subs	r3, #2
 801bd06:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	69db      	ldr	r3, [r3, #28]
 801bd0c:	3b02      	subs	r3, #2
 801bd0e:	683a      	ldr	r2, [r7, #0]
 801bd10:	429a      	cmp	r2, r3
 801bd12:	d301      	bcc.n	801bd18 <clust2sect+0x20>
 801bd14:	2300      	movs	r3, #0
 801bd16:	e008      	b.n	801bd2a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	895b      	ldrh	r3, [r3, #10]
 801bd1c:	461a      	mov	r2, r3
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	fb03 f202 	mul.w	r2, r3, r2
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd28:	4413      	add	r3, r2
}
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	370c      	adds	r7, #12
 801bd2e:	46bd      	mov	sp, r7
 801bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd34:	4770      	bx	lr

0801bd36 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801bd36:	b580      	push	{r7, lr}
 801bd38:	b086      	sub	sp, #24
 801bd3a:	af00      	add	r7, sp, #0
 801bd3c:	6078      	str	r0, [r7, #4]
 801bd3e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	2b01      	cmp	r3, #1
 801bd4a:	d904      	bls.n	801bd56 <get_fat+0x20>
 801bd4c:	693b      	ldr	r3, [r7, #16]
 801bd4e:	69db      	ldr	r3, [r3, #28]
 801bd50:	683a      	ldr	r2, [r7, #0]
 801bd52:	429a      	cmp	r2, r3
 801bd54:	d302      	bcc.n	801bd5c <get_fat+0x26>
		val = 1;	/* Internal error */
 801bd56:	2301      	movs	r3, #1
 801bd58:	617b      	str	r3, [r7, #20]
 801bd5a:	e0bb      	b.n	801bed4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801bd5c:	f04f 33ff 	mov.w	r3, #4294967295
 801bd60:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801bd62:	693b      	ldr	r3, [r7, #16]
 801bd64:	781b      	ldrb	r3, [r3, #0]
 801bd66:	2b03      	cmp	r3, #3
 801bd68:	f000 8083 	beq.w	801be72 <get_fat+0x13c>
 801bd6c:	2b03      	cmp	r3, #3
 801bd6e:	f300 80a7 	bgt.w	801bec0 <get_fat+0x18a>
 801bd72:	2b01      	cmp	r3, #1
 801bd74:	d002      	beq.n	801bd7c <get_fat+0x46>
 801bd76:	2b02      	cmp	r3, #2
 801bd78:	d056      	beq.n	801be28 <get_fat+0xf2>
 801bd7a:	e0a1      	b.n	801bec0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801bd7c:	683b      	ldr	r3, [r7, #0]
 801bd7e:	60fb      	str	r3, [r7, #12]
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	085b      	lsrs	r3, r3, #1
 801bd84:	68fa      	ldr	r2, [r7, #12]
 801bd86:	4413      	add	r3, r2
 801bd88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801bd8a:	693b      	ldr	r3, [r7, #16]
 801bd8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bd8e:	693b      	ldr	r3, [r7, #16]
 801bd90:	899b      	ldrh	r3, [r3, #12]
 801bd92:	4619      	mov	r1, r3
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd9a:	4413      	add	r3, r2
 801bd9c:	4619      	mov	r1, r3
 801bd9e:	6938      	ldr	r0, [r7, #16]
 801bda0:	f7ff ff0c 	bl	801bbbc <move_window>
 801bda4:	4603      	mov	r3, r0
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	f040 808d 	bne.w	801bec6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801bdac:	68fb      	ldr	r3, [r7, #12]
 801bdae:	1c5a      	adds	r2, r3, #1
 801bdb0:	60fa      	str	r2, [r7, #12]
 801bdb2:	693a      	ldr	r2, [r7, #16]
 801bdb4:	8992      	ldrh	r2, [r2, #12]
 801bdb6:	fbb3 f1f2 	udiv	r1, r3, r2
 801bdba:	fb01 f202 	mul.w	r2, r1, r2
 801bdbe:	1a9b      	subs	r3, r3, r2
 801bdc0:	693a      	ldr	r2, [r7, #16]
 801bdc2:	4413      	add	r3, r2
 801bdc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bdc8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801bdca:	693b      	ldr	r3, [r7, #16]
 801bdcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bdce:	693b      	ldr	r3, [r7, #16]
 801bdd0:	899b      	ldrh	r3, [r3, #12]
 801bdd2:	4619      	mov	r1, r3
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	fbb3 f3f1 	udiv	r3, r3, r1
 801bdda:	4413      	add	r3, r2
 801bddc:	4619      	mov	r1, r3
 801bdde:	6938      	ldr	r0, [r7, #16]
 801bde0:	f7ff feec 	bl	801bbbc <move_window>
 801bde4:	4603      	mov	r3, r0
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d16f      	bne.n	801beca <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801bdea:	693b      	ldr	r3, [r7, #16]
 801bdec:	899b      	ldrh	r3, [r3, #12]
 801bdee:	461a      	mov	r2, r3
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	fbb3 f1f2 	udiv	r1, r3, r2
 801bdf6:	fb01 f202 	mul.w	r2, r1, r2
 801bdfa:	1a9b      	subs	r3, r3, r2
 801bdfc:	693a      	ldr	r2, [r7, #16]
 801bdfe:	4413      	add	r3, r2
 801be00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801be04:	021b      	lsls	r3, r3, #8
 801be06:	461a      	mov	r2, r3
 801be08:	68bb      	ldr	r3, [r7, #8]
 801be0a:	4313      	orrs	r3, r2
 801be0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801be0e:	683b      	ldr	r3, [r7, #0]
 801be10:	f003 0301 	and.w	r3, r3, #1
 801be14:	2b00      	cmp	r3, #0
 801be16:	d002      	beq.n	801be1e <get_fat+0xe8>
 801be18:	68bb      	ldr	r3, [r7, #8]
 801be1a:	091b      	lsrs	r3, r3, #4
 801be1c:	e002      	b.n	801be24 <get_fat+0xee>
 801be1e:	68bb      	ldr	r3, [r7, #8]
 801be20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801be24:	617b      	str	r3, [r7, #20]
			break;
 801be26:	e055      	b.n	801bed4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801be28:	693b      	ldr	r3, [r7, #16]
 801be2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801be2c:	693b      	ldr	r3, [r7, #16]
 801be2e:	899b      	ldrh	r3, [r3, #12]
 801be30:	085b      	lsrs	r3, r3, #1
 801be32:	b29b      	uxth	r3, r3
 801be34:	4619      	mov	r1, r3
 801be36:	683b      	ldr	r3, [r7, #0]
 801be38:	fbb3 f3f1 	udiv	r3, r3, r1
 801be3c:	4413      	add	r3, r2
 801be3e:	4619      	mov	r1, r3
 801be40:	6938      	ldr	r0, [r7, #16]
 801be42:	f7ff febb 	bl	801bbbc <move_window>
 801be46:	4603      	mov	r3, r0
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d140      	bne.n	801bece <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	005b      	lsls	r3, r3, #1
 801be56:	693a      	ldr	r2, [r7, #16]
 801be58:	8992      	ldrh	r2, [r2, #12]
 801be5a:	fbb3 f0f2 	udiv	r0, r3, r2
 801be5e:	fb00 f202 	mul.w	r2, r0, r2
 801be62:	1a9b      	subs	r3, r3, r2
 801be64:	440b      	add	r3, r1
 801be66:	4618      	mov	r0, r3
 801be68:	f7ff fbc6 	bl	801b5f8 <ld_word>
 801be6c:	4603      	mov	r3, r0
 801be6e:	617b      	str	r3, [r7, #20]
			break;
 801be70:	e030      	b.n	801bed4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801be72:	693b      	ldr	r3, [r7, #16]
 801be74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801be76:	693b      	ldr	r3, [r7, #16]
 801be78:	899b      	ldrh	r3, [r3, #12]
 801be7a:	089b      	lsrs	r3, r3, #2
 801be7c:	b29b      	uxth	r3, r3
 801be7e:	4619      	mov	r1, r3
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	fbb3 f3f1 	udiv	r3, r3, r1
 801be86:	4413      	add	r3, r2
 801be88:	4619      	mov	r1, r3
 801be8a:	6938      	ldr	r0, [r7, #16]
 801be8c:	f7ff fe96 	bl	801bbbc <move_window>
 801be90:	4603      	mov	r3, r0
 801be92:	2b00      	cmp	r3, #0
 801be94:	d11d      	bne.n	801bed2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801be96:	693b      	ldr	r3, [r7, #16]
 801be98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801be9c:	683b      	ldr	r3, [r7, #0]
 801be9e:	009b      	lsls	r3, r3, #2
 801bea0:	693a      	ldr	r2, [r7, #16]
 801bea2:	8992      	ldrh	r2, [r2, #12]
 801bea4:	fbb3 f0f2 	udiv	r0, r3, r2
 801bea8:	fb00 f202 	mul.w	r2, r0, r2
 801beac:	1a9b      	subs	r3, r3, r2
 801beae:	440b      	add	r3, r1
 801beb0:	4618      	mov	r0, r3
 801beb2:	f7ff fbb9 	bl	801b628 <ld_dword>
 801beb6:	4603      	mov	r3, r0
 801beb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801bebc:	617b      	str	r3, [r7, #20]
			break;
 801bebe:	e009      	b.n	801bed4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801bec0:	2301      	movs	r3, #1
 801bec2:	617b      	str	r3, [r7, #20]
 801bec4:	e006      	b.n	801bed4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801bec6:	bf00      	nop
 801bec8:	e004      	b.n	801bed4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801beca:	bf00      	nop
 801becc:	e002      	b.n	801bed4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801bece:	bf00      	nop
 801bed0:	e000      	b.n	801bed4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801bed2:	bf00      	nop
		}
	}

	return val;
 801bed4:	697b      	ldr	r3, [r7, #20]
}
 801bed6:	4618      	mov	r0, r3
 801bed8:	3718      	adds	r7, #24
 801beda:	46bd      	mov	sp, r7
 801bedc:	bd80      	pop	{r7, pc}

0801bede <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801bede:	b590      	push	{r4, r7, lr}
 801bee0:	b089      	sub	sp, #36	; 0x24
 801bee2:	af00      	add	r7, sp, #0
 801bee4:	60f8      	str	r0, [r7, #12]
 801bee6:	60b9      	str	r1, [r7, #8]
 801bee8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801beea:	2302      	movs	r3, #2
 801beec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801beee:	68bb      	ldr	r3, [r7, #8]
 801bef0:	2b01      	cmp	r3, #1
 801bef2:	f240 8102 	bls.w	801c0fa <put_fat+0x21c>
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	69db      	ldr	r3, [r3, #28]
 801befa:	68ba      	ldr	r2, [r7, #8]
 801befc:	429a      	cmp	r2, r3
 801befe:	f080 80fc 	bcs.w	801c0fa <put_fat+0x21c>
		switch (fs->fs_type) {
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	781b      	ldrb	r3, [r3, #0]
 801bf06:	2b03      	cmp	r3, #3
 801bf08:	f000 80b6 	beq.w	801c078 <put_fat+0x19a>
 801bf0c:	2b03      	cmp	r3, #3
 801bf0e:	f300 80fd 	bgt.w	801c10c <put_fat+0x22e>
 801bf12:	2b01      	cmp	r3, #1
 801bf14:	d003      	beq.n	801bf1e <put_fat+0x40>
 801bf16:	2b02      	cmp	r3, #2
 801bf18:	f000 8083 	beq.w	801c022 <put_fat+0x144>
 801bf1c:	e0f6      	b.n	801c10c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801bf1e:	68bb      	ldr	r3, [r7, #8]
 801bf20:	61bb      	str	r3, [r7, #24]
 801bf22:	69bb      	ldr	r3, [r7, #24]
 801bf24:	085b      	lsrs	r3, r3, #1
 801bf26:	69ba      	ldr	r2, [r7, #24]
 801bf28:	4413      	add	r3, r2
 801bf2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	899b      	ldrh	r3, [r3, #12]
 801bf34:	4619      	mov	r1, r3
 801bf36:	69bb      	ldr	r3, [r7, #24]
 801bf38:	fbb3 f3f1 	udiv	r3, r3, r1
 801bf3c:	4413      	add	r3, r2
 801bf3e:	4619      	mov	r1, r3
 801bf40:	68f8      	ldr	r0, [r7, #12]
 801bf42:	f7ff fe3b 	bl	801bbbc <move_window>
 801bf46:	4603      	mov	r3, r0
 801bf48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bf4a:	7ffb      	ldrb	r3, [r7, #31]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	f040 80d6 	bne.w	801c0fe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801bf58:	69bb      	ldr	r3, [r7, #24]
 801bf5a:	1c5a      	adds	r2, r3, #1
 801bf5c:	61ba      	str	r2, [r7, #24]
 801bf5e:	68fa      	ldr	r2, [r7, #12]
 801bf60:	8992      	ldrh	r2, [r2, #12]
 801bf62:	fbb3 f0f2 	udiv	r0, r3, r2
 801bf66:	fb00 f202 	mul.w	r2, r0, r2
 801bf6a:	1a9b      	subs	r3, r3, r2
 801bf6c:	440b      	add	r3, r1
 801bf6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801bf70:	68bb      	ldr	r3, [r7, #8]
 801bf72:	f003 0301 	and.w	r3, r3, #1
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d00d      	beq.n	801bf96 <put_fat+0xb8>
 801bf7a:	697b      	ldr	r3, [r7, #20]
 801bf7c:	781b      	ldrb	r3, [r3, #0]
 801bf7e:	b25b      	sxtb	r3, r3
 801bf80:	f003 030f 	and.w	r3, r3, #15
 801bf84:	b25a      	sxtb	r2, r3
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	b2db      	uxtb	r3, r3
 801bf8a:	011b      	lsls	r3, r3, #4
 801bf8c:	b25b      	sxtb	r3, r3
 801bf8e:	4313      	orrs	r3, r2
 801bf90:	b25b      	sxtb	r3, r3
 801bf92:	b2db      	uxtb	r3, r3
 801bf94:	e001      	b.n	801bf9a <put_fat+0xbc>
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	b2db      	uxtb	r3, r3
 801bf9a:	697a      	ldr	r2, [r7, #20]
 801bf9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	2201      	movs	r2, #1
 801bfa2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	899b      	ldrh	r3, [r3, #12]
 801bfac:	4619      	mov	r1, r3
 801bfae:	69bb      	ldr	r3, [r7, #24]
 801bfb0:	fbb3 f3f1 	udiv	r3, r3, r1
 801bfb4:	4413      	add	r3, r2
 801bfb6:	4619      	mov	r1, r3
 801bfb8:	68f8      	ldr	r0, [r7, #12]
 801bfba:	f7ff fdff 	bl	801bbbc <move_window>
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801bfc2:	7ffb      	ldrb	r3, [r7, #31]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	f040 809c 	bne.w	801c102 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	899b      	ldrh	r3, [r3, #12]
 801bfd4:	461a      	mov	r2, r3
 801bfd6:	69bb      	ldr	r3, [r7, #24]
 801bfd8:	fbb3 f0f2 	udiv	r0, r3, r2
 801bfdc:	fb00 f202 	mul.w	r2, r0, r2
 801bfe0:	1a9b      	subs	r3, r3, r2
 801bfe2:	440b      	add	r3, r1
 801bfe4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801bfe6:	68bb      	ldr	r3, [r7, #8]
 801bfe8:	f003 0301 	and.w	r3, r3, #1
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d003      	beq.n	801bff8 <put_fat+0x11a>
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	091b      	lsrs	r3, r3, #4
 801bff4:	b2db      	uxtb	r3, r3
 801bff6:	e00e      	b.n	801c016 <put_fat+0x138>
 801bff8:	697b      	ldr	r3, [r7, #20]
 801bffa:	781b      	ldrb	r3, [r3, #0]
 801bffc:	b25b      	sxtb	r3, r3
 801bffe:	f023 030f 	bic.w	r3, r3, #15
 801c002:	b25a      	sxtb	r2, r3
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	0a1b      	lsrs	r3, r3, #8
 801c008:	b25b      	sxtb	r3, r3
 801c00a:	f003 030f 	and.w	r3, r3, #15
 801c00e:	b25b      	sxtb	r3, r3
 801c010:	4313      	orrs	r3, r2
 801c012:	b25b      	sxtb	r3, r3
 801c014:	b2db      	uxtb	r3, r3
 801c016:	697a      	ldr	r2, [r7, #20]
 801c018:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	2201      	movs	r2, #1
 801c01e:	70da      	strb	r2, [r3, #3]
			break;
 801c020:	e074      	b.n	801c10c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	899b      	ldrh	r3, [r3, #12]
 801c02a:	085b      	lsrs	r3, r3, #1
 801c02c:	b29b      	uxth	r3, r3
 801c02e:	4619      	mov	r1, r3
 801c030:	68bb      	ldr	r3, [r7, #8]
 801c032:	fbb3 f3f1 	udiv	r3, r3, r1
 801c036:	4413      	add	r3, r2
 801c038:	4619      	mov	r1, r3
 801c03a:	68f8      	ldr	r0, [r7, #12]
 801c03c:	f7ff fdbe 	bl	801bbbc <move_window>
 801c040:	4603      	mov	r3, r0
 801c042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c044:	7ffb      	ldrb	r3, [r7, #31]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d15d      	bne.n	801c106 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801c050:	68bb      	ldr	r3, [r7, #8]
 801c052:	005b      	lsls	r3, r3, #1
 801c054:	68fa      	ldr	r2, [r7, #12]
 801c056:	8992      	ldrh	r2, [r2, #12]
 801c058:	fbb3 f0f2 	udiv	r0, r3, r2
 801c05c:	fb00 f202 	mul.w	r2, r0, r2
 801c060:	1a9b      	subs	r3, r3, r2
 801c062:	440b      	add	r3, r1
 801c064:	687a      	ldr	r2, [r7, #4]
 801c066:	b292      	uxth	r2, r2
 801c068:	4611      	mov	r1, r2
 801c06a:	4618      	mov	r0, r3
 801c06c:	f7ff faff 	bl	801b66e <st_word>
			fs->wflag = 1;
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	2201      	movs	r2, #1
 801c074:	70da      	strb	r2, [r3, #3]
			break;
 801c076:	e049      	b.n	801c10c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	899b      	ldrh	r3, [r3, #12]
 801c080:	089b      	lsrs	r3, r3, #2
 801c082:	b29b      	uxth	r3, r3
 801c084:	4619      	mov	r1, r3
 801c086:	68bb      	ldr	r3, [r7, #8]
 801c088:	fbb3 f3f1 	udiv	r3, r3, r1
 801c08c:	4413      	add	r3, r2
 801c08e:	4619      	mov	r1, r3
 801c090:	68f8      	ldr	r0, [r7, #12]
 801c092:	f7ff fd93 	bl	801bbbc <move_window>
 801c096:	4603      	mov	r3, r0
 801c098:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c09a:	7ffb      	ldrb	r3, [r7, #31]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d134      	bne.n	801c10a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801c0ac:	68bb      	ldr	r3, [r7, #8]
 801c0ae:	009b      	lsls	r3, r3, #2
 801c0b0:	68fa      	ldr	r2, [r7, #12]
 801c0b2:	8992      	ldrh	r2, [r2, #12]
 801c0b4:	fbb3 f0f2 	udiv	r0, r3, r2
 801c0b8:	fb00 f202 	mul.w	r2, r0, r2
 801c0bc:	1a9b      	subs	r3, r3, r2
 801c0be:	440b      	add	r3, r1
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f7ff fab1 	bl	801b628 <ld_dword>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c0cc:	4323      	orrs	r3, r4
 801c0ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801c0d6:	68bb      	ldr	r3, [r7, #8]
 801c0d8:	009b      	lsls	r3, r3, #2
 801c0da:	68fa      	ldr	r2, [r7, #12]
 801c0dc:	8992      	ldrh	r2, [r2, #12]
 801c0de:	fbb3 f0f2 	udiv	r0, r3, r2
 801c0e2:	fb00 f202 	mul.w	r2, r0, r2
 801c0e6:	1a9b      	subs	r3, r3, r2
 801c0e8:	440b      	add	r3, r1
 801c0ea:	6879      	ldr	r1, [r7, #4]
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	f7ff fad9 	bl	801b6a4 <st_dword>
			fs->wflag = 1;
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	2201      	movs	r2, #1
 801c0f6:	70da      	strb	r2, [r3, #3]
			break;
 801c0f8:	e008      	b.n	801c10c <put_fat+0x22e>
		}
	}
 801c0fa:	bf00      	nop
 801c0fc:	e006      	b.n	801c10c <put_fat+0x22e>
			if (res != FR_OK) break;
 801c0fe:	bf00      	nop
 801c100:	e004      	b.n	801c10c <put_fat+0x22e>
			if (res != FR_OK) break;
 801c102:	bf00      	nop
 801c104:	e002      	b.n	801c10c <put_fat+0x22e>
			if (res != FR_OK) break;
 801c106:	bf00      	nop
 801c108:	e000      	b.n	801c10c <put_fat+0x22e>
			if (res != FR_OK) break;
 801c10a:	bf00      	nop
	return res;
 801c10c:	7ffb      	ldrb	r3, [r7, #31]
}
 801c10e:	4618      	mov	r0, r3
 801c110:	3724      	adds	r7, #36	; 0x24
 801c112:	46bd      	mov	sp, r7
 801c114:	bd90      	pop	{r4, r7, pc}

0801c116 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801c116:	b580      	push	{r7, lr}
 801c118:	b088      	sub	sp, #32
 801c11a:	af00      	add	r7, sp, #0
 801c11c:	60f8      	str	r0, [r7, #12]
 801c11e:	60b9      	str	r1, [r7, #8]
 801c120:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801c122:	2300      	movs	r3, #0
 801c124:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801c12c:	68bb      	ldr	r3, [r7, #8]
 801c12e:	2b01      	cmp	r3, #1
 801c130:	d904      	bls.n	801c13c <remove_chain+0x26>
 801c132:	69bb      	ldr	r3, [r7, #24]
 801c134:	69db      	ldr	r3, [r3, #28]
 801c136:	68ba      	ldr	r2, [r7, #8]
 801c138:	429a      	cmp	r2, r3
 801c13a:	d301      	bcc.n	801c140 <remove_chain+0x2a>
 801c13c:	2302      	movs	r3, #2
 801c13e:	e04b      	b.n	801c1d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	2b00      	cmp	r3, #0
 801c144:	d00c      	beq.n	801c160 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801c146:	f04f 32ff 	mov.w	r2, #4294967295
 801c14a:	6879      	ldr	r1, [r7, #4]
 801c14c:	69b8      	ldr	r0, [r7, #24]
 801c14e:	f7ff fec6 	bl	801bede <put_fat>
 801c152:	4603      	mov	r3, r0
 801c154:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801c156:	7ffb      	ldrb	r3, [r7, #31]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d001      	beq.n	801c160 <remove_chain+0x4a>
 801c15c:	7ffb      	ldrb	r3, [r7, #31]
 801c15e:	e03b      	b.n	801c1d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801c160:	68b9      	ldr	r1, [r7, #8]
 801c162:	68f8      	ldr	r0, [r7, #12]
 801c164:	f7ff fde7 	bl	801bd36 <get_fat>
 801c168:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801c16a:	697b      	ldr	r3, [r7, #20]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d031      	beq.n	801c1d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	2b01      	cmp	r3, #1
 801c174:	d101      	bne.n	801c17a <remove_chain+0x64>
 801c176:	2302      	movs	r3, #2
 801c178:	e02e      	b.n	801c1d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801c17a:	697b      	ldr	r3, [r7, #20]
 801c17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c180:	d101      	bne.n	801c186 <remove_chain+0x70>
 801c182:	2301      	movs	r3, #1
 801c184:	e028      	b.n	801c1d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801c186:	2200      	movs	r2, #0
 801c188:	68b9      	ldr	r1, [r7, #8]
 801c18a:	69b8      	ldr	r0, [r7, #24]
 801c18c:	f7ff fea7 	bl	801bede <put_fat>
 801c190:	4603      	mov	r3, r0
 801c192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801c194:	7ffb      	ldrb	r3, [r7, #31]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d001      	beq.n	801c19e <remove_chain+0x88>
 801c19a:	7ffb      	ldrb	r3, [r7, #31]
 801c19c:	e01c      	b.n	801c1d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801c19e:	69bb      	ldr	r3, [r7, #24]
 801c1a0:	699a      	ldr	r2, [r3, #24]
 801c1a2:	69bb      	ldr	r3, [r7, #24]
 801c1a4:	69db      	ldr	r3, [r3, #28]
 801c1a6:	3b02      	subs	r3, #2
 801c1a8:	429a      	cmp	r2, r3
 801c1aa:	d20b      	bcs.n	801c1c4 <remove_chain+0xae>
			fs->free_clst++;
 801c1ac:	69bb      	ldr	r3, [r7, #24]
 801c1ae:	699b      	ldr	r3, [r3, #24]
 801c1b0:	1c5a      	adds	r2, r3, #1
 801c1b2:	69bb      	ldr	r3, [r7, #24]
 801c1b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801c1b6:	69bb      	ldr	r3, [r7, #24]
 801c1b8:	791b      	ldrb	r3, [r3, #4]
 801c1ba:	f043 0301 	orr.w	r3, r3, #1
 801c1be:	b2da      	uxtb	r2, r3
 801c1c0:	69bb      	ldr	r3, [r7, #24]
 801c1c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801c1c8:	69bb      	ldr	r3, [r7, #24]
 801c1ca:	69db      	ldr	r3, [r3, #28]
 801c1cc:	68ba      	ldr	r2, [r7, #8]
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	d3c6      	bcc.n	801c160 <remove_chain+0x4a>
 801c1d2:	e000      	b.n	801c1d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801c1d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801c1d6:	2300      	movs	r3, #0
}
 801c1d8:	4618      	mov	r0, r3
 801c1da:	3720      	adds	r7, #32
 801c1dc:	46bd      	mov	sp, r7
 801c1de:	bd80      	pop	{r7, pc}

0801c1e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b088      	sub	sp, #32
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
 801c1e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801c1f0:	683b      	ldr	r3, [r7, #0]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d10d      	bne.n	801c212 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801c1f6:	693b      	ldr	r3, [r7, #16]
 801c1f8:	695b      	ldr	r3, [r3, #20]
 801c1fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801c1fc:	69bb      	ldr	r3, [r7, #24]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d004      	beq.n	801c20c <create_chain+0x2c>
 801c202:	693b      	ldr	r3, [r7, #16]
 801c204:	69db      	ldr	r3, [r3, #28]
 801c206:	69ba      	ldr	r2, [r7, #24]
 801c208:	429a      	cmp	r2, r3
 801c20a:	d31b      	bcc.n	801c244 <create_chain+0x64>
 801c20c:	2301      	movs	r3, #1
 801c20e:	61bb      	str	r3, [r7, #24]
 801c210:	e018      	b.n	801c244 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801c212:	6839      	ldr	r1, [r7, #0]
 801c214:	6878      	ldr	r0, [r7, #4]
 801c216:	f7ff fd8e 	bl	801bd36 <get_fat>
 801c21a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	2b01      	cmp	r3, #1
 801c220:	d801      	bhi.n	801c226 <create_chain+0x46>
 801c222:	2301      	movs	r3, #1
 801c224:	e070      	b.n	801c308 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c22c:	d101      	bne.n	801c232 <create_chain+0x52>
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	e06a      	b.n	801c308 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801c232:	693b      	ldr	r3, [r7, #16]
 801c234:	69db      	ldr	r3, [r3, #28]
 801c236:	68fa      	ldr	r2, [r7, #12]
 801c238:	429a      	cmp	r2, r3
 801c23a:	d201      	bcs.n	801c240 <create_chain+0x60>
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	e063      	b.n	801c308 <create_chain+0x128>
		scl = clst;
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801c244:	69bb      	ldr	r3, [r7, #24]
 801c246:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801c248:	69fb      	ldr	r3, [r7, #28]
 801c24a:	3301      	adds	r3, #1
 801c24c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801c24e:	693b      	ldr	r3, [r7, #16]
 801c250:	69db      	ldr	r3, [r3, #28]
 801c252:	69fa      	ldr	r2, [r7, #28]
 801c254:	429a      	cmp	r2, r3
 801c256:	d307      	bcc.n	801c268 <create_chain+0x88>
				ncl = 2;
 801c258:	2302      	movs	r3, #2
 801c25a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801c25c:	69fa      	ldr	r2, [r7, #28]
 801c25e:	69bb      	ldr	r3, [r7, #24]
 801c260:	429a      	cmp	r2, r3
 801c262:	d901      	bls.n	801c268 <create_chain+0x88>
 801c264:	2300      	movs	r3, #0
 801c266:	e04f      	b.n	801c308 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801c268:	69f9      	ldr	r1, [r7, #28]
 801c26a:	6878      	ldr	r0, [r7, #4]
 801c26c:	f7ff fd63 	bl	801bd36 <get_fat>
 801c270:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d00e      	beq.n	801c296 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	2b01      	cmp	r3, #1
 801c27c:	d003      	beq.n	801c286 <create_chain+0xa6>
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c284:	d101      	bne.n	801c28a <create_chain+0xaa>
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	e03e      	b.n	801c308 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801c28a:	69fa      	ldr	r2, [r7, #28]
 801c28c:	69bb      	ldr	r3, [r7, #24]
 801c28e:	429a      	cmp	r2, r3
 801c290:	d1da      	bne.n	801c248 <create_chain+0x68>
 801c292:	2300      	movs	r3, #0
 801c294:	e038      	b.n	801c308 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801c296:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801c298:	f04f 32ff 	mov.w	r2, #4294967295
 801c29c:	69f9      	ldr	r1, [r7, #28]
 801c29e:	6938      	ldr	r0, [r7, #16]
 801c2a0:	f7ff fe1d 	bl	801bede <put_fat>
 801c2a4:	4603      	mov	r3, r0
 801c2a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801c2a8:	7dfb      	ldrb	r3, [r7, #23]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d109      	bne.n	801c2c2 <create_chain+0xe2>
 801c2ae:	683b      	ldr	r3, [r7, #0]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d006      	beq.n	801c2c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801c2b4:	69fa      	ldr	r2, [r7, #28]
 801c2b6:	6839      	ldr	r1, [r7, #0]
 801c2b8:	6938      	ldr	r0, [r7, #16]
 801c2ba:	f7ff fe10 	bl	801bede <put_fat>
 801c2be:	4603      	mov	r3, r0
 801c2c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801c2c2:	7dfb      	ldrb	r3, [r7, #23]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d116      	bne.n	801c2f6 <create_chain+0x116>
		fs->last_clst = ncl;
 801c2c8:	693b      	ldr	r3, [r7, #16]
 801c2ca:	69fa      	ldr	r2, [r7, #28]
 801c2cc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801c2ce:	693b      	ldr	r3, [r7, #16]
 801c2d0:	699a      	ldr	r2, [r3, #24]
 801c2d2:	693b      	ldr	r3, [r7, #16]
 801c2d4:	69db      	ldr	r3, [r3, #28]
 801c2d6:	3b02      	subs	r3, #2
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d804      	bhi.n	801c2e6 <create_chain+0x106>
 801c2dc:	693b      	ldr	r3, [r7, #16]
 801c2de:	699b      	ldr	r3, [r3, #24]
 801c2e0:	1e5a      	subs	r2, r3, #1
 801c2e2:	693b      	ldr	r3, [r7, #16]
 801c2e4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	791b      	ldrb	r3, [r3, #4]
 801c2ea:	f043 0301 	orr.w	r3, r3, #1
 801c2ee:	b2da      	uxtb	r2, r3
 801c2f0:	693b      	ldr	r3, [r7, #16]
 801c2f2:	711a      	strb	r2, [r3, #4]
 801c2f4:	e007      	b.n	801c306 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801c2f6:	7dfb      	ldrb	r3, [r7, #23]
 801c2f8:	2b01      	cmp	r3, #1
 801c2fa:	d102      	bne.n	801c302 <create_chain+0x122>
 801c2fc:	f04f 33ff 	mov.w	r3, #4294967295
 801c300:	e000      	b.n	801c304 <create_chain+0x124>
 801c302:	2301      	movs	r3, #1
 801c304:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801c306:	69fb      	ldr	r3, [r7, #28]
}
 801c308:	4618      	mov	r0, r3
 801c30a:	3720      	adds	r7, #32
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bd80      	pop	{r7, pc}

0801c310 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801c310:	b480      	push	{r7}
 801c312:	b087      	sub	sp, #28
 801c314:	af00      	add	r7, sp, #0
 801c316:	6078      	str	r0, [r7, #4]
 801c318:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c324:	3304      	adds	r3, #4
 801c326:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	899b      	ldrh	r3, [r3, #12]
 801c32c:	461a      	mov	r2, r3
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	fbb3 f3f2 	udiv	r3, r3, r2
 801c334:	68fa      	ldr	r2, [r7, #12]
 801c336:	8952      	ldrh	r2, [r2, #10]
 801c338:	fbb3 f3f2 	udiv	r3, r3, r2
 801c33c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801c33e:	693b      	ldr	r3, [r7, #16]
 801c340:	1d1a      	adds	r2, r3, #4
 801c342:	613a      	str	r2, [r7, #16]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801c348:	68bb      	ldr	r3, [r7, #8]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d101      	bne.n	801c352 <clmt_clust+0x42>
 801c34e:	2300      	movs	r3, #0
 801c350:	e010      	b.n	801c374 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801c352:	697a      	ldr	r2, [r7, #20]
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	429a      	cmp	r2, r3
 801c358:	d307      	bcc.n	801c36a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801c35a:	697a      	ldr	r2, [r7, #20]
 801c35c:	68bb      	ldr	r3, [r7, #8]
 801c35e:	1ad3      	subs	r3, r2, r3
 801c360:	617b      	str	r3, [r7, #20]
 801c362:	693b      	ldr	r3, [r7, #16]
 801c364:	3304      	adds	r3, #4
 801c366:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801c368:	e7e9      	b.n	801c33e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801c36a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801c36c:	693b      	ldr	r3, [r7, #16]
 801c36e:	681a      	ldr	r2, [r3, #0]
 801c370:	697b      	ldr	r3, [r7, #20]
 801c372:	4413      	add	r3, r2
}
 801c374:	4618      	mov	r0, r3
 801c376:	371c      	adds	r7, #28
 801c378:	46bd      	mov	sp, r7
 801c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37e:	4770      	bx	lr

0801c380 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801c380:	b580      	push	{r7, lr}
 801c382:	b086      	sub	sp, #24
 801c384:	af00      	add	r7, sp, #0
 801c386:	6078      	str	r0, [r7, #4]
 801c388:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c396:	d204      	bcs.n	801c3a2 <dir_sdi+0x22>
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	f003 031f 	and.w	r3, r3, #31
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d001      	beq.n	801c3a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 801c3a2:	2302      	movs	r3, #2
 801c3a4:	e071      	b.n	801c48a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	683a      	ldr	r2, [r7, #0]
 801c3aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	689b      	ldr	r3, [r3, #8]
 801c3b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801c3b2:	697b      	ldr	r3, [r7, #20]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d106      	bne.n	801c3c6 <dir_sdi+0x46>
 801c3b8:	693b      	ldr	r3, [r7, #16]
 801c3ba:	781b      	ldrb	r3, [r3, #0]
 801c3bc:	2b02      	cmp	r3, #2
 801c3be:	d902      	bls.n	801c3c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 801c3c0:	693b      	ldr	r3, [r7, #16]
 801c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801c3c6:	697b      	ldr	r3, [r7, #20]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d10c      	bne.n	801c3e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801c3cc:	683b      	ldr	r3, [r7, #0]
 801c3ce:	095b      	lsrs	r3, r3, #5
 801c3d0:	693a      	ldr	r2, [r7, #16]
 801c3d2:	8912      	ldrh	r2, [r2, #8]
 801c3d4:	4293      	cmp	r3, r2
 801c3d6:	d301      	bcc.n	801c3dc <dir_sdi+0x5c>
 801c3d8:	2302      	movs	r3, #2
 801c3da:	e056      	b.n	801c48a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801c3dc:	693b      	ldr	r3, [r7, #16]
 801c3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	61da      	str	r2, [r3, #28]
 801c3e4:	e02d      	b.n	801c442 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	895b      	ldrh	r3, [r3, #10]
 801c3ea:	461a      	mov	r2, r3
 801c3ec:	693b      	ldr	r3, [r7, #16]
 801c3ee:	899b      	ldrh	r3, [r3, #12]
 801c3f0:	fb02 f303 	mul.w	r3, r2, r3
 801c3f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801c3f6:	e019      	b.n	801c42c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	6979      	ldr	r1, [r7, #20]
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	f7ff fc9a 	bl	801bd36 <get_fat>
 801c402:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c404:	697b      	ldr	r3, [r7, #20]
 801c406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c40a:	d101      	bne.n	801c410 <dir_sdi+0x90>
 801c40c:	2301      	movs	r3, #1
 801c40e:	e03c      	b.n	801c48a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801c410:	697b      	ldr	r3, [r7, #20]
 801c412:	2b01      	cmp	r3, #1
 801c414:	d904      	bls.n	801c420 <dir_sdi+0xa0>
 801c416:	693b      	ldr	r3, [r7, #16]
 801c418:	69db      	ldr	r3, [r3, #28]
 801c41a:	697a      	ldr	r2, [r7, #20]
 801c41c:	429a      	cmp	r2, r3
 801c41e:	d301      	bcc.n	801c424 <dir_sdi+0xa4>
 801c420:	2302      	movs	r3, #2
 801c422:	e032      	b.n	801c48a <dir_sdi+0x10a>
			ofs -= csz;
 801c424:	683a      	ldr	r2, [r7, #0]
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	1ad3      	subs	r3, r2, r3
 801c42a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801c42c:	683a      	ldr	r2, [r7, #0]
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	429a      	cmp	r2, r3
 801c432:	d2e1      	bcs.n	801c3f8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801c434:	6979      	ldr	r1, [r7, #20]
 801c436:	6938      	ldr	r0, [r7, #16]
 801c438:	f7ff fc5e 	bl	801bcf8 <clust2sect>
 801c43c:	4602      	mov	r2, r0
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	697a      	ldr	r2, [r7, #20]
 801c446:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	69db      	ldr	r3, [r3, #28]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d101      	bne.n	801c454 <dir_sdi+0xd4>
 801c450:	2302      	movs	r3, #2
 801c452:	e01a      	b.n	801c48a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	69da      	ldr	r2, [r3, #28]
 801c458:	693b      	ldr	r3, [r7, #16]
 801c45a:	899b      	ldrh	r3, [r3, #12]
 801c45c:	4619      	mov	r1, r3
 801c45e:	683b      	ldr	r3, [r7, #0]
 801c460:	fbb3 f3f1 	udiv	r3, r3, r1
 801c464:	441a      	add	r2, r3
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801c46a:	693b      	ldr	r3, [r7, #16]
 801c46c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801c470:	693b      	ldr	r3, [r7, #16]
 801c472:	899b      	ldrh	r3, [r3, #12]
 801c474:	461a      	mov	r2, r3
 801c476:	683b      	ldr	r3, [r7, #0]
 801c478:	fbb3 f0f2 	udiv	r0, r3, r2
 801c47c:	fb00 f202 	mul.w	r2, r0, r2
 801c480:	1a9b      	subs	r3, r3, r2
 801c482:	18ca      	adds	r2, r1, r3
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801c488:	2300      	movs	r3, #0
}
 801c48a:	4618      	mov	r0, r3
 801c48c:	3718      	adds	r7, #24
 801c48e:	46bd      	mov	sp, r7
 801c490:	bd80      	pop	{r7, pc}

0801c492 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801c492:	b580      	push	{r7, lr}
 801c494:	b086      	sub	sp, #24
 801c496:	af00      	add	r7, sp, #0
 801c498:	6078      	str	r0, [r7, #4]
 801c49a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	695b      	ldr	r3, [r3, #20]
 801c4a6:	3320      	adds	r3, #32
 801c4a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	69db      	ldr	r3, [r3, #28]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d003      	beq.n	801c4ba <dir_next+0x28>
 801c4b2:	68bb      	ldr	r3, [r7, #8]
 801c4b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c4b8:	d301      	bcc.n	801c4be <dir_next+0x2c>
 801c4ba:	2304      	movs	r3, #4
 801c4bc:	e0bb      	b.n	801c636 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	899b      	ldrh	r3, [r3, #12]
 801c4c2:	461a      	mov	r2, r3
 801c4c4:	68bb      	ldr	r3, [r7, #8]
 801c4c6:	fbb3 f1f2 	udiv	r1, r3, r2
 801c4ca:	fb01 f202 	mul.w	r2, r1, r2
 801c4ce:	1a9b      	subs	r3, r3, r2
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	f040 809d 	bne.w	801c610 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	69db      	ldr	r3, [r3, #28]
 801c4da:	1c5a      	adds	r2, r3, #1
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	699b      	ldr	r3, [r3, #24]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d10b      	bne.n	801c500 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801c4e8:	68bb      	ldr	r3, [r7, #8]
 801c4ea:	095b      	lsrs	r3, r3, #5
 801c4ec:	68fa      	ldr	r2, [r7, #12]
 801c4ee:	8912      	ldrh	r2, [r2, #8]
 801c4f0:	4293      	cmp	r3, r2
 801c4f2:	f0c0 808d 	bcc.w	801c610 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	2200      	movs	r2, #0
 801c4fa:	61da      	str	r2, [r3, #28]
 801c4fc:	2304      	movs	r3, #4
 801c4fe:	e09a      	b.n	801c636 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	899b      	ldrh	r3, [r3, #12]
 801c504:	461a      	mov	r2, r3
 801c506:	68bb      	ldr	r3, [r7, #8]
 801c508:	fbb3 f3f2 	udiv	r3, r3, r2
 801c50c:	68fa      	ldr	r2, [r7, #12]
 801c50e:	8952      	ldrh	r2, [r2, #10]
 801c510:	3a01      	subs	r2, #1
 801c512:	4013      	ands	r3, r2
 801c514:	2b00      	cmp	r3, #0
 801c516:	d17b      	bne.n	801c610 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801c518:	687a      	ldr	r2, [r7, #4]
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	699b      	ldr	r3, [r3, #24]
 801c51e:	4619      	mov	r1, r3
 801c520:	4610      	mov	r0, r2
 801c522:	f7ff fc08 	bl	801bd36 <get_fat>
 801c526:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801c528:	697b      	ldr	r3, [r7, #20]
 801c52a:	2b01      	cmp	r3, #1
 801c52c:	d801      	bhi.n	801c532 <dir_next+0xa0>
 801c52e:	2302      	movs	r3, #2
 801c530:	e081      	b.n	801c636 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801c532:	697b      	ldr	r3, [r7, #20]
 801c534:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c538:	d101      	bne.n	801c53e <dir_next+0xac>
 801c53a:	2301      	movs	r3, #1
 801c53c:	e07b      	b.n	801c636 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	69db      	ldr	r3, [r3, #28]
 801c542:	697a      	ldr	r2, [r7, #20]
 801c544:	429a      	cmp	r2, r3
 801c546:	d359      	bcc.n	801c5fc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d104      	bne.n	801c558 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	2200      	movs	r2, #0
 801c552:	61da      	str	r2, [r3, #28]
 801c554:	2304      	movs	r3, #4
 801c556:	e06e      	b.n	801c636 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801c558:	687a      	ldr	r2, [r7, #4]
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	699b      	ldr	r3, [r3, #24]
 801c55e:	4619      	mov	r1, r3
 801c560:	4610      	mov	r0, r2
 801c562:	f7ff fe3d 	bl	801c1e0 <create_chain>
 801c566:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801c568:	697b      	ldr	r3, [r7, #20]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d101      	bne.n	801c572 <dir_next+0xe0>
 801c56e:	2307      	movs	r3, #7
 801c570:	e061      	b.n	801c636 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801c572:	697b      	ldr	r3, [r7, #20]
 801c574:	2b01      	cmp	r3, #1
 801c576:	d101      	bne.n	801c57c <dir_next+0xea>
 801c578:	2302      	movs	r3, #2
 801c57a:	e05c      	b.n	801c636 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801c57c:	697b      	ldr	r3, [r7, #20]
 801c57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c582:	d101      	bne.n	801c588 <dir_next+0xf6>
 801c584:	2301      	movs	r3, #1
 801c586:	e056      	b.n	801c636 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801c588:	68f8      	ldr	r0, [r7, #12]
 801c58a:	f7ff fad3 	bl	801bb34 <sync_window>
 801c58e:	4603      	mov	r3, r0
 801c590:	2b00      	cmp	r3, #0
 801c592:	d001      	beq.n	801c598 <dir_next+0x106>
 801c594:	2301      	movs	r3, #1
 801c596:	e04e      	b.n	801c636 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	899b      	ldrh	r3, [r3, #12]
 801c5a2:	461a      	mov	r2, r3
 801c5a4:	2100      	movs	r1, #0
 801c5a6:	f7ff f8ca 	bl	801b73e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	613b      	str	r3, [r7, #16]
 801c5ae:	6979      	ldr	r1, [r7, #20]
 801c5b0:	68f8      	ldr	r0, [r7, #12]
 801c5b2:	f7ff fba1 	bl	801bcf8 <clust2sect>
 801c5b6:	4602      	mov	r2, r0
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	635a      	str	r2, [r3, #52]	; 0x34
 801c5bc:	e012      	b.n	801c5e4 <dir_next+0x152>
						fs->wflag = 1;
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	2201      	movs	r2, #1
 801c5c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801c5c4:	68f8      	ldr	r0, [r7, #12]
 801c5c6:	f7ff fab5 	bl	801bb34 <sync_window>
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d001      	beq.n	801c5d4 <dir_next+0x142>
 801c5d0:	2301      	movs	r3, #1
 801c5d2:	e030      	b.n	801c636 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801c5d4:	693b      	ldr	r3, [r7, #16]
 801c5d6:	3301      	adds	r3, #1
 801c5d8:	613b      	str	r3, [r7, #16]
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5de:	1c5a      	adds	r2, r3, #1
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	635a      	str	r2, [r3, #52]	; 0x34
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	895b      	ldrh	r3, [r3, #10]
 801c5e8:	461a      	mov	r2, r3
 801c5ea:	693b      	ldr	r3, [r7, #16]
 801c5ec:	4293      	cmp	r3, r2
 801c5ee:	d3e6      	bcc.n	801c5be <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c5f4:	693b      	ldr	r3, [r7, #16]
 801c5f6:	1ad2      	subs	r2, r2, r3
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	697a      	ldr	r2, [r7, #20]
 801c600:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801c602:	6979      	ldr	r1, [r7, #20]
 801c604:	68f8      	ldr	r0, [r7, #12]
 801c606:	f7ff fb77 	bl	801bcf8 <clust2sect>
 801c60a:	4602      	mov	r2, r0
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	68ba      	ldr	r2, [r7, #8]
 801c614:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	899b      	ldrh	r3, [r3, #12]
 801c620:	461a      	mov	r2, r3
 801c622:	68bb      	ldr	r3, [r7, #8]
 801c624:	fbb3 f0f2 	udiv	r0, r3, r2
 801c628:	fb00 f202 	mul.w	r2, r0, r2
 801c62c:	1a9b      	subs	r3, r3, r2
 801c62e:	18ca      	adds	r2, r1, r3
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801c634:	2300      	movs	r3, #0
}
 801c636:	4618      	mov	r0, r3
 801c638:	3718      	adds	r7, #24
 801c63a:	46bd      	mov	sp, r7
 801c63c:	bd80      	pop	{r7, pc}

0801c63e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801c63e:	b580      	push	{r7, lr}
 801c640:	b086      	sub	sp, #24
 801c642:	af00      	add	r7, sp, #0
 801c644:	6078      	str	r0, [r7, #4]
 801c646:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801c64e:	2100      	movs	r1, #0
 801c650:	6878      	ldr	r0, [r7, #4]
 801c652:	f7ff fe95 	bl	801c380 <dir_sdi>
 801c656:	4603      	mov	r3, r0
 801c658:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c65a:	7dfb      	ldrb	r3, [r7, #23]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d12b      	bne.n	801c6b8 <dir_alloc+0x7a>
		n = 0;
 801c660:	2300      	movs	r3, #0
 801c662:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	69db      	ldr	r3, [r3, #28]
 801c668:	4619      	mov	r1, r3
 801c66a:	68f8      	ldr	r0, [r7, #12]
 801c66c:	f7ff faa6 	bl	801bbbc <move_window>
 801c670:	4603      	mov	r3, r0
 801c672:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c674:	7dfb      	ldrb	r3, [r7, #23]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d11d      	bne.n	801c6b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	6a1b      	ldr	r3, [r3, #32]
 801c67e:	781b      	ldrb	r3, [r3, #0]
 801c680:	2be5      	cmp	r3, #229	; 0xe5
 801c682:	d004      	beq.n	801c68e <dir_alloc+0x50>
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	6a1b      	ldr	r3, [r3, #32]
 801c688:	781b      	ldrb	r3, [r3, #0]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d107      	bne.n	801c69e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801c68e:	693b      	ldr	r3, [r7, #16]
 801c690:	3301      	adds	r3, #1
 801c692:	613b      	str	r3, [r7, #16]
 801c694:	693a      	ldr	r2, [r7, #16]
 801c696:	683b      	ldr	r3, [r7, #0]
 801c698:	429a      	cmp	r2, r3
 801c69a:	d102      	bne.n	801c6a2 <dir_alloc+0x64>
 801c69c:	e00c      	b.n	801c6b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c69e:	2300      	movs	r3, #0
 801c6a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c6a2:	2101      	movs	r1, #1
 801c6a4:	6878      	ldr	r0, [r7, #4]
 801c6a6:	f7ff fef4 	bl	801c492 <dir_next>
 801c6aa:	4603      	mov	r3, r0
 801c6ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c6ae:	7dfb      	ldrb	r3, [r7, #23]
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d0d7      	beq.n	801c664 <dir_alloc+0x26>
 801c6b4:	e000      	b.n	801c6b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c6b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c6b8:	7dfb      	ldrb	r3, [r7, #23]
 801c6ba:	2b04      	cmp	r3, #4
 801c6bc:	d101      	bne.n	801c6c2 <dir_alloc+0x84>
 801c6be:	2307      	movs	r3, #7
 801c6c0:	75fb      	strb	r3, [r7, #23]
	return res;
 801c6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	3718      	adds	r7, #24
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	bd80      	pop	{r7, pc}

0801c6cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b084      	sub	sp, #16
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
 801c6d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c6d6:	683b      	ldr	r3, [r7, #0]
 801c6d8:	331a      	adds	r3, #26
 801c6da:	4618      	mov	r0, r3
 801c6dc:	f7fe ff8c 	bl	801b5f8 <ld_word>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	781b      	ldrb	r3, [r3, #0]
 801c6e8:	2b03      	cmp	r3, #3
 801c6ea:	d109      	bne.n	801c700 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c6ec:	683b      	ldr	r3, [r7, #0]
 801c6ee:	3314      	adds	r3, #20
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7fe ff81 	bl	801b5f8 <ld_word>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	041b      	lsls	r3, r3, #16
 801c6fa:	68fa      	ldr	r2, [r7, #12]
 801c6fc:	4313      	orrs	r3, r2
 801c6fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c700:	68fb      	ldr	r3, [r7, #12]
}
 801c702:	4618      	mov	r0, r3
 801c704:	3710      	adds	r7, #16
 801c706:	46bd      	mov	sp, r7
 801c708:	bd80      	pop	{r7, pc}

0801c70a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c70a:	b580      	push	{r7, lr}
 801c70c:	b084      	sub	sp, #16
 801c70e:	af00      	add	r7, sp, #0
 801c710:	60f8      	str	r0, [r7, #12]
 801c712:	60b9      	str	r1, [r7, #8]
 801c714:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c716:	68bb      	ldr	r3, [r7, #8]
 801c718:	331a      	adds	r3, #26
 801c71a:	687a      	ldr	r2, [r7, #4]
 801c71c:	b292      	uxth	r2, r2
 801c71e:	4611      	mov	r1, r2
 801c720:	4618      	mov	r0, r3
 801c722:	f7fe ffa4 	bl	801b66e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	781b      	ldrb	r3, [r3, #0]
 801c72a:	2b03      	cmp	r3, #3
 801c72c:	d109      	bne.n	801c742 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c72e:	68bb      	ldr	r3, [r7, #8]
 801c730:	f103 0214 	add.w	r2, r3, #20
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	0c1b      	lsrs	r3, r3, #16
 801c738:	b29b      	uxth	r3, r3
 801c73a:	4619      	mov	r1, r3
 801c73c:	4610      	mov	r0, r2
 801c73e:	f7fe ff96 	bl	801b66e <st_word>
	}
}
 801c742:	bf00      	nop
 801c744:	3710      	adds	r7, #16
 801c746:	46bd      	mov	sp, r7
 801c748:	bd80      	pop	{r7, pc}

0801c74a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c74a:	b580      	push	{r7, lr}
 801c74c:	b086      	sub	sp, #24
 801c74e:	af00      	add	r7, sp, #0
 801c750:	6078      	str	r0, [r7, #4]
 801c752:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c754:	2304      	movs	r3, #4
 801c756:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801c75e:	e03c      	b.n	801c7da <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	69db      	ldr	r3, [r3, #28]
 801c764:	4619      	mov	r1, r3
 801c766:	6938      	ldr	r0, [r7, #16]
 801c768:	f7ff fa28 	bl	801bbbc <move_window>
 801c76c:	4603      	mov	r3, r0
 801c76e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c770:	7dfb      	ldrb	r3, [r7, #23]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d136      	bne.n	801c7e4 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	6a1b      	ldr	r3, [r3, #32]
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801c77e:	7bfb      	ldrb	r3, [r7, #15]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d102      	bne.n	801c78a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c784:	2304      	movs	r3, #4
 801c786:	75fb      	strb	r3, [r7, #23]
 801c788:	e031      	b.n	801c7ee <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	6a1b      	ldr	r3, [r3, #32]
 801c78e:	330b      	adds	r3, #11
 801c790:	781b      	ldrb	r3, [r3, #0]
 801c792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c796:	73bb      	strb	r3, [r7, #14]
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	7bba      	ldrb	r2, [r7, #14]
 801c79c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801c79e:	7bfb      	ldrb	r3, [r7, #15]
 801c7a0:	2be5      	cmp	r3, #229	; 0xe5
 801c7a2:	d011      	beq.n	801c7c8 <dir_read+0x7e>
 801c7a4:	7bfb      	ldrb	r3, [r7, #15]
 801c7a6:	2b2e      	cmp	r3, #46	; 0x2e
 801c7a8:	d00e      	beq.n	801c7c8 <dir_read+0x7e>
 801c7aa:	7bbb      	ldrb	r3, [r7, #14]
 801c7ac:	2b0f      	cmp	r3, #15
 801c7ae:	d00b      	beq.n	801c7c8 <dir_read+0x7e>
 801c7b0:	7bbb      	ldrb	r3, [r7, #14]
 801c7b2:	f023 0320 	bic.w	r3, r3, #32
 801c7b6:	2b08      	cmp	r3, #8
 801c7b8:	bf0c      	ite	eq
 801c7ba:	2301      	moveq	r3, #1
 801c7bc:	2300      	movne	r3, #0
 801c7be:	b2db      	uxtb	r3, r3
 801c7c0:	461a      	mov	r2, r3
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	4293      	cmp	r3, r2
 801c7c6:	d00f      	beq.n	801c7e8 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c7c8:	2100      	movs	r1, #0
 801c7ca:	6878      	ldr	r0, [r7, #4]
 801c7cc:	f7ff fe61 	bl	801c492 <dir_next>
 801c7d0:	4603      	mov	r3, r0
 801c7d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c7d4:	7dfb      	ldrb	r3, [r7, #23]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d108      	bne.n	801c7ec <dir_read+0xa2>
	while (dp->sect) {
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	69db      	ldr	r3, [r3, #28]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d1be      	bne.n	801c760 <dir_read+0x16>
 801c7e2:	e004      	b.n	801c7ee <dir_read+0xa4>
		if (res != FR_OK) break;
 801c7e4:	bf00      	nop
 801c7e6:	e002      	b.n	801c7ee <dir_read+0xa4>
				break;
 801c7e8:	bf00      	nop
 801c7ea:	e000      	b.n	801c7ee <dir_read+0xa4>
		if (res != FR_OK) break;
 801c7ec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c7ee:	7dfb      	ldrb	r3, [r7, #23]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d002      	beq.n	801c7fa <dir_read+0xb0>
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	2200      	movs	r2, #0
 801c7f8:	61da      	str	r2, [r3, #28]
	return res;
 801c7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 801c7fc:	4618      	mov	r0, r3
 801c7fe:	3718      	adds	r7, #24
 801c800:	46bd      	mov	sp, r7
 801c802:	bd80      	pop	{r7, pc}

0801c804 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c804:	b580      	push	{r7, lr}
 801c806:	b086      	sub	sp, #24
 801c808:	af00      	add	r7, sp, #0
 801c80a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c812:	2100      	movs	r1, #0
 801c814:	6878      	ldr	r0, [r7, #4]
 801c816:	f7ff fdb3 	bl	801c380 <dir_sdi>
 801c81a:	4603      	mov	r3, r0
 801c81c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c81e:	7dfb      	ldrb	r3, [r7, #23]
 801c820:	2b00      	cmp	r3, #0
 801c822:	d001      	beq.n	801c828 <dir_find+0x24>
 801c824:	7dfb      	ldrb	r3, [r7, #23]
 801c826:	e03e      	b.n	801c8a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	69db      	ldr	r3, [r3, #28]
 801c82c:	4619      	mov	r1, r3
 801c82e:	6938      	ldr	r0, [r7, #16]
 801c830:	f7ff f9c4 	bl	801bbbc <move_window>
 801c834:	4603      	mov	r3, r0
 801c836:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c838:	7dfb      	ldrb	r3, [r7, #23]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d12f      	bne.n	801c89e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	6a1b      	ldr	r3, [r3, #32]
 801c842:	781b      	ldrb	r3, [r3, #0]
 801c844:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c846:	7bfb      	ldrb	r3, [r7, #15]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d102      	bne.n	801c852 <dir_find+0x4e>
 801c84c:	2304      	movs	r3, #4
 801c84e:	75fb      	strb	r3, [r7, #23]
 801c850:	e028      	b.n	801c8a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	6a1b      	ldr	r3, [r3, #32]
 801c856:	330b      	adds	r3, #11
 801c858:	781b      	ldrb	r3, [r3, #0]
 801c85a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c85e:	b2da      	uxtb	r2, r3
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	6a1b      	ldr	r3, [r3, #32]
 801c868:	330b      	adds	r3, #11
 801c86a:	781b      	ldrb	r3, [r3, #0]
 801c86c:	f003 0308 	and.w	r3, r3, #8
 801c870:	2b00      	cmp	r3, #0
 801c872:	d10a      	bne.n	801c88a <dir_find+0x86>
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	6a18      	ldr	r0, [r3, #32]
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	3324      	adds	r3, #36	; 0x24
 801c87c:	220b      	movs	r2, #11
 801c87e:	4619      	mov	r1, r3
 801c880:	f7fe ff78 	bl	801b774 <mem_cmp>
 801c884:	4603      	mov	r3, r0
 801c886:	2b00      	cmp	r3, #0
 801c888:	d00b      	beq.n	801c8a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c88a:	2100      	movs	r1, #0
 801c88c:	6878      	ldr	r0, [r7, #4]
 801c88e:	f7ff fe00 	bl	801c492 <dir_next>
 801c892:	4603      	mov	r3, r0
 801c894:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c896:	7dfb      	ldrb	r3, [r7, #23]
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d0c5      	beq.n	801c828 <dir_find+0x24>
 801c89c:	e002      	b.n	801c8a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 801c89e:	bf00      	nop
 801c8a0:	e000      	b.n	801c8a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801c8a2:	bf00      	nop

	return res;
 801c8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	3718      	adds	r7, #24
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bd80      	pop	{r7, pc}

0801c8ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c8ae:	b580      	push	{r7, lr}
 801c8b0:	b084      	sub	sp, #16
 801c8b2:	af00      	add	r7, sp, #0
 801c8b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801c8bc:	2101      	movs	r1, #1
 801c8be:	6878      	ldr	r0, [r7, #4]
 801c8c0:	f7ff febd 	bl	801c63e <dir_alloc>
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c8c8:	7bfb      	ldrb	r3, [r7, #15]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d11c      	bne.n	801c908 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	69db      	ldr	r3, [r3, #28]
 801c8d2:	4619      	mov	r1, r3
 801c8d4:	68b8      	ldr	r0, [r7, #8]
 801c8d6:	f7ff f971 	bl	801bbbc <move_window>
 801c8da:	4603      	mov	r3, r0
 801c8dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c8de:	7bfb      	ldrb	r3, [r7, #15]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d111      	bne.n	801c908 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	6a1b      	ldr	r3, [r3, #32]
 801c8e8:	2220      	movs	r2, #32
 801c8ea:	2100      	movs	r1, #0
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	f7fe ff26 	bl	801b73e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	6a18      	ldr	r0, [r3, #32]
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	3324      	adds	r3, #36	; 0x24
 801c8fa:	220b      	movs	r2, #11
 801c8fc:	4619      	mov	r1, r3
 801c8fe:	f7fe fefd 	bl	801b6fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801c902:	68bb      	ldr	r3, [r7, #8]
 801c904:	2201      	movs	r2, #1
 801c906:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c908:	7bfb      	ldrb	r3, [r7, #15]
}
 801c90a:	4618      	mov	r0, r3
 801c90c:	3710      	adds	r7, #16
 801c90e:	46bd      	mov	sp, r7
 801c910:	bd80      	pop	{r7, pc}

0801c912 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c912:	b580      	push	{r7, lr}
 801c914:	b084      	sub	sp, #16
 801c916:	af00      	add	r7, sp, #0
 801c918:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	69db      	ldr	r3, [r3, #28]
 801c924:	4619      	mov	r1, r3
 801c926:	68f8      	ldr	r0, [r7, #12]
 801c928:	f7ff f948 	bl	801bbbc <move_window>
 801c92c:	4603      	mov	r3, r0
 801c92e:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801c930:	7afb      	ldrb	r3, [r7, #11]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d106      	bne.n	801c944 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	6a1b      	ldr	r3, [r3, #32]
 801c93a:	22e5      	movs	r2, #229	; 0xe5
 801c93c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	2201      	movs	r2, #1
 801c942:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801c944:	7afb      	ldrb	r3, [r7, #11]
}
 801c946:	4618      	mov	r0, r3
 801c948:	3710      	adds	r7, #16
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bd80      	pop	{r7, pc}

0801c94e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801c94e:	b580      	push	{r7, lr}
 801c950:	b086      	sub	sp, #24
 801c952:	af00      	add	r7, sp, #0
 801c954:	6078      	str	r0, [r7, #4]
 801c956:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801c958:	683b      	ldr	r3, [r7, #0]
 801c95a:	2200      	movs	r2, #0
 801c95c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	69db      	ldr	r3, [r3, #28]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d04e      	beq.n	801ca04 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801c966:	2300      	movs	r3, #0
 801c968:	613b      	str	r3, [r7, #16]
 801c96a:	693b      	ldr	r3, [r7, #16]
 801c96c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801c96e:	e021      	b.n	801c9b4 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	6a1a      	ldr	r2, [r3, #32]
 801c974:	697b      	ldr	r3, [r7, #20]
 801c976:	1c59      	adds	r1, r3, #1
 801c978:	6179      	str	r1, [r7, #20]
 801c97a:	4413      	add	r3, r2
 801c97c:	781b      	ldrb	r3, [r3, #0]
 801c97e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801c980:	7bfb      	ldrb	r3, [r7, #15]
 801c982:	2b20      	cmp	r3, #32
 801c984:	d100      	bne.n	801c988 <get_fileinfo+0x3a>
 801c986:	e015      	b.n	801c9b4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801c988:	7bfb      	ldrb	r3, [r7, #15]
 801c98a:	2b05      	cmp	r3, #5
 801c98c:	d101      	bne.n	801c992 <get_fileinfo+0x44>
 801c98e:	23e5      	movs	r3, #229	; 0xe5
 801c990:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	2b09      	cmp	r3, #9
 801c996:	d106      	bne.n	801c9a6 <get_fileinfo+0x58>
 801c998:	693b      	ldr	r3, [r7, #16]
 801c99a:	1c5a      	adds	r2, r3, #1
 801c99c:	613a      	str	r2, [r7, #16]
 801c99e:	683a      	ldr	r2, [r7, #0]
 801c9a0:	4413      	add	r3, r2
 801c9a2:	222e      	movs	r2, #46	; 0x2e
 801c9a4:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801c9a6:	693b      	ldr	r3, [r7, #16]
 801c9a8:	1c5a      	adds	r2, r3, #1
 801c9aa:	613a      	str	r2, [r7, #16]
 801c9ac:	683a      	ldr	r2, [r7, #0]
 801c9ae:	4413      	add	r3, r2
 801c9b0:	7bfa      	ldrb	r2, [r7, #15]
 801c9b2:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801c9b4:	697b      	ldr	r3, [r7, #20]
 801c9b6:	2b0a      	cmp	r3, #10
 801c9b8:	d9da      	bls.n	801c970 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801c9ba:	683a      	ldr	r2, [r7, #0]
 801c9bc:	693b      	ldr	r3, [r7, #16]
 801c9be:	4413      	add	r3, r2
 801c9c0:	3309      	adds	r3, #9
 801c9c2:	2200      	movs	r2, #0
 801c9c4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	6a1b      	ldr	r3, [r3, #32]
 801c9ca:	7ada      	ldrb	r2, [r3, #11]
 801c9cc:	683b      	ldr	r3, [r7, #0]
 801c9ce:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	6a1b      	ldr	r3, [r3, #32]
 801c9d4:	331c      	adds	r3, #28
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	f7fe fe26 	bl	801b628 <ld_dword>
 801c9dc:	4602      	mov	r2, r0
 801c9de:	683b      	ldr	r3, [r7, #0]
 801c9e0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	6a1b      	ldr	r3, [r3, #32]
 801c9e6:	3316      	adds	r3, #22
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f7fe fe1d 	bl	801b628 <ld_dword>
 801c9ee:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801c9f0:	68bb      	ldr	r3, [r7, #8]
 801c9f2:	b29a      	uxth	r2, r3
 801c9f4:	683b      	ldr	r3, [r7, #0]
 801c9f6:	80da      	strh	r2, [r3, #6]
 801c9f8:	68bb      	ldr	r3, [r7, #8]
 801c9fa:	0c1b      	lsrs	r3, r3, #16
 801c9fc:	b29a      	uxth	r2, r3
 801c9fe:	683b      	ldr	r3, [r7, #0]
 801ca00:	809a      	strh	r2, [r3, #4]
 801ca02:	e000      	b.n	801ca06 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801ca04:	bf00      	nop
}
 801ca06:	3718      	adds	r7, #24
 801ca08:	46bd      	mov	sp, r7
 801ca0a:	bd80      	pop	{r7, pc}

0801ca0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801ca0c:	b580      	push	{r7, lr}
 801ca0e:	b088      	sub	sp, #32
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
 801ca14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801ca16:	683b      	ldr	r3, [r7, #0]
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	60fb      	str	r3, [r7, #12]
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	3324      	adds	r3, #36	; 0x24
 801ca20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801ca22:	220b      	movs	r2, #11
 801ca24:	2120      	movs	r1, #32
 801ca26:	68b8      	ldr	r0, [r7, #8]
 801ca28:	f7fe fe89 	bl	801b73e <mem_set>
	si = i = 0; ni = 8;
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	613b      	str	r3, [r7, #16]
 801ca30:	693b      	ldr	r3, [r7, #16]
 801ca32:	61fb      	str	r3, [r7, #28]
 801ca34:	2308      	movs	r3, #8
 801ca36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801ca38:	69fb      	ldr	r3, [r7, #28]
 801ca3a:	1c5a      	adds	r2, r3, #1
 801ca3c:	61fa      	str	r2, [r7, #28]
 801ca3e:	68fa      	ldr	r2, [r7, #12]
 801ca40:	4413      	add	r3, r2
 801ca42:	781b      	ldrb	r3, [r3, #0]
 801ca44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801ca46:	7efb      	ldrb	r3, [r7, #27]
 801ca48:	2b20      	cmp	r3, #32
 801ca4a:	d94e      	bls.n	801caea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801ca4c:	7efb      	ldrb	r3, [r7, #27]
 801ca4e:	2b2f      	cmp	r3, #47	; 0x2f
 801ca50:	d006      	beq.n	801ca60 <create_name+0x54>
 801ca52:	7efb      	ldrb	r3, [r7, #27]
 801ca54:	2b5c      	cmp	r3, #92	; 0x5c
 801ca56:	d110      	bne.n	801ca7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ca58:	e002      	b.n	801ca60 <create_name+0x54>
 801ca5a:	69fb      	ldr	r3, [r7, #28]
 801ca5c:	3301      	adds	r3, #1
 801ca5e:	61fb      	str	r3, [r7, #28]
 801ca60:	68fa      	ldr	r2, [r7, #12]
 801ca62:	69fb      	ldr	r3, [r7, #28]
 801ca64:	4413      	add	r3, r2
 801ca66:	781b      	ldrb	r3, [r3, #0]
 801ca68:	2b2f      	cmp	r3, #47	; 0x2f
 801ca6a:	d0f6      	beq.n	801ca5a <create_name+0x4e>
 801ca6c:	68fa      	ldr	r2, [r7, #12]
 801ca6e:	69fb      	ldr	r3, [r7, #28]
 801ca70:	4413      	add	r3, r2
 801ca72:	781b      	ldrb	r3, [r3, #0]
 801ca74:	2b5c      	cmp	r3, #92	; 0x5c
 801ca76:	d0f0      	beq.n	801ca5a <create_name+0x4e>
			break;
 801ca78:	e038      	b.n	801caec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801ca7a:	7efb      	ldrb	r3, [r7, #27]
 801ca7c:	2b2e      	cmp	r3, #46	; 0x2e
 801ca7e:	d003      	beq.n	801ca88 <create_name+0x7c>
 801ca80:	693a      	ldr	r2, [r7, #16]
 801ca82:	697b      	ldr	r3, [r7, #20]
 801ca84:	429a      	cmp	r2, r3
 801ca86:	d30c      	bcc.n	801caa2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801ca88:	697b      	ldr	r3, [r7, #20]
 801ca8a:	2b0b      	cmp	r3, #11
 801ca8c:	d002      	beq.n	801ca94 <create_name+0x88>
 801ca8e:	7efb      	ldrb	r3, [r7, #27]
 801ca90:	2b2e      	cmp	r3, #46	; 0x2e
 801ca92:	d001      	beq.n	801ca98 <create_name+0x8c>
 801ca94:	2306      	movs	r3, #6
 801ca96:	e044      	b.n	801cb22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801ca98:	2308      	movs	r3, #8
 801ca9a:	613b      	str	r3, [r7, #16]
 801ca9c:	230b      	movs	r3, #11
 801ca9e:	617b      	str	r3, [r7, #20]
			continue;
 801caa0:	e022      	b.n	801cae8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801caa2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	da04      	bge.n	801cab4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801caaa:	7efb      	ldrb	r3, [r7, #27]
 801caac:	3b80      	subs	r3, #128	; 0x80
 801caae:	4a1f      	ldr	r2, [pc, #124]	; (801cb2c <create_name+0x120>)
 801cab0:	5cd3      	ldrb	r3, [r2, r3]
 801cab2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801cab4:	7efb      	ldrb	r3, [r7, #27]
 801cab6:	4619      	mov	r1, r3
 801cab8:	481d      	ldr	r0, [pc, #116]	; (801cb30 <create_name+0x124>)
 801caba:	f7fe fe82 	bl	801b7c2 <chk_chr>
 801cabe:	4603      	mov	r3, r0
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d001      	beq.n	801cac8 <create_name+0xbc>
 801cac4:	2306      	movs	r3, #6
 801cac6:	e02c      	b.n	801cb22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801cac8:	7efb      	ldrb	r3, [r7, #27]
 801caca:	2b60      	cmp	r3, #96	; 0x60
 801cacc:	d905      	bls.n	801cada <create_name+0xce>
 801cace:	7efb      	ldrb	r3, [r7, #27]
 801cad0:	2b7a      	cmp	r3, #122	; 0x7a
 801cad2:	d802      	bhi.n	801cada <create_name+0xce>
 801cad4:	7efb      	ldrb	r3, [r7, #27]
 801cad6:	3b20      	subs	r3, #32
 801cad8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801cada:	693b      	ldr	r3, [r7, #16]
 801cadc:	1c5a      	adds	r2, r3, #1
 801cade:	613a      	str	r2, [r7, #16]
 801cae0:	68ba      	ldr	r2, [r7, #8]
 801cae2:	4413      	add	r3, r2
 801cae4:	7efa      	ldrb	r2, [r7, #27]
 801cae6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801cae8:	e7a6      	b.n	801ca38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801caea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801caec:	68fa      	ldr	r2, [r7, #12]
 801caee:	69fb      	ldr	r3, [r7, #28]
 801caf0:	441a      	add	r2, r3
 801caf2:	683b      	ldr	r3, [r7, #0]
 801caf4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801caf6:	693b      	ldr	r3, [r7, #16]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d101      	bne.n	801cb00 <create_name+0xf4>
 801cafc:	2306      	movs	r3, #6
 801cafe:	e010      	b.n	801cb22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801cb00:	68bb      	ldr	r3, [r7, #8]
 801cb02:	781b      	ldrb	r3, [r3, #0]
 801cb04:	2be5      	cmp	r3, #229	; 0xe5
 801cb06:	d102      	bne.n	801cb0e <create_name+0x102>
 801cb08:	68bb      	ldr	r3, [r7, #8]
 801cb0a:	2205      	movs	r2, #5
 801cb0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801cb0e:	7efb      	ldrb	r3, [r7, #27]
 801cb10:	2b20      	cmp	r3, #32
 801cb12:	d801      	bhi.n	801cb18 <create_name+0x10c>
 801cb14:	2204      	movs	r2, #4
 801cb16:	e000      	b.n	801cb1a <create_name+0x10e>
 801cb18:	2200      	movs	r2, #0
 801cb1a:	68bb      	ldr	r3, [r7, #8]
 801cb1c:	330b      	adds	r3, #11
 801cb1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801cb20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801cb22:	4618      	mov	r0, r3
 801cb24:	3720      	adds	r7, #32
 801cb26:	46bd      	mov	sp, r7
 801cb28:	bd80      	pop	{r7, pc}
 801cb2a:	bf00      	nop
 801cb2c:	08027c4c 	.word	0x08027c4c
 801cb30:	08027af0 	.word	0x08027af0

0801cb34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b086      	sub	sp, #24
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
 801cb3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801cb42:	693b      	ldr	r3, [r7, #16]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801cb48:	e002      	b.n	801cb50 <follow_path+0x1c>
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	3301      	adds	r3, #1
 801cb4e:	603b      	str	r3, [r7, #0]
 801cb50:	683b      	ldr	r3, [r7, #0]
 801cb52:	781b      	ldrb	r3, [r3, #0]
 801cb54:	2b2f      	cmp	r3, #47	; 0x2f
 801cb56:	d0f8      	beq.n	801cb4a <follow_path+0x16>
 801cb58:	683b      	ldr	r3, [r7, #0]
 801cb5a:	781b      	ldrb	r3, [r3, #0]
 801cb5c:	2b5c      	cmp	r3, #92	; 0x5c
 801cb5e:	d0f4      	beq.n	801cb4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801cb60:	693b      	ldr	r3, [r7, #16]
 801cb62:	2200      	movs	r2, #0
 801cb64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801cb66:	683b      	ldr	r3, [r7, #0]
 801cb68:	781b      	ldrb	r3, [r3, #0]
 801cb6a:	2b1f      	cmp	r3, #31
 801cb6c:	d80a      	bhi.n	801cb84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	2280      	movs	r2, #128	; 0x80
 801cb72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801cb76:	2100      	movs	r1, #0
 801cb78:	6878      	ldr	r0, [r7, #4]
 801cb7a:	f7ff fc01 	bl	801c380 <dir_sdi>
 801cb7e:	4603      	mov	r3, r0
 801cb80:	75fb      	strb	r3, [r7, #23]
 801cb82:	e048      	b.n	801cc16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cb84:	463b      	mov	r3, r7
 801cb86:	4619      	mov	r1, r3
 801cb88:	6878      	ldr	r0, [r7, #4]
 801cb8a:	f7ff ff3f 	bl	801ca0c <create_name>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cb92:	7dfb      	ldrb	r3, [r7, #23]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d139      	bne.n	801cc0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cb98:	6878      	ldr	r0, [r7, #4]
 801cb9a:	f7ff fe33 	bl	801c804 <dir_find>
 801cb9e:	4603      	mov	r3, r0
 801cba0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801cba8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cbaa:	7dfb      	ldrb	r3, [r7, #23]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d00a      	beq.n	801cbc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cbb0:	7dfb      	ldrb	r3, [r7, #23]
 801cbb2:	2b04      	cmp	r3, #4
 801cbb4:	d12c      	bne.n	801cc10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cbb6:	7afb      	ldrb	r3, [r7, #11]
 801cbb8:	f003 0304 	and.w	r3, r3, #4
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d127      	bne.n	801cc10 <follow_path+0xdc>
 801cbc0:	2305      	movs	r3, #5
 801cbc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cbc4:	e024      	b.n	801cc10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cbc6:	7afb      	ldrb	r3, [r7, #11]
 801cbc8:	f003 0304 	and.w	r3, r3, #4
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d121      	bne.n	801cc14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cbd0:	693b      	ldr	r3, [r7, #16]
 801cbd2:	799b      	ldrb	r3, [r3, #6]
 801cbd4:	f003 0310 	and.w	r3, r3, #16
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d102      	bne.n	801cbe2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cbdc:	2305      	movs	r3, #5
 801cbde:	75fb      	strb	r3, [r7, #23]
 801cbe0:	e019      	b.n	801cc16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	695b      	ldr	r3, [r3, #20]
 801cbec:	68fa      	ldr	r2, [r7, #12]
 801cbee:	8992      	ldrh	r2, [r2, #12]
 801cbf0:	fbb3 f0f2 	udiv	r0, r3, r2
 801cbf4:	fb00 f202 	mul.w	r2, r0, r2
 801cbf8:	1a9b      	subs	r3, r3, r2
 801cbfa:	440b      	add	r3, r1
 801cbfc:	4619      	mov	r1, r3
 801cbfe:	68f8      	ldr	r0, [r7, #12]
 801cc00:	f7ff fd64 	bl	801c6cc <ld_clust>
 801cc04:	4602      	mov	r2, r0
 801cc06:	693b      	ldr	r3, [r7, #16]
 801cc08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cc0a:	e7bb      	b.n	801cb84 <follow_path+0x50>
			if (res != FR_OK) break;
 801cc0c:	bf00      	nop
 801cc0e:	e002      	b.n	801cc16 <follow_path+0xe2>
				break;
 801cc10:	bf00      	nop
 801cc12:	e000      	b.n	801cc16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cc14:	bf00      	nop
			}
		}
	}

	return res;
 801cc16:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc18:	4618      	mov	r0, r3
 801cc1a:	3718      	adds	r7, #24
 801cc1c:	46bd      	mov	sp, r7
 801cc1e:	bd80      	pop	{r7, pc}

0801cc20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801cc20:	b480      	push	{r7}
 801cc22:	b087      	sub	sp, #28
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801cc28:	f04f 33ff 	mov.w	r3, #4294967295
 801cc2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d031      	beq.n	801cc9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	617b      	str	r3, [r7, #20]
 801cc3c:	e002      	b.n	801cc44 <get_ldnumber+0x24>
 801cc3e:	697b      	ldr	r3, [r7, #20]
 801cc40:	3301      	adds	r3, #1
 801cc42:	617b      	str	r3, [r7, #20]
 801cc44:	697b      	ldr	r3, [r7, #20]
 801cc46:	781b      	ldrb	r3, [r3, #0]
 801cc48:	2b20      	cmp	r3, #32
 801cc4a:	d903      	bls.n	801cc54 <get_ldnumber+0x34>
 801cc4c:	697b      	ldr	r3, [r7, #20]
 801cc4e:	781b      	ldrb	r3, [r3, #0]
 801cc50:	2b3a      	cmp	r3, #58	; 0x3a
 801cc52:	d1f4      	bne.n	801cc3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801cc54:	697b      	ldr	r3, [r7, #20]
 801cc56:	781b      	ldrb	r3, [r3, #0]
 801cc58:	2b3a      	cmp	r3, #58	; 0x3a
 801cc5a:	d11c      	bne.n	801cc96 <get_ldnumber+0x76>
			tp = *path;
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	1c5a      	adds	r2, r3, #1
 801cc66:	60fa      	str	r2, [r7, #12]
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	3b30      	subs	r3, #48	; 0x30
 801cc6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801cc6e:	68bb      	ldr	r3, [r7, #8]
 801cc70:	2b09      	cmp	r3, #9
 801cc72:	d80e      	bhi.n	801cc92 <get_ldnumber+0x72>
 801cc74:	68fa      	ldr	r2, [r7, #12]
 801cc76:	697b      	ldr	r3, [r7, #20]
 801cc78:	429a      	cmp	r2, r3
 801cc7a:	d10a      	bne.n	801cc92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801cc7c:	68bb      	ldr	r3, [r7, #8]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d107      	bne.n	801cc92 <get_ldnumber+0x72>
					vol = (int)i;
 801cc82:	68bb      	ldr	r3, [r7, #8]
 801cc84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801cc86:	697b      	ldr	r3, [r7, #20]
 801cc88:	3301      	adds	r3, #1
 801cc8a:	617b      	str	r3, [r7, #20]
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	697a      	ldr	r2, [r7, #20]
 801cc90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801cc92:	693b      	ldr	r3, [r7, #16]
 801cc94:	e002      	b.n	801cc9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cc96:	2300      	movs	r3, #0
 801cc98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801cc9a:	693b      	ldr	r3, [r7, #16]
}
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	371c      	adds	r7, #28
 801cca0:	46bd      	mov	sp, r7
 801cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cca6:	4770      	bx	lr

0801cca8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	b082      	sub	sp, #8
 801ccac:	af00      	add	r7, sp, #0
 801ccae:	6078      	str	r0, [r7, #4]
 801ccb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	70da      	strb	r2, [r3, #3]
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	f04f 32ff 	mov.w	r2, #4294967295
 801ccbe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ccc0:	6839      	ldr	r1, [r7, #0]
 801ccc2:	6878      	ldr	r0, [r7, #4]
 801ccc4:	f7fe ff7a 	bl	801bbbc <move_window>
 801ccc8:	4603      	mov	r3, r0
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d001      	beq.n	801ccd2 <check_fs+0x2a>
 801ccce:	2304      	movs	r3, #4
 801ccd0:	e038      	b.n	801cd44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	3338      	adds	r3, #56	; 0x38
 801ccd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801ccda:	4618      	mov	r0, r3
 801ccdc:	f7fe fc8c 	bl	801b5f8 <ld_word>
 801cce0:	4603      	mov	r3, r0
 801cce2:	461a      	mov	r2, r3
 801cce4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801cce8:	429a      	cmp	r2, r3
 801ccea:	d001      	beq.n	801ccf0 <check_fs+0x48>
 801ccec:	2303      	movs	r3, #3
 801ccee:	e029      	b.n	801cd44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ccf6:	2be9      	cmp	r3, #233	; 0xe9
 801ccf8:	d009      	beq.n	801cd0e <check_fs+0x66>
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801cd00:	2beb      	cmp	r3, #235	; 0xeb
 801cd02:	d11e      	bne.n	801cd42 <check_fs+0x9a>
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801cd0a:	2b90      	cmp	r3, #144	; 0x90
 801cd0c:	d119      	bne.n	801cd42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	3338      	adds	r3, #56	; 0x38
 801cd12:	3336      	adds	r3, #54	; 0x36
 801cd14:	4618      	mov	r0, r3
 801cd16:	f7fe fc87 	bl	801b628 <ld_dword>
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801cd20:	4a0a      	ldr	r2, [pc, #40]	; (801cd4c <check_fs+0xa4>)
 801cd22:	4293      	cmp	r3, r2
 801cd24:	d101      	bne.n	801cd2a <check_fs+0x82>
 801cd26:	2300      	movs	r3, #0
 801cd28:	e00c      	b.n	801cd44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	3338      	adds	r3, #56	; 0x38
 801cd2e:	3352      	adds	r3, #82	; 0x52
 801cd30:	4618      	mov	r0, r3
 801cd32:	f7fe fc79 	bl	801b628 <ld_dword>
 801cd36:	4603      	mov	r3, r0
 801cd38:	4a05      	ldr	r2, [pc, #20]	; (801cd50 <check_fs+0xa8>)
 801cd3a:	4293      	cmp	r3, r2
 801cd3c:	d101      	bne.n	801cd42 <check_fs+0x9a>
 801cd3e:	2300      	movs	r3, #0
 801cd40:	e000      	b.n	801cd44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cd42:	2302      	movs	r3, #2
}
 801cd44:	4618      	mov	r0, r3
 801cd46:	3708      	adds	r7, #8
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}
 801cd4c:	00544146 	.word	0x00544146
 801cd50:	33544146 	.word	0x33544146

0801cd54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cd54:	b580      	push	{r7, lr}
 801cd56:	b096      	sub	sp, #88	; 0x58
 801cd58:	af00      	add	r7, sp, #0
 801cd5a:	60f8      	str	r0, [r7, #12]
 801cd5c:	60b9      	str	r1, [r7, #8]
 801cd5e:	4613      	mov	r3, r2
 801cd60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cd62:	68bb      	ldr	r3, [r7, #8]
 801cd64:	2200      	movs	r2, #0
 801cd66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cd68:	68f8      	ldr	r0, [r7, #12]
 801cd6a:	f7ff ff59 	bl	801cc20 <get_ldnumber>
 801cd6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cd70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	da01      	bge.n	801cd7a <find_volume+0x26>
 801cd76:	230b      	movs	r3, #11
 801cd78:	e26a      	b.n	801d250 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cd7a:	4aa3      	ldr	r2, [pc, #652]	; (801d008 <find_volume+0x2b4>)
 801cd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d101      	bne.n	801cd8e <find_volume+0x3a>
 801cd8a:	230c      	movs	r3, #12
 801cd8c:	e260      	b.n	801d250 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 801cd8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cd90:	f7fe fd32 	bl	801b7f8 <lock_fs>
 801cd94:	4603      	mov	r3, r0
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d101      	bne.n	801cd9e <find_volume+0x4a>
 801cd9a:	230f      	movs	r3, #15
 801cd9c:	e258      	b.n	801d250 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 801cd9e:	68bb      	ldr	r3, [r7, #8]
 801cda0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cda2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cda4:	79fb      	ldrb	r3, [r7, #7]
 801cda6:	f023 0301 	bic.w	r3, r3, #1
 801cdaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdae:	781b      	ldrb	r3, [r3, #0]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d01a      	beq.n	801cdea <find_volume+0x96>
		stat = disk_status(fs->drv);
 801cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdb6:	785b      	ldrb	r3, [r3, #1]
 801cdb8:	4618      	mov	r0, r3
 801cdba:	f7fe fb7f 	bl	801b4bc <disk_status>
 801cdbe:	4603      	mov	r3, r0
 801cdc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cdc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801cdc8:	f003 0301 	and.w	r3, r3, #1
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d10c      	bne.n	801cdea <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cdd0:	79fb      	ldrb	r3, [r7, #7]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d007      	beq.n	801cde6 <find_volume+0x92>
 801cdd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801cdda:	f003 0304 	and.w	r3, r3, #4
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d001      	beq.n	801cde6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801cde2:	230a      	movs	r3, #10
 801cde4:	e234      	b.n	801d250 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 801cde6:	2300      	movs	r3, #0
 801cde8:	e232      	b.n	801d250 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdec:	2200      	movs	r2, #0
 801cdee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cdf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdf2:	b2da      	uxtb	r2, r3
 801cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdf6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdfa:	785b      	ldrb	r3, [r3, #1]
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	f7fe fb77 	bl	801b4f0 <disk_initialize>
 801ce02:	4603      	mov	r3, r0
 801ce04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801ce08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801ce0c:	f003 0301 	and.w	r3, r3, #1
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d001      	beq.n	801ce18 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801ce14:	2303      	movs	r3, #3
 801ce16:	e21b      	b.n	801d250 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801ce18:	79fb      	ldrb	r3, [r7, #7]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d007      	beq.n	801ce2e <find_volume+0xda>
 801ce1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801ce22:	f003 0304 	and.w	r3, r3, #4
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d001      	beq.n	801ce2e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801ce2a:	230a      	movs	r3, #10
 801ce2c:	e210      	b.n	801d250 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce30:	7858      	ldrb	r0, [r3, #1]
 801ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce34:	330c      	adds	r3, #12
 801ce36:	461a      	mov	r2, r3
 801ce38:	2102      	movs	r1, #2
 801ce3a:	f7fe fbbf 	bl	801b5bc <disk_ioctl>
 801ce3e:	4603      	mov	r3, r0
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d001      	beq.n	801ce48 <find_volume+0xf4>
 801ce44:	2301      	movs	r3, #1
 801ce46:	e203      	b.n	801d250 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce4a:	899b      	ldrh	r3, [r3, #12]
 801ce4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ce50:	d80d      	bhi.n	801ce6e <find_volume+0x11a>
 801ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce54:	899b      	ldrh	r3, [r3, #12]
 801ce56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce5a:	d308      	bcc.n	801ce6e <find_volume+0x11a>
 801ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce5e:	899b      	ldrh	r3, [r3, #12]
 801ce60:	461a      	mov	r2, r3
 801ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce64:	899b      	ldrh	r3, [r3, #12]
 801ce66:	3b01      	subs	r3, #1
 801ce68:	4013      	ands	r3, r2
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d001      	beq.n	801ce72 <find_volume+0x11e>
 801ce6e:	2301      	movs	r3, #1
 801ce70:	e1ee      	b.n	801d250 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801ce72:	2300      	movs	r3, #0
 801ce74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801ce76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ce78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ce7a:	f7ff ff15 	bl	801cca8 <check_fs>
 801ce7e:	4603      	mov	r3, r0
 801ce80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801ce84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ce88:	2b02      	cmp	r3, #2
 801ce8a:	d149      	bne.n	801cf20 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	643b      	str	r3, [r7, #64]	; 0x40
 801ce90:	e01e      	b.n	801ced0 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801ce92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce94:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801ce98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ce9a:	011b      	lsls	r3, r3, #4
 801ce9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801cea0:	4413      	add	r3, r2
 801cea2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cea6:	3304      	adds	r3, #4
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d006      	beq.n	801cebc <find_volume+0x168>
 801ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ceb0:	3308      	adds	r3, #8
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	f7fe fbb8 	bl	801b628 <ld_dword>
 801ceb8:	4602      	mov	r2, r0
 801ceba:	e000      	b.n	801cebe <find_volume+0x16a>
 801cebc:	2200      	movs	r2, #0
 801cebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cec0:	009b      	lsls	r3, r3, #2
 801cec2:	3358      	adds	r3, #88	; 0x58
 801cec4:	443b      	add	r3, r7
 801cec6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801ceca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cecc:	3301      	adds	r3, #1
 801cece:	643b      	str	r3, [r7, #64]	; 0x40
 801ced0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ced2:	2b03      	cmp	r3, #3
 801ced4:	d9dd      	bls.n	801ce92 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801ced6:	2300      	movs	r3, #0
 801ced8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801ceda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d002      	beq.n	801cee6 <find_volume+0x192>
 801cee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cee2:	3b01      	subs	r3, #1
 801cee4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801cee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cee8:	009b      	lsls	r3, r3, #2
 801ceea:	3358      	adds	r3, #88	; 0x58
 801ceec:	443b      	add	r3, r7
 801ceee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801cef2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801cef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d005      	beq.n	801cf06 <find_volume+0x1b2>
 801cefa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cefc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cefe:	f7ff fed3 	bl	801cca8 <check_fs>
 801cf02:	4603      	mov	r3, r0
 801cf04:	e000      	b.n	801cf08 <find_volume+0x1b4>
 801cf06:	2303      	movs	r3, #3
 801cf08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801cf0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801cf10:	2b01      	cmp	r3, #1
 801cf12:	d905      	bls.n	801cf20 <find_volume+0x1cc>
 801cf14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf16:	3301      	adds	r3, #1
 801cf18:	643b      	str	r3, [r7, #64]	; 0x40
 801cf1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cf1c:	2b03      	cmp	r3, #3
 801cf1e:	d9e2      	bls.n	801cee6 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801cf20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801cf24:	2b04      	cmp	r3, #4
 801cf26:	d101      	bne.n	801cf2c <find_volume+0x1d8>
 801cf28:	2301      	movs	r3, #1
 801cf2a:	e191      	b.n	801d250 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801cf2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801cf30:	2b01      	cmp	r3, #1
 801cf32:	d901      	bls.n	801cf38 <find_volume+0x1e4>
 801cf34:	230d      	movs	r3, #13
 801cf36:	e18b      	b.n	801d250 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf3a:	3338      	adds	r3, #56	; 0x38
 801cf3c:	330b      	adds	r3, #11
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f7fe fb5a 	bl	801b5f8 <ld_word>
 801cf44:	4603      	mov	r3, r0
 801cf46:	461a      	mov	r2, r3
 801cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf4a:	899b      	ldrh	r3, [r3, #12]
 801cf4c:	429a      	cmp	r2, r3
 801cf4e:	d001      	beq.n	801cf54 <find_volume+0x200>
 801cf50:	230d      	movs	r3, #13
 801cf52:	e17d      	b.n	801d250 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf56:	3338      	adds	r3, #56	; 0x38
 801cf58:	3316      	adds	r3, #22
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	f7fe fb4c 	bl	801b5f8 <ld_word>
 801cf60:	4603      	mov	r3, r0
 801cf62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801cf64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d106      	bne.n	801cf78 <find_volume+0x224>
 801cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf6c:	3338      	adds	r3, #56	; 0x38
 801cf6e:	3324      	adds	r3, #36	; 0x24
 801cf70:	4618      	mov	r0, r3
 801cf72:	f7fe fb59 	bl	801b628 <ld_dword>
 801cf76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801cf7c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf80:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf8a:	789b      	ldrb	r3, [r3, #2]
 801cf8c:	2b01      	cmp	r3, #1
 801cf8e:	d005      	beq.n	801cf9c <find_volume+0x248>
 801cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf92:	789b      	ldrb	r3, [r3, #2]
 801cf94:	2b02      	cmp	r3, #2
 801cf96:	d001      	beq.n	801cf9c <find_volume+0x248>
 801cf98:	230d      	movs	r3, #13
 801cf9a:	e159      	b.n	801d250 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf9e:	789b      	ldrb	r3, [r3, #2]
 801cfa0:	461a      	mov	r2, r3
 801cfa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cfa4:	fb02 f303 	mul.w	r3, r2, r3
 801cfa8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801cfb0:	b29a      	uxth	r2, r3
 801cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfb4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfb8:	895b      	ldrh	r3, [r3, #10]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d008      	beq.n	801cfd0 <find_volume+0x27c>
 801cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfc0:	895b      	ldrh	r3, [r3, #10]
 801cfc2:	461a      	mov	r2, r3
 801cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfc6:	895b      	ldrh	r3, [r3, #10]
 801cfc8:	3b01      	subs	r3, #1
 801cfca:	4013      	ands	r3, r2
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d001      	beq.n	801cfd4 <find_volume+0x280>
 801cfd0:	230d      	movs	r3, #13
 801cfd2:	e13d      	b.n	801d250 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfd6:	3338      	adds	r3, #56	; 0x38
 801cfd8:	3311      	adds	r3, #17
 801cfda:	4618      	mov	r0, r3
 801cfdc:	f7fe fb0c 	bl	801b5f8 <ld_word>
 801cfe0:	4603      	mov	r3, r0
 801cfe2:	461a      	mov	r2, r3
 801cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfe6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfea:	891b      	ldrh	r3, [r3, #8]
 801cfec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cfee:	8992      	ldrh	r2, [r2, #12]
 801cff0:	0952      	lsrs	r2, r2, #5
 801cff2:	b292      	uxth	r2, r2
 801cff4:	fbb3 f1f2 	udiv	r1, r3, r2
 801cff8:	fb01 f202 	mul.w	r2, r1, r2
 801cffc:	1a9b      	subs	r3, r3, r2
 801cffe:	b29b      	uxth	r3, r3
 801d000:	2b00      	cmp	r3, #0
 801d002:	d003      	beq.n	801d00c <find_volume+0x2b8>
 801d004:	230d      	movs	r3, #13
 801d006:	e123      	b.n	801d250 <find_volume+0x4fc>
 801d008:	24003ff4 	.word	0x24003ff4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d00e:	3338      	adds	r3, #56	; 0x38
 801d010:	3313      	adds	r3, #19
 801d012:	4618      	mov	r0, r3
 801d014:	f7fe faf0 	bl	801b5f8 <ld_word>
 801d018:	4603      	mov	r3, r0
 801d01a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d106      	bne.n	801d030 <find_volume+0x2dc>
 801d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d024:	3338      	adds	r3, #56	; 0x38
 801d026:	3320      	adds	r3, #32
 801d028:	4618      	mov	r0, r3
 801d02a:	f7fe fafd 	bl	801b628 <ld_dword>
 801d02e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d032:	3338      	adds	r3, #56	; 0x38
 801d034:	330e      	adds	r3, #14
 801d036:	4618      	mov	r0, r3
 801d038:	f7fe fade 	bl	801b5f8 <ld_word>
 801d03c:	4603      	mov	r3, r0
 801d03e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d040:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d042:	2b00      	cmp	r3, #0
 801d044:	d101      	bne.n	801d04a <find_volume+0x2f6>
 801d046:	230d      	movs	r3, #13
 801d048:	e102      	b.n	801d250 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d04a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d04c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d04e:	4413      	add	r3, r2
 801d050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d052:	8911      	ldrh	r1, [r2, #8]
 801d054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d056:	8992      	ldrh	r2, [r2, #12]
 801d058:	0952      	lsrs	r2, r2, #5
 801d05a:	b292      	uxth	r2, r2
 801d05c:	fbb1 f2f2 	udiv	r2, r1, r2
 801d060:	b292      	uxth	r2, r2
 801d062:	4413      	add	r3, r2
 801d064:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d06a:	429a      	cmp	r2, r3
 801d06c:	d201      	bcs.n	801d072 <find_volume+0x31e>
 801d06e:	230d      	movs	r3, #13
 801d070:	e0ee      	b.n	801d250 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d076:	1ad3      	subs	r3, r2, r3
 801d078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d07a:	8952      	ldrh	r2, [r2, #10]
 801d07c:	fbb3 f3f2 	udiv	r3, r3, r2
 801d080:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d084:	2b00      	cmp	r3, #0
 801d086:	d101      	bne.n	801d08c <find_volume+0x338>
 801d088:	230d      	movs	r3, #13
 801d08a:	e0e1      	b.n	801d250 <find_volume+0x4fc>
		fmt = FS_FAT32;
 801d08c:	2303      	movs	r3, #3
 801d08e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d094:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801d098:	4293      	cmp	r3, r2
 801d09a:	d802      	bhi.n	801d0a2 <find_volume+0x34e>
 801d09c:	2302      	movs	r3, #2
 801d09e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 801d0a8:	4293      	cmp	r3, r2
 801d0aa:	d802      	bhi.n	801d0b2 <find_volume+0x35e>
 801d0ac:	2301      	movs	r3, #1
 801d0ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0b4:	1c9a      	adds	r2, r3, #2
 801d0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0b8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d0be:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d0c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0c4:	441a      	add	r2, r3
 801d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0c8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d0ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0ce:	441a      	add	r2, r3
 801d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0d2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801d0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d0d8:	2b03      	cmp	r3, #3
 801d0da:	d11e      	bne.n	801d11a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0de:	3338      	adds	r3, #56	; 0x38
 801d0e0:	332a      	adds	r3, #42	; 0x2a
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7fe fa88 	bl	801b5f8 <ld_word>
 801d0e8:	4603      	mov	r3, r0
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d001      	beq.n	801d0f2 <find_volume+0x39e>
 801d0ee:	230d      	movs	r3, #13
 801d0f0:	e0ae      	b.n	801d250 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0f4:	891b      	ldrh	r3, [r3, #8]
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	d001      	beq.n	801d0fe <find_volume+0x3aa>
 801d0fa:	230d      	movs	r3, #13
 801d0fc:	e0a8      	b.n	801d250 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d100:	3338      	adds	r3, #56	; 0x38
 801d102:	332c      	adds	r3, #44	; 0x2c
 801d104:	4618      	mov	r0, r3
 801d106:	f7fe fa8f 	bl	801b628 <ld_dword>
 801d10a:	4602      	mov	r2, r0
 801d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d10e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d112:	69db      	ldr	r3, [r3, #28]
 801d114:	009b      	lsls	r3, r3, #2
 801d116:	647b      	str	r3, [r7, #68]	; 0x44
 801d118:	e01f      	b.n	801d15a <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d11c:	891b      	ldrh	r3, [r3, #8]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d101      	bne.n	801d126 <find_volume+0x3d2>
 801d122:	230d      	movs	r3, #13
 801d124:	e094      	b.n	801d250 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d12c:	441a      	add	r2, r3
 801d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d130:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d132:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d136:	2b02      	cmp	r3, #2
 801d138:	d103      	bne.n	801d142 <find_volume+0x3ee>
 801d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d13c:	69db      	ldr	r3, [r3, #28]
 801d13e:	005b      	lsls	r3, r3, #1
 801d140:	e00a      	b.n	801d158 <find_volume+0x404>
 801d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d144:	69da      	ldr	r2, [r3, #28]
 801d146:	4613      	mov	r3, r2
 801d148:	005b      	lsls	r3, r3, #1
 801d14a:	4413      	add	r3, r2
 801d14c:	085a      	lsrs	r2, r3, #1
 801d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d150:	69db      	ldr	r3, [r3, #28]
 801d152:	f003 0301 	and.w	r3, r3, #1
 801d156:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d158:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d15c:	6a1a      	ldr	r2, [r3, #32]
 801d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d160:	899b      	ldrh	r3, [r3, #12]
 801d162:	4619      	mov	r1, r3
 801d164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d166:	440b      	add	r3, r1
 801d168:	3b01      	subs	r3, #1
 801d16a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d16c:	8989      	ldrh	r1, [r1, #12]
 801d16e:	fbb3 f3f1 	udiv	r3, r3, r1
 801d172:	429a      	cmp	r2, r3
 801d174:	d201      	bcs.n	801d17a <find_volume+0x426>
 801d176:	230d      	movs	r3, #13
 801d178:	e06a      	b.n	801d250 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d17c:	f04f 32ff 	mov.w	r2, #4294967295
 801d180:	619a      	str	r2, [r3, #24]
 801d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d184:	699a      	ldr	r2, [r3, #24]
 801d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d188:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d18c:	2280      	movs	r2, #128	; 0x80
 801d18e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d194:	2b03      	cmp	r3, #3
 801d196:	d149      	bne.n	801d22c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d19a:	3338      	adds	r3, #56	; 0x38
 801d19c:	3330      	adds	r3, #48	; 0x30
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7fe fa2a 	bl	801b5f8 <ld_word>
 801d1a4:	4603      	mov	r3, r0
 801d1a6:	2b01      	cmp	r3, #1
 801d1a8:	d140      	bne.n	801d22c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1ac:	3301      	adds	r3, #1
 801d1ae:	4619      	mov	r1, r3
 801d1b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d1b2:	f7fe fd03 	bl	801bbbc <move_window>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d137      	bne.n	801d22c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 801d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1be:	2200      	movs	r2, #0
 801d1c0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1c4:	3338      	adds	r3, #56	; 0x38
 801d1c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801d1ca:	4618      	mov	r0, r3
 801d1cc:	f7fe fa14 	bl	801b5f8 <ld_word>
 801d1d0:	4603      	mov	r3, r0
 801d1d2:	461a      	mov	r2, r3
 801d1d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	d127      	bne.n	801d22c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1de:	3338      	adds	r3, #56	; 0x38
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	f7fe fa21 	bl	801b628 <ld_dword>
 801d1e6:	4603      	mov	r3, r0
 801d1e8:	4a1b      	ldr	r2, [pc, #108]	; (801d258 <find_volume+0x504>)
 801d1ea:	4293      	cmp	r3, r2
 801d1ec:	d11e      	bne.n	801d22c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1f0:	3338      	adds	r3, #56	; 0x38
 801d1f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7fe fa16 	bl	801b628 <ld_dword>
 801d1fc:	4603      	mov	r3, r0
 801d1fe:	4a17      	ldr	r2, [pc, #92]	; (801d25c <find_volume+0x508>)
 801d200:	4293      	cmp	r3, r2
 801d202:	d113      	bne.n	801d22c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d206:	3338      	adds	r3, #56	; 0x38
 801d208:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7fe fa0b 	bl	801b628 <ld_dword>
 801d212:	4602      	mov	r2, r0
 801d214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d216:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d21a:	3338      	adds	r3, #56	; 0x38
 801d21c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801d220:	4618      	mov	r0, r3
 801d222:	f7fe fa01 	bl	801b628 <ld_dword>
 801d226:	4602      	mov	r2, r0
 801d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d22a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d22e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801d232:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d234:	4b0a      	ldr	r3, [pc, #40]	; (801d260 <find_volume+0x50c>)
 801d236:	881b      	ldrh	r3, [r3, #0]
 801d238:	3301      	adds	r3, #1
 801d23a:	b29a      	uxth	r2, r3
 801d23c:	4b08      	ldr	r3, [pc, #32]	; (801d260 <find_volume+0x50c>)
 801d23e:	801a      	strh	r2, [r3, #0]
 801d240:	4b07      	ldr	r3, [pc, #28]	; (801d260 <find_volume+0x50c>)
 801d242:	881a      	ldrh	r2, [r3, #0]
 801d244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d246:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d24a:	f7fe fc4f 	bl	801baec <clear_lock>
#endif
	return FR_OK;
 801d24e:	2300      	movs	r3, #0
}
 801d250:	4618      	mov	r0, r3
 801d252:	3758      	adds	r7, #88	; 0x58
 801d254:	46bd      	mov	sp, r7
 801d256:	bd80      	pop	{r7, pc}
 801d258:	41615252 	.word	0x41615252
 801d25c:	61417272 	.word	0x61417272
 801d260:	24003ff8 	.word	0x24003ff8

0801d264 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d264:	b580      	push	{r7, lr}
 801d266:	b084      	sub	sp, #16
 801d268:	af00      	add	r7, sp, #0
 801d26a:	6078      	str	r0, [r7, #4]
 801d26c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d26e:	2309      	movs	r3, #9
 801d270:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d02e      	beq.n	801d2d6 <validate+0x72>
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d02a      	beq.n	801d2d6 <validate+0x72>
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	781b      	ldrb	r3, [r3, #0]
 801d286:	2b00      	cmp	r3, #0
 801d288:	d025      	beq.n	801d2d6 <validate+0x72>
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	889a      	ldrh	r2, [r3, #4]
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	88db      	ldrh	r3, [r3, #6]
 801d294:	429a      	cmp	r2, r3
 801d296:	d11e      	bne.n	801d2d6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	4618      	mov	r0, r3
 801d29e:	f7fe faab 	bl	801b7f8 <lock_fs>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d014      	beq.n	801d2d2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	785b      	ldrb	r3, [r3, #1]
 801d2ae:	4618      	mov	r0, r3
 801d2b0:	f7fe f904 	bl	801b4bc <disk_status>
 801d2b4:	4603      	mov	r3, r0
 801d2b6:	f003 0301 	and.w	r3, r3, #1
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d102      	bne.n	801d2c4 <validate+0x60>
				res = FR_OK;
 801d2be:	2300      	movs	r3, #0
 801d2c0:	73fb      	strb	r3, [r7, #15]
 801d2c2:	e008      	b.n	801d2d6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	2100      	movs	r1, #0
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f7fe faaa 	bl	801b824 <unlock_fs>
 801d2d0:	e001      	b.n	801d2d6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801d2d2:	230f      	movs	r3, #15
 801d2d4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d2d6:	7bfb      	ldrb	r3, [r7, #15]
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d102      	bne.n	801d2e2 <validate+0x7e>
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	e000      	b.n	801d2e4 <validate+0x80>
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	683a      	ldr	r2, [r7, #0]
 801d2e6:	6013      	str	r3, [r2, #0]
	return res;
 801d2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	3710      	adds	r7, #16
 801d2ee:	46bd      	mov	sp, r7
 801d2f0:	bd80      	pop	{r7, pc}
	...

0801d2f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d2f4:	b580      	push	{r7, lr}
 801d2f6:	b088      	sub	sp, #32
 801d2f8:	af00      	add	r7, sp, #0
 801d2fa:	60f8      	str	r0, [r7, #12]
 801d2fc:	60b9      	str	r1, [r7, #8]
 801d2fe:	4613      	mov	r3, r2
 801d300:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d302:	68bb      	ldr	r3, [r7, #8]
 801d304:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d306:	f107 0310 	add.w	r3, r7, #16
 801d30a:	4618      	mov	r0, r3
 801d30c:	f7ff fc88 	bl	801cc20 <get_ldnumber>
 801d310:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d312:	69fb      	ldr	r3, [r7, #28]
 801d314:	2b00      	cmp	r3, #0
 801d316:	da01      	bge.n	801d31c <f_mount+0x28>
 801d318:	230b      	movs	r3, #11
 801d31a:	e048      	b.n	801d3ae <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d31c:	4a26      	ldr	r2, [pc, #152]	; (801d3b8 <f_mount+0xc4>)
 801d31e:	69fb      	ldr	r3, [r7, #28]
 801d320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d324:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d326:	69bb      	ldr	r3, [r7, #24]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d00f      	beq.n	801d34c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d32c:	69b8      	ldr	r0, [r7, #24]
 801d32e:	f7fe fbdd 	bl	801baec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801d332:	69bb      	ldr	r3, [r7, #24]
 801d334:	691b      	ldr	r3, [r3, #16]
 801d336:	4618      	mov	r0, r3
 801d338:	f000 fdf6 	bl	801df28 <ff_del_syncobj>
 801d33c:	4603      	mov	r3, r0
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d101      	bne.n	801d346 <f_mount+0x52>
 801d342:	2302      	movs	r3, #2
 801d344:	e033      	b.n	801d3ae <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d346:	69bb      	ldr	r3, [r7, #24]
 801d348:	2200      	movs	r2, #0
 801d34a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d34c:	68fb      	ldr	r3, [r7, #12]
 801d34e:	2b00      	cmp	r3, #0
 801d350:	d00f      	beq.n	801d372 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	2200      	movs	r2, #0
 801d356:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801d358:	69fb      	ldr	r3, [r7, #28]
 801d35a:	b2da      	uxtb	r2, r3
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	3310      	adds	r3, #16
 801d360:	4619      	mov	r1, r3
 801d362:	4610      	mov	r0, r2
 801d364:	f000 fdc5 	bl	801def2 <ff_cre_syncobj>
 801d368:	4603      	mov	r3, r0
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d101      	bne.n	801d372 <f_mount+0x7e>
 801d36e:	2302      	movs	r3, #2
 801d370:	e01d      	b.n	801d3ae <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d372:	68fa      	ldr	r2, [r7, #12]
 801d374:	4910      	ldr	r1, [pc, #64]	; (801d3b8 <f_mount+0xc4>)
 801d376:	69fb      	ldr	r3, [r7, #28]
 801d378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d37c:	68fb      	ldr	r3, [r7, #12]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d002      	beq.n	801d388 <f_mount+0x94>
 801d382:	79fb      	ldrb	r3, [r7, #7]
 801d384:	2b01      	cmp	r3, #1
 801d386:	d001      	beq.n	801d38c <f_mount+0x98>
 801d388:	2300      	movs	r3, #0
 801d38a:	e010      	b.n	801d3ae <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d38c:	f107 010c 	add.w	r1, r7, #12
 801d390:	f107 0308 	add.w	r3, r7, #8
 801d394:	2200      	movs	r2, #0
 801d396:	4618      	mov	r0, r3
 801d398:	f7ff fcdc 	bl	801cd54 <find_volume>
 801d39c:	4603      	mov	r3, r0
 801d39e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	7dfa      	ldrb	r2, [r7, #23]
 801d3a4:	4611      	mov	r1, r2
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f7fe fa3c 	bl	801b824 <unlock_fs>
 801d3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	3720      	adds	r7, #32
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	bd80      	pop	{r7, pc}
 801d3b6:	bf00      	nop
 801d3b8:	24003ff4 	.word	0x24003ff4

0801d3bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b098      	sub	sp, #96	; 0x60
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	60f8      	str	r0, [r7, #12]
 801d3c4:	60b9      	str	r1, [r7, #8]
 801d3c6:	4613      	mov	r3, r2
 801d3c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d101      	bne.n	801d3d4 <f_open+0x18>
 801d3d0:	2309      	movs	r3, #9
 801d3d2:	e1c2      	b.n	801d75a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d3d4:	79fb      	ldrb	r3, [r7, #7]
 801d3d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d3da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d3dc:	79fa      	ldrb	r2, [r7, #7]
 801d3de:	f107 0110 	add.w	r1, r7, #16
 801d3e2:	f107 0308 	add.w	r3, r7, #8
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f7ff fcb4 	bl	801cd54 <find_volume>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801d3f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	f040 819f 	bne.w	801d73a <f_open+0x37e>
		dj.obj.fs = fs;
 801d3fc:	693b      	ldr	r3, [r7, #16]
 801d3fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d400:	68ba      	ldr	r2, [r7, #8]
 801d402:	f107 0314 	add.w	r3, r7, #20
 801d406:	4611      	mov	r1, r2
 801d408:	4618      	mov	r0, r3
 801d40a:	f7ff fb93 	bl	801cb34 <follow_path>
 801d40e:	4603      	mov	r3, r0
 801d410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d11a      	bne.n	801d452 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d41c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801d420:	b25b      	sxtb	r3, r3
 801d422:	2b00      	cmp	r3, #0
 801d424:	da03      	bge.n	801d42e <f_open+0x72>
				res = FR_INVALID_NAME;
 801d426:	2306      	movs	r3, #6
 801d428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801d42c:	e011      	b.n	801d452 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d42e:	79fb      	ldrb	r3, [r7, #7]
 801d430:	f023 0301 	bic.w	r3, r3, #1
 801d434:	2b00      	cmp	r3, #0
 801d436:	bf14      	ite	ne
 801d438:	2301      	movne	r3, #1
 801d43a:	2300      	moveq	r3, #0
 801d43c:	b2db      	uxtb	r3, r3
 801d43e:	461a      	mov	r2, r3
 801d440:	f107 0314 	add.w	r3, r7, #20
 801d444:	4611      	mov	r1, r2
 801d446:	4618      	mov	r0, r3
 801d448:	f7fe fa08 	bl	801b85c <chk_lock>
 801d44c:	4603      	mov	r3, r0
 801d44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d452:	79fb      	ldrb	r3, [r7, #7]
 801d454:	f003 031c 	and.w	r3, r3, #28
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d07f      	beq.n	801d55c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801d45c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d460:	2b00      	cmp	r3, #0
 801d462:	d017      	beq.n	801d494 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d468:	2b04      	cmp	r3, #4
 801d46a:	d10e      	bne.n	801d48a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d46c:	f7fe fa52 	bl	801b914 <enq_lock>
 801d470:	4603      	mov	r3, r0
 801d472:	2b00      	cmp	r3, #0
 801d474:	d006      	beq.n	801d484 <f_open+0xc8>
 801d476:	f107 0314 	add.w	r3, r7, #20
 801d47a:	4618      	mov	r0, r3
 801d47c:	f7ff fa17 	bl	801c8ae <dir_register>
 801d480:	4603      	mov	r3, r0
 801d482:	e000      	b.n	801d486 <f_open+0xca>
 801d484:	2312      	movs	r3, #18
 801d486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d48a:	79fb      	ldrb	r3, [r7, #7]
 801d48c:	f043 0308 	orr.w	r3, r3, #8
 801d490:	71fb      	strb	r3, [r7, #7]
 801d492:	e010      	b.n	801d4b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d494:	7ebb      	ldrb	r3, [r7, #26]
 801d496:	f003 0311 	and.w	r3, r3, #17
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d003      	beq.n	801d4a6 <f_open+0xea>
					res = FR_DENIED;
 801d49e:	2307      	movs	r3, #7
 801d4a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801d4a4:	e007      	b.n	801d4b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d4a6:	79fb      	ldrb	r3, [r7, #7]
 801d4a8:	f003 0304 	and.w	r3, r3, #4
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d002      	beq.n	801d4b6 <f_open+0xfa>
 801d4b0:	2308      	movs	r3, #8
 801d4b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d4b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d168      	bne.n	801d590 <f_open+0x1d4>
 801d4be:	79fb      	ldrb	r3, [r7, #7]
 801d4c0:	f003 0308 	and.w	r3, r3, #8
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d063      	beq.n	801d590 <f_open+0x1d4>
				dw = GET_FATTIME();
 801d4c8:	f7fd fdbe 	bl	801b048 <get_fattime>
 801d4cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d0:	330e      	adds	r3, #14
 801d4d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801d4d4:	4618      	mov	r0, r3
 801d4d6:	f7fe f8e5 	bl	801b6a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4dc:	3316      	adds	r3, #22
 801d4de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	f7fe f8df 	bl	801b6a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4e8:	330b      	adds	r3, #11
 801d4ea:	2220      	movs	r2, #32
 801d4ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d4ee:	693b      	ldr	r3, [r7, #16]
 801d4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d4f2:	4611      	mov	r1, r2
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	f7ff f8e9 	bl	801c6cc <ld_clust>
 801d4fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d4fc:	693b      	ldr	r3, [r7, #16]
 801d4fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d500:	2200      	movs	r2, #0
 801d502:	4618      	mov	r0, r3
 801d504:	f7ff f901 	bl	801c70a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d50a:	331c      	adds	r3, #28
 801d50c:	2100      	movs	r1, #0
 801d50e:	4618      	mov	r0, r3
 801d510:	f7fe f8c8 	bl	801b6a4 <st_dword>
					fs->wflag = 1;
 801d514:	693b      	ldr	r3, [r7, #16]
 801d516:	2201      	movs	r2, #1
 801d518:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d037      	beq.n	801d590 <f_open+0x1d4>
						dw = fs->winsect;
 801d520:	693b      	ldr	r3, [r7, #16]
 801d522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d524:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801d526:	f107 0314 	add.w	r3, r7, #20
 801d52a:	2200      	movs	r2, #0
 801d52c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d52e:	4618      	mov	r0, r3
 801d530:	f7fe fdf1 	bl	801c116 <remove_chain>
 801d534:	4603      	mov	r3, r0
 801d536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801d53a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d126      	bne.n	801d590 <f_open+0x1d4>
							res = move_window(fs, dw);
 801d542:	693b      	ldr	r3, [r7, #16]
 801d544:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801d546:	4618      	mov	r0, r3
 801d548:	f7fe fb38 	bl	801bbbc <move_window>
 801d54c:	4603      	mov	r3, r0
 801d54e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d552:	693b      	ldr	r3, [r7, #16]
 801d554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d556:	3a01      	subs	r2, #1
 801d558:	615a      	str	r2, [r3, #20]
 801d55a:	e019      	b.n	801d590 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d55c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d560:	2b00      	cmp	r3, #0
 801d562:	d115      	bne.n	801d590 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d564:	7ebb      	ldrb	r3, [r7, #26]
 801d566:	f003 0310 	and.w	r3, r3, #16
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d003      	beq.n	801d576 <f_open+0x1ba>
					res = FR_NO_FILE;
 801d56e:	2304      	movs	r3, #4
 801d570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801d574:	e00c      	b.n	801d590 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d576:	79fb      	ldrb	r3, [r7, #7]
 801d578:	f003 0302 	and.w	r3, r3, #2
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d007      	beq.n	801d590 <f_open+0x1d4>
 801d580:	7ebb      	ldrb	r3, [r7, #26]
 801d582:	f003 0301 	and.w	r3, r3, #1
 801d586:	2b00      	cmp	r3, #0
 801d588:	d002      	beq.n	801d590 <f_open+0x1d4>
						res = FR_DENIED;
 801d58a:	2307      	movs	r3, #7
 801d58c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801d590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d594:	2b00      	cmp	r3, #0
 801d596:	d128      	bne.n	801d5ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d598:	79fb      	ldrb	r3, [r7, #7]
 801d59a:	f003 0308 	and.w	r3, r3, #8
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d003      	beq.n	801d5aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801d5a2:	79fb      	ldrb	r3, [r7, #7]
 801d5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d5a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d5aa:	693b      	ldr	r3, [r7, #16]
 801d5ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801d5b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d5b8:	79fb      	ldrb	r3, [r7, #7]
 801d5ba:	f023 0301 	bic.w	r3, r3, #1
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	bf14      	ite	ne
 801d5c2:	2301      	movne	r3, #1
 801d5c4:	2300      	moveq	r3, #0
 801d5c6:	b2db      	uxtb	r3, r3
 801d5c8:	461a      	mov	r2, r3
 801d5ca:	f107 0314 	add.w	r3, r7, #20
 801d5ce:	4611      	mov	r1, r2
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	f7fe f9c1 	bl	801b958 <inc_lock>
 801d5d6:	4602      	mov	r2, r0
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	691b      	ldr	r3, [r3, #16]
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d102      	bne.n	801d5ea <f_open+0x22e>
 801d5e4:	2302      	movs	r3, #2
 801d5e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d5ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	f040 80a3 	bne.w	801d73a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d5f4:	693b      	ldr	r3, [r7, #16]
 801d5f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d5f8:	4611      	mov	r1, r2
 801d5fa:	4618      	mov	r0, r3
 801d5fc:	f7ff f866 	bl	801c6cc <ld_clust>
 801d600:	4602      	mov	r2, r0
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d608:	331c      	adds	r3, #28
 801d60a:	4618      	mov	r0, r3
 801d60c:	f7fe f80c 	bl	801b628 <ld_dword>
 801d610:	4602      	mov	r2, r0
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	2200      	movs	r2, #0
 801d61a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d61c:	693a      	ldr	r2, [r7, #16]
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d622:	693b      	ldr	r3, [r7, #16]
 801d624:	88da      	ldrh	r2, [r3, #6]
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	79fa      	ldrb	r2, [r7, #7]
 801d62e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	2200      	movs	r2, #0
 801d634:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	2200      	movs	r2, #0
 801d63a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	2200      	movs	r2, #0
 801d640:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	3330      	adds	r3, #48	; 0x30
 801d646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d64a:	2100      	movs	r1, #0
 801d64c:	4618      	mov	r0, r3
 801d64e:	f7fe f876 	bl	801b73e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d652:	79fb      	ldrb	r3, [r7, #7]
 801d654:	f003 0320 	and.w	r3, r3, #32
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d06e      	beq.n	801d73a <f_open+0x37e>
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	68db      	ldr	r3, [r3, #12]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d06a      	beq.n	801d73a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	68da      	ldr	r2, [r3, #12]
 801d668:	68fb      	ldr	r3, [r7, #12]
 801d66a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d66c:	693b      	ldr	r3, [r7, #16]
 801d66e:	895b      	ldrh	r3, [r3, #10]
 801d670:	461a      	mov	r2, r3
 801d672:	693b      	ldr	r3, [r7, #16]
 801d674:	899b      	ldrh	r3, [r3, #12]
 801d676:	fb02 f303 	mul.w	r3, r2, r3
 801d67a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	689b      	ldr	r3, [r3, #8]
 801d680:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d682:	68fb      	ldr	r3, [r7, #12]
 801d684:	68db      	ldr	r3, [r3, #12]
 801d686:	657b      	str	r3, [r7, #84]	; 0x54
 801d688:	e016      	b.n	801d6b8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d68e:	4618      	mov	r0, r3
 801d690:	f7fe fb51 	bl	801bd36 <get_fat>
 801d694:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801d696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d698:	2b01      	cmp	r3, #1
 801d69a:	d802      	bhi.n	801d6a2 <f_open+0x2e6>
 801d69c:	2302      	movs	r3, #2
 801d69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d6a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6a8:	d102      	bne.n	801d6b0 <f_open+0x2f4>
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d6b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d6b4:	1ad3      	subs	r3, r2, r3
 801d6b6:	657b      	str	r3, [r7, #84]	; 0x54
 801d6b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d103      	bne.n	801d6c8 <f_open+0x30c>
 801d6c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d6c4:	429a      	cmp	r2, r3
 801d6c6:	d8e0      	bhi.n	801d68a <f_open+0x2ce>
				}
				fp->clust = clst;
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d6cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d6ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d131      	bne.n	801d73a <f_open+0x37e>
 801d6d6:	693b      	ldr	r3, [r7, #16]
 801d6d8:	899b      	ldrh	r3, [r3, #12]
 801d6da:	461a      	mov	r2, r3
 801d6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d6de:	fbb3 f1f2 	udiv	r1, r3, r2
 801d6e2:	fb01 f202 	mul.w	r2, r1, r2
 801d6e6:	1a9b      	subs	r3, r3, r2
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d026      	beq.n	801d73a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d6ec:	693b      	ldr	r3, [r7, #16]
 801d6ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	f7fe fb01 	bl	801bcf8 <clust2sect>
 801d6f6:	6478      	str	r0, [r7, #68]	; 0x44
 801d6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d103      	bne.n	801d706 <f_open+0x34a>
						res = FR_INT_ERR;
 801d6fe:	2302      	movs	r3, #2
 801d700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801d704:	e019      	b.n	801d73a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d706:	693b      	ldr	r3, [r7, #16]
 801d708:	899b      	ldrh	r3, [r3, #12]
 801d70a:	461a      	mov	r2, r3
 801d70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d70e:	fbb3 f2f2 	udiv	r2, r3, r2
 801d712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d714:	441a      	add	r2, r3
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d71a:	693b      	ldr	r3, [r7, #16]
 801d71c:	7858      	ldrb	r0, [r3, #1]
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	6a1a      	ldr	r2, [r3, #32]
 801d728:	2301      	movs	r3, #1
 801d72a:	f7fd ff07 	bl	801b53c <disk_read>
 801d72e:	4603      	mov	r3, r0
 801d730:	2b00      	cmp	r3, #0
 801d732:	d002      	beq.n	801d73a <f_open+0x37e>
 801d734:	2301      	movs	r3, #1
 801d736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d73a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d002      	beq.n	801d748 <f_open+0x38c>
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	2200      	movs	r2, #0
 801d746:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d748:	693b      	ldr	r3, [r7, #16]
 801d74a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d74e:	4611      	mov	r1, r2
 801d750:	4618      	mov	r0, r3
 801d752:	f7fe f867 	bl	801b824 <unlock_fs>
 801d756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801d75a:	4618      	mov	r0, r3
 801d75c:	3760      	adds	r7, #96	; 0x60
 801d75e:	46bd      	mov	sp, r7
 801d760:	bd80      	pop	{r7, pc}

0801d762 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d762:	b580      	push	{r7, lr}
 801d764:	b08c      	sub	sp, #48	; 0x30
 801d766:	af00      	add	r7, sp, #0
 801d768:	60f8      	str	r0, [r7, #12]
 801d76a:	60b9      	str	r1, [r7, #8]
 801d76c:	607a      	str	r2, [r7, #4]
 801d76e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d770:	68bb      	ldr	r3, [r7, #8]
 801d772:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d774:	683b      	ldr	r3, [r7, #0]
 801d776:	2200      	movs	r2, #0
 801d778:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	f107 0210 	add.w	r2, r7, #16
 801d780:	4611      	mov	r1, r2
 801d782:	4618      	mov	r0, r3
 801d784:	f7ff fd6e 	bl	801d264 <validate>
 801d788:	4603      	mov	r3, r0
 801d78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d792:	2b00      	cmp	r3, #0
 801d794:	d107      	bne.n	801d7a6 <f_write+0x44>
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	7d5b      	ldrb	r3, [r3, #21]
 801d79a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d79e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d009      	beq.n	801d7ba <f_write+0x58>
 801d7a6:	693b      	ldr	r3, [r7, #16]
 801d7a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801d7ac:	4611      	mov	r1, r2
 801d7ae:	4618      	mov	r0, r3
 801d7b0:	f7fe f838 	bl	801b824 <unlock_fs>
 801d7b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d7b8:	e192      	b.n	801dae0 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	7d1b      	ldrb	r3, [r3, #20]
 801d7be:	f003 0302 	and.w	r3, r3, #2
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d106      	bne.n	801d7d4 <f_write+0x72>
 801d7c6:	693b      	ldr	r3, [r7, #16]
 801d7c8:	2107      	movs	r1, #7
 801d7ca:	4618      	mov	r0, r3
 801d7cc:	f7fe f82a 	bl	801b824 <unlock_fs>
 801d7d0:	2307      	movs	r3, #7
 801d7d2:	e185      	b.n	801dae0 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	699a      	ldr	r2, [r3, #24]
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	441a      	add	r2, r3
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	699b      	ldr	r3, [r3, #24]
 801d7e0:	429a      	cmp	r2, r3
 801d7e2:	f080 816a 	bcs.w	801daba <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	699b      	ldr	r3, [r3, #24]
 801d7ea:	43db      	mvns	r3, r3
 801d7ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d7ee:	e164      	b.n	801daba <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	699b      	ldr	r3, [r3, #24]
 801d7f4:	693a      	ldr	r2, [r7, #16]
 801d7f6:	8992      	ldrh	r2, [r2, #12]
 801d7f8:	fbb3 f1f2 	udiv	r1, r3, r2
 801d7fc:	fb01 f202 	mul.w	r2, r1, r2
 801d800:	1a9b      	subs	r3, r3, r2
 801d802:	2b00      	cmp	r3, #0
 801d804:	f040 810f 	bne.w	801da26 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	699b      	ldr	r3, [r3, #24]
 801d80c:	693a      	ldr	r2, [r7, #16]
 801d80e:	8992      	ldrh	r2, [r2, #12]
 801d810:	fbb3 f3f2 	udiv	r3, r3, r2
 801d814:	693a      	ldr	r2, [r7, #16]
 801d816:	8952      	ldrh	r2, [r2, #10]
 801d818:	3a01      	subs	r2, #1
 801d81a:	4013      	ands	r3, r2
 801d81c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d81e:	69bb      	ldr	r3, [r7, #24]
 801d820:	2b00      	cmp	r3, #0
 801d822:	d14d      	bne.n	801d8c0 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	699b      	ldr	r3, [r3, #24]
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d10c      	bne.n	801d846 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	689b      	ldr	r3, [r3, #8]
 801d830:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d834:	2b00      	cmp	r3, #0
 801d836:	d11a      	bne.n	801d86e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	2100      	movs	r1, #0
 801d83c:	4618      	mov	r0, r3
 801d83e:	f7fe fccf 	bl	801c1e0 <create_chain>
 801d842:	62b8      	str	r0, [r7, #40]	; 0x28
 801d844:	e013      	b.n	801d86e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d007      	beq.n	801d85e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	699b      	ldr	r3, [r3, #24]
 801d852:	4619      	mov	r1, r3
 801d854:	68f8      	ldr	r0, [r7, #12]
 801d856:	f7fe fd5b 	bl	801c310 <clmt_clust>
 801d85a:	62b8      	str	r0, [r7, #40]	; 0x28
 801d85c:	e007      	b.n	801d86e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d85e:	68fa      	ldr	r2, [r7, #12]
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	69db      	ldr	r3, [r3, #28]
 801d864:	4619      	mov	r1, r3
 801d866:	4610      	mov	r0, r2
 801d868:	f7fe fcba 	bl	801c1e0 <create_chain>
 801d86c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d870:	2b00      	cmp	r3, #0
 801d872:	f000 8127 	beq.w	801dac4 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d878:	2b01      	cmp	r3, #1
 801d87a:	d109      	bne.n	801d890 <f_write+0x12e>
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	2202      	movs	r2, #2
 801d880:	755a      	strb	r2, [r3, #21]
 801d882:	693b      	ldr	r3, [r7, #16]
 801d884:	2102      	movs	r1, #2
 801d886:	4618      	mov	r0, r3
 801d888:	f7fd ffcc 	bl	801b824 <unlock_fs>
 801d88c:	2302      	movs	r3, #2
 801d88e:	e127      	b.n	801dae0 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d892:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d896:	d109      	bne.n	801d8ac <f_write+0x14a>
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	2201      	movs	r2, #1
 801d89c:	755a      	strb	r2, [r3, #21]
 801d89e:	693b      	ldr	r3, [r7, #16]
 801d8a0:	2101      	movs	r1, #1
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	f7fd ffbe 	bl	801b824 <unlock_fs>
 801d8a8:	2301      	movs	r3, #1
 801d8aa:	e119      	b.n	801dae0 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d8b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	689b      	ldr	r3, [r3, #8]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d102      	bne.n	801d8c0 <f_write+0x15e>
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d8be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	7d1b      	ldrb	r3, [r3, #20]
 801d8c4:	b25b      	sxtb	r3, r3
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	da1d      	bge.n	801d906 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d8ca:	693b      	ldr	r3, [r7, #16]
 801d8cc:	7858      	ldrb	r0, [r3, #1]
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	6a1a      	ldr	r2, [r3, #32]
 801d8d8:	2301      	movs	r3, #1
 801d8da:	f7fd fe4f 	bl	801b57c <disk_write>
 801d8de:	4603      	mov	r3, r0
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d009      	beq.n	801d8f8 <f_write+0x196>
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	2201      	movs	r2, #1
 801d8e8:	755a      	strb	r2, [r3, #21]
 801d8ea:	693b      	ldr	r3, [r7, #16]
 801d8ec:	2101      	movs	r1, #1
 801d8ee:	4618      	mov	r0, r3
 801d8f0:	f7fd ff98 	bl	801b824 <unlock_fs>
 801d8f4:	2301      	movs	r3, #1
 801d8f6:	e0f3      	b.n	801dae0 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	7d1b      	ldrb	r3, [r3, #20]
 801d8fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d900:	b2da      	uxtb	r2, r3
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d906:	693a      	ldr	r2, [r7, #16]
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	69db      	ldr	r3, [r3, #28]
 801d90c:	4619      	mov	r1, r3
 801d90e:	4610      	mov	r0, r2
 801d910:	f7fe f9f2 	bl	801bcf8 <clust2sect>
 801d914:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d916:	697b      	ldr	r3, [r7, #20]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d109      	bne.n	801d930 <f_write+0x1ce>
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	2202      	movs	r2, #2
 801d920:	755a      	strb	r2, [r3, #21]
 801d922:	693b      	ldr	r3, [r7, #16]
 801d924:	2102      	movs	r1, #2
 801d926:	4618      	mov	r0, r3
 801d928:	f7fd ff7c 	bl	801b824 <unlock_fs>
 801d92c:	2302      	movs	r3, #2
 801d92e:	e0d7      	b.n	801dae0 <f_write+0x37e>
			sect += csect;
 801d930:	697a      	ldr	r2, [r7, #20]
 801d932:	69bb      	ldr	r3, [r7, #24]
 801d934:	4413      	add	r3, r2
 801d936:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d938:	693b      	ldr	r3, [r7, #16]
 801d93a:	899b      	ldrh	r3, [r3, #12]
 801d93c:	461a      	mov	r2, r3
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	fbb3 f3f2 	udiv	r3, r3, r2
 801d944:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d946:	6a3b      	ldr	r3, [r7, #32]
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d048      	beq.n	801d9de <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d94c:	69ba      	ldr	r2, [r7, #24]
 801d94e:	6a3b      	ldr	r3, [r7, #32]
 801d950:	4413      	add	r3, r2
 801d952:	693a      	ldr	r2, [r7, #16]
 801d954:	8952      	ldrh	r2, [r2, #10]
 801d956:	4293      	cmp	r3, r2
 801d958:	d905      	bls.n	801d966 <f_write+0x204>
					cc = fs->csize - csect;
 801d95a:	693b      	ldr	r3, [r7, #16]
 801d95c:	895b      	ldrh	r3, [r3, #10]
 801d95e:	461a      	mov	r2, r3
 801d960:	69bb      	ldr	r3, [r7, #24]
 801d962:	1ad3      	subs	r3, r2, r3
 801d964:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d966:	693b      	ldr	r3, [r7, #16]
 801d968:	7858      	ldrb	r0, [r3, #1]
 801d96a:	6a3b      	ldr	r3, [r7, #32]
 801d96c:	697a      	ldr	r2, [r7, #20]
 801d96e:	69f9      	ldr	r1, [r7, #28]
 801d970:	f7fd fe04 	bl	801b57c <disk_write>
 801d974:	4603      	mov	r3, r0
 801d976:	2b00      	cmp	r3, #0
 801d978:	d009      	beq.n	801d98e <f_write+0x22c>
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	2201      	movs	r2, #1
 801d97e:	755a      	strb	r2, [r3, #21]
 801d980:	693b      	ldr	r3, [r7, #16]
 801d982:	2101      	movs	r1, #1
 801d984:	4618      	mov	r0, r3
 801d986:	f7fd ff4d 	bl	801b824 <unlock_fs>
 801d98a:	2301      	movs	r3, #1
 801d98c:	e0a8      	b.n	801dae0 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	6a1a      	ldr	r2, [r3, #32]
 801d992:	697b      	ldr	r3, [r7, #20]
 801d994:	1ad3      	subs	r3, r2, r3
 801d996:	6a3a      	ldr	r2, [r7, #32]
 801d998:	429a      	cmp	r2, r3
 801d99a:	d918      	bls.n	801d9ce <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	6a1a      	ldr	r2, [r3, #32]
 801d9a6:	697b      	ldr	r3, [r7, #20]
 801d9a8:	1ad3      	subs	r3, r2, r3
 801d9aa:	693a      	ldr	r2, [r7, #16]
 801d9ac:	8992      	ldrh	r2, [r2, #12]
 801d9ae:	fb02 f303 	mul.w	r3, r2, r3
 801d9b2:	69fa      	ldr	r2, [r7, #28]
 801d9b4:	18d1      	adds	r1, r2, r3
 801d9b6:	693b      	ldr	r3, [r7, #16]
 801d9b8:	899b      	ldrh	r3, [r3, #12]
 801d9ba:	461a      	mov	r2, r3
 801d9bc:	f7fd fe9e 	bl	801b6fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	7d1b      	ldrb	r3, [r3, #20]
 801d9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d9c8:	b2da      	uxtb	r2, r3
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d9ce:	693b      	ldr	r3, [r7, #16]
 801d9d0:	899b      	ldrh	r3, [r3, #12]
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	6a3b      	ldr	r3, [r7, #32]
 801d9d6:	fb02 f303 	mul.w	r3, r2, r3
 801d9da:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801d9dc:	e050      	b.n	801da80 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	6a1b      	ldr	r3, [r3, #32]
 801d9e2:	697a      	ldr	r2, [r7, #20]
 801d9e4:	429a      	cmp	r2, r3
 801d9e6:	d01b      	beq.n	801da20 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	699a      	ldr	r2, [r3, #24]
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d9f0:	429a      	cmp	r2, r3
 801d9f2:	d215      	bcs.n	801da20 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d9f4:	693b      	ldr	r3, [r7, #16]
 801d9f6:	7858      	ldrb	r0, [r3, #1]
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d9fe:	2301      	movs	r3, #1
 801da00:	697a      	ldr	r2, [r7, #20]
 801da02:	f7fd fd9b 	bl	801b53c <disk_read>
 801da06:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d009      	beq.n	801da20 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	2201      	movs	r2, #1
 801da10:	755a      	strb	r2, [r3, #21]
 801da12:	693b      	ldr	r3, [r7, #16]
 801da14:	2101      	movs	r1, #1
 801da16:	4618      	mov	r0, r3
 801da18:	f7fd ff04 	bl	801b824 <unlock_fs>
 801da1c:	2301      	movs	r3, #1
 801da1e:	e05f      	b.n	801dae0 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	697a      	ldr	r2, [r7, #20]
 801da24:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801da26:	693b      	ldr	r3, [r7, #16]
 801da28:	899b      	ldrh	r3, [r3, #12]
 801da2a:	4618      	mov	r0, r3
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	699b      	ldr	r3, [r3, #24]
 801da30:	693a      	ldr	r2, [r7, #16]
 801da32:	8992      	ldrh	r2, [r2, #12]
 801da34:	fbb3 f1f2 	udiv	r1, r3, r2
 801da38:	fb01 f202 	mul.w	r2, r1, r2
 801da3c:	1a9b      	subs	r3, r3, r2
 801da3e:	1ac3      	subs	r3, r0, r3
 801da40:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801da42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	429a      	cmp	r2, r3
 801da48:	d901      	bls.n	801da4e <f_write+0x2ec>
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	699b      	ldr	r3, [r3, #24]
 801da58:	693a      	ldr	r2, [r7, #16]
 801da5a:	8992      	ldrh	r2, [r2, #12]
 801da5c:	fbb3 f0f2 	udiv	r0, r3, r2
 801da60:	fb00 f202 	mul.w	r2, r0, r2
 801da64:	1a9b      	subs	r3, r3, r2
 801da66:	440b      	add	r3, r1
 801da68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801da6a:	69f9      	ldr	r1, [r7, #28]
 801da6c:	4618      	mov	r0, r3
 801da6e:	f7fd fe45 	bl	801b6fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	7d1b      	ldrb	r3, [r3, #20]
 801da76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801da7a:	b2da      	uxtb	r2, r3
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801da80:	69fa      	ldr	r2, [r7, #28]
 801da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da84:	4413      	add	r3, r2
 801da86:	61fb      	str	r3, [r7, #28]
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	699a      	ldr	r2, [r3, #24]
 801da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da8e:	441a      	add	r2, r3
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	619a      	str	r2, [r3, #24]
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	68da      	ldr	r2, [r3, #12]
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	699b      	ldr	r3, [r3, #24]
 801da9c:	429a      	cmp	r2, r3
 801da9e:	bf38      	it	cc
 801daa0:	461a      	movcc	r2, r3
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	60da      	str	r2, [r3, #12]
 801daa6:	683b      	ldr	r3, [r7, #0]
 801daa8:	681a      	ldr	r2, [r3, #0]
 801daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daac:	441a      	add	r2, r3
 801daae:	683b      	ldr	r3, [r7, #0]
 801dab0:	601a      	str	r2, [r3, #0]
 801dab2:	687a      	ldr	r2, [r7, #4]
 801dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dab6:	1ad3      	subs	r3, r2, r3
 801dab8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	f47f ae97 	bne.w	801d7f0 <f_write+0x8e>
 801dac2:	e000      	b.n	801dac6 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801dac4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	7d1b      	ldrb	r3, [r3, #20]
 801daca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dace:	b2da      	uxtb	r2, r3
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801dad4:	693b      	ldr	r3, [r7, #16]
 801dad6:	2100      	movs	r1, #0
 801dad8:	4618      	mov	r0, r3
 801dada:	f7fd fea3 	bl	801b824 <unlock_fs>
 801dade:	2300      	movs	r3, #0
}
 801dae0:	4618      	mov	r0, r3
 801dae2:	3730      	adds	r7, #48	; 0x30
 801dae4:	46bd      	mov	sp, r7
 801dae6:	bd80      	pop	{r7, pc}

0801dae8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b086      	sub	sp, #24
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	f107 0208 	add.w	r2, r7, #8
 801daf6:	4611      	mov	r1, r2
 801daf8:	4618      	mov	r0, r3
 801dafa:	f7ff fbb3 	bl	801d264 <validate>
 801dafe:	4603      	mov	r3, r0
 801db00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801db02:	7dfb      	ldrb	r3, [r7, #23]
 801db04:	2b00      	cmp	r3, #0
 801db06:	d16d      	bne.n	801dbe4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	7d1b      	ldrb	r3, [r3, #20]
 801db0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db10:	2b00      	cmp	r3, #0
 801db12:	d067      	beq.n	801dbe4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	7d1b      	ldrb	r3, [r3, #20]
 801db18:	b25b      	sxtb	r3, r3
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	da1a      	bge.n	801db54 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801db1e:	68bb      	ldr	r3, [r7, #8]
 801db20:	7858      	ldrb	r0, [r3, #1]
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	6a1a      	ldr	r2, [r3, #32]
 801db2c:	2301      	movs	r3, #1
 801db2e:	f7fd fd25 	bl	801b57c <disk_write>
 801db32:	4603      	mov	r3, r0
 801db34:	2b00      	cmp	r3, #0
 801db36:	d006      	beq.n	801db46 <f_sync+0x5e>
 801db38:	68bb      	ldr	r3, [r7, #8]
 801db3a:	2101      	movs	r1, #1
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7fd fe71 	bl	801b824 <unlock_fs>
 801db42:	2301      	movs	r3, #1
 801db44:	e055      	b.n	801dbf2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	7d1b      	ldrb	r3, [r3, #20]
 801db4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db4e:	b2da      	uxtb	r2, r3
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801db54:	f7fd fa78 	bl	801b048 <get_fattime>
 801db58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801db5a:	68ba      	ldr	r2, [r7, #8]
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db60:	4619      	mov	r1, r3
 801db62:	4610      	mov	r0, r2
 801db64:	f7fe f82a 	bl	801bbbc <move_window>
 801db68:	4603      	mov	r3, r0
 801db6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801db6c:	7dfb      	ldrb	r3, [r7, #23]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d138      	bne.n	801dbe4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	330b      	adds	r3, #11
 801db7c:	781a      	ldrb	r2, [r3, #0]
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	330b      	adds	r3, #11
 801db82:	f042 0220 	orr.w	r2, r2, #32
 801db86:	b2d2      	uxtb	r2, r2
 801db88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	6818      	ldr	r0, [r3, #0]
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	689b      	ldr	r3, [r3, #8]
 801db92:	461a      	mov	r2, r3
 801db94:	68f9      	ldr	r1, [r7, #12]
 801db96:	f7fe fdb8 	bl	801c70a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801db9a:	68fb      	ldr	r3, [r7, #12]
 801db9c:	f103 021c 	add.w	r2, r3, #28
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	68db      	ldr	r3, [r3, #12]
 801dba4:	4619      	mov	r1, r3
 801dba6:	4610      	mov	r0, r2
 801dba8:	f7fd fd7c 	bl	801b6a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	3316      	adds	r3, #22
 801dbb0:	6939      	ldr	r1, [r7, #16]
 801dbb2:	4618      	mov	r0, r3
 801dbb4:	f7fd fd76 	bl	801b6a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	3312      	adds	r3, #18
 801dbbc:	2100      	movs	r1, #0
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	f7fd fd55 	bl	801b66e <st_word>
					fs->wflag = 1;
 801dbc4:	68bb      	ldr	r3, [r7, #8]
 801dbc6:	2201      	movs	r2, #1
 801dbc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dbca:	68bb      	ldr	r3, [r7, #8]
 801dbcc:	4618      	mov	r0, r3
 801dbce:	f7fe f823 	bl	801bc18 <sync_fs>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	7d1b      	ldrb	r3, [r3, #20]
 801dbda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dbde:	b2da      	uxtb	r2, r3
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dbe4:	68bb      	ldr	r3, [r7, #8]
 801dbe6:	7dfa      	ldrb	r2, [r7, #23]
 801dbe8:	4611      	mov	r1, r2
 801dbea:	4618      	mov	r0, r3
 801dbec:	f7fd fe1a 	bl	801b824 <unlock_fs>
 801dbf0:	7dfb      	ldrb	r3, [r7, #23]
}
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	3718      	adds	r7, #24
 801dbf6:	46bd      	mov	sp, r7
 801dbf8:	bd80      	pop	{r7, pc}

0801dbfa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dbfa:	b580      	push	{r7, lr}
 801dbfc:	b084      	sub	sp, #16
 801dbfe:	af00      	add	r7, sp, #0
 801dc00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dc02:	6878      	ldr	r0, [r7, #4]
 801dc04:	f7ff ff70 	bl	801dae8 <f_sync>
 801dc08:	4603      	mov	r3, r0
 801dc0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dc0c:	7bfb      	ldrb	r3, [r7, #15]
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d11d      	bne.n	801dc4e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	f107 0208 	add.w	r2, r7, #8
 801dc18:	4611      	mov	r1, r2
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	f7ff fb22 	bl	801d264 <validate>
 801dc20:	4603      	mov	r3, r0
 801dc22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dc24:	7bfb      	ldrb	r3, [r7, #15]
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d111      	bne.n	801dc4e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	691b      	ldr	r3, [r3, #16]
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f7fd ff20 	bl	801ba74 <dec_lock>
 801dc34:	4603      	mov	r3, r0
 801dc36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dc38:	7bfb      	ldrb	r3, [r7, #15]
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d102      	bne.n	801dc44 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	2200      	movs	r2, #0
 801dc42:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801dc44:	68bb      	ldr	r3, [r7, #8]
 801dc46:	2100      	movs	r1, #0
 801dc48:	4618      	mov	r0, r3
 801dc4a:	f7fd fdeb 	bl	801b824 <unlock_fs>
#endif
		}
	}
	return res;
 801dc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc50:	4618      	mov	r0, r3
 801dc52:	3710      	adds	r7, #16
 801dc54:	46bd      	mov	sp, r7
 801dc56:	bd80      	pop	{r7, pc}

0801dc58 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801dc58:	b580      	push	{r7, lr}
 801dc5a:	b090      	sub	sp, #64	; 0x40
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
 801dc60:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801dc62:	f107 010c 	add.w	r1, r7, #12
 801dc66:	1d3b      	adds	r3, r7, #4
 801dc68:	2200      	movs	r2, #0
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	f7ff f872 	bl	801cd54 <find_volume>
 801dc70:	4603      	mov	r3, r0
 801dc72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801dc76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d11f      	bne.n	801dcbe <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801dc7e:	687a      	ldr	r2, [r7, #4]
 801dc80:	f107 030c 	add.w	r3, r7, #12
 801dc84:	4611      	mov	r1, r2
 801dc86:	4618      	mov	r0, r3
 801dc88:	f7fe ff54 	bl	801cb34 <follow_path>
 801dc8c:	4603      	mov	r3, r0
 801dc8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801dc92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d111      	bne.n	801dcbe <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801dc9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801dc9e:	b25b      	sxtb	r3, r3
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	da03      	bge.n	801dcac <f_stat+0x54>
				res = FR_INVALID_NAME;
 801dca4:	2306      	movs	r3, #6
 801dca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801dcaa:	e008      	b.n	801dcbe <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801dcac:	683b      	ldr	r3, [r7, #0]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d005      	beq.n	801dcbe <f_stat+0x66>
 801dcb2:	f107 030c 	add.w	r3, r7, #12
 801dcb6:	6839      	ldr	r1, [r7, #0]
 801dcb8:	4618      	mov	r0, r3
 801dcba:	f7fe fe48 	bl	801c94e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801dcc4:	4611      	mov	r1, r2
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	f7fd fdac 	bl	801b824 <unlock_fs>
 801dccc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	3740      	adds	r7, #64	; 0x40
 801dcd4:	46bd      	mov	sp, r7
 801dcd6:	bd80      	pop	{r7, pc}

0801dcd8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dcd8:	b580      	push	{r7, lr}
 801dcda:	b09e      	sub	sp, #120	; 0x78
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dce0:	2300      	movs	r3, #0
 801dce2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dce4:	f107 010c 	add.w	r1, r7, #12
 801dce8:	1d3b      	adds	r3, r7, #4
 801dcea:	2202      	movs	r2, #2
 801dcec:	4618      	mov	r0, r3
 801dcee:	f7ff f831 	bl	801cd54 <find_volume>
 801dcf2:	4603      	mov	r3, r0
 801dcf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801dcf8:	68fb      	ldr	r3, [r7, #12]
 801dcfa:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801dcfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	f040 808e 	bne.w	801de22 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801dd06:	687a      	ldr	r2, [r7, #4]
 801dd08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd0c:	4611      	mov	r1, r2
 801dd0e:	4618      	mov	r0, r3
 801dd10:	f7fe ff10 	bl	801cb34 <follow_path>
 801dd14:	4603      	mov	r3, r0
 801dd16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801dd1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d108      	bne.n	801dd34 <f_unlink+0x5c>
 801dd22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dd26:	2102      	movs	r1, #2
 801dd28:	4618      	mov	r0, r3
 801dd2a:	f7fd fd97 	bl	801b85c <chk_lock>
 801dd2e:	4603      	mov	r3, r0
 801dd30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801dd34:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d172      	bne.n	801de22 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801dd3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801dd40:	b25b      	sxtb	r3, r3
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	da03      	bge.n	801dd4e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dd46:	2306      	movs	r3, #6
 801dd48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801dd4c:	e008      	b.n	801dd60 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801dd4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801dd52:	f003 0301 	and.w	r3, r3, #1
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d002      	beq.n	801dd60 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801dd5a:	2307      	movs	r3, #7
 801dd5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801dd60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d134      	bne.n	801ddd2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dd6c:	4611      	mov	r1, r2
 801dd6e:	4618      	mov	r0, r3
 801dd70:	f7fe fcac 	bl	801c6cc <ld_clust>
 801dd74:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801dd76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801dd7a:	f003 0310 	and.w	r3, r3, #16
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d027      	beq.n	801ddd2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801dd86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dd88:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801dd8a:	f107 0310 	add.w	r3, r7, #16
 801dd8e:	2100      	movs	r1, #0
 801dd90:	4618      	mov	r0, r3
 801dd92:	f7fe faf5 	bl	801c380 <dir_sdi>
 801dd96:	4603      	mov	r3, r0
 801dd98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801dd9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d116      	bne.n	801ddd2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801dda4:	f107 0310 	add.w	r3, r7, #16
 801dda8:	2100      	movs	r1, #0
 801ddaa:	4618      	mov	r0, r3
 801ddac:	f7fe fccd 	bl	801c74a <dir_read>
 801ddb0:	4603      	mov	r3, r0
 801ddb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801ddb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d102      	bne.n	801ddc4 <f_unlink+0xec>
 801ddbe:	2307      	movs	r3, #7
 801ddc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801ddc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801ddc8:	2b04      	cmp	r3, #4
 801ddca:	d102      	bne.n	801ddd2 <f_unlink+0xfa>
 801ddcc:	2300      	movs	r3, #0
 801ddce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801ddd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d123      	bne.n	801de22 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801ddda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7fe fd97 	bl	801c912 <dir_remove>
 801dde4:	4603      	mov	r3, r0
 801dde6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801ddea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d10c      	bne.n	801de0c <f_unlink+0x134>
 801ddf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d009      	beq.n	801de0c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801ddf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801de00:	4618      	mov	r0, r3
 801de02:	f7fe f988 	bl	801c116 <remove_chain>
 801de06:	4603      	mov	r3, r0
 801de08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801de0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801de10:	2b00      	cmp	r3, #0
 801de12:	d106      	bne.n	801de22 <f_unlink+0x14a>
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	4618      	mov	r0, r3
 801de18:	f7fd fefe 	bl	801bc18 <sync_fs>
 801de1c:	4603      	mov	r3, r0
 801de1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 801de28:	4611      	mov	r1, r2
 801de2a:	4618      	mov	r0, r3
 801de2c:	f7fd fcfa 	bl	801b824 <unlock_fs>
 801de30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801de34:	4618      	mov	r0, r3
 801de36:	3778      	adds	r7, #120	; 0x78
 801de38:	46bd      	mov	sp, r7
 801de3a:	bd80      	pop	{r7, pc}

0801de3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801de3c:	b480      	push	{r7}
 801de3e:	b087      	sub	sp, #28
 801de40:	af00      	add	r7, sp, #0
 801de42:	60f8      	str	r0, [r7, #12]
 801de44:	60b9      	str	r1, [r7, #8]
 801de46:	4613      	mov	r3, r2
 801de48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801de4a:	2301      	movs	r3, #1
 801de4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801de4e:	2300      	movs	r3, #0
 801de50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801de52:	4b1f      	ldr	r3, [pc, #124]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de54:	7a5b      	ldrb	r3, [r3, #9]
 801de56:	b2db      	uxtb	r3, r3
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d131      	bne.n	801dec0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801de5c:	4b1c      	ldr	r3, [pc, #112]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de5e:	7a5b      	ldrb	r3, [r3, #9]
 801de60:	b2db      	uxtb	r3, r3
 801de62:	461a      	mov	r2, r3
 801de64:	4b1a      	ldr	r3, [pc, #104]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de66:	2100      	movs	r1, #0
 801de68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801de6a:	4b19      	ldr	r3, [pc, #100]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de6c:	7a5b      	ldrb	r3, [r3, #9]
 801de6e:	b2db      	uxtb	r3, r3
 801de70:	4a17      	ldr	r2, [pc, #92]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de72:	009b      	lsls	r3, r3, #2
 801de74:	4413      	add	r3, r2
 801de76:	68fa      	ldr	r2, [r7, #12]
 801de78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801de7a:	4b15      	ldr	r3, [pc, #84]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de7c:	7a5b      	ldrb	r3, [r3, #9]
 801de7e:	b2db      	uxtb	r3, r3
 801de80:	461a      	mov	r2, r3
 801de82:	4b13      	ldr	r3, [pc, #76]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de84:	4413      	add	r3, r2
 801de86:	79fa      	ldrb	r2, [r7, #7]
 801de88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801de8a:	4b11      	ldr	r3, [pc, #68]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de8c:	7a5b      	ldrb	r3, [r3, #9]
 801de8e:	b2db      	uxtb	r3, r3
 801de90:	1c5a      	adds	r2, r3, #1
 801de92:	b2d1      	uxtb	r1, r2
 801de94:	4a0e      	ldr	r2, [pc, #56]	; (801ded0 <FATFS_LinkDriverEx+0x94>)
 801de96:	7251      	strb	r1, [r2, #9]
 801de98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801de9a:	7dbb      	ldrb	r3, [r7, #22]
 801de9c:	3330      	adds	r3, #48	; 0x30
 801de9e:	b2da      	uxtb	r2, r3
 801dea0:	68bb      	ldr	r3, [r7, #8]
 801dea2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801dea4:	68bb      	ldr	r3, [r7, #8]
 801dea6:	3301      	adds	r3, #1
 801dea8:	223a      	movs	r2, #58	; 0x3a
 801deaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801deac:	68bb      	ldr	r3, [r7, #8]
 801deae:	3302      	adds	r3, #2
 801deb0:	222f      	movs	r2, #47	; 0x2f
 801deb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801deb4:	68bb      	ldr	r3, [r7, #8]
 801deb6:	3303      	adds	r3, #3
 801deb8:	2200      	movs	r2, #0
 801deba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801debc:	2300      	movs	r3, #0
 801debe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dec0:	7dfb      	ldrb	r3, [r7, #23]
}
 801dec2:	4618      	mov	r0, r3
 801dec4:	371c      	adds	r7, #28
 801dec6:	46bd      	mov	sp, r7
 801dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801decc:	4770      	bx	lr
 801dece:	bf00      	nop
 801ded0:	2400401c 	.word	0x2400401c

0801ded4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801ded4:	b580      	push	{r7, lr}
 801ded6:	b082      	sub	sp, #8
 801ded8:	af00      	add	r7, sp, #0
 801deda:	6078      	str	r0, [r7, #4]
 801dedc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dede:	2200      	movs	r2, #0
 801dee0:	6839      	ldr	r1, [r7, #0]
 801dee2:	6878      	ldr	r0, [r7, #4]
 801dee4:	f7ff ffaa 	bl	801de3c <FATFS_LinkDriverEx>
 801dee8:	4603      	mov	r3, r0
}
 801deea:	4618      	mov	r0, r3
 801deec:	3708      	adds	r7, #8
 801deee:	46bd      	mov	sp, r7
 801def0:	bd80      	pop	{r7, pc}

0801def2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801def2:	b580      	push	{r7, lr}
 801def4:	b084      	sub	sp, #16
 801def6:	af00      	add	r7, sp, #0
 801def8:	4603      	mov	r3, r0
 801defa:	6039      	str	r1, [r7, #0]
 801defc:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801defe:	2200      	movs	r2, #0
 801df00:	2101      	movs	r1, #1
 801df02:	2001      	movs	r0, #1
 801df04:	f000 fac1 	bl	801e48a <osSemaphoreNew>
 801df08:	4602      	mov	r2, r0
 801df0a:	683b      	ldr	r3, [r7, #0]
 801df0c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801df0e:	683b      	ldr	r3, [r7, #0]
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	2b00      	cmp	r3, #0
 801df14:	bf14      	ite	ne
 801df16:	2301      	movne	r3, #1
 801df18:	2300      	moveq	r3, #0
 801df1a:	b2db      	uxtb	r3, r3
 801df1c:	60fb      	str	r3, [r7, #12]

    return ret;
 801df1e:	68fb      	ldr	r3, [r7, #12]
}
 801df20:	4618      	mov	r0, r3
 801df22:	3710      	adds	r7, #16
 801df24:	46bd      	mov	sp, r7
 801df26:	bd80      	pop	{r7, pc}

0801df28 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	b082      	sub	sp, #8
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801df30:	6878      	ldr	r0, [r7, #4]
 801df32:	f000 fbc9 	bl	801e6c8 <osSemaphoreDelete>
#endif
    return 1;
 801df36:	2301      	movs	r3, #1
}
 801df38:	4618      	mov	r0, r3
 801df3a:	3708      	adds	r7, #8
 801df3c:	46bd      	mov	sp, r7
 801df3e:	bd80      	pop	{r7, pc}

0801df40 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801df40:	b580      	push	{r7, lr}
 801df42:	b084      	sub	sp, #16
 801df44:	af00      	add	r7, sp, #0
 801df46:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801df48:	2300      	movs	r3, #0
 801df4a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801df4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801df50:	6878      	ldr	r0, [r7, #4]
 801df52:	f000 fb23 	bl	801e59c <osSemaphoreAcquire>
 801df56:	4603      	mov	r3, r0
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d101      	bne.n	801df60 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801df5c:	2301      	movs	r3, #1
 801df5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801df60:	68fb      	ldr	r3, [r7, #12]
}
 801df62:	4618      	mov	r0, r3
 801df64:	3710      	adds	r7, #16
 801df66:	46bd      	mov	sp, r7
 801df68:	bd80      	pop	{r7, pc}

0801df6a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801df6a:	b580      	push	{r7, lr}
 801df6c:	b082      	sub	sp, #8
 801df6e:	af00      	add	r7, sp, #0
 801df70:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801df72:	6878      	ldr	r0, [r7, #4]
 801df74:	f000 fb64 	bl	801e640 <osSemaphoreRelease>
#endif
}
 801df78:	bf00      	nop
 801df7a:	3708      	adds	r7, #8
 801df7c:	46bd      	mov	sp, r7
 801df7e:	bd80      	pop	{r7, pc}

0801df80 <__NVIC_SetPriority>:
{
 801df80:	b480      	push	{r7}
 801df82:	b083      	sub	sp, #12
 801df84:	af00      	add	r7, sp, #0
 801df86:	4603      	mov	r3, r0
 801df88:	6039      	str	r1, [r7, #0]
 801df8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801df8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801df90:	2b00      	cmp	r3, #0
 801df92:	db0a      	blt.n	801dfaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	b2da      	uxtb	r2, r3
 801df98:	490c      	ldr	r1, [pc, #48]	; (801dfcc <__NVIC_SetPriority+0x4c>)
 801df9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801df9e:	0112      	lsls	r2, r2, #4
 801dfa0:	b2d2      	uxtb	r2, r2
 801dfa2:	440b      	add	r3, r1
 801dfa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801dfa8:	e00a      	b.n	801dfc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dfaa:	683b      	ldr	r3, [r7, #0]
 801dfac:	b2da      	uxtb	r2, r3
 801dfae:	4908      	ldr	r1, [pc, #32]	; (801dfd0 <__NVIC_SetPriority+0x50>)
 801dfb0:	88fb      	ldrh	r3, [r7, #6]
 801dfb2:	f003 030f 	and.w	r3, r3, #15
 801dfb6:	3b04      	subs	r3, #4
 801dfb8:	0112      	lsls	r2, r2, #4
 801dfba:	b2d2      	uxtb	r2, r2
 801dfbc:	440b      	add	r3, r1
 801dfbe:	761a      	strb	r2, [r3, #24]
}
 801dfc0:	bf00      	nop
 801dfc2:	370c      	adds	r7, #12
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfca:	4770      	bx	lr
 801dfcc:	e000e100 	.word	0xe000e100
 801dfd0:	e000ed00 	.word	0xe000ed00

0801dfd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801dfd8:	4b05      	ldr	r3, [pc, #20]	; (801dff0 <SysTick_Handler+0x1c>)
 801dfda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801dfdc:	f002 fc1a 	bl	8020814 <xTaskGetSchedulerState>
 801dfe0:	4603      	mov	r3, r0
 801dfe2:	2b01      	cmp	r3, #1
 801dfe4:	d001      	beq.n	801dfea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801dfe6:	f003 fbe7 	bl	80217b8 <xPortSysTickHandler>
  }
}
 801dfea:	bf00      	nop
 801dfec:	bd80      	pop	{r7, pc}
 801dfee:	bf00      	nop
 801dff0:	e000e010 	.word	0xe000e010

0801dff4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801dff4:	b580      	push	{r7, lr}
 801dff6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801dff8:	2100      	movs	r1, #0
 801dffa:	f06f 0004 	mvn.w	r0, #4
 801dffe:	f7ff ffbf 	bl	801df80 <__NVIC_SetPriority>
#endif
}
 801e002:	bf00      	nop
 801e004:	bd80      	pop	{r7, pc}
	...

0801e008 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801e008:	b480      	push	{r7}
 801e00a:	b083      	sub	sp, #12
 801e00c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e00e:	f3ef 8305 	mrs	r3, IPSR
 801e012:	603b      	str	r3, [r7, #0]
  return(result);
 801e014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e016:	2b00      	cmp	r3, #0
 801e018:	d003      	beq.n	801e022 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801e01a:	f06f 0305 	mvn.w	r3, #5
 801e01e:	607b      	str	r3, [r7, #4]
 801e020:	e00c      	b.n	801e03c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801e022:	4b0a      	ldr	r3, [pc, #40]	; (801e04c <osKernelInitialize+0x44>)
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d105      	bne.n	801e036 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801e02a:	4b08      	ldr	r3, [pc, #32]	; (801e04c <osKernelInitialize+0x44>)
 801e02c:	2201      	movs	r2, #1
 801e02e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801e030:	2300      	movs	r3, #0
 801e032:	607b      	str	r3, [r7, #4]
 801e034:	e002      	b.n	801e03c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801e036:	f04f 33ff 	mov.w	r3, #4294967295
 801e03a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801e03c:	687b      	ldr	r3, [r7, #4]
}
 801e03e:	4618      	mov	r0, r3
 801e040:	370c      	adds	r7, #12
 801e042:	46bd      	mov	sp, r7
 801e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e048:	4770      	bx	lr
 801e04a:	bf00      	nop
 801e04c:	24004028 	.word	0x24004028

0801e050 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801e050:	b580      	push	{r7, lr}
 801e052:	b082      	sub	sp, #8
 801e054:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801e056:	f002 fbdd 	bl	8020814 <xTaskGetSchedulerState>
 801e05a:	4603      	mov	r3, r0
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d004      	beq.n	801e06a <osKernelGetState+0x1a>
 801e060:	2b02      	cmp	r3, #2
 801e062:	d105      	bne.n	801e070 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 801e064:	2302      	movs	r3, #2
 801e066:	607b      	str	r3, [r7, #4]
      break;
 801e068:	e00c      	b.n	801e084 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801e06a:	2303      	movs	r3, #3
 801e06c:	607b      	str	r3, [r7, #4]
      break;
 801e06e:	e009      	b.n	801e084 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801e070:	4b07      	ldr	r3, [pc, #28]	; (801e090 <osKernelGetState+0x40>)
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	2b01      	cmp	r3, #1
 801e076:	d102      	bne.n	801e07e <osKernelGetState+0x2e>
        state = osKernelReady;
 801e078:	2301      	movs	r3, #1
 801e07a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801e07c:	e001      	b.n	801e082 <osKernelGetState+0x32>
        state = osKernelInactive;
 801e07e:	2300      	movs	r3, #0
 801e080:	607b      	str	r3, [r7, #4]
      break;
 801e082:	bf00      	nop
  }

  return (state);
 801e084:	687b      	ldr	r3, [r7, #4]
}
 801e086:	4618      	mov	r0, r3
 801e088:	3708      	adds	r7, #8
 801e08a:	46bd      	mov	sp, r7
 801e08c:	bd80      	pop	{r7, pc}
 801e08e:	bf00      	nop
 801e090:	24004028 	.word	0x24004028

0801e094 <osKernelStart>:

osStatus_t osKernelStart (void) {
 801e094:	b580      	push	{r7, lr}
 801e096:	b082      	sub	sp, #8
 801e098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e09a:	f3ef 8305 	mrs	r3, IPSR
 801e09e:	603b      	str	r3, [r7, #0]
  return(result);
 801e0a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d003      	beq.n	801e0ae <osKernelStart+0x1a>
    stat = osErrorISR;
 801e0a6:	f06f 0305 	mvn.w	r3, #5
 801e0aa:	607b      	str	r3, [r7, #4]
 801e0ac:	e010      	b.n	801e0d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801e0ae:	4b0b      	ldr	r3, [pc, #44]	; (801e0dc <osKernelStart+0x48>)
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	2b01      	cmp	r3, #1
 801e0b4:	d109      	bne.n	801e0ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801e0b6:	f7ff ff9d 	bl	801dff4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801e0ba:	4b08      	ldr	r3, [pc, #32]	; (801e0dc <osKernelStart+0x48>)
 801e0bc:	2202      	movs	r2, #2
 801e0be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801e0c0:	f001 ff3a 	bl	801ff38 <vTaskStartScheduler>
      stat = osOK;
 801e0c4:	2300      	movs	r3, #0
 801e0c6:	607b      	str	r3, [r7, #4]
 801e0c8:	e002      	b.n	801e0d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801e0ca:	f04f 33ff 	mov.w	r3, #4294967295
 801e0ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801e0d0:	687b      	ldr	r3, [r7, #4]
}
 801e0d2:	4618      	mov	r0, r3
 801e0d4:	3708      	adds	r7, #8
 801e0d6:	46bd      	mov	sp, r7
 801e0d8:	bd80      	pop	{r7, pc}
 801e0da:	bf00      	nop
 801e0dc:	24004028 	.word	0x24004028

0801e0e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801e0e0:	b580      	push	{r7, lr}
 801e0e2:	b082      	sub	sp, #8
 801e0e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e0e6:	f3ef 8305 	mrs	r3, IPSR
 801e0ea:	603b      	str	r3, [r7, #0]
  return(result);
 801e0ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d003      	beq.n	801e0fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801e0f2:	f002 f84d 	bl	8020190 <xTaskGetTickCountFromISR>
 801e0f6:	6078      	str	r0, [r7, #4]
 801e0f8:	e002      	b.n	801e100 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801e0fa:	f002 f839 	bl	8020170 <xTaskGetTickCount>
 801e0fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 801e100:	687b      	ldr	r3, [r7, #4]
}
 801e102:	4618      	mov	r0, r3
 801e104:	3708      	adds	r7, #8
 801e106:	46bd      	mov	sp, r7
 801e108:	bd80      	pop	{r7, pc}

0801e10a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801e10a:	b580      	push	{r7, lr}
 801e10c:	b08e      	sub	sp, #56	; 0x38
 801e10e:	af04      	add	r7, sp, #16
 801e110:	60f8      	str	r0, [r7, #12]
 801e112:	60b9      	str	r1, [r7, #8]
 801e114:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801e116:	2300      	movs	r3, #0
 801e118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e11a:	f3ef 8305 	mrs	r3, IPSR
 801e11e:	617b      	str	r3, [r7, #20]
  return(result);
 801e120:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801e122:	2b00      	cmp	r3, #0
 801e124:	d17f      	bne.n	801e226 <osThreadNew+0x11c>
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d07c      	beq.n	801e226 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 801e12c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e130:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801e132:	2318      	movs	r3, #24
 801e134:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801e136:	2300      	movs	r3, #0
 801e138:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801e13a:	f04f 33ff 	mov.w	r3, #4294967295
 801e13e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	2b00      	cmp	r3, #0
 801e144:	d045      	beq.n	801e1d2 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d002      	beq.n	801e154 <osThreadNew+0x4a>
        name = attr->name;
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	699b      	ldr	r3, [r3, #24]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d002      	beq.n	801e162 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	699b      	ldr	r3, [r3, #24]
 801e160:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801e162:	69fb      	ldr	r3, [r7, #28]
 801e164:	2b00      	cmp	r3, #0
 801e166:	d008      	beq.n	801e17a <osThreadNew+0x70>
 801e168:	69fb      	ldr	r3, [r7, #28]
 801e16a:	2b38      	cmp	r3, #56	; 0x38
 801e16c:	d805      	bhi.n	801e17a <osThreadNew+0x70>
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	685b      	ldr	r3, [r3, #4]
 801e172:	f003 0301 	and.w	r3, r3, #1
 801e176:	2b00      	cmp	r3, #0
 801e178:	d001      	beq.n	801e17e <osThreadNew+0x74>
        return (NULL);
 801e17a:	2300      	movs	r3, #0
 801e17c:	e054      	b.n	801e228 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	695b      	ldr	r3, [r3, #20]
 801e182:	2b00      	cmp	r3, #0
 801e184:	d003      	beq.n	801e18e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	695b      	ldr	r3, [r3, #20]
 801e18a:	089b      	lsrs	r3, r3, #2
 801e18c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	689b      	ldr	r3, [r3, #8]
 801e192:	2b00      	cmp	r3, #0
 801e194:	d00e      	beq.n	801e1b4 <osThreadNew+0xaa>
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	68db      	ldr	r3, [r3, #12]
 801e19a:	2bbb      	cmp	r3, #187	; 0xbb
 801e19c:	d90a      	bls.n	801e1b4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d006      	beq.n	801e1b4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	695b      	ldr	r3, [r3, #20]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d002      	beq.n	801e1b4 <osThreadNew+0xaa>
        mem = 1;
 801e1ae:	2301      	movs	r3, #1
 801e1b0:	61bb      	str	r3, [r7, #24]
 801e1b2:	e010      	b.n	801e1d6 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	689b      	ldr	r3, [r3, #8]
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d10c      	bne.n	801e1d6 <osThreadNew+0xcc>
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	68db      	ldr	r3, [r3, #12]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d108      	bne.n	801e1d6 <osThreadNew+0xcc>
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	691b      	ldr	r3, [r3, #16]
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d104      	bne.n	801e1d6 <osThreadNew+0xcc>
          mem = 0;
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	61bb      	str	r3, [r7, #24]
 801e1d0:	e001      	b.n	801e1d6 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801e1d6:	69bb      	ldr	r3, [r7, #24]
 801e1d8:	2b01      	cmp	r3, #1
 801e1da:	d110      	bne.n	801e1fe <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801e1e0:	687a      	ldr	r2, [r7, #4]
 801e1e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801e1e4:	9202      	str	r2, [sp, #8]
 801e1e6:	9301      	str	r3, [sp, #4]
 801e1e8:	69fb      	ldr	r3, [r7, #28]
 801e1ea:	9300      	str	r3, [sp, #0]
 801e1ec:	68bb      	ldr	r3, [r7, #8]
 801e1ee:	6a3a      	ldr	r2, [r7, #32]
 801e1f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e1f2:	68f8      	ldr	r0, [r7, #12]
 801e1f4:	f001 fcb4 	bl	801fb60 <xTaskCreateStatic>
 801e1f8:	4603      	mov	r3, r0
 801e1fa:	613b      	str	r3, [r7, #16]
 801e1fc:	e013      	b.n	801e226 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 801e1fe:	69bb      	ldr	r3, [r7, #24]
 801e200:	2b00      	cmp	r3, #0
 801e202:	d110      	bne.n	801e226 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801e204:	6a3b      	ldr	r3, [r7, #32]
 801e206:	b29a      	uxth	r2, r3
 801e208:	f107 0310 	add.w	r3, r7, #16
 801e20c:	9301      	str	r3, [sp, #4]
 801e20e:	69fb      	ldr	r3, [r7, #28]
 801e210:	9300      	str	r3, [sp, #0]
 801e212:	68bb      	ldr	r3, [r7, #8]
 801e214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e216:	68f8      	ldr	r0, [r7, #12]
 801e218:	f001 fcff 	bl	801fc1a <xTaskCreate>
 801e21c:	4603      	mov	r3, r0
 801e21e:	2b01      	cmp	r3, #1
 801e220:	d001      	beq.n	801e226 <osThreadNew+0x11c>
            hTask = NULL;
 801e222:	2300      	movs	r3, #0
 801e224:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801e226:	693b      	ldr	r3, [r7, #16]
}
 801e228:	4618      	mov	r0, r3
 801e22a:	3728      	adds	r7, #40	; 0x28
 801e22c:	46bd      	mov	sp, r7
 801e22e:	bd80      	pop	{r7, pc}

0801e230 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801e230:	b580      	push	{r7, lr}
 801e232:	b084      	sub	sp, #16
 801e234:	af00      	add	r7, sp, #0
 801e236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e238:	f3ef 8305 	mrs	r3, IPSR
 801e23c:	60bb      	str	r3, [r7, #8]
  return(result);
 801e23e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e240:	2b00      	cmp	r3, #0
 801e242:	d003      	beq.n	801e24c <osDelay+0x1c>
    stat = osErrorISR;
 801e244:	f06f 0305 	mvn.w	r3, #5
 801e248:	60fb      	str	r3, [r7, #12]
 801e24a:	e007      	b.n	801e25c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801e24c:	2300      	movs	r3, #0
 801e24e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	2b00      	cmp	r3, #0
 801e254:	d002      	beq.n	801e25c <osDelay+0x2c>
      vTaskDelay(ticks);
 801e256:	6878      	ldr	r0, [r7, #4]
 801e258:	f001 fe3a 	bl	801fed0 <vTaskDelay>
    }
  }

  return (stat);
 801e25c:	68fb      	ldr	r3, [r7, #12]
}
 801e25e:	4618      	mov	r0, r3
 801e260:	3710      	adds	r7, #16
 801e262:	46bd      	mov	sp, r7
 801e264:	bd80      	pop	{r7, pc}

0801e266 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 801e266:	b580      	push	{r7, lr}
 801e268:	b084      	sub	sp, #16
 801e26a:	af00      	add	r7, sp, #0
 801e26c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801e26e:	6878      	ldr	r0, [r7, #4]
 801e270:	f003 f8bf 	bl	80213f2 <pvTimerGetTimerID>
 801e274:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	2b00      	cmp	r3, #0
 801e27a:	d005      	beq.n	801e288 <TimerCallback+0x22>
    callb->func (callb->arg);
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	68fa      	ldr	r2, [r7, #12]
 801e282:	6852      	ldr	r2, [r2, #4]
 801e284:	4610      	mov	r0, r2
 801e286:	4798      	blx	r3
  }
}
 801e288:	bf00      	nop
 801e28a:	3710      	adds	r7, #16
 801e28c:	46bd      	mov	sp, r7
 801e28e:	bd80      	pop	{r7, pc}

0801e290 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 801e290:	b580      	push	{r7, lr}
 801e292:	b08c      	sub	sp, #48	; 0x30
 801e294:	af02      	add	r7, sp, #8
 801e296:	60f8      	str	r0, [r7, #12]
 801e298:	607a      	str	r2, [r7, #4]
 801e29a:	603b      	str	r3, [r7, #0]
 801e29c:	460b      	mov	r3, r1
 801e29e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 801e2a0:	2300      	movs	r3, #0
 801e2a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e2a4:	f3ef 8305 	mrs	r3, IPSR
 801e2a8:	613b      	str	r3, [r7, #16]
  return(result);
 801e2aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d163      	bne.n	801e378 <osTimerNew+0xe8>
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d060      	beq.n	801e378 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 801e2b6:	2008      	movs	r0, #8
 801e2b8:	f003 fb0e 	bl	80218d8 <pvPortMalloc>
 801e2bc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 801e2be:	697b      	ldr	r3, [r7, #20]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d059      	beq.n	801e378 <osTimerNew+0xe8>
      callb->func = func;
 801e2c4:	697b      	ldr	r3, [r7, #20]
 801e2c6:	68fa      	ldr	r2, [r7, #12]
 801e2c8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 801e2ca:	697b      	ldr	r3, [r7, #20]
 801e2cc:	687a      	ldr	r2, [r7, #4]
 801e2ce:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 801e2d0:	7afb      	ldrb	r3, [r7, #11]
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d102      	bne.n	801e2dc <osTimerNew+0x4c>
        reload = pdFALSE;
 801e2d6:	2300      	movs	r3, #0
 801e2d8:	61fb      	str	r3, [r7, #28]
 801e2da:	e001      	b.n	801e2e0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 801e2dc:	2301      	movs	r3, #1
 801e2de:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 801e2e0:	f04f 33ff 	mov.w	r3, #4294967295
 801e2e4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 801e2ea:	683b      	ldr	r3, [r7, #0]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d01c      	beq.n	801e32a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 801e2f0:	683b      	ldr	r3, [r7, #0]
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d002      	beq.n	801e2fe <osTimerNew+0x6e>
          name = attr->name;
 801e2f8:	683b      	ldr	r3, [r7, #0]
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 801e2fe:	683b      	ldr	r3, [r7, #0]
 801e300:	689b      	ldr	r3, [r3, #8]
 801e302:	2b00      	cmp	r3, #0
 801e304:	d006      	beq.n	801e314 <osTimerNew+0x84>
 801e306:	683b      	ldr	r3, [r7, #0]
 801e308:	68db      	ldr	r3, [r3, #12]
 801e30a:	2b2b      	cmp	r3, #43	; 0x2b
 801e30c:	d902      	bls.n	801e314 <osTimerNew+0x84>
          mem = 1;
 801e30e:	2301      	movs	r3, #1
 801e310:	61bb      	str	r3, [r7, #24]
 801e312:	e00c      	b.n	801e32e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801e314:	683b      	ldr	r3, [r7, #0]
 801e316:	689b      	ldr	r3, [r3, #8]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d108      	bne.n	801e32e <osTimerNew+0x9e>
 801e31c:	683b      	ldr	r3, [r7, #0]
 801e31e:	68db      	ldr	r3, [r3, #12]
 801e320:	2b00      	cmp	r3, #0
 801e322:	d104      	bne.n	801e32e <osTimerNew+0x9e>
            mem = 0;
 801e324:	2300      	movs	r3, #0
 801e326:	61bb      	str	r3, [r7, #24]
 801e328:	e001      	b.n	801e32e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 801e32a:	2300      	movs	r3, #0
 801e32c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801e32e:	69bb      	ldr	r3, [r7, #24]
 801e330:	2b01      	cmp	r3, #1
 801e332:	d10c      	bne.n	801e34e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 801e334:	683b      	ldr	r3, [r7, #0]
 801e336:	689b      	ldr	r3, [r3, #8]
 801e338:	9301      	str	r3, [sp, #4]
 801e33a:	4b12      	ldr	r3, [pc, #72]	; (801e384 <osTimerNew+0xf4>)
 801e33c:	9300      	str	r3, [sp, #0]
 801e33e:	697b      	ldr	r3, [r7, #20]
 801e340:	69fa      	ldr	r2, [r7, #28]
 801e342:	2101      	movs	r1, #1
 801e344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e346:	f002 fcac 	bl	8020ca2 <xTimerCreateStatic>
 801e34a:	6238      	str	r0, [r7, #32]
 801e34c:	e00b      	b.n	801e366 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 801e34e:	69bb      	ldr	r3, [r7, #24]
 801e350:	2b00      	cmp	r3, #0
 801e352:	d108      	bne.n	801e366 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 801e354:	4b0b      	ldr	r3, [pc, #44]	; (801e384 <osTimerNew+0xf4>)
 801e356:	9300      	str	r3, [sp, #0]
 801e358:	697b      	ldr	r3, [r7, #20]
 801e35a:	69fa      	ldr	r2, [r7, #28]
 801e35c:	2101      	movs	r1, #1
 801e35e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e360:	f002 fc7e 	bl	8020c60 <xTimerCreate>
 801e364:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 801e366:	6a3b      	ldr	r3, [r7, #32]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d105      	bne.n	801e378 <osTimerNew+0xe8>
 801e36c:	697b      	ldr	r3, [r7, #20]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d002      	beq.n	801e378 <osTimerNew+0xe8>
        vPortFree (callb);
 801e372:	6978      	ldr	r0, [r7, #20]
 801e374:	f003 fb7c 	bl	8021a70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801e378:	6a3b      	ldr	r3, [r7, #32]
}
 801e37a:	4618      	mov	r0, r3
 801e37c:	3728      	adds	r7, #40	; 0x28
 801e37e:	46bd      	mov	sp, r7
 801e380:	bd80      	pop	{r7, pc}
 801e382:	bf00      	nop
 801e384:	0801e267 	.word	0x0801e267

0801e388 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 801e388:	b580      	push	{r7, lr}
 801e38a:	b088      	sub	sp, #32
 801e38c:	af02      	add	r7, sp, #8
 801e38e:	6078      	str	r0, [r7, #4]
 801e390:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e396:	f3ef 8305 	mrs	r3, IPSR
 801e39a:	60fb      	str	r3, [r7, #12]
  return(result);
 801e39c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d003      	beq.n	801e3aa <osTimerStart+0x22>
    stat = osErrorISR;
 801e3a2:	f06f 0305 	mvn.w	r3, #5
 801e3a6:	617b      	str	r3, [r7, #20]
 801e3a8:	e017      	b.n	801e3da <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 801e3aa:	693b      	ldr	r3, [r7, #16]
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d103      	bne.n	801e3b8 <osTimerStart+0x30>
    stat = osErrorParameter;
 801e3b0:	f06f 0303 	mvn.w	r3, #3
 801e3b4:	617b      	str	r3, [r7, #20]
 801e3b6:	e010      	b.n	801e3da <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 801e3b8:	2300      	movs	r3, #0
 801e3ba:	9300      	str	r3, [sp, #0]
 801e3bc:	2300      	movs	r3, #0
 801e3be:	683a      	ldr	r2, [r7, #0]
 801e3c0:	2104      	movs	r1, #4
 801e3c2:	6938      	ldr	r0, [r7, #16]
 801e3c4:	f002 fce6 	bl	8020d94 <xTimerGenericCommand>
 801e3c8:	4603      	mov	r3, r0
 801e3ca:	2b01      	cmp	r3, #1
 801e3cc:	d102      	bne.n	801e3d4 <osTimerStart+0x4c>
      stat = osOK;
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	617b      	str	r3, [r7, #20]
 801e3d2:	e002      	b.n	801e3da <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 801e3d4:	f06f 0302 	mvn.w	r3, #2
 801e3d8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801e3da:	697b      	ldr	r3, [r7, #20]
}
 801e3dc:	4618      	mov	r0, r3
 801e3de:	3718      	adds	r7, #24
 801e3e0:	46bd      	mov	sp, r7
 801e3e2:	bd80      	pop	{r7, pc}

0801e3e4 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 801e3e4:	b580      	push	{r7, lr}
 801e3e6:	b088      	sub	sp, #32
 801e3e8:	af02      	add	r7, sp, #8
 801e3ea:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e3f0:	f3ef 8305 	mrs	r3, IPSR
 801e3f4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e3f6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d003      	beq.n	801e404 <osTimerStop+0x20>
    stat = osErrorISR;
 801e3fc:	f06f 0305 	mvn.w	r3, #5
 801e400:	617b      	str	r3, [r7, #20]
 801e402:	e021      	b.n	801e448 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 801e404:	693b      	ldr	r3, [r7, #16]
 801e406:	2b00      	cmp	r3, #0
 801e408:	d103      	bne.n	801e412 <osTimerStop+0x2e>
    stat = osErrorParameter;
 801e40a:	f06f 0303 	mvn.w	r3, #3
 801e40e:	617b      	str	r3, [r7, #20]
 801e410:	e01a      	b.n	801e448 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 801e412:	6938      	ldr	r0, [r7, #16]
 801e414:	f002 ffc4 	bl	80213a0 <xTimerIsTimerActive>
 801e418:	4603      	mov	r3, r0
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d103      	bne.n	801e426 <osTimerStop+0x42>
      stat = osErrorResource;
 801e41e:	f06f 0302 	mvn.w	r3, #2
 801e422:	617b      	str	r3, [r7, #20]
 801e424:	e010      	b.n	801e448 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 801e426:	2300      	movs	r3, #0
 801e428:	9300      	str	r3, [sp, #0]
 801e42a:	2300      	movs	r3, #0
 801e42c:	2200      	movs	r2, #0
 801e42e:	2103      	movs	r1, #3
 801e430:	6938      	ldr	r0, [r7, #16]
 801e432:	f002 fcaf 	bl	8020d94 <xTimerGenericCommand>
 801e436:	4603      	mov	r3, r0
 801e438:	2b01      	cmp	r3, #1
 801e43a:	d102      	bne.n	801e442 <osTimerStop+0x5e>
        stat = osOK;
 801e43c:	2300      	movs	r3, #0
 801e43e:	617b      	str	r3, [r7, #20]
 801e440:	e002      	b.n	801e448 <osTimerStop+0x64>
      } else {
        stat = osError;
 801e442:	f04f 33ff 	mov.w	r3, #4294967295
 801e446:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801e448:	697b      	ldr	r3, [r7, #20]
}
 801e44a:	4618      	mov	r0, r3
 801e44c:	3718      	adds	r7, #24
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd80      	pop	{r7, pc}

0801e452 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 801e452:	b580      	push	{r7, lr}
 801e454:	b086      	sub	sp, #24
 801e456:	af00      	add	r7, sp, #0
 801e458:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e45e:	f3ef 8305 	mrs	r3, IPSR
 801e462:	60fb      	str	r3, [r7, #12]
  return(result);
 801e464:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 801e466:	2b00      	cmp	r3, #0
 801e468:	d102      	bne.n	801e470 <osTimerIsRunning+0x1e>
 801e46a:	693b      	ldr	r3, [r7, #16]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d102      	bne.n	801e476 <osTimerIsRunning+0x24>
    running = 0U;
 801e470:	2300      	movs	r3, #0
 801e472:	617b      	str	r3, [r7, #20]
 801e474:	e004      	b.n	801e480 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 801e476:	6938      	ldr	r0, [r7, #16]
 801e478:	f002 ff92 	bl	80213a0 <xTimerIsTimerActive>
 801e47c:	4603      	mov	r3, r0
 801e47e:	617b      	str	r3, [r7, #20]
  }

  return (running);
 801e480:	697b      	ldr	r3, [r7, #20]
}
 801e482:	4618      	mov	r0, r3
 801e484:	3718      	adds	r7, #24
 801e486:	46bd      	mov	sp, r7
 801e488:	bd80      	pop	{r7, pc}

0801e48a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801e48a:	b580      	push	{r7, lr}
 801e48c:	b08a      	sub	sp, #40	; 0x28
 801e48e:	af02      	add	r7, sp, #8
 801e490:	60f8      	str	r0, [r7, #12]
 801e492:	60b9      	str	r1, [r7, #8]
 801e494:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801e496:	2300      	movs	r3, #0
 801e498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e49a:	f3ef 8305 	mrs	r3, IPSR
 801e49e:	613b      	str	r3, [r7, #16]
  return(result);
 801e4a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d175      	bne.n	801e592 <osSemaphoreNew+0x108>
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d072      	beq.n	801e592 <osSemaphoreNew+0x108>
 801e4ac:	68ba      	ldr	r2, [r7, #8]
 801e4ae:	68fb      	ldr	r3, [r7, #12]
 801e4b0:	429a      	cmp	r2, r3
 801e4b2:	d86e      	bhi.n	801e592 <osSemaphoreNew+0x108>
    mem = -1;
 801e4b4:	f04f 33ff 	mov.w	r3, #4294967295
 801e4b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d015      	beq.n	801e4ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	689b      	ldr	r3, [r3, #8]
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	d006      	beq.n	801e4d6 <osSemaphoreNew+0x4c>
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	68db      	ldr	r3, [r3, #12]
 801e4cc:	2b4f      	cmp	r3, #79	; 0x4f
 801e4ce:	d902      	bls.n	801e4d6 <osSemaphoreNew+0x4c>
        mem = 1;
 801e4d0:	2301      	movs	r3, #1
 801e4d2:	61bb      	str	r3, [r7, #24]
 801e4d4:	e00c      	b.n	801e4f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	689b      	ldr	r3, [r3, #8]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	d108      	bne.n	801e4f0 <osSemaphoreNew+0x66>
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	68db      	ldr	r3, [r3, #12]
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d104      	bne.n	801e4f0 <osSemaphoreNew+0x66>
          mem = 0;
 801e4e6:	2300      	movs	r3, #0
 801e4e8:	61bb      	str	r3, [r7, #24]
 801e4ea:	e001      	b.n	801e4f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801e4ec:	2300      	movs	r3, #0
 801e4ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801e4f0:	69bb      	ldr	r3, [r7, #24]
 801e4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e4f6:	d04c      	beq.n	801e592 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	2b01      	cmp	r3, #1
 801e4fc:	d128      	bne.n	801e550 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801e4fe:	69bb      	ldr	r3, [r7, #24]
 801e500:	2b01      	cmp	r3, #1
 801e502:	d10a      	bne.n	801e51a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	689b      	ldr	r3, [r3, #8]
 801e508:	2203      	movs	r2, #3
 801e50a:	9200      	str	r2, [sp, #0]
 801e50c:	2200      	movs	r2, #0
 801e50e:	2100      	movs	r1, #0
 801e510:	2001      	movs	r0, #1
 801e512:	f000 fb7f 	bl	801ec14 <xQueueGenericCreateStatic>
 801e516:	61f8      	str	r0, [r7, #28]
 801e518:	e005      	b.n	801e526 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801e51a:	2203      	movs	r2, #3
 801e51c:	2100      	movs	r1, #0
 801e51e:	2001      	movs	r0, #1
 801e520:	f000 fbf0 	bl	801ed04 <xQueueGenericCreate>
 801e524:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801e526:	69fb      	ldr	r3, [r7, #28]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d022      	beq.n	801e572 <osSemaphoreNew+0xe8>
 801e52c:	68bb      	ldr	r3, [r7, #8]
 801e52e:	2b00      	cmp	r3, #0
 801e530:	d01f      	beq.n	801e572 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801e532:	2300      	movs	r3, #0
 801e534:	2200      	movs	r2, #0
 801e536:	2100      	movs	r1, #0
 801e538:	69f8      	ldr	r0, [r7, #28]
 801e53a:	f000 fcab 	bl	801ee94 <xQueueGenericSend>
 801e53e:	4603      	mov	r3, r0
 801e540:	2b01      	cmp	r3, #1
 801e542:	d016      	beq.n	801e572 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801e544:	69f8      	ldr	r0, [r7, #28]
 801e546:	f001 f937 	bl	801f7b8 <vQueueDelete>
            hSemaphore = NULL;
 801e54a:	2300      	movs	r3, #0
 801e54c:	61fb      	str	r3, [r7, #28]
 801e54e:	e010      	b.n	801e572 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801e550:	69bb      	ldr	r3, [r7, #24]
 801e552:	2b01      	cmp	r3, #1
 801e554:	d108      	bne.n	801e568 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	689b      	ldr	r3, [r3, #8]
 801e55a:	461a      	mov	r2, r3
 801e55c:	68b9      	ldr	r1, [r7, #8]
 801e55e:	68f8      	ldr	r0, [r7, #12]
 801e560:	f000 fc2d 	bl	801edbe <xQueueCreateCountingSemaphoreStatic>
 801e564:	61f8      	str	r0, [r7, #28]
 801e566:	e004      	b.n	801e572 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801e568:	68b9      	ldr	r1, [r7, #8]
 801e56a:	68f8      	ldr	r0, [r7, #12]
 801e56c:	f000 fc5e 	bl	801ee2c <xQueueCreateCountingSemaphore>
 801e570:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801e572:	69fb      	ldr	r3, [r7, #28]
 801e574:	2b00      	cmp	r3, #0
 801e576:	d00c      	beq.n	801e592 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d003      	beq.n	801e586 <osSemaphoreNew+0xfc>
          name = attr->name;
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	617b      	str	r3, [r7, #20]
 801e584:	e001      	b.n	801e58a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801e586:	2300      	movs	r3, #0
 801e588:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801e58a:	6979      	ldr	r1, [r7, #20]
 801e58c:	69f8      	ldr	r0, [r7, #28]
 801e58e:	f001 fa5f 	bl	801fa50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801e592:	69fb      	ldr	r3, [r7, #28]
}
 801e594:	4618      	mov	r0, r3
 801e596:	3720      	adds	r7, #32
 801e598:	46bd      	mov	sp, r7
 801e59a:	bd80      	pop	{r7, pc}

0801e59c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801e59c:	b580      	push	{r7, lr}
 801e59e:	b086      	sub	sp, #24
 801e5a0:	af00      	add	r7, sp, #0
 801e5a2:	6078      	str	r0, [r7, #4]
 801e5a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801e5aa:	2300      	movs	r3, #0
 801e5ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801e5ae:	693b      	ldr	r3, [r7, #16]
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d103      	bne.n	801e5bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801e5b4:	f06f 0303 	mvn.w	r3, #3
 801e5b8:	617b      	str	r3, [r7, #20]
 801e5ba:	e039      	b.n	801e630 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e5bc:	f3ef 8305 	mrs	r3, IPSR
 801e5c0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e5c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d022      	beq.n	801e60e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801e5c8:	683b      	ldr	r3, [r7, #0]
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d003      	beq.n	801e5d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801e5ce:	f06f 0303 	mvn.w	r3, #3
 801e5d2:	617b      	str	r3, [r7, #20]
 801e5d4:	e02c      	b.n	801e630 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801e5da:	f107 0308 	add.w	r3, r7, #8
 801e5de:	461a      	mov	r2, r3
 801e5e0:	2100      	movs	r1, #0
 801e5e2:	6938      	ldr	r0, [r7, #16]
 801e5e4:	f001 f868 	bl	801f6b8 <xQueueReceiveFromISR>
 801e5e8:	4603      	mov	r3, r0
 801e5ea:	2b01      	cmp	r3, #1
 801e5ec:	d003      	beq.n	801e5f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801e5ee:	f06f 0302 	mvn.w	r3, #2
 801e5f2:	617b      	str	r3, [r7, #20]
 801e5f4:	e01c      	b.n	801e630 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801e5f6:	68bb      	ldr	r3, [r7, #8]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d019      	beq.n	801e630 <osSemaphoreAcquire+0x94>
 801e5fc:	4b0f      	ldr	r3, [pc, #60]	; (801e63c <osSemaphoreAcquire+0xa0>)
 801e5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e602:	601a      	str	r2, [r3, #0]
 801e604:	f3bf 8f4f 	dsb	sy
 801e608:	f3bf 8f6f 	isb	sy
 801e60c:	e010      	b.n	801e630 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801e60e:	6839      	ldr	r1, [r7, #0]
 801e610:	6938      	ldr	r0, [r7, #16]
 801e612:	f000 ff45 	bl	801f4a0 <xQueueSemaphoreTake>
 801e616:	4603      	mov	r3, r0
 801e618:	2b01      	cmp	r3, #1
 801e61a:	d009      	beq.n	801e630 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801e61c:	683b      	ldr	r3, [r7, #0]
 801e61e:	2b00      	cmp	r3, #0
 801e620:	d003      	beq.n	801e62a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801e622:	f06f 0301 	mvn.w	r3, #1
 801e626:	617b      	str	r3, [r7, #20]
 801e628:	e002      	b.n	801e630 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801e62a:	f06f 0302 	mvn.w	r3, #2
 801e62e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801e630:	697b      	ldr	r3, [r7, #20]
}
 801e632:	4618      	mov	r0, r3
 801e634:	3718      	adds	r7, #24
 801e636:	46bd      	mov	sp, r7
 801e638:	bd80      	pop	{r7, pc}
 801e63a:	bf00      	nop
 801e63c:	e000ed04 	.word	0xe000ed04

0801e640 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801e640:	b580      	push	{r7, lr}
 801e642:	b086      	sub	sp, #24
 801e644:	af00      	add	r7, sp, #0
 801e646:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801e64c:	2300      	movs	r3, #0
 801e64e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801e650:	693b      	ldr	r3, [r7, #16]
 801e652:	2b00      	cmp	r3, #0
 801e654:	d103      	bne.n	801e65e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801e656:	f06f 0303 	mvn.w	r3, #3
 801e65a:	617b      	str	r3, [r7, #20]
 801e65c:	e02c      	b.n	801e6b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e65e:	f3ef 8305 	mrs	r3, IPSR
 801e662:	60fb      	str	r3, [r7, #12]
  return(result);
 801e664:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801e666:	2b00      	cmp	r3, #0
 801e668:	d01a      	beq.n	801e6a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801e66a:	2300      	movs	r3, #0
 801e66c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801e66e:	f107 0308 	add.w	r3, r7, #8
 801e672:	4619      	mov	r1, r3
 801e674:	6938      	ldr	r0, [r7, #16]
 801e676:	f000 fda6 	bl	801f1c6 <xQueueGiveFromISR>
 801e67a:	4603      	mov	r3, r0
 801e67c:	2b01      	cmp	r3, #1
 801e67e:	d003      	beq.n	801e688 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801e680:	f06f 0302 	mvn.w	r3, #2
 801e684:	617b      	str	r3, [r7, #20]
 801e686:	e017      	b.n	801e6b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801e688:	68bb      	ldr	r3, [r7, #8]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d014      	beq.n	801e6b8 <osSemaphoreRelease+0x78>
 801e68e:	4b0d      	ldr	r3, [pc, #52]	; (801e6c4 <osSemaphoreRelease+0x84>)
 801e690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e694:	601a      	str	r2, [r3, #0]
 801e696:	f3bf 8f4f 	dsb	sy
 801e69a:	f3bf 8f6f 	isb	sy
 801e69e:	e00b      	b.n	801e6b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	2100      	movs	r1, #0
 801e6a6:	6938      	ldr	r0, [r7, #16]
 801e6a8:	f000 fbf4 	bl	801ee94 <xQueueGenericSend>
 801e6ac:	4603      	mov	r3, r0
 801e6ae:	2b01      	cmp	r3, #1
 801e6b0:	d002      	beq.n	801e6b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801e6b2:	f06f 0302 	mvn.w	r3, #2
 801e6b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801e6b8:	697b      	ldr	r3, [r7, #20]
}
 801e6ba:	4618      	mov	r0, r3
 801e6bc:	3718      	adds	r7, #24
 801e6be:	46bd      	mov	sp, r7
 801e6c0:	bd80      	pop	{r7, pc}
 801e6c2:	bf00      	nop
 801e6c4:	e000ed04 	.word	0xe000ed04

0801e6c8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b086      	sub	sp, #24
 801e6cc:	af00      	add	r7, sp, #0
 801e6ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e6d4:	f3ef 8305 	mrs	r3, IPSR
 801e6d8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e6da:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d003      	beq.n	801e6e8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 801e6e0:	f06f 0305 	mvn.w	r3, #5
 801e6e4:	617b      	str	r3, [r7, #20]
 801e6e6:	e00e      	b.n	801e706 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801e6e8:	693b      	ldr	r3, [r7, #16]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d103      	bne.n	801e6f6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801e6ee:	f06f 0303 	mvn.w	r3, #3
 801e6f2:	617b      	str	r3, [r7, #20]
 801e6f4:	e007      	b.n	801e706 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801e6f6:	6938      	ldr	r0, [r7, #16]
 801e6f8:	f001 f9d4 	bl	801faa4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801e6fc:	2300      	movs	r3, #0
 801e6fe:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 801e700:	6938      	ldr	r0, [r7, #16]
 801e702:	f001 f859 	bl	801f7b8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801e706:	697b      	ldr	r3, [r7, #20]
}
 801e708:	4618      	mov	r0, r3
 801e70a:	3718      	adds	r7, #24
 801e70c:	46bd      	mov	sp, r7
 801e70e:	bd80      	pop	{r7, pc}

0801e710 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801e710:	b580      	push	{r7, lr}
 801e712:	b08a      	sub	sp, #40	; 0x28
 801e714:	af02      	add	r7, sp, #8
 801e716:	60f8      	str	r0, [r7, #12]
 801e718:	60b9      	str	r1, [r7, #8]
 801e71a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801e71c:	2300      	movs	r3, #0
 801e71e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e720:	f3ef 8305 	mrs	r3, IPSR
 801e724:	613b      	str	r3, [r7, #16]
  return(result);
 801e726:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d15f      	bne.n	801e7ec <osMessageQueueNew+0xdc>
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d05c      	beq.n	801e7ec <osMessageQueueNew+0xdc>
 801e732:	68bb      	ldr	r3, [r7, #8]
 801e734:	2b00      	cmp	r3, #0
 801e736:	d059      	beq.n	801e7ec <osMessageQueueNew+0xdc>
    mem = -1;
 801e738:	f04f 33ff 	mov.w	r3, #4294967295
 801e73c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	2b00      	cmp	r3, #0
 801e742:	d029      	beq.n	801e798 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	689b      	ldr	r3, [r3, #8]
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d012      	beq.n	801e772 <osMessageQueueNew+0x62>
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	68db      	ldr	r3, [r3, #12]
 801e750:	2b4f      	cmp	r3, #79	; 0x4f
 801e752:	d90e      	bls.n	801e772 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d00a      	beq.n	801e772 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	695a      	ldr	r2, [r3, #20]
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	68b9      	ldr	r1, [r7, #8]
 801e764:	fb01 f303 	mul.w	r3, r1, r3
 801e768:	429a      	cmp	r2, r3
 801e76a:	d302      	bcc.n	801e772 <osMessageQueueNew+0x62>
        mem = 1;
 801e76c:	2301      	movs	r3, #1
 801e76e:	61bb      	str	r3, [r7, #24]
 801e770:	e014      	b.n	801e79c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	689b      	ldr	r3, [r3, #8]
 801e776:	2b00      	cmp	r3, #0
 801e778:	d110      	bne.n	801e79c <osMessageQueueNew+0x8c>
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	68db      	ldr	r3, [r3, #12]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d10c      	bne.n	801e79c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801e786:	2b00      	cmp	r3, #0
 801e788:	d108      	bne.n	801e79c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	695b      	ldr	r3, [r3, #20]
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d104      	bne.n	801e79c <osMessageQueueNew+0x8c>
          mem = 0;
 801e792:	2300      	movs	r3, #0
 801e794:	61bb      	str	r3, [r7, #24]
 801e796:	e001      	b.n	801e79c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801e798:	2300      	movs	r3, #0
 801e79a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801e79c:	69bb      	ldr	r3, [r7, #24]
 801e79e:	2b01      	cmp	r3, #1
 801e7a0:	d10b      	bne.n	801e7ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	691a      	ldr	r2, [r3, #16]
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	689b      	ldr	r3, [r3, #8]
 801e7aa:	2100      	movs	r1, #0
 801e7ac:	9100      	str	r1, [sp, #0]
 801e7ae:	68b9      	ldr	r1, [r7, #8]
 801e7b0:	68f8      	ldr	r0, [r7, #12]
 801e7b2:	f000 fa2f 	bl	801ec14 <xQueueGenericCreateStatic>
 801e7b6:	61f8      	str	r0, [r7, #28]
 801e7b8:	e008      	b.n	801e7cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801e7ba:	69bb      	ldr	r3, [r7, #24]
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d105      	bne.n	801e7cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801e7c0:	2200      	movs	r2, #0
 801e7c2:	68b9      	ldr	r1, [r7, #8]
 801e7c4:	68f8      	ldr	r0, [r7, #12]
 801e7c6:	f000 fa9d 	bl	801ed04 <xQueueGenericCreate>
 801e7ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801e7cc:	69fb      	ldr	r3, [r7, #28]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d00c      	beq.n	801e7ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d003      	beq.n	801e7e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	617b      	str	r3, [r7, #20]
 801e7de:	e001      	b.n	801e7e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801e7e4:	6979      	ldr	r1, [r7, #20]
 801e7e6:	69f8      	ldr	r0, [r7, #28]
 801e7e8:	f001 f932 	bl	801fa50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801e7ec:	69fb      	ldr	r3, [r7, #28]
}
 801e7ee:	4618      	mov	r0, r3
 801e7f0:	3720      	adds	r7, #32
 801e7f2:	46bd      	mov	sp, r7
 801e7f4:	bd80      	pop	{r7, pc}
	...

0801e7f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801e7f8:	b580      	push	{r7, lr}
 801e7fa:	b088      	sub	sp, #32
 801e7fc:	af00      	add	r7, sp, #0
 801e7fe:	60f8      	str	r0, [r7, #12]
 801e800:	60b9      	str	r1, [r7, #8]
 801e802:	603b      	str	r3, [r7, #0]
 801e804:	4613      	mov	r3, r2
 801e806:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801e80c:	2300      	movs	r3, #0
 801e80e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e810:	f3ef 8305 	mrs	r3, IPSR
 801e814:	617b      	str	r3, [r7, #20]
  return(result);
 801e816:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d028      	beq.n	801e86e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e81c:	69bb      	ldr	r3, [r7, #24]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d005      	beq.n	801e82e <osMessageQueuePut+0x36>
 801e822:	68bb      	ldr	r3, [r7, #8]
 801e824:	2b00      	cmp	r3, #0
 801e826:	d002      	beq.n	801e82e <osMessageQueuePut+0x36>
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d003      	beq.n	801e836 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801e82e:	f06f 0303 	mvn.w	r3, #3
 801e832:	61fb      	str	r3, [r7, #28]
 801e834:	e038      	b.n	801e8a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801e836:	2300      	movs	r3, #0
 801e838:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801e83a:	f107 0210 	add.w	r2, r7, #16
 801e83e:	2300      	movs	r3, #0
 801e840:	68b9      	ldr	r1, [r7, #8]
 801e842:	69b8      	ldr	r0, [r7, #24]
 801e844:	f000 fc24 	bl	801f090 <xQueueGenericSendFromISR>
 801e848:	4603      	mov	r3, r0
 801e84a:	2b01      	cmp	r3, #1
 801e84c:	d003      	beq.n	801e856 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801e84e:	f06f 0302 	mvn.w	r3, #2
 801e852:	61fb      	str	r3, [r7, #28]
 801e854:	e028      	b.n	801e8a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801e856:	693b      	ldr	r3, [r7, #16]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d025      	beq.n	801e8a8 <osMessageQueuePut+0xb0>
 801e85c:	4b15      	ldr	r3, [pc, #84]	; (801e8b4 <osMessageQueuePut+0xbc>)
 801e85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e862:	601a      	str	r2, [r3, #0]
 801e864:	f3bf 8f4f 	dsb	sy
 801e868:	f3bf 8f6f 	isb	sy
 801e86c:	e01c      	b.n	801e8a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801e86e:	69bb      	ldr	r3, [r7, #24]
 801e870:	2b00      	cmp	r3, #0
 801e872:	d002      	beq.n	801e87a <osMessageQueuePut+0x82>
 801e874:	68bb      	ldr	r3, [r7, #8]
 801e876:	2b00      	cmp	r3, #0
 801e878:	d103      	bne.n	801e882 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801e87a:	f06f 0303 	mvn.w	r3, #3
 801e87e:	61fb      	str	r3, [r7, #28]
 801e880:	e012      	b.n	801e8a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801e882:	2300      	movs	r3, #0
 801e884:	683a      	ldr	r2, [r7, #0]
 801e886:	68b9      	ldr	r1, [r7, #8]
 801e888:	69b8      	ldr	r0, [r7, #24]
 801e88a:	f000 fb03 	bl	801ee94 <xQueueGenericSend>
 801e88e:	4603      	mov	r3, r0
 801e890:	2b01      	cmp	r3, #1
 801e892:	d009      	beq.n	801e8a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801e894:	683b      	ldr	r3, [r7, #0]
 801e896:	2b00      	cmp	r3, #0
 801e898:	d003      	beq.n	801e8a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801e89a:	f06f 0301 	mvn.w	r3, #1
 801e89e:	61fb      	str	r3, [r7, #28]
 801e8a0:	e002      	b.n	801e8a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801e8a2:	f06f 0302 	mvn.w	r3, #2
 801e8a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801e8a8:	69fb      	ldr	r3, [r7, #28]
}
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	3720      	adds	r7, #32
 801e8ae:	46bd      	mov	sp, r7
 801e8b0:	bd80      	pop	{r7, pc}
 801e8b2:	bf00      	nop
 801e8b4:	e000ed04 	.word	0xe000ed04

0801e8b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801e8b8:	b580      	push	{r7, lr}
 801e8ba:	b088      	sub	sp, #32
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	60f8      	str	r0, [r7, #12]
 801e8c0:	60b9      	str	r1, [r7, #8]
 801e8c2:	607a      	str	r2, [r7, #4]
 801e8c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801e8c6:	68fb      	ldr	r3, [r7, #12]
 801e8c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801e8ce:	f3ef 8305 	mrs	r3, IPSR
 801e8d2:	617b      	str	r3, [r7, #20]
  return(result);
 801e8d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d028      	beq.n	801e92c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801e8da:	69bb      	ldr	r3, [r7, #24]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d005      	beq.n	801e8ec <osMessageQueueGet+0x34>
 801e8e0:	68bb      	ldr	r3, [r7, #8]
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d002      	beq.n	801e8ec <osMessageQueueGet+0x34>
 801e8e6:	683b      	ldr	r3, [r7, #0]
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	d003      	beq.n	801e8f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801e8ec:	f06f 0303 	mvn.w	r3, #3
 801e8f0:	61fb      	str	r3, [r7, #28]
 801e8f2:	e037      	b.n	801e964 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801e8f4:	2300      	movs	r3, #0
 801e8f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801e8f8:	f107 0310 	add.w	r3, r7, #16
 801e8fc:	461a      	mov	r2, r3
 801e8fe:	68b9      	ldr	r1, [r7, #8]
 801e900:	69b8      	ldr	r0, [r7, #24]
 801e902:	f000 fed9 	bl	801f6b8 <xQueueReceiveFromISR>
 801e906:	4603      	mov	r3, r0
 801e908:	2b01      	cmp	r3, #1
 801e90a:	d003      	beq.n	801e914 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801e90c:	f06f 0302 	mvn.w	r3, #2
 801e910:	61fb      	str	r3, [r7, #28]
 801e912:	e027      	b.n	801e964 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801e914:	693b      	ldr	r3, [r7, #16]
 801e916:	2b00      	cmp	r3, #0
 801e918:	d024      	beq.n	801e964 <osMessageQueueGet+0xac>
 801e91a:	4b15      	ldr	r3, [pc, #84]	; (801e970 <osMessageQueueGet+0xb8>)
 801e91c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e920:	601a      	str	r2, [r3, #0]
 801e922:	f3bf 8f4f 	dsb	sy
 801e926:	f3bf 8f6f 	isb	sy
 801e92a:	e01b      	b.n	801e964 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801e92c:	69bb      	ldr	r3, [r7, #24]
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d002      	beq.n	801e938 <osMessageQueueGet+0x80>
 801e932:	68bb      	ldr	r3, [r7, #8]
 801e934:	2b00      	cmp	r3, #0
 801e936:	d103      	bne.n	801e940 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801e938:	f06f 0303 	mvn.w	r3, #3
 801e93c:	61fb      	str	r3, [r7, #28]
 801e93e:	e011      	b.n	801e964 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801e940:	683a      	ldr	r2, [r7, #0]
 801e942:	68b9      	ldr	r1, [r7, #8]
 801e944:	69b8      	ldr	r0, [r7, #24]
 801e946:	f000 fccb 	bl	801f2e0 <xQueueReceive>
 801e94a:	4603      	mov	r3, r0
 801e94c:	2b01      	cmp	r3, #1
 801e94e:	d009      	beq.n	801e964 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801e950:	683b      	ldr	r3, [r7, #0]
 801e952:	2b00      	cmp	r3, #0
 801e954:	d003      	beq.n	801e95e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801e956:	f06f 0301 	mvn.w	r3, #1
 801e95a:	61fb      	str	r3, [r7, #28]
 801e95c:	e002      	b.n	801e964 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801e95e:	f06f 0302 	mvn.w	r3, #2
 801e962:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801e964:	69fb      	ldr	r3, [r7, #28]
}
 801e966:	4618      	mov	r0, r3
 801e968:	3720      	adds	r7, #32
 801e96a:	46bd      	mov	sp, r7
 801e96c:	bd80      	pop	{r7, pc}
 801e96e:	bf00      	nop
 801e970:	e000ed04 	.word	0xe000ed04

0801e974 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801e974:	b480      	push	{r7}
 801e976:	b085      	sub	sp, #20
 801e978:	af00      	add	r7, sp, #0
 801e97a:	60f8      	str	r0, [r7, #12]
 801e97c:	60b9      	str	r1, [r7, #8]
 801e97e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801e980:	68fb      	ldr	r3, [r7, #12]
 801e982:	4a07      	ldr	r2, [pc, #28]	; (801e9a0 <vApplicationGetIdleTaskMemory+0x2c>)
 801e984:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801e986:	68bb      	ldr	r3, [r7, #8]
 801e988:	4a06      	ldr	r2, [pc, #24]	; (801e9a4 <vApplicationGetIdleTaskMemory+0x30>)
 801e98a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e992:	601a      	str	r2, [r3, #0]
}
 801e994:	bf00      	nop
 801e996:	3714      	adds	r7, #20
 801e998:	46bd      	mov	sp, r7
 801e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99e:	4770      	bx	lr
 801e9a0:	2400402c 	.word	0x2400402c
 801e9a4:	240040e8 	.word	0x240040e8

0801e9a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801e9a8:	b480      	push	{r7}
 801e9aa:	b085      	sub	sp, #20
 801e9ac:	af00      	add	r7, sp, #0
 801e9ae:	60f8      	str	r0, [r7, #12]
 801e9b0:	60b9      	str	r1, [r7, #8]
 801e9b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801e9b4:	68fb      	ldr	r3, [r7, #12]
 801e9b6:	4a07      	ldr	r2, [pc, #28]	; (801e9d4 <vApplicationGetTimerTaskMemory+0x2c>)
 801e9b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801e9ba:	68bb      	ldr	r3, [r7, #8]
 801e9bc:	4a06      	ldr	r2, [pc, #24]	; (801e9d8 <vApplicationGetTimerTaskMemory+0x30>)
 801e9be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e9c6:	601a      	str	r2, [r3, #0]
}
 801e9c8:	bf00      	nop
 801e9ca:	3714      	adds	r7, #20
 801e9cc:	46bd      	mov	sp, r7
 801e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9d2:	4770      	bx	lr
 801e9d4:	240044e8 	.word	0x240044e8
 801e9d8:	240045a4 	.word	0x240045a4

0801e9dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801e9dc:	b480      	push	{r7}
 801e9de:	b083      	sub	sp, #12
 801e9e0:	af00      	add	r7, sp, #0
 801e9e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	f103 0208 	add.w	r2, r3, #8
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	f04f 32ff 	mov.w	r2, #4294967295
 801e9f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	f103 0208 	add.w	r2, r3, #8
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	f103 0208 	add.w	r2, r3, #8
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801ea10:	bf00      	nop
 801ea12:	370c      	adds	r7, #12
 801ea14:	46bd      	mov	sp, r7
 801ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea1a:	4770      	bx	lr

0801ea1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801ea1c:	b480      	push	{r7}
 801ea1e:	b083      	sub	sp, #12
 801ea20:	af00      	add	r7, sp, #0
 801ea22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	2200      	movs	r2, #0
 801ea28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801ea2a:	bf00      	nop
 801ea2c:	370c      	adds	r7, #12
 801ea2e:	46bd      	mov	sp, r7
 801ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea34:	4770      	bx	lr

0801ea36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801ea36:	b480      	push	{r7}
 801ea38:	b085      	sub	sp, #20
 801ea3a:	af00      	add	r7, sp, #0
 801ea3c:	6078      	str	r0, [r7, #4]
 801ea3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	685b      	ldr	r3, [r3, #4]
 801ea44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801ea46:	683b      	ldr	r3, [r7, #0]
 801ea48:	68fa      	ldr	r2, [r7, #12]
 801ea4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	689a      	ldr	r2, [r3, #8]
 801ea50:	683b      	ldr	r3, [r7, #0]
 801ea52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801ea54:	68fb      	ldr	r3, [r7, #12]
 801ea56:	689b      	ldr	r3, [r3, #8]
 801ea58:	683a      	ldr	r2, [r7, #0]
 801ea5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	683a      	ldr	r2, [r7, #0]
 801ea60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801ea62:	683b      	ldr	r3, [r7, #0]
 801ea64:	687a      	ldr	r2, [r7, #4]
 801ea66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	1c5a      	adds	r2, r3, #1
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	601a      	str	r2, [r3, #0]
}
 801ea72:	bf00      	nop
 801ea74:	3714      	adds	r7, #20
 801ea76:	46bd      	mov	sp, r7
 801ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea7c:	4770      	bx	lr

0801ea7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801ea7e:	b480      	push	{r7}
 801ea80:	b085      	sub	sp, #20
 801ea82:	af00      	add	r7, sp, #0
 801ea84:	6078      	str	r0, [r7, #4]
 801ea86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801ea88:	683b      	ldr	r3, [r7, #0]
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801ea8e:	68bb      	ldr	r3, [r7, #8]
 801ea90:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea94:	d103      	bne.n	801ea9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	691b      	ldr	r3, [r3, #16]
 801ea9a:	60fb      	str	r3, [r7, #12]
 801ea9c:	e00c      	b.n	801eab8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	3308      	adds	r3, #8
 801eaa2:	60fb      	str	r3, [r7, #12]
 801eaa4:	e002      	b.n	801eaac <vListInsert+0x2e>
 801eaa6:	68fb      	ldr	r3, [r7, #12]
 801eaa8:	685b      	ldr	r3, [r3, #4]
 801eaaa:	60fb      	str	r3, [r7, #12]
 801eaac:	68fb      	ldr	r3, [r7, #12]
 801eaae:	685b      	ldr	r3, [r3, #4]
 801eab0:	681b      	ldr	r3, [r3, #0]
 801eab2:	68ba      	ldr	r2, [r7, #8]
 801eab4:	429a      	cmp	r2, r3
 801eab6:	d2f6      	bcs.n	801eaa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801eab8:	68fb      	ldr	r3, [r7, #12]
 801eaba:	685a      	ldr	r2, [r3, #4]
 801eabc:	683b      	ldr	r3, [r7, #0]
 801eabe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801eac0:	683b      	ldr	r3, [r7, #0]
 801eac2:	685b      	ldr	r3, [r3, #4]
 801eac4:	683a      	ldr	r2, [r7, #0]
 801eac6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801eac8:	683b      	ldr	r3, [r7, #0]
 801eaca:	68fa      	ldr	r2, [r7, #12]
 801eacc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801eace:	68fb      	ldr	r3, [r7, #12]
 801ead0:	683a      	ldr	r2, [r7, #0]
 801ead2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801ead4:	683b      	ldr	r3, [r7, #0]
 801ead6:	687a      	ldr	r2, [r7, #4]
 801ead8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	681b      	ldr	r3, [r3, #0]
 801eade:	1c5a      	adds	r2, r3, #1
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	601a      	str	r2, [r3, #0]
}
 801eae4:	bf00      	nop
 801eae6:	3714      	adds	r7, #20
 801eae8:	46bd      	mov	sp, r7
 801eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaee:	4770      	bx	lr

0801eaf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801eaf0:	b480      	push	{r7}
 801eaf2:	b085      	sub	sp, #20
 801eaf4:	af00      	add	r7, sp, #0
 801eaf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	691b      	ldr	r3, [r3, #16]
 801eafc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	685b      	ldr	r3, [r3, #4]
 801eb02:	687a      	ldr	r2, [r7, #4]
 801eb04:	6892      	ldr	r2, [r2, #8]
 801eb06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	689b      	ldr	r3, [r3, #8]
 801eb0c:	687a      	ldr	r2, [r7, #4]
 801eb0e:	6852      	ldr	r2, [r2, #4]
 801eb10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801eb12:	68fb      	ldr	r3, [r7, #12]
 801eb14:	685b      	ldr	r3, [r3, #4]
 801eb16:	687a      	ldr	r2, [r7, #4]
 801eb18:	429a      	cmp	r2, r3
 801eb1a:	d103      	bne.n	801eb24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	689a      	ldr	r2, [r3, #8]
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	2200      	movs	r2, #0
 801eb28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	1e5a      	subs	r2, r3, #1
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801eb34:	68fb      	ldr	r3, [r7, #12]
 801eb36:	681b      	ldr	r3, [r3, #0]
}
 801eb38:	4618      	mov	r0, r3
 801eb3a:	3714      	adds	r7, #20
 801eb3c:	46bd      	mov	sp, r7
 801eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb42:	4770      	bx	lr

0801eb44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801eb44:	b580      	push	{r7, lr}
 801eb46:	b084      	sub	sp, #16
 801eb48:	af00      	add	r7, sp, #0
 801eb4a:	6078      	str	r0, [r7, #4]
 801eb4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d10a      	bne.n	801eb6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801eb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eb5c:	f383 8811 	msr	BASEPRI, r3
 801eb60:	f3bf 8f6f 	isb	sy
 801eb64:	f3bf 8f4f 	dsb	sy
 801eb68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801eb6a:	bf00      	nop
 801eb6c:	e7fe      	b.n	801eb6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801eb6e:	f002 fd91 	bl	8021694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	681a      	ldr	r2, [r3, #0]
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb7a:	68f9      	ldr	r1, [r7, #12]
 801eb7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801eb7e:	fb01 f303 	mul.w	r3, r1, r3
 801eb82:	441a      	add	r2, r3
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801eb88:	68fb      	ldr	r3, [r7, #12]
 801eb8a:	2200      	movs	r2, #0
 801eb8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	681a      	ldr	r2, [r3, #0]
 801eb92:	68fb      	ldr	r3, [r7, #12]
 801eb94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801eb96:	68fb      	ldr	r3, [r7, #12]
 801eb98:	681a      	ldr	r2, [r3, #0]
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb9e:	3b01      	subs	r3, #1
 801eba0:	68f9      	ldr	r1, [r7, #12]
 801eba2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801eba4:	fb01 f303 	mul.w	r3, r1, r3
 801eba8:	441a      	add	r2, r3
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801ebae:	68fb      	ldr	r3, [r7, #12]
 801ebb0:	22ff      	movs	r2, #255	; 0xff
 801ebb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	22ff      	movs	r2, #255	; 0xff
 801ebba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801ebbe:	683b      	ldr	r3, [r7, #0]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d114      	bne.n	801ebee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ebc4:	68fb      	ldr	r3, [r7, #12]
 801ebc6:	691b      	ldr	r3, [r3, #16]
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d01a      	beq.n	801ec02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	3310      	adds	r3, #16
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	f001 fc5d 	bl	8020490 <xTaskRemoveFromEventList>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d012      	beq.n	801ec02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801ebdc:	4b0c      	ldr	r3, [pc, #48]	; (801ec10 <xQueueGenericReset+0xcc>)
 801ebde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ebe2:	601a      	str	r2, [r3, #0]
 801ebe4:	f3bf 8f4f 	dsb	sy
 801ebe8:	f3bf 8f6f 	isb	sy
 801ebec:	e009      	b.n	801ec02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801ebee:	68fb      	ldr	r3, [r7, #12]
 801ebf0:	3310      	adds	r3, #16
 801ebf2:	4618      	mov	r0, r3
 801ebf4:	f7ff fef2 	bl	801e9dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801ebf8:	68fb      	ldr	r3, [r7, #12]
 801ebfa:	3324      	adds	r3, #36	; 0x24
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	f7ff feed 	bl	801e9dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801ec02:	f002 fd77 	bl	80216f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801ec06:	2301      	movs	r3, #1
}
 801ec08:	4618      	mov	r0, r3
 801ec0a:	3710      	adds	r7, #16
 801ec0c:	46bd      	mov	sp, r7
 801ec0e:	bd80      	pop	{r7, pc}
 801ec10:	e000ed04 	.word	0xe000ed04

0801ec14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b08e      	sub	sp, #56	; 0x38
 801ec18:	af02      	add	r7, sp, #8
 801ec1a:	60f8      	str	r0, [r7, #12]
 801ec1c:	60b9      	str	r1, [r7, #8]
 801ec1e:	607a      	str	r2, [r7, #4]
 801ec20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ec22:	68fb      	ldr	r3, [r7, #12]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d10a      	bne.n	801ec3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801ec28:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec2c:	f383 8811 	msr	BASEPRI, r3
 801ec30:	f3bf 8f6f 	isb	sy
 801ec34:	f3bf 8f4f 	dsb	sy
 801ec38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801ec3a:	bf00      	nop
 801ec3c:	e7fe      	b.n	801ec3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801ec3e:	683b      	ldr	r3, [r7, #0]
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d10a      	bne.n	801ec5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801ec44:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec48:	f383 8811 	msr	BASEPRI, r3
 801ec4c:	f3bf 8f6f 	isb	sy
 801ec50:	f3bf 8f4f 	dsb	sy
 801ec54:	627b      	str	r3, [r7, #36]	; 0x24
}
 801ec56:	bf00      	nop
 801ec58:	e7fe      	b.n	801ec58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d002      	beq.n	801ec66 <xQueueGenericCreateStatic+0x52>
 801ec60:	68bb      	ldr	r3, [r7, #8]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d001      	beq.n	801ec6a <xQueueGenericCreateStatic+0x56>
 801ec66:	2301      	movs	r3, #1
 801ec68:	e000      	b.n	801ec6c <xQueueGenericCreateStatic+0x58>
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d10a      	bne.n	801ec86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec74:	f383 8811 	msr	BASEPRI, r3
 801ec78:	f3bf 8f6f 	isb	sy
 801ec7c:	f3bf 8f4f 	dsb	sy
 801ec80:	623b      	str	r3, [r7, #32]
}
 801ec82:	bf00      	nop
 801ec84:	e7fe      	b.n	801ec84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d102      	bne.n	801ec92 <xQueueGenericCreateStatic+0x7e>
 801ec8c:	68bb      	ldr	r3, [r7, #8]
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	d101      	bne.n	801ec96 <xQueueGenericCreateStatic+0x82>
 801ec92:	2301      	movs	r3, #1
 801ec94:	e000      	b.n	801ec98 <xQueueGenericCreateStatic+0x84>
 801ec96:	2300      	movs	r3, #0
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d10a      	bne.n	801ecb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801ec9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eca0:	f383 8811 	msr	BASEPRI, r3
 801eca4:	f3bf 8f6f 	isb	sy
 801eca8:	f3bf 8f4f 	dsb	sy
 801ecac:	61fb      	str	r3, [r7, #28]
}
 801ecae:	bf00      	nop
 801ecb0:	e7fe      	b.n	801ecb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801ecb2:	2350      	movs	r3, #80	; 0x50
 801ecb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801ecb6:	697b      	ldr	r3, [r7, #20]
 801ecb8:	2b50      	cmp	r3, #80	; 0x50
 801ecba:	d00a      	beq.n	801ecd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801ecbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ecc0:	f383 8811 	msr	BASEPRI, r3
 801ecc4:	f3bf 8f6f 	isb	sy
 801ecc8:	f3bf 8f4f 	dsb	sy
 801eccc:	61bb      	str	r3, [r7, #24]
}
 801ecce:	bf00      	nop
 801ecd0:	e7fe      	b.n	801ecd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801ecd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ecd4:	683b      	ldr	r3, [r7, #0]
 801ecd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d00d      	beq.n	801ecfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ecde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ece0:	2201      	movs	r2, #1
 801ece2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ece6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecec:	9300      	str	r3, [sp, #0]
 801ecee:	4613      	mov	r3, r2
 801ecf0:	687a      	ldr	r2, [r7, #4]
 801ecf2:	68b9      	ldr	r1, [r7, #8]
 801ecf4:	68f8      	ldr	r0, [r7, #12]
 801ecf6:	f000 f83f 	bl	801ed78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ecfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	3730      	adds	r7, #48	; 0x30
 801ed00:	46bd      	mov	sp, r7
 801ed02:	bd80      	pop	{r7, pc}

0801ed04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801ed04:	b580      	push	{r7, lr}
 801ed06:	b08a      	sub	sp, #40	; 0x28
 801ed08:	af02      	add	r7, sp, #8
 801ed0a:	60f8      	str	r0, [r7, #12]
 801ed0c:	60b9      	str	r1, [r7, #8]
 801ed0e:	4613      	mov	r3, r2
 801ed10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d10a      	bne.n	801ed2e <xQueueGenericCreate+0x2a>
	__asm volatile
 801ed18:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ed1c:	f383 8811 	msr	BASEPRI, r3
 801ed20:	f3bf 8f6f 	isb	sy
 801ed24:	f3bf 8f4f 	dsb	sy
 801ed28:	613b      	str	r3, [r7, #16]
}
 801ed2a:	bf00      	nop
 801ed2c:	e7fe      	b.n	801ed2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ed2e:	68fb      	ldr	r3, [r7, #12]
 801ed30:	68ba      	ldr	r2, [r7, #8]
 801ed32:	fb02 f303 	mul.w	r3, r2, r3
 801ed36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801ed38:	69fb      	ldr	r3, [r7, #28]
 801ed3a:	3350      	adds	r3, #80	; 0x50
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	f002 fdcb 	bl	80218d8 <pvPortMalloc>
 801ed42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801ed44:	69bb      	ldr	r3, [r7, #24]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d011      	beq.n	801ed6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801ed4a:	69bb      	ldr	r3, [r7, #24]
 801ed4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ed4e:	697b      	ldr	r3, [r7, #20]
 801ed50:	3350      	adds	r3, #80	; 0x50
 801ed52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801ed54:	69bb      	ldr	r3, [r7, #24]
 801ed56:	2200      	movs	r2, #0
 801ed58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ed5c:	79fa      	ldrb	r2, [r7, #7]
 801ed5e:	69bb      	ldr	r3, [r7, #24]
 801ed60:	9300      	str	r3, [sp, #0]
 801ed62:	4613      	mov	r3, r2
 801ed64:	697a      	ldr	r2, [r7, #20]
 801ed66:	68b9      	ldr	r1, [r7, #8]
 801ed68:	68f8      	ldr	r0, [r7, #12]
 801ed6a:	f000 f805 	bl	801ed78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ed6e:	69bb      	ldr	r3, [r7, #24]
	}
 801ed70:	4618      	mov	r0, r3
 801ed72:	3720      	adds	r7, #32
 801ed74:	46bd      	mov	sp, r7
 801ed76:	bd80      	pop	{r7, pc}

0801ed78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b084      	sub	sp, #16
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	60f8      	str	r0, [r7, #12]
 801ed80:	60b9      	str	r1, [r7, #8]
 801ed82:	607a      	str	r2, [r7, #4]
 801ed84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801ed86:	68bb      	ldr	r3, [r7, #8]
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d103      	bne.n	801ed94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801ed8c:	69bb      	ldr	r3, [r7, #24]
 801ed8e:	69ba      	ldr	r2, [r7, #24]
 801ed90:	601a      	str	r2, [r3, #0]
 801ed92:	e002      	b.n	801ed9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ed94:	69bb      	ldr	r3, [r7, #24]
 801ed96:	687a      	ldr	r2, [r7, #4]
 801ed98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ed9a:	69bb      	ldr	r3, [r7, #24]
 801ed9c:	68fa      	ldr	r2, [r7, #12]
 801ed9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801eda0:	69bb      	ldr	r3, [r7, #24]
 801eda2:	68ba      	ldr	r2, [r7, #8]
 801eda4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801eda6:	2101      	movs	r1, #1
 801eda8:	69b8      	ldr	r0, [r7, #24]
 801edaa:	f7ff fecb 	bl	801eb44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801edae:	69bb      	ldr	r3, [r7, #24]
 801edb0:	78fa      	ldrb	r2, [r7, #3]
 801edb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801edb6:	bf00      	nop
 801edb8:	3710      	adds	r7, #16
 801edba:	46bd      	mov	sp, r7
 801edbc:	bd80      	pop	{r7, pc}

0801edbe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801edbe:	b580      	push	{r7, lr}
 801edc0:	b08a      	sub	sp, #40	; 0x28
 801edc2:	af02      	add	r7, sp, #8
 801edc4:	60f8      	str	r0, [r7, #12]
 801edc6:	60b9      	str	r1, [r7, #8]
 801edc8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	2b00      	cmp	r3, #0
 801edce:	d10a      	bne.n	801ede6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801edd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801edd4:	f383 8811 	msr	BASEPRI, r3
 801edd8:	f3bf 8f6f 	isb	sy
 801eddc:	f3bf 8f4f 	dsb	sy
 801ede0:	61bb      	str	r3, [r7, #24]
}
 801ede2:	bf00      	nop
 801ede4:	e7fe      	b.n	801ede4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801ede6:	68ba      	ldr	r2, [r7, #8]
 801ede8:	68fb      	ldr	r3, [r7, #12]
 801edea:	429a      	cmp	r2, r3
 801edec:	d90a      	bls.n	801ee04 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801edee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801edf2:	f383 8811 	msr	BASEPRI, r3
 801edf6:	f3bf 8f6f 	isb	sy
 801edfa:	f3bf 8f4f 	dsb	sy
 801edfe:	617b      	str	r3, [r7, #20]
}
 801ee00:	bf00      	nop
 801ee02:	e7fe      	b.n	801ee02 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801ee04:	2302      	movs	r3, #2
 801ee06:	9300      	str	r3, [sp, #0]
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	2100      	movs	r1, #0
 801ee0e:	68f8      	ldr	r0, [r7, #12]
 801ee10:	f7ff ff00 	bl	801ec14 <xQueueGenericCreateStatic>
 801ee14:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801ee16:	69fb      	ldr	r3, [r7, #28]
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	d002      	beq.n	801ee22 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801ee1c:	69fb      	ldr	r3, [r7, #28]
 801ee1e:	68ba      	ldr	r2, [r7, #8]
 801ee20:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801ee22:	69fb      	ldr	r3, [r7, #28]
	}
 801ee24:	4618      	mov	r0, r3
 801ee26:	3720      	adds	r7, #32
 801ee28:	46bd      	mov	sp, r7
 801ee2a:	bd80      	pop	{r7, pc}

0801ee2c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801ee2c:	b580      	push	{r7, lr}
 801ee2e:	b086      	sub	sp, #24
 801ee30:	af00      	add	r7, sp, #0
 801ee32:	6078      	str	r0, [r7, #4]
 801ee34:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d10a      	bne.n	801ee52 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801ee3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee40:	f383 8811 	msr	BASEPRI, r3
 801ee44:	f3bf 8f6f 	isb	sy
 801ee48:	f3bf 8f4f 	dsb	sy
 801ee4c:	613b      	str	r3, [r7, #16]
}
 801ee4e:	bf00      	nop
 801ee50:	e7fe      	b.n	801ee50 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801ee52:	683a      	ldr	r2, [r7, #0]
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	429a      	cmp	r2, r3
 801ee58:	d90a      	bls.n	801ee70 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801ee5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee5e:	f383 8811 	msr	BASEPRI, r3
 801ee62:	f3bf 8f6f 	isb	sy
 801ee66:	f3bf 8f4f 	dsb	sy
 801ee6a:	60fb      	str	r3, [r7, #12]
}
 801ee6c:	bf00      	nop
 801ee6e:	e7fe      	b.n	801ee6e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801ee70:	2202      	movs	r2, #2
 801ee72:	2100      	movs	r1, #0
 801ee74:	6878      	ldr	r0, [r7, #4]
 801ee76:	f7ff ff45 	bl	801ed04 <xQueueGenericCreate>
 801ee7a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801ee7c:	697b      	ldr	r3, [r7, #20]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d002      	beq.n	801ee88 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801ee82:	697b      	ldr	r3, [r7, #20]
 801ee84:	683a      	ldr	r2, [r7, #0]
 801ee86:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801ee88:	697b      	ldr	r3, [r7, #20]
	}
 801ee8a:	4618      	mov	r0, r3
 801ee8c:	3718      	adds	r7, #24
 801ee8e:	46bd      	mov	sp, r7
 801ee90:	bd80      	pop	{r7, pc}
	...

0801ee94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ee94:	b580      	push	{r7, lr}
 801ee96:	b08e      	sub	sp, #56	; 0x38
 801ee98:	af00      	add	r7, sp, #0
 801ee9a:	60f8      	str	r0, [r7, #12]
 801ee9c:	60b9      	str	r1, [r7, #8]
 801ee9e:	607a      	str	r2, [r7, #4]
 801eea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801eea2:	2300      	movs	r3, #0
 801eea4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801eea6:	68fb      	ldr	r3, [r7, #12]
 801eea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d10a      	bne.n	801eec6 <xQueueGenericSend+0x32>
	__asm volatile
 801eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eeb4:	f383 8811 	msr	BASEPRI, r3
 801eeb8:	f3bf 8f6f 	isb	sy
 801eebc:	f3bf 8f4f 	dsb	sy
 801eec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801eec2:	bf00      	nop
 801eec4:	e7fe      	b.n	801eec4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801eec6:	68bb      	ldr	r3, [r7, #8]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d103      	bne.n	801eed4 <xQueueGenericSend+0x40>
 801eecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	d101      	bne.n	801eed8 <xQueueGenericSend+0x44>
 801eed4:	2301      	movs	r3, #1
 801eed6:	e000      	b.n	801eeda <xQueueGenericSend+0x46>
 801eed8:	2300      	movs	r3, #0
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d10a      	bne.n	801eef4 <xQueueGenericSend+0x60>
	__asm volatile
 801eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eee2:	f383 8811 	msr	BASEPRI, r3
 801eee6:	f3bf 8f6f 	isb	sy
 801eeea:	f3bf 8f4f 	dsb	sy
 801eeee:	627b      	str	r3, [r7, #36]	; 0x24
}
 801eef0:	bf00      	nop
 801eef2:	e7fe      	b.n	801eef2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801eef4:	683b      	ldr	r3, [r7, #0]
 801eef6:	2b02      	cmp	r3, #2
 801eef8:	d103      	bne.n	801ef02 <xQueueGenericSend+0x6e>
 801eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eefe:	2b01      	cmp	r3, #1
 801ef00:	d101      	bne.n	801ef06 <xQueueGenericSend+0x72>
 801ef02:	2301      	movs	r3, #1
 801ef04:	e000      	b.n	801ef08 <xQueueGenericSend+0x74>
 801ef06:	2300      	movs	r3, #0
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d10a      	bne.n	801ef22 <xQueueGenericSend+0x8e>
	__asm volatile
 801ef0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef10:	f383 8811 	msr	BASEPRI, r3
 801ef14:	f3bf 8f6f 	isb	sy
 801ef18:	f3bf 8f4f 	dsb	sy
 801ef1c:	623b      	str	r3, [r7, #32]
}
 801ef1e:	bf00      	nop
 801ef20:	e7fe      	b.n	801ef20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ef22:	f001 fc77 	bl	8020814 <xTaskGetSchedulerState>
 801ef26:	4603      	mov	r3, r0
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d102      	bne.n	801ef32 <xQueueGenericSend+0x9e>
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	d101      	bne.n	801ef36 <xQueueGenericSend+0xa2>
 801ef32:	2301      	movs	r3, #1
 801ef34:	e000      	b.n	801ef38 <xQueueGenericSend+0xa4>
 801ef36:	2300      	movs	r3, #0
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d10a      	bne.n	801ef52 <xQueueGenericSend+0xbe>
	__asm volatile
 801ef3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef40:	f383 8811 	msr	BASEPRI, r3
 801ef44:	f3bf 8f6f 	isb	sy
 801ef48:	f3bf 8f4f 	dsb	sy
 801ef4c:	61fb      	str	r3, [r7, #28]
}
 801ef4e:	bf00      	nop
 801ef50:	e7fe      	b.n	801ef50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ef52:	f002 fb9f 	bl	8021694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef5e:	429a      	cmp	r2, r3
 801ef60:	d302      	bcc.n	801ef68 <xQueueGenericSend+0xd4>
 801ef62:	683b      	ldr	r3, [r7, #0]
 801ef64:	2b02      	cmp	r3, #2
 801ef66:	d129      	bne.n	801efbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ef68:	683a      	ldr	r2, [r7, #0]
 801ef6a:	68b9      	ldr	r1, [r7, #8]
 801ef6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ef6e:	f000 fc5e 	bl	801f82e <prvCopyDataToQueue>
 801ef72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ef74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	d010      	beq.n	801ef9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ef7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef7e:	3324      	adds	r3, #36	; 0x24
 801ef80:	4618      	mov	r0, r3
 801ef82:	f001 fa85 	bl	8020490 <xTaskRemoveFromEventList>
 801ef86:	4603      	mov	r3, r0
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d013      	beq.n	801efb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801ef8c:	4b3f      	ldr	r3, [pc, #252]	; (801f08c <xQueueGenericSend+0x1f8>)
 801ef8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ef92:	601a      	str	r2, [r3, #0]
 801ef94:	f3bf 8f4f 	dsb	sy
 801ef98:	f3bf 8f6f 	isb	sy
 801ef9c:	e00a      	b.n	801efb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d007      	beq.n	801efb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801efa4:	4b39      	ldr	r3, [pc, #228]	; (801f08c <xQueueGenericSend+0x1f8>)
 801efa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801efaa:	601a      	str	r2, [r3, #0]
 801efac:	f3bf 8f4f 	dsb	sy
 801efb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801efb4:	f002 fb9e 	bl	80216f4 <vPortExitCritical>
				return pdPASS;
 801efb8:	2301      	movs	r3, #1
 801efba:	e063      	b.n	801f084 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d103      	bne.n	801efca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801efc2:	f002 fb97 	bl	80216f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801efc6:	2300      	movs	r3, #0
 801efc8:	e05c      	b.n	801f084 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801efca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d106      	bne.n	801efde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801efd0:	f107 0314 	add.w	r3, r7, #20
 801efd4:	4618      	mov	r0, r3
 801efd6:	f001 fabf 	bl	8020558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801efda:	2301      	movs	r3, #1
 801efdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801efde:	f002 fb89 	bl	80216f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801efe2:	f001 f819 	bl	8020018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801efe6:	f002 fb55 	bl	8021694 <vPortEnterCritical>
 801efea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801eff0:	b25b      	sxtb	r3, r3
 801eff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eff6:	d103      	bne.n	801f000 <xQueueGenericSend+0x16c>
 801eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801effa:	2200      	movs	r2, #0
 801effc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f006:	b25b      	sxtb	r3, r3
 801f008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f00c:	d103      	bne.n	801f016 <xQueueGenericSend+0x182>
 801f00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f010:	2200      	movs	r2, #0
 801f012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f016:	f002 fb6d 	bl	80216f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f01a:	1d3a      	adds	r2, r7, #4
 801f01c:	f107 0314 	add.w	r3, r7, #20
 801f020:	4611      	mov	r1, r2
 801f022:	4618      	mov	r0, r3
 801f024:	f001 faae 	bl	8020584 <xTaskCheckForTimeOut>
 801f028:	4603      	mov	r3, r0
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d124      	bne.n	801f078 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801f02e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f030:	f000 fcf5 	bl	801fa1e <prvIsQueueFull>
 801f034:	4603      	mov	r3, r0
 801f036:	2b00      	cmp	r3, #0
 801f038:	d018      	beq.n	801f06c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801f03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f03c:	3310      	adds	r3, #16
 801f03e:	687a      	ldr	r2, [r7, #4]
 801f040:	4611      	mov	r1, r2
 801f042:	4618      	mov	r0, r3
 801f044:	f001 f9d4 	bl	80203f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801f048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f04a:	f000 fc80 	bl	801f94e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801f04e:	f000 fff1 	bl	8020034 <xTaskResumeAll>
 801f052:	4603      	mov	r3, r0
 801f054:	2b00      	cmp	r3, #0
 801f056:	f47f af7c 	bne.w	801ef52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801f05a:	4b0c      	ldr	r3, [pc, #48]	; (801f08c <xQueueGenericSend+0x1f8>)
 801f05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f060:	601a      	str	r2, [r3, #0]
 801f062:	f3bf 8f4f 	dsb	sy
 801f066:	f3bf 8f6f 	isb	sy
 801f06a:	e772      	b.n	801ef52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801f06c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f06e:	f000 fc6e 	bl	801f94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f072:	f000 ffdf 	bl	8020034 <xTaskResumeAll>
 801f076:	e76c      	b.n	801ef52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801f078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f07a:	f000 fc68 	bl	801f94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f07e:	f000 ffd9 	bl	8020034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801f082:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801f084:	4618      	mov	r0, r3
 801f086:	3738      	adds	r7, #56	; 0x38
 801f088:	46bd      	mov	sp, r7
 801f08a:	bd80      	pop	{r7, pc}
 801f08c:	e000ed04 	.word	0xe000ed04

0801f090 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801f090:	b580      	push	{r7, lr}
 801f092:	b090      	sub	sp, #64	; 0x40
 801f094:	af00      	add	r7, sp, #0
 801f096:	60f8      	str	r0, [r7, #12]
 801f098:	60b9      	str	r1, [r7, #8]
 801f09a:	607a      	str	r2, [r7, #4]
 801f09c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801f09e:	68fb      	ldr	r3, [r7, #12]
 801f0a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801f0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d10a      	bne.n	801f0be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f0ac:	f383 8811 	msr	BASEPRI, r3
 801f0b0:	f3bf 8f6f 	isb	sy
 801f0b4:	f3bf 8f4f 	dsb	sy
 801f0b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801f0ba:	bf00      	nop
 801f0bc:	e7fe      	b.n	801f0bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f0be:	68bb      	ldr	r3, [r7, #8]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d103      	bne.n	801f0cc <xQueueGenericSendFromISR+0x3c>
 801f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d101      	bne.n	801f0d0 <xQueueGenericSendFromISR+0x40>
 801f0cc:	2301      	movs	r3, #1
 801f0ce:	e000      	b.n	801f0d2 <xQueueGenericSendFromISR+0x42>
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d10a      	bne.n	801f0ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801f0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f0da:	f383 8811 	msr	BASEPRI, r3
 801f0de:	f3bf 8f6f 	isb	sy
 801f0e2:	f3bf 8f4f 	dsb	sy
 801f0e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 801f0e8:	bf00      	nop
 801f0ea:	e7fe      	b.n	801f0ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801f0ec:	683b      	ldr	r3, [r7, #0]
 801f0ee:	2b02      	cmp	r3, #2
 801f0f0:	d103      	bne.n	801f0fa <xQueueGenericSendFromISR+0x6a>
 801f0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f0f6:	2b01      	cmp	r3, #1
 801f0f8:	d101      	bne.n	801f0fe <xQueueGenericSendFromISR+0x6e>
 801f0fa:	2301      	movs	r3, #1
 801f0fc:	e000      	b.n	801f100 <xQueueGenericSendFromISR+0x70>
 801f0fe:	2300      	movs	r3, #0
 801f100:	2b00      	cmp	r3, #0
 801f102:	d10a      	bne.n	801f11a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f108:	f383 8811 	msr	BASEPRI, r3
 801f10c:	f3bf 8f6f 	isb	sy
 801f110:	f3bf 8f4f 	dsb	sy
 801f114:	623b      	str	r3, [r7, #32]
}
 801f116:	bf00      	nop
 801f118:	e7fe      	b.n	801f118 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801f11a:	f002 fb9d 	bl	8021858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801f11e:	f3ef 8211 	mrs	r2, BASEPRI
 801f122:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f126:	f383 8811 	msr	BASEPRI, r3
 801f12a:	f3bf 8f6f 	isb	sy
 801f12e:	f3bf 8f4f 	dsb	sy
 801f132:	61fa      	str	r2, [r7, #28]
 801f134:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801f136:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f138:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801f13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f13c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f142:	429a      	cmp	r2, r3
 801f144:	d302      	bcc.n	801f14c <xQueueGenericSendFromISR+0xbc>
 801f146:	683b      	ldr	r3, [r7, #0]
 801f148:	2b02      	cmp	r3, #2
 801f14a:	d12f      	bne.n	801f1ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f14e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f15a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801f15c:	683a      	ldr	r2, [r7, #0]
 801f15e:	68b9      	ldr	r1, [r7, #8]
 801f160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801f162:	f000 fb64 	bl	801f82e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801f166:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801f16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f16e:	d112      	bne.n	801f196 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f174:	2b00      	cmp	r3, #0
 801f176:	d016      	beq.n	801f1a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f17a:	3324      	adds	r3, #36	; 0x24
 801f17c:	4618      	mov	r0, r3
 801f17e:	f001 f987 	bl	8020490 <xTaskRemoveFromEventList>
 801f182:	4603      	mov	r3, r0
 801f184:	2b00      	cmp	r3, #0
 801f186:	d00e      	beq.n	801f1a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d00b      	beq.n	801f1a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	2201      	movs	r2, #1
 801f192:	601a      	str	r2, [r3, #0]
 801f194:	e007      	b.n	801f1a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801f196:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801f19a:	3301      	adds	r3, #1
 801f19c:	b2db      	uxtb	r3, r3
 801f19e:	b25a      	sxtb	r2, r3
 801f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801f1a6:	2301      	movs	r3, #1
 801f1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801f1aa:	e001      	b.n	801f1b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801f1ac:	2300      	movs	r3, #0
 801f1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f1b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801f1b4:	697b      	ldr	r3, [r7, #20]
 801f1b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801f1ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801f1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801f1be:	4618      	mov	r0, r3
 801f1c0:	3740      	adds	r7, #64	; 0x40
 801f1c2:	46bd      	mov	sp, r7
 801f1c4:	bd80      	pop	{r7, pc}

0801f1c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801f1c6:	b580      	push	{r7, lr}
 801f1c8:	b08e      	sub	sp, #56	; 0x38
 801f1ca:	af00      	add	r7, sp, #0
 801f1cc:	6078      	str	r0, [r7, #4]
 801f1ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801f1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d10a      	bne.n	801f1f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1de:	f383 8811 	msr	BASEPRI, r3
 801f1e2:	f3bf 8f6f 	isb	sy
 801f1e6:	f3bf 8f4f 	dsb	sy
 801f1ea:	623b      	str	r3, [r7, #32]
}
 801f1ec:	bf00      	nop
 801f1ee:	e7fe      	b.n	801f1ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d00a      	beq.n	801f20e <xQueueGiveFromISR+0x48>
	__asm volatile
 801f1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1fc:	f383 8811 	msr	BASEPRI, r3
 801f200:	f3bf 8f6f 	isb	sy
 801f204:	f3bf 8f4f 	dsb	sy
 801f208:	61fb      	str	r3, [r7, #28]
}
 801f20a:	bf00      	nop
 801f20c:	e7fe      	b.n	801f20c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	2b00      	cmp	r3, #0
 801f214:	d103      	bne.n	801f21e <xQueueGiveFromISR+0x58>
 801f216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f218:	689b      	ldr	r3, [r3, #8]
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d101      	bne.n	801f222 <xQueueGiveFromISR+0x5c>
 801f21e:	2301      	movs	r3, #1
 801f220:	e000      	b.n	801f224 <xQueueGiveFromISR+0x5e>
 801f222:	2300      	movs	r3, #0
 801f224:	2b00      	cmp	r3, #0
 801f226:	d10a      	bne.n	801f23e <xQueueGiveFromISR+0x78>
	__asm volatile
 801f228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f22c:	f383 8811 	msr	BASEPRI, r3
 801f230:	f3bf 8f6f 	isb	sy
 801f234:	f3bf 8f4f 	dsb	sy
 801f238:	61bb      	str	r3, [r7, #24]
}
 801f23a:	bf00      	nop
 801f23c:	e7fe      	b.n	801f23c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801f23e:	f002 fb0b 	bl	8021858 <vPortValidateInterruptPriority>
	__asm volatile
 801f242:	f3ef 8211 	mrs	r2, BASEPRI
 801f246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f24a:	f383 8811 	msr	BASEPRI, r3
 801f24e:	f3bf 8f6f 	isb	sy
 801f252:	f3bf 8f4f 	dsb	sy
 801f256:	617a      	str	r2, [r7, #20]
 801f258:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801f25a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f25c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f262:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f26a:	429a      	cmp	r2, r3
 801f26c:	d22b      	bcs.n	801f2c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801f26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f27a:	1c5a      	adds	r2, r3, #1
 801f27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f27e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801f280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f284:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f288:	d112      	bne.n	801f2b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f28e:	2b00      	cmp	r3, #0
 801f290:	d016      	beq.n	801f2c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f294:	3324      	adds	r3, #36	; 0x24
 801f296:	4618      	mov	r0, r3
 801f298:	f001 f8fa 	bl	8020490 <xTaskRemoveFromEventList>
 801f29c:	4603      	mov	r3, r0
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d00e      	beq.n	801f2c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801f2a2:	683b      	ldr	r3, [r7, #0]
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d00b      	beq.n	801f2c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801f2a8:	683b      	ldr	r3, [r7, #0]
 801f2aa:	2201      	movs	r2, #1
 801f2ac:	601a      	str	r2, [r3, #0]
 801f2ae:	e007      	b.n	801f2c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801f2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f2b4:	3301      	adds	r3, #1
 801f2b6:	b2db      	uxtb	r3, r3
 801f2b8:	b25a      	sxtb	r2, r3
 801f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801f2c0:	2301      	movs	r3, #1
 801f2c2:	637b      	str	r3, [r7, #52]	; 0x34
 801f2c4:	e001      	b.n	801f2ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801f2c6:	2300      	movs	r3, #0
 801f2c8:	637b      	str	r3, [r7, #52]	; 0x34
 801f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	f383 8811 	msr	BASEPRI, r3
}
 801f2d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801f2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801f2d8:	4618      	mov	r0, r3
 801f2da:	3738      	adds	r7, #56	; 0x38
 801f2dc:	46bd      	mov	sp, r7
 801f2de:	bd80      	pop	{r7, pc}

0801f2e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801f2e0:	b580      	push	{r7, lr}
 801f2e2:	b08c      	sub	sp, #48	; 0x30
 801f2e4:	af00      	add	r7, sp, #0
 801f2e6:	60f8      	str	r0, [r7, #12]
 801f2e8:	60b9      	str	r1, [r7, #8]
 801f2ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801f2ec:	2300      	movs	r3, #0
 801f2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801f2f0:	68fb      	ldr	r3, [r7, #12]
 801f2f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d10a      	bne.n	801f310 <xQueueReceive+0x30>
	__asm volatile
 801f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f2fe:	f383 8811 	msr	BASEPRI, r3
 801f302:	f3bf 8f6f 	isb	sy
 801f306:	f3bf 8f4f 	dsb	sy
 801f30a:	623b      	str	r3, [r7, #32]
}
 801f30c:	bf00      	nop
 801f30e:	e7fe      	b.n	801f30e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f310:	68bb      	ldr	r3, [r7, #8]
 801f312:	2b00      	cmp	r3, #0
 801f314:	d103      	bne.n	801f31e <xQueueReceive+0x3e>
 801f316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d101      	bne.n	801f322 <xQueueReceive+0x42>
 801f31e:	2301      	movs	r3, #1
 801f320:	e000      	b.n	801f324 <xQueueReceive+0x44>
 801f322:	2300      	movs	r3, #0
 801f324:	2b00      	cmp	r3, #0
 801f326:	d10a      	bne.n	801f33e <xQueueReceive+0x5e>
	__asm volatile
 801f328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f32c:	f383 8811 	msr	BASEPRI, r3
 801f330:	f3bf 8f6f 	isb	sy
 801f334:	f3bf 8f4f 	dsb	sy
 801f338:	61fb      	str	r3, [r7, #28]
}
 801f33a:	bf00      	nop
 801f33c:	e7fe      	b.n	801f33c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f33e:	f001 fa69 	bl	8020814 <xTaskGetSchedulerState>
 801f342:	4603      	mov	r3, r0
 801f344:	2b00      	cmp	r3, #0
 801f346:	d102      	bne.n	801f34e <xQueueReceive+0x6e>
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d101      	bne.n	801f352 <xQueueReceive+0x72>
 801f34e:	2301      	movs	r3, #1
 801f350:	e000      	b.n	801f354 <xQueueReceive+0x74>
 801f352:	2300      	movs	r3, #0
 801f354:	2b00      	cmp	r3, #0
 801f356:	d10a      	bne.n	801f36e <xQueueReceive+0x8e>
	__asm volatile
 801f358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f35c:	f383 8811 	msr	BASEPRI, r3
 801f360:	f3bf 8f6f 	isb	sy
 801f364:	f3bf 8f4f 	dsb	sy
 801f368:	61bb      	str	r3, [r7, #24]
}
 801f36a:	bf00      	nop
 801f36c:	e7fe      	b.n	801f36c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f36e:	f002 f991 	bl	8021694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f376:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d01f      	beq.n	801f3be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801f37e:	68b9      	ldr	r1, [r7, #8]
 801f380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f382:	f000 fabe 	bl	801f902 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801f386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f388:	1e5a      	subs	r2, r3, #1
 801f38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f38c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f390:	691b      	ldr	r3, [r3, #16]
 801f392:	2b00      	cmp	r3, #0
 801f394:	d00f      	beq.n	801f3b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f398:	3310      	adds	r3, #16
 801f39a:	4618      	mov	r0, r3
 801f39c:	f001 f878 	bl	8020490 <xTaskRemoveFromEventList>
 801f3a0:	4603      	mov	r3, r0
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	d007      	beq.n	801f3b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801f3a6:	4b3d      	ldr	r3, [pc, #244]	; (801f49c <xQueueReceive+0x1bc>)
 801f3a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f3ac:	601a      	str	r2, [r3, #0]
 801f3ae:	f3bf 8f4f 	dsb	sy
 801f3b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801f3b6:	f002 f99d 	bl	80216f4 <vPortExitCritical>
				return pdPASS;
 801f3ba:	2301      	movs	r3, #1
 801f3bc:	e069      	b.n	801f492 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d103      	bne.n	801f3cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801f3c4:	f002 f996 	bl	80216f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801f3c8:	2300      	movs	r3, #0
 801f3ca:	e062      	b.n	801f492 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d106      	bne.n	801f3e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f3d2:	f107 0310 	add.w	r3, r7, #16
 801f3d6:	4618      	mov	r0, r3
 801f3d8:	f001 f8be 	bl	8020558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f3dc:	2301      	movs	r3, #1
 801f3de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f3e0:	f002 f988 	bl	80216f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f3e4:	f000 fe18 	bl	8020018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f3e8:	f002 f954 	bl	8021694 <vPortEnterCritical>
 801f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f3f2:	b25b      	sxtb	r3, r3
 801f3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3f8:	d103      	bne.n	801f402 <xQueueReceive+0x122>
 801f3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3fc:	2200      	movs	r2, #0
 801f3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f408:	b25b      	sxtb	r3, r3
 801f40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f40e:	d103      	bne.n	801f418 <xQueueReceive+0x138>
 801f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f412:	2200      	movs	r2, #0
 801f414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f418:	f002 f96c 	bl	80216f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f41c:	1d3a      	adds	r2, r7, #4
 801f41e:	f107 0310 	add.w	r3, r7, #16
 801f422:	4611      	mov	r1, r2
 801f424:	4618      	mov	r0, r3
 801f426:	f001 f8ad 	bl	8020584 <xTaskCheckForTimeOut>
 801f42a:	4603      	mov	r3, r0
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	d123      	bne.n	801f478 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f432:	f000 fade 	bl	801f9f2 <prvIsQueueEmpty>
 801f436:	4603      	mov	r3, r0
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d017      	beq.n	801f46c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801f43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f43e:	3324      	adds	r3, #36	; 0x24
 801f440:	687a      	ldr	r2, [r7, #4]
 801f442:	4611      	mov	r1, r2
 801f444:	4618      	mov	r0, r3
 801f446:	f000 ffd3 	bl	80203f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f44c:	f000 fa7f 	bl	801f94e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f450:	f000 fdf0 	bl	8020034 <xTaskResumeAll>
 801f454:	4603      	mov	r3, r0
 801f456:	2b00      	cmp	r3, #0
 801f458:	d189      	bne.n	801f36e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801f45a:	4b10      	ldr	r3, [pc, #64]	; (801f49c <xQueueReceive+0x1bc>)
 801f45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f460:	601a      	str	r2, [r3, #0]
 801f462:	f3bf 8f4f 	dsb	sy
 801f466:	f3bf 8f6f 	isb	sy
 801f46a:	e780      	b.n	801f36e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801f46c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f46e:	f000 fa6e 	bl	801f94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f472:	f000 fddf 	bl	8020034 <xTaskResumeAll>
 801f476:	e77a      	b.n	801f36e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801f478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f47a:	f000 fa68 	bl	801f94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f47e:	f000 fdd9 	bl	8020034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f484:	f000 fab5 	bl	801f9f2 <prvIsQueueEmpty>
 801f488:	4603      	mov	r3, r0
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	f43f af6f 	beq.w	801f36e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f492:	4618      	mov	r0, r3
 801f494:	3730      	adds	r7, #48	; 0x30
 801f496:	46bd      	mov	sp, r7
 801f498:	bd80      	pop	{r7, pc}
 801f49a:	bf00      	nop
 801f49c:	e000ed04 	.word	0xe000ed04

0801f4a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801f4a0:	b580      	push	{r7, lr}
 801f4a2:	b08e      	sub	sp, #56	; 0x38
 801f4a4:	af00      	add	r7, sp, #0
 801f4a6:	6078      	str	r0, [r7, #4]
 801f4a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801f4aa:	2300      	movs	r3, #0
 801f4ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d10a      	bne.n	801f4d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4c0:	f383 8811 	msr	BASEPRI, r3
 801f4c4:	f3bf 8f6f 	isb	sy
 801f4c8:	f3bf 8f4f 	dsb	sy
 801f4cc:	623b      	str	r3, [r7, #32]
}
 801f4ce:	bf00      	nop
 801f4d0:	e7fe      	b.n	801f4d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801f4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d00a      	beq.n	801f4f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801f4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4de:	f383 8811 	msr	BASEPRI, r3
 801f4e2:	f3bf 8f6f 	isb	sy
 801f4e6:	f3bf 8f4f 	dsb	sy
 801f4ea:	61fb      	str	r3, [r7, #28]
}
 801f4ec:	bf00      	nop
 801f4ee:	e7fe      	b.n	801f4ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f4f0:	f001 f990 	bl	8020814 <xTaskGetSchedulerState>
 801f4f4:	4603      	mov	r3, r0
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d102      	bne.n	801f500 <xQueueSemaphoreTake+0x60>
 801f4fa:	683b      	ldr	r3, [r7, #0]
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	d101      	bne.n	801f504 <xQueueSemaphoreTake+0x64>
 801f500:	2301      	movs	r3, #1
 801f502:	e000      	b.n	801f506 <xQueueSemaphoreTake+0x66>
 801f504:	2300      	movs	r3, #0
 801f506:	2b00      	cmp	r3, #0
 801f508:	d10a      	bne.n	801f520 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f50e:	f383 8811 	msr	BASEPRI, r3
 801f512:	f3bf 8f6f 	isb	sy
 801f516:	f3bf 8f4f 	dsb	sy
 801f51a:	61bb      	str	r3, [r7, #24]
}
 801f51c:	bf00      	nop
 801f51e:	e7fe      	b.n	801f51e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f520:	f002 f8b8 	bl	8021694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f528:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801f52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d024      	beq.n	801f57a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f532:	1e5a      	subs	r2, r3, #1
 801f534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f536:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d104      	bne.n	801f54a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801f540:	f001 fade 	bl	8020b00 <pvTaskIncrementMutexHeldCount>
 801f544:	4602      	mov	r2, r0
 801f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f548:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f54c:	691b      	ldr	r3, [r3, #16]
 801f54e:	2b00      	cmp	r3, #0
 801f550:	d00f      	beq.n	801f572 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f554:	3310      	adds	r3, #16
 801f556:	4618      	mov	r0, r3
 801f558:	f000 ff9a 	bl	8020490 <xTaskRemoveFromEventList>
 801f55c:	4603      	mov	r3, r0
 801f55e:	2b00      	cmp	r3, #0
 801f560:	d007      	beq.n	801f572 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801f562:	4b54      	ldr	r3, [pc, #336]	; (801f6b4 <xQueueSemaphoreTake+0x214>)
 801f564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f568:	601a      	str	r2, [r3, #0]
 801f56a:	f3bf 8f4f 	dsb	sy
 801f56e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801f572:	f002 f8bf 	bl	80216f4 <vPortExitCritical>
				return pdPASS;
 801f576:	2301      	movs	r3, #1
 801f578:	e097      	b.n	801f6aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f57a:	683b      	ldr	r3, [r7, #0]
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d111      	bne.n	801f5a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801f580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f582:	2b00      	cmp	r3, #0
 801f584:	d00a      	beq.n	801f59c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f58a:	f383 8811 	msr	BASEPRI, r3
 801f58e:	f3bf 8f6f 	isb	sy
 801f592:	f3bf 8f4f 	dsb	sy
 801f596:	617b      	str	r3, [r7, #20]
}
 801f598:	bf00      	nop
 801f59a:	e7fe      	b.n	801f59a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801f59c:	f002 f8aa 	bl	80216f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801f5a0:	2300      	movs	r3, #0
 801f5a2:	e082      	b.n	801f6aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d106      	bne.n	801f5b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f5aa:	f107 030c 	add.w	r3, r7, #12
 801f5ae:	4618      	mov	r0, r3
 801f5b0:	f000 ffd2 	bl	8020558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f5b4:	2301      	movs	r3, #1
 801f5b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f5b8:	f002 f89c 	bl	80216f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f5bc:	f000 fd2c 	bl	8020018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f5c0:	f002 f868 	bl	8021694 <vPortEnterCritical>
 801f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f5ca:	b25b      	sxtb	r3, r3
 801f5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5d0:	d103      	bne.n	801f5da <xQueueSemaphoreTake+0x13a>
 801f5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5d4:	2200      	movs	r2, #0
 801f5d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f5e0:	b25b      	sxtb	r3, r3
 801f5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5e6:	d103      	bne.n	801f5f0 <xQueueSemaphoreTake+0x150>
 801f5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5ea:	2200      	movs	r2, #0
 801f5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f5f0:	f002 f880 	bl	80216f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f5f4:	463a      	mov	r2, r7
 801f5f6:	f107 030c 	add.w	r3, r7, #12
 801f5fa:	4611      	mov	r1, r2
 801f5fc:	4618      	mov	r0, r3
 801f5fe:	f000 ffc1 	bl	8020584 <xTaskCheckForTimeOut>
 801f602:	4603      	mov	r3, r0
 801f604:	2b00      	cmp	r3, #0
 801f606:	d132      	bne.n	801f66e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f60a:	f000 f9f2 	bl	801f9f2 <prvIsQueueEmpty>
 801f60e:	4603      	mov	r3, r0
 801f610:	2b00      	cmp	r3, #0
 801f612:	d026      	beq.n	801f662 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	2b00      	cmp	r3, #0
 801f61a:	d109      	bne.n	801f630 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801f61c:	f002 f83a 	bl	8021694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f622:	689b      	ldr	r3, [r3, #8]
 801f624:	4618      	mov	r0, r3
 801f626:	f001 f913 	bl	8020850 <xTaskPriorityInherit>
 801f62a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801f62c:	f002 f862 	bl	80216f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801f630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f632:	3324      	adds	r3, #36	; 0x24
 801f634:	683a      	ldr	r2, [r7, #0]
 801f636:	4611      	mov	r1, r2
 801f638:	4618      	mov	r0, r3
 801f63a:	f000 fed9 	bl	80203f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f640:	f000 f985 	bl	801f94e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f644:	f000 fcf6 	bl	8020034 <xTaskResumeAll>
 801f648:	4603      	mov	r3, r0
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	f47f af68 	bne.w	801f520 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801f650:	4b18      	ldr	r3, [pc, #96]	; (801f6b4 <xQueueSemaphoreTake+0x214>)
 801f652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f656:	601a      	str	r2, [r3, #0]
 801f658:	f3bf 8f4f 	dsb	sy
 801f65c:	f3bf 8f6f 	isb	sy
 801f660:	e75e      	b.n	801f520 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801f662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f664:	f000 f973 	bl	801f94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f668:	f000 fce4 	bl	8020034 <xTaskResumeAll>
 801f66c:	e758      	b.n	801f520 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801f66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f670:	f000 f96d 	bl	801f94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f674:	f000 fcde 	bl	8020034 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f67a:	f000 f9ba 	bl	801f9f2 <prvIsQueueEmpty>
 801f67e:	4603      	mov	r3, r0
 801f680:	2b00      	cmp	r3, #0
 801f682:	f43f af4d 	beq.w	801f520 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d00d      	beq.n	801f6a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801f68c:	f002 f802 	bl	8021694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801f690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f692:	f000 f8b4 	bl	801f7fe <prvGetDisinheritPriorityAfterTimeout>
 801f696:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f69a:	689b      	ldr	r3, [r3, #8]
 801f69c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f69e:	4618      	mov	r0, r3
 801f6a0:	f001 f9ac 	bl	80209fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801f6a4:	f002 f826 	bl	80216f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f6a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f6aa:	4618      	mov	r0, r3
 801f6ac:	3738      	adds	r7, #56	; 0x38
 801f6ae:	46bd      	mov	sp, r7
 801f6b0:	bd80      	pop	{r7, pc}
 801f6b2:	bf00      	nop
 801f6b4:	e000ed04 	.word	0xe000ed04

0801f6b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801f6b8:	b580      	push	{r7, lr}
 801f6ba:	b08e      	sub	sp, #56	; 0x38
 801f6bc:	af00      	add	r7, sp, #0
 801f6be:	60f8      	str	r0, [r7, #12]
 801f6c0:	60b9      	str	r1, [r7, #8]
 801f6c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801f6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d10a      	bne.n	801f6e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801f6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f6d2:	f383 8811 	msr	BASEPRI, r3
 801f6d6:	f3bf 8f6f 	isb	sy
 801f6da:	f3bf 8f4f 	dsb	sy
 801f6de:	623b      	str	r3, [r7, #32]
}
 801f6e0:	bf00      	nop
 801f6e2:	e7fe      	b.n	801f6e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f6e4:	68bb      	ldr	r3, [r7, #8]
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d103      	bne.n	801f6f2 <xQueueReceiveFromISR+0x3a>
 801f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d101      	bne.n	801f6f6 <xQueueReceiveFromISR+0x3e>
 801f6f2:	2301      	movs	r3, #1
 801f6f4:	e000      	b.n	801f6f8 <xQueueReceiveFromISR+0x40>
 801f6f6:	2300      	movs	r3, #0
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	d10a      	bne.n	801f712 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801f6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f700:	f383 8811 	msr	BASEPRI, r3
 801f704:	f3bf 8f6f 	isb	sy
 801f708:	f3bf 8f4f 	dsb	sy
 801f70c:	61fb      	str	r3, [r7, #28]
}
 801f70e:	bf00      	nop
 801f710:	e7fe      	b.n	801f710 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801f712:	f002 f8a1 	bl	8021858 <vPortValidateInterruptPriority>
	__asm volatile
 801f716:	f3ef 8211 	mrs	r2, BASEPRI
 801f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f71e:	f383 8811 	msr	BASEPRI, r3
 801f722:	f3bf 8f6f 	isb	sy
 801f726:	f3bf 8f4f 	dsb	sy
 801f72a:	61ba      	str	r2, [r7, #24]
 801f72c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801f72e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f730:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f736:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d02f      	beq.n	801f79e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801f748:	68b9      	ldr	r1, [r7, #8]
 801f74a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f74c:	f000 f8d9 	bl	801f902 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801f750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f752:	1e5a      	subs	r2, r3, #1
 801f754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f756:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801f758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f760:	d112      	bne.n	801f788 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f764:	691b      	ldr	r3, [r3, #16]
 801f766:	2b00      	cmp	r3, #0
 801f768:	d016      	beq.n	801f798 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f76c:	3310      	adds	r3, #16
 801f76e:	4618      	mov	r0, r3
 801f770:	f000 fe8e 	bl	8020490 <xTaskRemoveFromEventList>
 801f774:	4603      	mov	r3, r0
 801f776:	2b00      	cmp	r3, #0
 801f778:	d00e      	beq.n	801f798 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	d00b      	beq.n	801f798 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	2201      	movs	r2, #1
 801f784:	601a      	str	r2, [r3, #0]
 801f786:	e007      	b.n	801f798 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801f788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f78c:	3301      	adds	r3, #1
 801f78e:	b2db      	uxtb	r3, r3
 801f790:	b25a      	sxtb	r2, r3
 801f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801f798:	2301      	movs	r3, #1
 801f79a:	637b      	str	r3, [r7, #52]	; 0x34
 801f79c:	e001      	b.n	801f7a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801f79e:	2300      	movs	r3, #0
 801f7a0:	637b      	str	r3, [r7, #52]	; 0x34
 801f7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 801f7a6:	693b      	ldr	r3, [r7, #16]
 801f7a8:	f383 8811 	msr	BASEPRI, r3
}
 801f7ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801f7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	3738      	adds	r7, #56	; 0x38
 801f7b4:	46bd      	mov	sp, r7
 801f7b6:	bd80      	pop	{r7, pc}

0801f7b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801f7b8:	b580      	push	{r7, lr}
 801f7ba:	b084      	sub	sp, #16
 801f7bc:	af00      	add	r7, sp, #0
 801f7be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801f7c4:	68fb      	ldr	r3, [r7, #12]
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	d10a      	bne.n	801f7e0 <vQueueDelete+0x28>
	__asm volatile
 801f7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f7ce:	f383 8811 	msr	BASEPRI, r3
 801f7d2:	f3bf 8f6f 	isb	sy
 801f7d6:	f3bf 8f4f 	dsb	sy
 801f7da:	60bb      	str	r3, [r7, #8]
}
 801f7dc:	bf00      	nop
 801f7de:	e7fe      	b.n	801f7de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801f7e0:	68f8      	ldr	r0, [r7, #12]
 801f7e2:	f000 f95f 	bl	801faa4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801f7e6:	68fb      	ldr	r3, [r7, #12]
 801f7e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d102      	bne.n	801f7f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801f7f0:	68f8      	ldr	r0, [r7, #12]
 801f7f2:	f002 f93d 	bl	8021a70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801f7f6:	bf00      	nop
 801f7f8:	3710      	adds	r7, #16
 801f7fa:	46bd      	mov	sp, r7
 801f7fc:	bd80      	pop	{r7, pc}

0801f7fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801f7fe:	b480      	push	{r7}
 801f800:	b085      	sub	sp, #20
 801f802:	af00      	add	r7, sp, #0
 801f804:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d006      	beq.n	801f81c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801f818:	60fb      	str	r3, [r7, #12]
 801f81a:	e001      	b.n	801f820 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801f81c:	2300      	movs	r3, #0
 801f81e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801f820:	68fb      	ldr	r3, [r7, #12]
	}
 801f822:	4618      	mov	r0, r3
 801f824:	3714      	adds	r7, #20
 801f826:	46bd      	mov	sp, r7
 801f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f82c:	4770      	bx	lr

0801f82e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801f82e:	b580      	push	{r7, lr}
 801f830:	b086      	sub	sp, #24
 801f832:	af00      	add	r7, sp, #0
 801f834:	60f8      	str	r0, [r7, #12]
 801f836:	60b9      	str	r1, [r7, #8]
 801f838:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801f83a:	2300      	movs	r3, #0
 801f83c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f842:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801f844:	68fb      	ldr	r3, [r7, #12]
 801f846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d10d      	bne.n	801f868 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	2b00      	cmp	r3, #0
 801f852:	d14d      	bne.n	801f8f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f854:	68fb      	ldr	r3, [r7, #12]
 801f856:	689b      	ldr	r3, [r3, #8]
 801f858:	4618      	mov	r0, r3
 801f85a:	f001 f861 	bl	8020920 <xTaskPriorityDisinherit>
 801f85e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	2200      	movs	r2, #0
 801f864:	609a      	str	r2, [r3, #8]
 801f866:	e043      	b.n	801f8f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	d119      	bne.n	801f8a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	6858      	ldr	r0, [r3, #4]
 801f872:	68fb      	ldr	r3, [r7, #12]
 801f874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f876:	461a      	mov	r2, r3
 801f878:	68b9      	ldr	r1, [r7, #8]
 801f87a:	f002 fb4b 	bl	8021f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	685a      	ldr	r2, [r3, #4]
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f886:	441a      	add	r2, r3
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	685a      	ldr	r2, [r3, #4]
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	689b      	ldr	r3, [r3, #8]
 801f894:	429a      	cmp	r2, r3
 801f896:	d32b      	bcc.n	801f8f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801f898:	68fb      	ldr	r3, [r7, #12]
 801f89a:	681a      	ldr	r2, [r3, #0]
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	605a      	str	r2, [r3, #4]
 801f8a0:	e026      	b.n	801f8f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801f8a2:	68fb      	ldr	r3, [r7, #12]
 801f8a4:	68d8      	ldr	r0, [r3, #12]
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8aa:	461a      	mov	r2, r3
 801f8ac:	68b9      	ldr	r1, [r7, #8]
 801f8ae:	f002 fb31 	bl	8021f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	68da      	ldr	r2, [r3, #12]
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8ba:	425b      	negs	r3, r3
 801f8bc:	441a      	add	r2, r3
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f8c2:	68fb      	ldr	r3, [r7, #12]
 801f8c4:	68da      	ldr	r2, [r3, #12]
 801f8c6:	68fb      	ldr	r3, [r7, #12]
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	429a      	cmp	r2, r3
 801f8cc:	d207      	bcs.n	801f8de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	689a      	ldr	r2, [r3, #8]
 801f8d2:	68fb      	ldr	r3, [r7, #12]
 801f8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8d6:	425b      	negs	r3, r3
 801f8d8:	441a      	add	r2, r3
 801f8da:	68fb      	ldr	r3, [r7, #12]
 801f8dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	2b02      	cmp	r3, #2
 801f8e2:	d105      	bne.n	801f8f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f8e4:	693b      	ldr	r3, [r7, #16]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d002      	beq.n	801f8f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801f8ea:	693b      	ldr	r3, [r7, #16]
 801f8ec:	3b01      	subs	r3, #1
 801f8ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f8f0:	693b      	ldr	r3, [r7, #16]
 801f8f2:	1c5a      	adds	r2, r3, #1
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801f8f8:	697b      	ldr	r3, [r7, #20]
}
 801f8fa:	4618      	mov	r0, r3
 801f8fc:	3718      	adds	r7, #24
 801f8fe:	46bd      	mov	sp, r7
 801f900:	bd80      	pop	{r7, pc}

0801f902 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801f902:	b580      	push	{r7, lr}
 801f904:	b082      	sub	sp, #8
 801f906:	af00      	add	r7, sp, #0
 801f908:	6078      	str	r0, [r7, #4]
 801f90a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f910:	2b00      	cmp	r3, #0
 801f912:	d018      	beq.n	801f946 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	68da      	ldr	r2, [r3, #12]
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f91c:	441a      	add	r2, r3
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	68da      	ldr	r2, [r3, #12]
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	689b      	ldr	r3, [r3, #8]
 801f92a:	429a      	cmp	r2, r3
 801f92c:	d303      	bcc.n	801f936 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	681a      	ldr	r2, [r3, #0]
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	68d9      	ldr	r1, [r3, #12]
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f93e:	461a      	mov	r2, r3
 801f940:	6838      	ldr	r0, [r7, #0]
 801f942:	f002 fae7 	bl	8021f14 <memcpy>
	}
}
 801f946:	bf00      	nop
 801f948:	3708      	adds	r7, #8
 801f94a:	46bd      	mov	sp, r7
 801f94c:	bd80      	pop	{r7, pc}

0801f94e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801f94e:	b580      	push	{r7, lr}
 801f950:	b084      	sub	sp, #16
 801f952:	af00      	add	r7, sp, #0
 801f954:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801f956:	f001 fe9d 	bl	8021694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f960:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f962:	e011      	b.n	801f988 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d012      	beq.n	801f992 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	3324      	adds	r3, #36	; 0x24
 801f970:	4618      	mov	r0, r3
 801f972:	f000 fd8d 	bl	8020490 <xTaskRemoveFromEventList>
 801f976:	4603      	mov	r3, r0
 801f978:	2b00      	cmp	r3, #0
 801f97a:	d001      	beq.n	801f980 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801f97c:	f000 fe64 	bl	8020648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801f980:	7bfb      	ldrb	r3, [r7, #15]
 801f982:	3b01      	subs	r3, #1
 801f984:	b2db      	uxtb	r3, r3
 801f986:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	dce9      	bgt.n	801f964 <prvUnlockQueue+0x16>
 801f990:	e000      	b.n	801f994 <prvUnlockQueue+0x46>
					break;
 801f992:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	22ff      	movs	r2, #255	; 0xff
 801f998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801f99c:	f001 feaa 	bl	80216f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801f9a0:	f001 fe78 	bl	8021694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f9aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f9ac:	e011      	b.n	801f9d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	691b      	ldr	r3, [r3, #16]
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d012      	beq.n	801f9dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	3310      	adds	r3, #16
 801f9ba:	4618      	mov	r0, r3
 801f9bc:	f000 fd68 	bl	8020490 <xTaskRemoveFromEventList>
 801f9c0:	4603      	mov	r3, r0
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	d001      	beq.n	801f9ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801f9c6:	f000 fe3f 	bl	8020648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801f9ca:	7bbb      	ldrb	r3, [r7, #14]
 801f9cc:	3b01      	subs	r3, #1
 801f9ce:	b2db      	uxtb	r3, r3
 801f9d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f9d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	dce9      	bgt.n	801f9ae <prvUnlockQueue+0x60>
 801f9da:	e000      	b.n	801f9de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801f9dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	22ff      	movs	r2, #255	; 0xff
 801f9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801f9e6:	f001 fe85 	bl	80216f4 <vPortExitCritical>
}
 801f9ea:	bf00      	nop
 801f9ec:	3710      	adds	r7, #16
 801f9ee:	46bd      	mov	sp, r7
 801f9f0:	bd80      	pop	{r7, pc}

0801f9f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801f9f2:	b580      	push	{r7, lr}
 801f9f4:	b084      	sub	sp, #16
 801f9f6:	af00      	add	r7, sp, #0
 801f9f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f9fa:	f001 fe4b 	bl	8021694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d102      	bne.n	801fa0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801fa06:	2301      	movs	r3, #1
 801fa08:	60fb      	str	r3, [r7, #12]
 801fa0a:	e001      	b.n	801fa10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801fa0c:	2300      	movs	r3, #0
 801fa0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801fa10:	f001 fe70 	bl	80216f4 <vPortExitCritical>

	return xReturn;
 801fa14:	68fb      	ldr	r3, [r7, #12]
}
 801fa16:	4618      	mov	r0, r3
 801fa18:	3710      	adds	r7, #16
 801fa1a:	46bd      	mov	sp, r7
 801fa1c:	bd80      	pop	{r7, pc}

0801fa1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801fa1e:	b580      	push	{r7, lr}
 801fa20:	b084      	sub	sp, #16
 801fa22:	af00      	add	r7, sp, #0
 801fa24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801fa26:	f001 fe35 	bl	8021694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801fa2a:	687b      	ldr	r3, [r7, #4]
 801fa2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fa32:	429a      	cmp	r2, r3
 801fa34:	d102      	bne.n	801fa3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801fa36:	2301      	movs	r3, #1
 801fa38:	60fb      	str	r3, [r7, #12]
 801fa3a:	e001      	b.n	801fa40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801fa3c:	2300      	movs	r3, #0
 801fa3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801fa40:	f001 fe58 	bl	80216f4 <vPortExitCritical>

	return xReturn;
 801fa44:	68fb      	ldr	r3, [r7, #12]
}
 801fa46:	4618      	mov	r0, r3
 801fa48:	3710      	adds	r7, #16
 801fa4a:	46bd      	mov	sp, r7
 801fa4c:	bd80      	pop	{r7, pc}
	...

0801fa50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801fa50:	b480      	push	{r7}
 801fa52:	b085      	sub	sp, #20
 801fa54:	af00      	add	r7, sp, #0
 801fa56:	6078      	str	r0, [r7, #4]
 801fa58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801fa5a:	2300      	movs	r3, #0
 801fa5c:	60fb      	str	r3, [r7, #12]
 801fa5e:	e014      	b.n	801fa8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801fa60:	4a0f      	ldr	r2, [pc, #60]	; (801faa0 <vQueueAddToRegistry+0x50>)
 801fa62:	68fb      	ldr	r3, [r7, #12]
 801fa64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	d10b      	bne.n	801fa84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801fa6c:	490c      	ldr	r1, [pc, #48]	; (801faa0 <vQueueAddToRegistry+0x50>)
 801fa6e:	68fb      	ldr	r3, [r7, #12]
 801fa70:	683a      	ldr	r2, [r7, #0]
 801fa72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801fa76:	4a0a      	ldr	r2, [pc, #40]	; (801faa0 <vQueueAddToRegistry+0x50>)
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	00db      	lsls	r3, r3, #3
 801fa7c:	4413      	add	r3, r2
 801fa7e:	687a      	ldr	r2, [r7, #4]
 801fa80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801fa82:	e006      	b.n	801fa92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801fa84:	68fb      	ldr	r3, [r7, #12]
 801fa86:	3301      	adds	r3, #1
 801fa88:	60fb      	str	r3, [r7, #12]
 801fa8a:	68fb      	ldr	r3, [r7, #12]
 801fa8c:	2b07      	cmp	r3, #7
 801fa8e:	d9e7      	bls.n	801fa60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801fa90:	bf00      	nop
 801fa92:	bf00      	nop
 801fa94:	3714      	adds	r7, #20
 801fa96:	46bd      	mov	sp, r7
 801fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa9c:	4770      	bx	lr
 801fa9e:	bf00      	nop
 801faa0:	24004da4 	.word	0x24004da4

0801faa4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801faa4:	b480      	push	{r7}
 801faa6:	b085      	sub	sp, #20
 801faa8:	af00      	add	r7, sp, #0
 801faaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801faac:	2300      	movs	r3, #0
 801faae:	60fb      	str	r3, [r7, #12]
 801fab0:	e016      	b.n	801fae0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801fab2:	4a10      	ldr	r2, [pc, #64]	; (801faf4 <vQueueUnregisterQueue+0x50>)
 801fab4:	68fb      	ldr	r3, [r7, #12]
 801fab6:	00db      	lsls	r3, r3, #3
 801fab8:	4413      	add	r3, r2
 801faba:	685b      	ldr	r3, [r3, #4]
 801fabc:	687a      	ldr	r2, [r7, #4]
 801fabe:	429a      	cmp	r2, r3
 801fac0:	d10b      	bne.n	801fada <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801fac2:	4a0c      	ldr	r2, [pc, #48]	; (801faf4 <vQueueUnregisterQueue+0x50>)
 801fac4:	68fb      	ldr	r3, [r7, #12]
 801fac6:	2100      	movs	r1, #0
 801fac8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801facc:	4a09      	ldr	r2, [pc, #36]	; (801faf4 <vQueueUnregisterQueue+0x50>)
 801face:	68fb      	ldr	r3, [r7, #12]
 801fad0:	00db      	lsls	r3, r3, #3
 801fad2:	4413      	add	r3, r2
 801fad4:	2200      	movs	r2, #0
 801fad6:	605a      	str	r2, [r3, #4]
				break;
 801fad8:	e006      	b.n	801fae8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801fada:	68fb      	ldr	r3, [r7, #12]
 801fadc:	3301      	adds	r3, #1
 801fade:	60fb      	str	r3, [r7, #12]
 801fae0:	68fb      	ldr	r3, [r7, #12]
 801fae2:	2b07      	cmp	r3, #7
 801fae4:	d9e5      	bls.n	801fab2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801fae6:	bf00      	nop
 801fae8:	bf00      	nop
 801faea:	3714      	adds	r7, #20
 801faec:	46bd      	mov	sp, r7
 801faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faf2:	4770      	bx	lr
 801faf4:	24004da4 	.word	0x24004da4

0801faf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801faf8:	b580      	push	{r7, lr}
 801fafa:	b086      	sub	sp, #24
 801fafc:	af00      	add	r7, sp, #0
 801fafe:	60f8      	str	r0, [r7, #12]
 801fb00:	60b9      	str	r1, [r7, #8]
 801fb02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801fb08:	f001 fdc4 	bl	8021694 <vPortEnterCritical>
 801fb0c:	697b      	ldr	r3, [r7, #20]
 801fb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fb12:	b25b      	sxtb	r3, r3
 801fb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb18:	d103      	bne.n	801fb22 <vQueueWaitForMessageRestricted+0x2a>
 801fb1a:	697b      	ldr	r3, [r7, #20]
 801fb1c:	2200      	movs	r2, #0
 801fb1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fb22:	697b      	ldr	r3, [r7, #20]
 801fb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801fb28:	b25b      	sxtb	r3, r3
 801fb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb2e:	d103      	bne.n	801fb38 <vQueueWaitForMessageRestricted+0x40>
 801fb30:	697b      	ldr	r3, [r7, #20]
 801fb32:	2200      	movs	r2, #0
 801fb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fb38:	f001 fddc 	bl	80216f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801fb3c:	697b      	ldr	r3, [r7, #20]
 801fb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d106      	bne.n	801fb52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801fb44:	697b      	ldr	r3, [r7, #20]
 801fb46:	3324      	adds	r3, #36	; 0x24
 801fb48:	687a      	ldr	r2, [r7, #4]
 801fb4a:	68b9      	ldr	r1, [r7, #8]
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	f000 fc73 	bl	8020438 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801fb52:	6978      	ldr	r0, [r7, #20]
 801fb54:	f7ff fefb 	bl	801f94e <prvUnlockQueue>
	}
 801fb58:	bf00      	nop
 801fb5a:	3718      	adds	r7, #24
 801fb5c:	46bd      	mov	sp, r7
 801fb5e:	bd80      	pop	{r7, pc}

0801fb60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801fb60:	b580      	push	{r7, lr}
 801fb62:	b08e      	sub	sp, #56	; 0x38
 801fb64:	af04      	add	r7, sp, #16
 801fb66:	60f8      	str	r0, [r7, #12]
 801fb68:	60b9      	str	r1, [r7, #8]
 801fb6a:	607a      	str	r2, [r7, #4]
 801fb6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801fb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d10a      	bne.n	801fb8a <xTaskCreateStatic+0x2a>
	__asm volatile
 801fb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb78:	f383 8811 	msr	BASEPRI, r3
 801fb7c:	f3bf 8f6f 	isb	sy
 801fb80:	f3bf 8f4f 	dsb	sy
 801fb84:	623b      	str	r3, [r7, #32]
}
 801fb86:	bf00      	nop
 801fb88:	e7fe      	b.n	801fb88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801fb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb8c:	2b00      	cmp	r3, #0
 801fb8e:	d10a      	bne.n	801fba6 <xTaskCreateStatic+0x46>
	__asm volatile
 801fb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb94:	f383 8811 	msr	BASEPRI, r3
 801fb98:	f3bf 8f6f 	isb	sy
 801fb9c:	f3bf 8f4f 	dsb	sy
 801fba0:	61fb      	str	r3, [r7, #28]
}
 801fba2:	bf00      	nop
 801fba4:	e7fe      	b.n	801fba4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801fba6:	23bc      	movs	r3, #188	; 0xbc
 801fba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801fbaa:	693b      	ldr	r3, [r7, #16]
 801fbac:	2bbc      	cmp	r3, #188	; 0xbc
 801fbae:	d00a      	beq.n	801fbc6 <xTaskCreateStatic+0x66>
	__asm volatile
 801fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fbb4:	f383 8811 	msr	BASEPRI, r3
 801fbb8:	f3bf 8f6f 	isb	sy
 801fbbc:	f3bf 8f4f 	dsb	sy
 801fbc0:	61bb      	str	r3, [r7, #24]
}
 801fbc2:	bf00      	nop
 801fbc4:	e7fe      	b.n	801fbc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801fbc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801fbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	d01e      	beq.n	801fc0c <xTaskCreateStatic+0xac>
 801fbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d01b      	beq.n	801fc0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fbdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbe0:	2202      	movs	r2, #2
 801fbe2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801fbe6:	2300      	movs	r3, #0
 801fbe8:	9303      	str	r3, [sp, #12]
 801fbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbec:	9302      	str	r3, [sp, #8]
 801fbee:	f107 0314 	add.w	r3, r7, #20
 801fbf2:	9301      	str	r3, [sp, #4]
 801fbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbf6:	9300      	str	r3, [sp, #0]
 801fbf8:	683b      	ldr	r3, [r7, #0]
 801fbfa:	687a      	ldr	r2, [r7, #4]
 801fbfc:	68b9      	ldr	r1, [r7, #8]
 801fbfe:	68f8      	ldr	r0, [r7, #12]
 801fc00:	f000 f850 	bl	801fca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801fc04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fc06:	f000 f8f3 	bl	801fdf0 <prvAddNewTaskToReadyList>
 801fc0a:	e001      	b.n	801fc10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801fc10:	697b      	ldr	r3, [r7, #20]
	}
 801fc12:	4618      	mov	r0, r3
 801fc14:	3728      	adds	r7, #40	; 0x28
 801fc16:	46bd      	mov	sp, r7
 801fc18:	bd80      	pop	{r7, pc}

0801fc1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801fc1a:	b580      	push	{r7, lr}
 801fc1c:	b08c      	sub	sp, #48	; 0x30
 801fc1e:	af04      	add	r7, sp, #16
 801fc20:	60f8      	str	r0, [r7, #12]
 801fc22:	60b9      	str	r1, [r7, #8]
 801fc24:	603b      	str	r3, [r7, #0]
 801fc26:	4613      	mov	r3, r2
 801fc28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801fc2a:	88fb      	ldrh	r3, [r7, #6]
 801fc2c:	009b      	lsls	r3, r3, #2
 801fc2e:	4618      	mov	r0, r3
 801fc30:	f001 fe52 	bl	80218d8 <pvPortMalloc>
 801fc34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801fc36:	697b      	ldr	r3, [r7, #20]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d00e      	beq.n	801fc5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801fc3c:	20bc      	movs	r0, #188	; 0xbc
 801fc3e:	f001 fe4b 	bl	80218d8 <pvPortMalloc>
 801fc42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801fc44:	69fb      	ldr	r3, [r7, #28]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d003      	beq.n	801fc52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801fc4a:	69fb      	ldr	r3, [r7, #28]
 801fc4c:	697a      	ldr	r2, [r7, #20]
 801fc4e:	631a      	str	r2, [r3, #48]	; 0x30
 801fc50:	e005      	b.n	801fc5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801fc52:	6978      	ldr	r0, [r7, #20]
 801fc54:	f001 ff0c 	bl	8021a70 <vPortFree>
 801fc58:	e001      	b.n	801fc5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801fc5a:	2300      	movs	r3, #0
 801fc5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801fc5e:	69fb      	ldr	r3, [r7, #28]
 801fc60:	2b00      	cmp	r3, #0
 801fc62:	d017      	beq.n	801fc94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801fc64:	69fb      	ldr	r3, [r7, #28]
 801fc66:	2200      	movs	r2, #0
 801fc68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801fc6c:	88fa      	ldrh	r2, [r7, #6]
 801fc6e:	2300      	movs	r3, #0
 801fc70:	9303      	str	r3, [sp, #12]
 801fc72:	69fb      	ldr	r3, [r7, #28]
 801fc74:	9302      	str	r3, [sp, #8]
 801fc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc78:	9301      	str	r3, [sp, #4]
 801fc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc7c:	9300      	str	r3, [sp, #0]
 801fc7e:	683b      	ldr	r3, [r7, #0]
 801fc80:	68b9      	ldr	r1, [r7, #8]
 801fc82:	68f8      	ldr	r0, [r7, #12]
 801fc84:	f000 f80e 	bl	801fca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801fc88:	69f8      	ldr	r0, [r7, #28]
 801fc8a:	f000 f8b1 	bl	801fdf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801fc8e:	2301      	movs	r3, #1
 801fc90:	61bb      	str	r3, [r7, #24]
 801fc92:	e002      	b.n	801fc9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801fc94:	f04f 33ff 	mov.w	r3, #4294967295
 801fc98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801fc9a:	69bb      	ldr	r3, [r7, #24]
	}
 801fc9c:	4618      	mov	r0, r3
 801fc9e:	3720      	adds	r7, #32
 801fca0:	46bd      	mov	sp, r7
 801fca2:	bd80      	pop	{r7, pc}

0801fca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801fca4:	b580      	push	{r7, lr}
 801fca6:	b088      	sub	sp, #32
 801fca8:	af00      	add	r7, sp, #0
 801fcaa:	60f8      	str	r0, [r7, #12]
 801fcac:	60b9      	str	r1, [r7, #8]
 801fcae:	607a      	str	r2, [r7, #4]
 801fcb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fcb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	009b      	lsls	r3, r3, #2
 801fcba:	461a      	mov	r2, r3
 801fcbc:	21a5      	movs	r1, #165	; 0xa5
 801fcbe:	f002 f937 	bl	8021f30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801fcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fcc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fcc6:	6879      	ldr	r1, [r7, #4]
 801fcc8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801fccc:	440b      	add	r3, r1
 801fcce:	009b      	lsls	r3, r3, #2
 801fcd0:	4413      	add	r3, r2
 801fcd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801fcd4:	69bb      	ldr	r3, [r7, #24]
 801fcd6:	f023 0307 	bic.w	r3, r3, #7
 801fcda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801fcdc:	69bb      	ldr	r3, [r7, #24]
 801fcde:	f003 0307 	and.w	r3, r3, #7
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d00a      	beq.n	801fcfc <prvInitialiseNewTask+0x58>
	__asm volatile
 801fce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fcea:	f383 8811 	msr	BASEPRI, r3
 801fcee:	f3bf 8f6f 	isb	sy
 801fcf2:	f3bf 8f4f 	dsb	sy
 801fcf6:	617b      	str	r3, [r7, #20]
}
 801fcf8:	bf00      	nop
 801fcfa:	e7fe      	b.n	801fcfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801fcfc:	68bb      	ldr	r3, [r7, #8]
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	d01f      	beq.n	801fd42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801fd02:	2300      	movs	r3, #0
 801fd04:	61fb      	str	r3, [r7, #28]
 801fd06:	e012      	b.n	801fd2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801fd08:	68ba      	ldr	r2, [r7, #8]
 801fd0a:	69fb      	ldr	r3, [r7, #28]
 801fd0c:	4413      	add	r3, r2
 801fd0e:	7819      	ldrb	r1, [r3, #0]
 801fd10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd12:	69fb      	ldr	r3, [r7, #28]
 801fd14:	4413      	add	r3, r2
 801fd16:	3334      	adds	r3, #52	; 0x34
 801fd18:	460a      	mov	r2, r1
 801fd1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801fd1c:	68ba      	ldr	r2, [r7, #8]
 801fd1e:	69fb      	ldr	r3, [r7, #28]
 801fd20:	4413      	add	r3, r2
 801fd22:	781b      	ldrb	r3, [r3, #0]
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d006      	beq.n	801fd36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801fd28:	69fb      	ldr	r3, [r7, #28]
 801fd2a:	3301      	adds	r3, #1
 801fd2c:	61fb      	str	r3, [r7, #28]
 801fd2e:	69fb      	ldr	r3, [r7, #28]
 801fd30:	2b0f      	cmp	r3, #15
 801fd32:	d9e9      	bls.n	801fd08 <prvInitialiseNewTask+0x64>
 801fd34:	e000      	b.n	801fd38 <prvInitialiseNewTask+0x94>
			{
				break;
 801fd36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd3a:	2200      	movs	r2, #0
 801fd3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fd40:	e003      	b.n	801fd4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801fd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd44:	2200      	movs	r2, #0
 801fd46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801fd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd4c:	2b37      	cmp	r3, #55	; 0x37
 801fd4e:	d901      	bls.n	801fd54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801fd50:	2337      	movs	r3, #55	; 0x37
 801fd52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801fd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801fd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801fd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd62:	2200      	movs	r2, #0
 801fd64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd68:	3304      	adds	r3, #4
 801fd6a:	4618      	mov	r0, r3
 801fd6c:	f7fe fe56 	bl	801ea1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801fd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd72:	3318      	adds	r3, #24
 801fd74:	4618      	mov	r0, r3
 801fd76:	f7fe fe51 	bl	801ea1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801fd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd92:	2200      	movs	r2, #0
 801fd94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd9a:	2200      	movs	r2, #0
 801fd9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fda2:	3354      	adds	r3, #84	; 0x54
 801fda4:	2260      	movs	r2, #96	; 0x60
 801fda6:	2100      	movs	r1, #0
 801fda8:	4618      	mov	r0, r3
 801fdaa:	f002 f8c1 	bl	8021f30 <memset>
 801fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fdb0:	4a0c      	ldr	r2, [pc, #48]	; (801fde4 <prvInitialiseNewTask+0x140>)
 801fdb2:	659a      	str	r2, [r3, #88]	; 0x58
 801fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fdb6:	4a0c      	ldr	r2, [pc, #48]	; (801fde8 <prvInitialiseNewTask+0x144>)
 801fdb8:	65da      	str	r2, [r3, #92]	; 0x5c
 801fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fdbc:	4a0b      	ldr	r2, [pc, #44]	; (801fdec <prvInitialiseNewTask+0x148>)
 801fdbe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801fdc0:	683a      	ldr	r2, [r7, #0]
 801fdc2:	68f9      	ldr	r1, [r7, #12]
 801fdc4:	69b8      	ldr	r0, [r7, #24]
 801fdc6:	f001 fb35 	bl	8021434 <pxPortInitialiseStack>
 801fdca:	4602      	mov	r2, r0
 801fdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fdce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d002      	beq.n	801fddc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fdda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801fddc:	bf00      	nop
 801fdde:	3720      	adds	r7, #32
 801fde0:	46bd      	mov	sp, r7
 801fde2:	bd80      	pop	{r7, pc}
 801fde4:	08027df0 	.word	0x08027df0
 801fde8:	08027e10 	.word	0x08027e10
 801fdec:	08027dd0 	.word	0x08027dd0

0801fdf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801fdf0:	b580      	push	{r7, lr}
 801fdf2:	b082      	sub	sp, #8
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801fdf8:	f001 fc4c 	bl	8021694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801fdfc:	4b2d      	ldr	r3, [pc, #180]	; (801feb4 <prvAddNewTaskToReadyList+0xc4>)
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	3301      	adds	r3, #1
 801fe02:	4a2c      	ldr	r2, [pc, #176]	; (801feb4 <prvAddNewTaskToReadyList+0xc4>)
 801fe04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801fe06:	4b2c      	ldr	r3, [pc, #176]	; (801feb8 <prvAddNewTaskToReadyList+0xc8>)
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d109      	bne.n	801fe22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801fe0e:	4a2a      	ldr	r2, [pc, #168]	; (801feb8 <prvAddNewTaskToReadyList+0xc8>)
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801fe14:	4b27      	ldr	r3, [pc, #156]	; (801feb4 <prvAddNewTaskToReadyList+0xc4>)
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	2b01      	cmp	r3, #1
 801fe1a:	d110      	bne.n	801fe3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801fe1c:	f000 fc38 	bl	8020690 <prvInitialiseTaskLists>
 801fe20:	e00d      	b.n	801fe3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801fe22:	4b26      	ldr	r3, [pc, #152]	; (801febc <prvAddNewTaskToReadyList+0xcc>)
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d109      	bne.n	801fe3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801fe2a:	4b23      	ldr	r3, [pc, #140]	; (801feb8 <prvAddNewTaskToReadyList+0xc8>)
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe34:	429a      	cmp	r2, r3
 801fe36:	d802      	bhi.n	801fe3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801fe38:	4a1f      	ldr	r2, [pc, #124]	; (801feb8 <prvAddNewTaskToReadyList+0xc8>)
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801fe3e:	4b20      	ldr	r3, [pc, #128]	; (801fec0 <prvAddNewTaskToReadyList+0xd0>)
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	3301      	adds	r3, #1
 801fe44:	4a1e      	ldr	r2, [pc, #120]	; (801fec0 <prvAddNewTaskToReadyList+0xd0>)
 801fe46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801fe48:	4b1d      	ldr	r3, [pc, #116]	; (801fec0 <prvAddNewTaskToReadyList+0xd0>)
 801fe4a:	681a      	ldr	r2, [r3, #0]
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe54:	4b1b      	ldr	r3, [pc, #108]	; (801fec4 <prvAddNewTaskToReadyList+0xd4>)
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	429a      	cmp	r2, r3
 801fe5a:	d903      	bls.n	801fe64 <prvAddNewTaskToReadyList+0x74>
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe60:	4a18      	ldr	r2, [pc, #96]	; (801fec4 <prvAddNewTaskToReadyList+0xd4>)
 801fe62:	6013      	str	r3, [r2, #0]
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe68:	4613      	mov	r3, r2
 801fe6a:	009b      	lsls	r3, r3, #2
 801fe6c:	4413      	add	r3, r2
 801fe6e:	009b      	lsls	r3, r3, #2
 801fe70:	4a15      	ldr	r2, [pc, #84]	; (801fec8 <prvAddNewTaskToReadyList+0xd8>)
 801fe72:	441a      	add	r2, r3
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	3304      	adds	r3, #4
 801fe78:	4619      	mov	r1, r3
 801fe7a:	4610      	mov	r0, r2
 801fe7c:	f7fe fddb 	bl	801ea36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801fe80:	f001 fc38 	bl	80216f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801fe84:	4b0d      	ldr	r3, [pc, #52]	; (801febc <prvAddNewTaskToReadyList+0xcc>)
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d00e      	beq.n	801feaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801fe8c:	4b0a      	ldr	r3, [pc, #40]	; (801feb8 <prvAddNewTaskToReadyList+0xc8>)
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe96:	429a      	cmp	r2, r3
 801fe98:	d207      	bcs.n	801feaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801fe9a:	4b0c      	ldr	r3, [pc, #48]	; (801fecc <prvAddNewTaskToReadyList+0xdc>)
 801fe9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fea0:	601a      	str	r2, [r3, #0]
 801fea2:	f3bf 8f4f 	dsb	sy
 801fea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801feaa:	bf00      	nop
 801feac:	3708      	adds	r7, #8
 801feae:	46bd      	mov	sp, r7
 801feb0:	bd80      	pop	{r7, pc}
 801feb2:	bf00      	nop
 801feb4:	240052b8 	.word	0x240052b8
 801feb8:	24004de4 	.word	0x24004de4
 801febc:	240052c4 	.word	0x240052c4
 801fec0:	240052d4 	.word	0x240052d4
 801fec4:	240052c0 	.word	0x240052c0
 801fec8:	24004de8 	.word	0x24004de8
 801fecc:	e000ed04 	.word	0xe000ed04

0801fed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801fed0:	b580      	push	{r7, lr}
 801fed2:	b084      	sub	sp, #16
 801fed4:	af00      	add	r7, sp, #0
 801fed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801fed8:	2300      	movs	r3, #0
 801feda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d017      	beq.n	801ff12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801fee2:	4b13      	ldr	r3, [pc, #76]	; (801ff30 <vTaskDelay+0x60>)
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	d00a      	beq.n	801ff00 <vTaskDelay+0x30>
	__asm volatile
 801feea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801feee:	f383 8811 	msr	BASEPRI, r3
 801fef2:	f3bf 8f6f 	isb	sy
 801fef6:	f3bf 8f4f 	dsb	sy
 801fefa:	60bb      	str	r3, [r7, #8]
}
 801fefc:	bf00      	nop
 801fefe:	e7fe      	b.n	801fefe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801ff00:	f000 f88a 	bl	8020018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ff04:	2100      	movs	r1, #0
 801ff06:	6878      	ldr	r0, [r7, #4]
 801ff08:	f000 fe0e 	bl	8020b28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801ff0c:	f000 f892 	bl	8020034 <xTaskResumeAll>
 801ff10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ff12:	68fb      	ldr	r3, [r7, #12]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d107      	bne.n	801ff28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801ff18:	4b06      	ldr	r3, [pc, #24]	; (801ff34 <vTaskDelay+0x64>)
 801ff1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ff1e:	601a      	str	r2, [r3, #0]
 801ff20:	f3bf 8f4f 	dsb	sy
 801ff24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ff28:	bf00      	nop
 801ff2a:	3710      	adds	r7, #16
 801ff2c:	46bd      	mov	sp, r7
 801ff2e:	bd80      	pop	{r7, pc}
 801ff30:	240052e0 	.word	0x240052e0
 801ff34:	e000ed04 	.word	0xe000ed04

0801ff38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801ff38:	b580      	push	{r7, lr}
 801ff3a:	b08a      	sub	sp, #40	; 0x28
 801ff3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801ff3e:	2300      	movs	r3, #0
 801ff40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801ff42:	2300      	movs	r3, #0
 801ff44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801ff46:	463a      	mov	r2, r7
 801ff48:	1d39      	adds	r1, r7, #4
 801ff4a:	f107 0308 	add.w	r3, r7, #8
 801ff4e:	4618      	mov	r0, r3
 801ff50:	f7fe fd10 	bl	801e974 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ff54:	6839      	ldr	r1, [r7, #0]
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	68ba      	ldr	r2, [r7, #8]
 801ff5a:	9202      	str	r2, [sp, #8]
 801ff5c:	9301      	str	r3, [sp, #4]
 801ff5e:	2300      	movs	r3, #0
 801ff60:	9300      	str	r3, [sp, #0]
 801ff62:	2300      	movs	r3, #0
 801ff64:	460a      	mov	r2, r1
 801ff66:	4924      	ldr	r1, [pc, #144]	; (801fff8 <vTaskStartScheduler+0xc0>)
 801ff68:	4824      	ldr	r0, [pc, #144]	; (801fffc <vTaskStartScheduler+0xc4>)
 801ff6a:	f7ff fdf9 	bl	801fb60 <xTaskCreateStatic>
 801ff6e:	4603      	mov	r3, r0
 801ff70:	4a23      	ldr	r2, [pc, #140]	; (8020000 <vTaskStartScheduler+0xc8>)
 801ff72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801ff74:	4b22      	ldr	r3, [pc, #136]	; (8020000 <vTaskStartScheduler+0xc8>)
 801ff76:	681b      	ldr	r3, [r3, #0]
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	d002      	beq.n	801ff82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801ff7c:	2301      	movs	r3, #1
 801ff7e:	617b      	str	r3, [r7, #20]
 801ff80:	e001      	b.n	801ff86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801ff82:	2300      	movs	r3, #0
 801ff84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801ff86:	697b      	ldr	r3, [r7, #20]
 801ff88:	2b01      	cmp	r3, #1
 801ff8a:	d102      	bne.n	801ff92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801ff8c:	f000 fe20 	bl	8020bd0 <xTimerCreateTimerTask>
 801ff90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801ff92:	697b      	ldr	r3, [r7, #20]
 801ff94:	2b01      	cmp	r3, #1
 801ff96:	d11b      	bne.n	801ffd0 <vTaskStartScheduler+0x98>
	__asm volatile
 801ff98:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff9c:	f383 8811 	msr	BASEPRI, r3
 801ffa0:	f3bf 8f6f 	isb	sy
 801ffa4:	f3bf 8f4f 	dsb	sy
 801ffa8:	613b      	str	r3, [r7, #16]
}
 801ffaa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801ffac:	4b15      	ldr	r3, [pc, #84]	; (8020004 <vTaskStartScheduler+0xcc>)
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	3354      	adds	r3, #84	; 0x54
 801ffb2:	4a15      	ldr	r2, [pc, #84]	; (8020008 <vTaskStartScheduler+0xd0>)
 801ffb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801ffb6:	4b15      	ldr	r3, [pc, #84]	; (802000c <vTaskStartScheduler+0xd4>)
 801ffb8:	f04f 32ff 	mov.w	r2, #4294967295
 801ffbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801ffbe:	4b14      	ldr	r3, [pc, #80]	; (8020010 <vTaskStartScheduler+0xd8>)
 801ffc0:	2201      	movs	r2, #1
 801ffc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801ffc4:	4b13      	ldr	r3, [pc, #76]	; (8020014 <vTaskStartScheduler+0xdc>)
 801ffc6:	2200      	movs	r2, #0
 801ffc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801ffca:	f001 fac1 	bl	8021550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801ffce:	e00e      	b.n	801ffee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801ffd0:	697b      	ldr	r3, [r7, #20]
 801ffd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ffd6:	d10a      	bne.n	801ffee <vTaskStartScheduler+0xb6>
	__asm volatile
 801ffd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ffdc:	f383 8811 	msr	BASEPRI, r3
 801ffe0:	f3bf 8f6f 	isb	sy
 801ffe4:	f3bf 8f4f 	dsb	sy
 801ffe8:	60fb      	str	r3, [r7, #12]
}
 801ffea:	bf00      	nop
 801ffec:	e7fe      	b.n	801ffec <vTaskStartScheduler+0xb4>
}
 801ffee:	bf00      	nop
 801fff0:	3718      	adds	r7, #24
 801fff2:	46bd      	mov	sp, r7
 801fff4:	bd80      	pop	{r7, pc}
 801fff6:	bf00      	nop
 801fff8:	08027b34 	.word	0x08027b34
 801fffc:	08020661 	.word	0x08020661
 8020000:	240052dc 	.word	0x240052dc
 8020004:	24004de4 	.word	0x24004de4
 8020008:	240002f8 	.word	0x240002f8
 802000c:	240052d8 	.word	0x240052d8
 8020010:	240052c4 	.word	0x240052c4
 8020014:	240052bc 	.word	0x240052bc

08020018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8020018:	b480      	push	{r7}
 802001a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 802001c:	4b04      	ldr	r3, [pc, #16]	; (8020030 <vTaskSuspendAll+0x18>)
 802001e:	681b      	ldr	r3, [r3, #0]
 8020020:	3301      	adds	r3, #1
 8020022:	4a03      	ldr	r2, [pc, #12]	; (8020030 <vTaskSuspendAll+0x18>)
 8020024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8020026:	bf00      	nop
 8020028:	46bd      	mov	sp, r7
 802002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802002e:	4770      	bx	lr
 8020030:	240052e0 	.word	0x240052e0

08020034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8020034:	b580      	push	{r7, lr}
 8020036:	b084      	sub	sp, #16
 8020038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802003a:	2300      	movs	r3, #0
 802003c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 802003e:	2300      	movs	r3, #0
 8020040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8020042:	4b42      	ldr	r3, [pc, #264]	; (802014c <xTaskResumeAll+0x118>)
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	2b00      	cmp	r3, #0
 8020048:	d10a      	bne.n	8020060 <xTaskResumeAll+0x2c>
	__asm volatile
 802004a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802004e:	f383 8811 	msr	BASEPRI, r3
 8020052:	f3bf 8f6f 	isb	sy
 8020056:	f3bf 8f4f 	dsb	sy
 802005a:	603b      	str	r3, [r7, #0]
}
 802005c:	bf00      	nop
 802005e:	e7fe      	b.n	802005e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8020060:	f001 fb18 	bl	8021694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8020064:	4b39      	ldr	r3, [pc, #228]	; (802014c <xTaskResumeAll+0x118>)
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	3b01      	subs	r3, #1
 802006a:	4a38      	ldr	r2, [pc, #224]	; (802014c <xTaskResumeAll+0x118>)
 802006c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802006e:	4b37      	ldr	r3, [pc, #220]	; (802014c <xTaskResumeAll+0x118>)
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d162      	bne.n	802013c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8020076:	4b36      	ldr	r3, [pc, #216]	; (8020150 <xTaskResumeAll+0x11c>)
 8020078:	681b      	ldr	r3, [r3, #0]
 802007a:	2b00      	cmp	r3, #0
 802007c:	d05e      	beq.n	802013c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 802007e:	e02f      	b.n	80200e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020080:	4b34      	ldr	r3, [pc, #208]	; (8020154 <xTaskResumeAll+0x120>)
 8020082:	68db      	ldr	r3, [r3, #12]
 8020084:	68db      	ldr	r3, [r3, #12]
 8020086:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8020088:	68fb      	ldr	r3, [r7, #12]
 802008a:	3318      	adds	r3, #24
 802008c:	4618      	mov	r0, r3
 802008e:	f7fe fd2f 	bl	801eaf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020092:	68fb      	ldr	r3, [r7, #12]
 8020094:	3304      	adds	r3, #4
 8020096:	4618      	mov	r0, r3
 8020098:	f7fe fd2a 	bl	801eaf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 802009c:	68fb      	ldr	r3, [r7, #12]
 802009e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80200a0:	4b2d      	ldr	r3, [pc, #180]	; (8020158 <xTaskResumeAll+0x124>)
 80200a2:	681b      	ldr	r3, [r3, #0]
 80200a4:	429a      	cmp	r2, r3
 80200a6:	d903      	bls.n	80200b0 <xTaskResumeAll+0x7c>
 80200a8:	68fb      	ldr	r3, [r7, #12]
 80200aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200ac:	4a2a      	ldr	r2, [pc, #168]	; (8020158 <xTaskResumeAll+0x124>)
 80200ae:	6013      	str	r3, [r2, #0]
 80200b0:	68fb      	ldr	r3, [r7, #12]
 80200b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80200b4:	4613      	mov	r3, r2
 80200b6:	009b      	lsls	r3, r3, #2
 80200b8:	4413      	add	r3, r2
 80200ba:	009b      	lsls	r3, r3, #2
 80200bc:	4a27      	ldr	r2, [pc, #156]	; (802015c <xTaskResumeAll+0x128>)
 80200be:	441a      	add	r2, r3
 80200c0:	68fb      	ldr	r3, [r7, #12]
 80200c2:	3304      	adds	r3, #4
 80200c4:	4619      	mov	r1, r3
 80200c6:	4610      	mov	r0, r2
 80200c8:	f7fe fcb5 	bl	801ea36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80200d0:	4b23      	ldr	r3, [pc, #140]	; (8020160 <xTaskResumeAll+0x12c>)
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200d6:	429a      	cmp	r2, r3
 80200d8:	d302      	bcc.n	80200e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80200da:	4b22      	ldr	r3, [pc, #136]	; (8020164 <xTaskResumeAll+0x130>)
 80200dc:	2201      	movs	r2, #1
 80200de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80200e0:	4b1c      	ldr	r3, [pc, #112]	; (8020154 <xTaskResumeAll+0x120>)
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d1cb      	bne.n	8020080 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80200e8:	68fb      	ldr	r3, [r7, #12]
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	d001      	beq.n	80200f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80200ee:	f000 fb71 	bl	80207d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80200f2:	4b1d      	ldr	r3, [pc, #116]	; (8020168 <xTaskResumeAll+0x134>)
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d010      	beq.n	8020120 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80200fe:	f000 f859 	bl	80201b4 <xTaskIncrementTick>
 8020102:	4603      	mov	r3, r0
 8020104:	2b00      	cmp	r3, #0
 8020106:	d002      	beq.n	802010e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8020108:	4b16      	ldr	r3, [pc, #88]	; (8020164 <xTaskResumeAll+0x130>)
 802010a:	2201      	movs	r2, #1
 802010c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 802010e:	687b      	ldr	r3, [r7, #4]
 8020110:	3b01      	subs	r3, #1
 8020112:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	2b00      	cmp	r3, #0
 8020118:	d1f1      	bne.n	80200fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 802011a:	4b13      	ldr	r3, [pc, #76]	; (8020168 <xTaskResumeAll+0x134>)
 802011c:	2200      	movs	r2, #0
 802011e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8020120:	4b10      	ldr	r3, [pc, #64]	; (8020164 <xTaskResumeAll+0x130>)
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	2b00      	cmp	r3, #0
 8020126:	d009      	beq.n	802013c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8020128:	2301      	movs	r3, #1
 802012a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 802012c:	4b0f      	ldr	r3, [pc, #60]	; (802016c <xTaskResumeAll+0x138>)
 802012e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020132:	601a      	str	r2, [r3, #0]
 8020134:	f3bf 8f4f 	dsb	sy
 8020138:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802013c:	f001 fada 	bl	80216f4 <vPortExitCritical>

	return xAlreadyYielded;
 8020140:	68bb      	ldr	r3, [r7, #8]
}
 8020142:	4618      	mov	r0, r3
 8020144:	3710      	adds	r7, #16
 8020146:	46bd      	mov	sp, r7
 8020148:	bd80      	pop	{r7, pc}
 802014a:	bf00      	nop
 802014c:	240052e0 	.word	0x240052e0
 8020150:	240052b8 	.word	0x240052b8
 8020154:	24005278 	.word	0x24005278
 8020158:	240052c0 	.word	0x240052c0
 802015c:	24004de8 	.word	0x24004de8
 8020160:	24004de4 	.word	0x24004de4
 8020164:	240052cc 	.word	0x240052cc
 8020168:	240052c8 	.word	0x240052c8
 802016c:	e000ed04 	.word	0xe000ed04

08020170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8020170:	b480      	push	{r7}
 8020172:	b083      	sub	sp, #12
 8020174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8020176:	4b05      	ldr	r3, [pc, #20]	; (802018c <xTaskGetTickCount+0x1c>)
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 802017c:	687b      	ldr	r3, [r7, #4]
}
 802017e:	4618      	mov	r0, r3
 8020180:	370c      	adds	r7, #12
 8020182:	46bd      	mov	sp, r7
 8020184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020188:	4770      	bx	lr
 802018a:	bf00      	nop
 802018c:	240052bc 	.word	0x240052bc

08020190 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8020190:	b580      	push	{r7, lr}
 8020192:	b082      	sub	sp, #8
 8020194:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020196:	f001 fb5f 	bl	8021858 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 802019a:	2300      	movs	r3, #0
 802019c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 802019e:	4b04      	ldr	r3, [pc, #16]	; (80201b0 <xTaskGetTickCountFromISR+0x20>)
 80201a0:	681b      	ldr	r3, [r3, #0]
 80201a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80201a4:	683b      	ldr	r3, [r7, #0]
}
 80201a6:	4618      	mov	r0, r3
 80201a8:	3708      	adds	r7, #8
 80201aa:	46bd      	mov	sp, r7
 80201ac:	bd80      	pop	{r7, pc}
 80201ae:	bf00      	nop
 80201b0:	240052bc 	.word	0x240052bc

080201b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80201b4:	b580      	push	{r7, lr}
 80201b6:	b086      	sub	sp, #24
 80201b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80201ba:	2300      	movs	r3, #0
 80201bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80201be:	4b4f      	ldr	r3, [pc, #316]	; (80202fc <xTaskIncrementTick+0x148>)
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	f040 808f 	bne.w	80202e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80201c8:	4b4d      	ldr	r3, [pc, #308]	; (8020300 <xTaskIncrementTick+0x14c>)
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	3301      	adds	r3, #1
 80201ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80201d0:	4a4b      	ldr	r2, [pc, #300]	; (8020300 <xTaskIncrementTick+0x14c>)
 80201d2:	693b      	ldr	r3, [r7, #16]
 80201d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80201d6:	693b      	ldr	r3, [r7, #16]
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d120      	bne.n	802021e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80201dc:	4b49      	ldr	r3, [pc, #292]	; (8020304 <xTaskIncrementTick+0x150>)
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d00a      	beq.n	80201fc <xTaskIncrementTick+0x48>
	__asm volatile
 80201e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80201ea:	f383 8811 	msr	BASEPRI, r3
 80201ee:	f3bf 8f6f 	isb	sy
 80201f2:	f3bf 8f4f 	dsb	sy
 80201f6:	603b      	str	r3, [r7, #0]
}
 80201f8:	bf00      	nop
 80201fa:	e7fe      	b.n	80201fa <xTaskIncrementTick+0x46>
 80201fc:	4b41      	ldr	r3, [pc, #260]	; (8020304 <xTaskIncrementTick+0x150>)
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	60fb      	str	r3, [r7, #12]
 8020202:	4b41      	ldr	r3, [pc, #260]	; (8020308 <xTaskIncrementTick+0x154>)
 8020204:	681b      	ldr	r3, [r3, #0]
 8020206:	4a3f      	ldr	r2, [pc, #252]	; (8020304 <xTaskIncrementTick+0x150>)
 8020208:	6013      	str	r3, [r2, #0]
 802020a:	4a3f      	ldr	r2, [pc, #252]	; (8020308 <xTaskIncrementTick+0x154>)
 802020c:	68fb      	ldr	r3, [r7, #12]
 802020e:	6013      	str	r3, [r2, #0]
 8020210:	4b3e      	ldr	r3, [pc, #248]	; (802030c <xTaskIncrementTick+0x158>)
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	3301      	adds	r3, #1
 8020216:	4a3d      	ldr	r2, [pc, #244]	; (802030c <xTaskIncrementTick+0x158>)
 8020218:	6013      	str	r3, [r2, #0]
 802021a:	f000 fadb 	bl	80207d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802021e:	4b3c      	ldr	r3, [pc, #240]	; (8020310 <xTaskIncrementTick+0x15c>)
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	693a      	ldr	r2, [r7, #16]
 8020224:	429a      	cmp	r2, r3
 8020226:	d349      	bcc.n	80202bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8020228:	4b36      	ldr	r3, [pc, #216]	; (8020304 <xTaskIncrementTick+0x150>)
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	681b      	ldr	r3, [r3, #0]
 802022e:	2b00      	cmp	r3, #0
 8020230:	d104      	bne.n	802023c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020232:	4b37      	ldr	r3, [pc, #220]	; (8020310 <xTaskIncrementTick+0x15c>)
 8020234:	f04f 32ff 	mov.w	r2, #4294967295
 8020238:	601a      	str	r2, [r3, #0]
					break;
 802023a:	e03f      	b.n	80202bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802023c:	4b31      	ldr	r3, [pc, #196]	; (8020304 <xTaskIncrementTick+0x150>)
 802023e:	681b      	ldr	r3, [r3, #0]
 8020240:	68db      	ldr	r3, [r3, #12]
 8020242:	68db      	ldr	r3, [r3, #12]
 8020244:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8020246:	68bb      	ldr	r3, [r7, #8]
 8020248:	685b      	ldr	r3, [r3, #4]
 802024a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802024c:	693a      	ldr	r2, [r7, #16]
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	429a      	cmp	r2, r3
 8020252:	d203      	bcs.n	802025c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8020254:	4a2e      	ldr	r2, [pc, #184]	; (8020310 <xTaskIncrementTick+0x15c>)
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802025a:	e02f      	b.n	80202bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802025c:	68bb      	ldr	r3, [r7, #8]
 802025e:	3304      	adds	r3, #4
 8020260:	4618      	mov	r0, r3
 8020262:	f7fe fc45 	bl	801eaf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8020266:	68bb      	ldr	r3, [r7, #8]
 8020268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802026a:	2b00      	cmp	r3, #0
 802026c:	d004      	beq.n	8020278 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802026e:	68bb      	ldr	r3, [r7, #8]
 8020270:	3318      	adds	r3, #24
 8020272:	4618      	mov	r0, r3
 8020274:	f7fe fc3c 	bl	801eaf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8020278:	68bb      	ldr	r3, [r7, #8]
 802027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802027c:	4b25      	ldr	r3, [pc, #148]	; (8020314 <xTaskIncrementTick+0x160>)
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	429a      	cmp	r2, r3
 8020282:	d903      	bls.n	802028c <xTaskIncrementTick+0xd8>
 8020284:	68bb      	ldr	r3, [r7, #8]
 8020286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020288:	4a22      	ldr	r2, [pc, #136]	; (8020314 <xTaskIncrementTick+0x160>)
 802028a:	6013      	str	r3, [r2, #0]
 802028c:	68bb      	ldr	r3, [r7, #8]
 802028e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020290:	4613      	mov	r3, r2
 8020292:	009b      	lsls	r3, r3, #2
 8020294:	4413      	add	r3, r2
 8020296:	009b      	lsls	r3, r3, #2
 8020298:	4a1f      	ldr	r2, [pc, #124]	; (8020318 <xTaskIncrementTick+0x164>)
 802029a:	441a      	add	r2, r3
 802029c:	68bb      	ldr	r3, [r7, #8]
 802029e:	3304      	adds	r3, #4
 80202a0:	4619      	mov	r1, r3
 80202a2:	4610      	mov	r0, r2
 80202a4:	f7fe fbc7 	bl	801ea36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80202a8:	68bb      	ldr	r3, [r7, #8]
 80202aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80202ac:	4b1b      	ldr	r3, [pc, #108]	; (802031c <xTaskIncrementTick+0x168>)
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80202b2:	429a      	cmp	r2, r3
 80202b4:	d3b8      	bcc.n	8020228 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80202b6:	2301      	movs	r3, #1
 80202b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80202ba:	e7b5      	b.n	8020228 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80202bc:	4b17      	ldr	r3, [pc, #92]	; (802031c <xTaskIncrementTick+0x168>)
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80202c2:	4915      	ldr	r1, [pc, #84]	; (8020318 <xTaskIncrementTick+0x164>)
 80202c4:	4613      	mov	r3, r2
 80202c6:	009b      	lsls	r3, r3, #2
 80202c8:	4413      	add	r3, r2
 80202ca:	009b      	lsls	r3, r3, #2
 80202cc:	440b      	add	r3, r1
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	2b01      	cmp	r3, #1
 80202d2:	d901      	bls.n	80202d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80202d4:	2301      	movs	r3, #1
 80202d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80202d8:	4b11      	ldr	r3, [pc, #68]	; (8020320 <xTaskIncrementTick+0x16c>)
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	2b00      	cmp	r3, #0
 80202de:	d007      	beq.n	80202f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80202e0:	2301      	movs	r3, #1
 80202e2:	617b      	str	r3, [r7, #20]
 80202e4:	e004      	b.n	80202f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80202e6:	4b0f      	ldr	r3, [pc, #60]	; (8020324 <xTaskIncrementTick+0x170>)
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	3301      	adds	r3, #1
 80202ec:	4a0d      	ldr	r2, [pc, #52]	; (8020324 <xTaskIncrementTick+0x170>)
 80202ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80202f0:	697b      	ldr	r3, [r7, #20]
}
 80202f2:	4618      	mov	r0, r3
 80202f4:	3718      	adds	r7, #24
 80202f6:	46bd      	mov	sp, r7
 80202f8:	bd80      	pop	{r7, pc}
 80202fa:	bf00      	nop
 80202fc:	240052e0 	.word	0x240052e0
 8020300:	240052bc 	.word	0x240052bc
 8020304:	24005270 	.word	0x24005270
 8020308:	24005274 	.word	0x24005274
 802030c:	240052d0 	.word	0x240052d0
 8020310:	240052d8 	.word	0x240052d8
 8020314:	240052c0 	.word	0x240052c0
 8020318:	24004de8 	.word	0x24004de8
 802031c:	24004de4 	.word	0x24004de4
 8020320:	240052cc 	.word	0x240052cc
 8020324:	240052c8 	.word	0x240052c8

08020328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8020328:	b480      	push	{r7}
 802032a:	b085      	sub	sp, #20
 802032c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802032e:	4b2a      	ldr	r3, [pc, #168]	; (80203d8 <vTaskSwitchContext+0xb0>)
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d003      	beq.n	802033e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8020336:	4b29      	ldr	r3, [pc, #164]	; (80203dc <vTaskSwitchContext+0xb4>)
 8020338:	2201      	movs	r2, #1
 802033a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 802033c:	e046      	b.n	80203cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 802033e:	4b27      	ldr	r3, [pc, #156]	; (80203dc <vTaskSwitchContext+0xb4>)
 8020340:	2200      	movs	r2, #0
 8020342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020344:	4b26      	ldr	r3, [pc, #152]	; (80203e0 <vTaskSwitchContext+0xb8>)
 8020346:	681b      	ldr	r3, [r3, #0]
 8020348:	60fb      	str	r3, [r7, #12]
 802034a:	e010      	b.n	802036e <vTaskSwitchContext+0x46>
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	2b00      	cmp	r3, #0
 8020350:	d10a      	bne.n	8020368 <vTaskSwitchContext+0x40>
	__asm volatile
 8020352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020356:	f383 8811 	msr	BASEPRI, r3
 802035a:	f3bf 8f6f 	isb	sy
 802035e:	f3bf 8f4f 	dsb	sy
 8020362:	607b      	str	r3, [r7, #4]
}
 8020364:	bf00      	nop
 8020366:	e7fe      	b.n	8020366 <vTaskSwitchContext+0x3e>
 8020368:	68fb      	ldr	r3, [r7, #12]
 802036a:	3b01      	subs	r3, #1
 802036c:	60fb      	str	r3, [r7, #12]
 802036e:	491d      	ldr	r1, [pc, #116]	; (80203e4 <vTaskSwitchContext+0xbc>)
 8020370:	68fa      	ldr	r2, [r7, #12]
 8020372:	4613      	mov	r3, r2
 8020374:	009b      	lsls	r3, r3, #2
 8020376:	4413      	add	r3, r2
 8020378:	009b      	lsls	r3, r3, #2
 802037a:	440b      	add	r3, r1
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	2b00      	cmp	r3, #0
 8020380:	d0e4      	beq.n	802034c <vTaskSwitchContext+0x24>
 8020382:	68fa      	ldr	r2, [r7, #12]
 8020384:	4613      	mov	r3, r2
 8020386:	009b      	lsls	r3, r3, #2
 8020388:	4413      	add	r3, r2
 802038a:	009b      	lsls	r3, r3, #2
 802038c:	4a15      	ldr	r2, [pc, #84]	; (80203e4 <vTaskSwitchContext+0xbc>)
 802038e:	4413      	add	r3, r2
 8020390:	60bb      	str	r3, [r7, #8]
 8020392:	68bb      	ldr	r3, [r7, #8]
 8020394:	685b      	ldr	r3, [r3, #4]
 8020396:	685a      	ldr	r2, [r3, #4]
 8020398:	68bb      	ldr	r3, [r7, #8]
 802039a:	605a      	str	r2, [r3, #4]
 802039c:	68bb      	ldr	r3, [r7, #8]
 802039e:	685a      	ldr	r2, [r3, #4]
 80203a0:	68bb      	ldr	r3, [r7, #8]
 80203a2:	3308      	adds	r3, #8
 80203a4:	429a      	cmp	r2, r3
 80203a6:	d104      	bne.n	80203b2 <vTaskSwitchContext+0x8a>
 80203a8:	68bb      	ldr	r3, [r7, #8]
 80203aa:	685b      	ldr	r3, [r3, #4]
 80203ac:	685a      	ldr	r2, [r3, #4]
 80203ae:	68bb      	ldr	r3, [r7, #8]
 80203b0:	605a      	str	r2, [r3, #4]
 80203b2:	68bb      	ldr	r3, [r7, #8]
 80203b4:	685b      	ldr	r3, [r3, #4]
 80203b6:	68db      	ldr	r3, [r3, #12]
 80203b8:	4a0b      	ldr	r2, [pc, #44]	; (80203e8 <vTaskSwitchContext+0xc0>)
 80203ba:	6013      	str	r3, [r2, #0]
 80203bc:	4a08      	ldr	r2, [pc, #32]	; (80203e0 <vTaskSwitchContext+0xb8>)
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80203c2:	4b09      	ldr	r3, [pc, #36]	; (80203e8 <vTaskSwitchContext+0xc0>)
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	3354      	adds	r3, #84	; 0x54
 80203c8:	4a08      	ldr	r2, [pc, #32]	; (80203ec <vTaskSwitchContext+0xc4>)
 80203ca:	6013      	str	r3, [r2, #0]
}
 80203cc:	bf00      	nop
 80203ce:	3714      	adds	r7, #20
 80203d0:	46bd      	mov	sp, r7
 80203d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203d6:	4770      	bx	lr
 80203d8:	240052e0 	.word	0x240052e0
 80203dc:	240052cc 	.word	0x240052cc
 80203e0:	240052c0 	.word	0x240052c0
 80203e4:	24004de8 	.word	0x24004de8
 80203e8:	24004de4 	.word	0x24004de4
 80203ec:	240002f8 	.word	0x240002f8

080203f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80203f0:	b580      	push	{r7, lr}
 80203f2:	b084      	sub	sp, #16
 80203f4:	af00      	add	r7, sp, #0
 80203f6:	6078      	str	r0, [r7, #4]
 80203f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	d10a      	bne.n	8020416 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8020400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020404:	f383 8811 	msr	BASEPRI, r3
 8020408:	f3bf 8f6f 	isb	sy
 802040c:	f3bf 8f4f 	dsb	sy
 8020410:	60fb      	str	r3, [r7, #12]
}
 8020412:	bf00      	nop
 8020414:	e7fe      	b.n	8020414 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020416:	4b07      	ldr	r3, [pc, #28]	; (8020434 <vTaskPlaceOnEventList+0x44>)
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	3318      	adds	r3, #24
 802041c:	4619      	mov	r1, r3
 802041e:	6878      	ldr	r0, [r7, #4]
 8020420:	f7fe fb2d 	bl	801ea7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8020424:	2101      	movs	r1, #1
 8020426:	6838      	ldr	r0, [r7, #0]
 8020428:	f000 fb7e 	bl	8020b28 <prvAddCurrentTaskToDelayedList>
}
 802042c:	bf00      	nop
 802042e:	3710      	adds	r7, #16
 8020430:	46bd      	mov	sp, r7
 8020432:	bd80      	pop	{r7, pc}
 8020434:	24004de4 	.word	0x24004de4

08020438 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8020438:	b580      	push	{r7, lr}
 802043a:	b086      	sub	sp, #24
 802043c:	af00      	add	r7, sp, #0
 802043e:	60f8      	str	r0, [r7, #12]
 8020440:	60b9      	str	r1, [r7, #8]
 8020442:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8020444:	68fb      	ldr	r3, [r7, #12]
 8020446:	2b00      	cmp	r3, #0
 8020448:	d10a      	bne.n	8020460 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 802044a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802044e:	f383 8811 	msr	BASEPRI, r3
 8020452:	f3bf 8f6f 	isb	sy
 8020456:	f3bf 8f4f 	dsb	sy
 802045a:	617b      	str	r3, [r7, #20]
}
 802045c:	bf00      	nop
 802045e:	e7fe      	b.n	802045e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8020460:	4b0a      	ldr	r3, [pc, #40]	; (802048c <vTaskPlaceOnEventListRestricted+0x54>)
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	3318      	adds	r3, #24
 8020466:	4619      	mov	r1, r3
 8020468:	68f8      	ldr	r0, [r7, #12]
 802046a:	f7fe fae4 	bl	801ea36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	2b00      	cmp	r3, #0
 8020472:	d002      	beq.n	802047a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8020474:	f04f 33ff 	mov.w	r3, #4294967295
 8020478:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802047a:	6879      	ldr	r1, [r7, #4]
 802047c:	68b8      	ldr	r0, [r7, #8]
 802047e:	f000 fb53 	bl	8020b28 <prvAddCurrentTaskToDelayedList>
	}
 8020482:	bf00      	nop
 8020484:	3718      	adds	r7, #24
 8020486:	46bd      	mov	sp, r7
 8020488:	bd80      	pop	{r7, pc}
 802048a:	bf00      	nop
 802048c:	24004de4 	.word	0x24004de4

08020490 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8020490:	b580      	push	{r7, lr}
 8020492:	b086      	sub	sp, #24
 8020494:	af00      	add	r7, sp, #0
 8020496:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	68db      	ldr	r3, [r3, #12]
 802049c:	68db      	ldr	r3, [r3, #12]
 802049e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80204a0:	693b      	ldr	r3, [r7, #16]
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	d10a      	bne.n	80204bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80204a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80204aa:	f383 8811 	msr	BASEPRI, r3
 80204ae:	f3bf 8f6f 	isb	sy
 80204b2:	f3bf 8f4f 	dsb	sy
 80204b6:	60fb      	str	r3, [r7, #12]
}
 80204b8:	bf00      	nop
 80204ba:	e7fe      	b.n	80204ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80204bc:	693b      	ldr	r3, [r7, #16]
 80204be:	3318      	adds	r3, #24
 80204c0:	4618      	mov	r0, r3
 80204c2:	f7fe fb15 	bl	801eaf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80204c6:	4b1e      	ldr	r3, [pc, #120]	; (8020540 <xTaskRemoveFromEventList+0xb0>)
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	d11d      	bne.n	802050a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80204ce:	693b      	ldr	r3, [r7, #16]
 80204d0:	3304      	adds	r3, #4
 80204d2:	4618      	mov	r0, r3
 80204d4:	f7fe fb0c 	bl	801eaf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80204d8:	693b      	ldr	r3, [r7, #16]
 80204da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204dc:	4b19      	ldr	r3, [pc, #100]	; (8020544 <xTaskRemoveFromEventList+0xb4>)
 80204de:	681b      	ldr	r3, [r3, #0]
 80204e0:	429a      	cmp	r2, r3
 80204e2:	d903      	bls.n	80204ec <xTaskRemoveFromEventList+0x5c>
 80204e4:	693b      	ldr	r3, [r7, #16]
 80204e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204e8:	4a16      	ldr	r2, [pc, #88]	; (8020544 <xTaskRemoveFromEventList+0xb4>)
 80204ea:	6013      	str	r3, [r2, #0]
 80204ec:	693b      	ldr	r3, [r7, #16]
 80204ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204f0:	4613      	mov	r3, r2
 80204f2:	009b      	lsls	r3, r3, #2
 80204f4:	4413      	add	r3, r2
 80204f6:	009b      	lsls	r3, r3, #2
 80204f8:	4a13      	ldr	r2, [pc, #76]	; (8020548 <xTaskRemoveFromEventList+0xb8>)
 80204fa:	441a      	add	r2, r3
 80204fc:	693b      	ldr	r3, [r7, #16]
 80204fe:	3304      	adds	r3, #4
 8020500:	4619      	mov	r1, r3
 8020502:	4610      	mov	r0, r2
 8020504:	f7fe fa97 	bl	801ea36 <vListInsertEnd>
 8020508:	e005      	b.n	8020516 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 802050a:	693b      	ldr	r3, [r7, #16]
 802050c:	3318      	adds	r3, #24
 802050e:	4619      	mov	r1, r3
 8020510:	480e      	ldr	r0, [pc, #56]	; (802054c <xTaskRemoveFromEventList+0xbc>)
 8020512:	f7fe fa90 	bl	801ea36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8020516:	693b      	ldr	r3, [r7, #16]
 8020518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802051a:	4b0d      	ldr	r3, [pc, #52]	; (8020550 <xTaskRemoveFromEventList+0xc0>)
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020520:	429a      	cmp	r2, r3
 8020522:	d905      	bls.n	8020530 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8020524:	2301      	movs	r3, #1
 8020526:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8020528:	4b0a      	ldr	r3, [pc, #40]	; (8020554 <xTaskRemoveFromEventList+0xc4>)
 802052a:	2201      	movs	r2, #1
 802052c:	601a      	str	r2, [r3, #0]
 802052e:	e001      	b.n	8020534 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8020530:	2300      	movs	r3, #0
 8020532:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8020534:	697b      	ldr	r3, [r7, #20]
}
 8020536:	4618      	mov	r0, r3
 8020538:	3718      	adds	r7, #24
 802053a:	46bd      	mov	sp, r7
 802053c:	bd80      	pop	{r7, pc}
 802053e:	bf00      	nop
 8020540:	240052e0 	.word	0x240052e0
 8020544:	240052c0 	.word	0x240052c0
 8020548:	24004de8 	.word	0x24004de8
 802054c:	24005278 	.word	0x24005278
 8020550:	24004de4 	.word	0x24004de4
 8020554:	240052cc 	.word	0x240052cc

08020558 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8020558:	b480      	push	{r7}
 802055a:	b083      	sub	sp, #12
 802055c:	af00      	add	r7, sp, #0
 802055e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8020560:	4b06      	ldr	r3, [pc, #24]	; (802057c <vTaskInternalSetTimeOutState+0x24>)
 8020562:	681a      	ldr	r2, [r3, #0]
 8020564:	687b      	ldr	r3, [r7, #4]
 8020566:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8020568:	4b05      	ldr	r3, [pc, #20]	; (8020580 <vTaskInternalSetTimeOutState+0x28>)
 802056a:	681a      	ldr	r2, [r3, #0]
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	605a      	str	r2, [r3, #4]
}
 8020570:	bf00      	nop
 8020572:	370c      	adds	r7, #12
 8020574:	46bd      	mov	sp, r7
 8020576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802057a:	4770      	bx	lr
 802057c:	240052d0 	.word	0x240052d0
 8020580:	240052bc 	.word	0x240052bc

08020584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8020584:	b580      	push	{r7, lr}
 8020586:	b088      	sub	sp, #32
 8020588:	af00      	add	r7, sp, #0
 802058a:	6078      	str	r0, [r7, #4]
 802058c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	2b00      	cmp	r3, #0
 8020592:	d10a      	bne.n	80205aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8020594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020598:	f383 8811 	msr	BASEPRI, r3
 802059c:	f3bf 8f6f 	isb	sy
 80205a0:	f3bf 8f4f 	dsb	sy
 80205a4:	613b      	str	r3, [r7, #16]
}
 80205a6:	bf00      	nop
 80205a8:	e7fe      	b.n	80205a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80205aa:	683b      	ldr	r3, [r7, #0]
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d10a      	bne.n	80205c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80205b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80205b4:	f383 8811 	msr	BASEPRI, r3
 80205b8:	f3bf 8f6f 	isb	sy
 80205bc:	f3bf 8f4f 	dsb	sy
 80205c0:	60fb      	str	r3, [r7, #12]
}
 80205c2:	bf00      	nop
 80205c4:	e7fe      	b.n	80205c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80205c6:	f001 f865 	bl	8021694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80205ca:	4b1d      	ldr	r3, [pc, #116]	; (8020640 <xTaskCheckForTimeOut+0xbc>)
 80205cc:	681b      	ldr	r3, [r3, #0]
 80205ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	685b      	ldr	r3, [r3, #4]
 80205d4:	69ba      	ldr	r2, [r7, #24]
 80205d6:	1ad3      	subs	r3, r2, r3
 80205d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80205da:	683b      	ldr	r3, [r7, #0]
 80205dc:	681b      	ldr	r3, [r3, #0]
 80205de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80205e2:	d102      	bne.n	80205ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80205e4:	2300      	movs	r3, #0
 80205e6:	61fb      	str	r3, [r7, #28]
 80205e8:	e023      	b.n	8020632 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	681a      	ldr	r2, [r3, #0]
 80205ee:	4b15      	ldr	r3, [pc, #84]	; (8020644 <xTaskCheckForTimeOut+0xc0>)
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	429a      	cmp	r2, r3
 80205f4:	d007      	beq.n	8020606 <xTaskCheckForTimeOut+0x82>
 80205f6:	687b      	ldr	r3, [r7, #4]
 80205f8:	685b      	ldr	r3, [r3, #4]
 80205fa:	69ba      	ldr	r2, [r7, #24]
 80205fc:	429a      	cmp	r2, r3
 80205fe:	d302      	bcc.n	8020606 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8020600:	2301      	movs	r3, #1
 8020602:	61fb      	str	r3, [r7, #28]
 8020604:	e015      	b.n	8020632 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8020606:	683b      	ldr	r3, [r7, #0]
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	697a      	ldr	r2, [r7, #20]
 802060c:	429a      	cmp	r2, r3
 802060e:	d20b      	bcs.n	8020628 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8020610:	683b      	ldr	r3, [r7, #0]
 8020612:	681a      	ldr	r2, [r3, #0]
 8020614:	697b      	ldr	r3, [r7, #20]
 8020616:	1ad2      	subs	r2, r2, r3
 8020618:	683b      	ldr	r3, [r7, #0]
 802061a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 802061c:	6878      	ldr	r0, [r7, #4]
 802061e:	f7ff ff9b 	bl	8020558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8020622:	2300      	movs	r3, #0
 8020624:	61fb      	str	r3, [r7, #28]
 8020626:	e004      	b.n	8020632 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8020628:	683b      	ldr	r3, [r7, #0]
 802062a:	2200      	movs	r2, #0
 802062c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802062e:	2301      	movs	r3, #1
 8020630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8020632:	f001 f85f 	bl	80216f4 <vPortExitCritical>

	return xReturn;
 8020636:	69fb      	ldr	r3, [r7, #28]
}
 8020638:	4618      	mov	r0, r3
 802063a:	3720      	adds	r7, #32
 802063c:	46bd      	mov	sp, r7
 802063e:	bd80      	pop	{r7, pc}
 8020640:	240052bc 	.word	0x240052bc
 8020644:	240052d0 	.word	0x240052d0

08020648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8020648:	b480      	push	{r7}
 802064a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 802064c:	4b03      	ldr	r3, [pc, #12]	; (802065c <vTaskMissedYield+0x14>)
 802064e:	2201      	movs	r2, #1
 8020650:	601a      	str	r2, [r3, #0]
}
 8020652:	bf00      	nop
 8020654:	46bd      	mov	sp, r7
 8020656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802065a:	4770      	bx	lr
 802065c:	240052cc 	.word	0x240052cc

08020660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8020660:	b580      	push	{r7, lr}
 8020662:	b082      	sub	sp, #8
 8020664:	af00      	add	r7, sp, #0
 8020666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8020668:	f000 f852 	bl	8020710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802066c:	4b06      	ldr	r3, [pc, #24]	; (8020688 <prvIdleTask+0x28>)
 802066e:	681b      	ldr	r3, [r3, #0]
 8020670:	2b01      	cmp	r3, #1
 8020672:	d9f9      	bls.n	8020668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8020674:	4b05      	ldr	r3, [pc, #20]	; (802068c <prvIdleTask+0x2c>)
 8020676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802067a:	601a      	str	r2, [r3, #0]
 802067c:	f3bf 8f4f 	dsb	sy
 8020680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8020684:	e7f0      	b.n	8020668 <prvIdleTask+0x8>
 8020686:	bf00      	nop
 8020688:	24004de8 	.word	0x24004de8
 802068c:	e000ed04 	.word	0xe000ed04

08020690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8020690:	b580      	push	{r7, lr}
 8020692:	b082      	sub	sp, #8
 8020694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8020696:	2300      	movs	r3, #0
 8020698:	607b      	str	r3, [r7, #4]
 802069a:	e00c      	b.n	80206b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802069c:	687a      	ldr	r2, [r7, #4]
 802069e:	4613      	mov	r3, r2
 80206a0:	009b      	lsls	r3, r3, #2
 80206a2:	4413      	add	r3, r2
 80206a4:	009b      	lsls	r3, r3, #2
 80206a6:	4a12      	ldr	r2, [pc, #72]	; (80206f0 <prvInitialiseTaskLists+0x60>)
 80206a8:	4413      	add	r3, r2
 80206aa:	4618      	mov	r0, r3
 80206ac:	f7fe f996 	bl	801e9dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	3301      	adds	r3, #1
 80206b4:	607b      	str	r3, [r7, #4]
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	2b37      	cmp	r3, #55	; 0x37
 80206ba:	d9ef      	bls.n	802069c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80206bc:	480d      	ldr	r0, [pc, #52]	; (80206f4 <prvInitialiseTaskLists+0x64>)
 80206be:	f7fe f98d 	bl	801e9dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80206c2:	480d      	ldr	r0, [pc, #52]	; (80206f8 <prvInitialiseTaskLists+0x68>)
 80206c4:	f7fe f98a 	bl	801e9dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80206c8:	480c      	ldr	r0, [pc, #48]	; (80206fc <prvInitialiseTaskLists+0x6c>)
 80206ca:	f7fe f987 	bl	801e9dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80206ce:	480c      	ldr	r0, [pc, #48]	; (8020700 <prvInitialiseTaskLists+0x70>)
 80206d0:	f7fe f984 	bl	801e9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80206d4:	480b      	ldr	r0, [pc, #44]	; (8020704 <prvInitialiseTaskLists+0x74>)
 80206d6:	f7fe f981 	bl	801e9dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80206da:	4b0b      	ldr	r3, [pc, #44]	; (8020708 <prvInitialiseTaskLists+0x78>)
 80206dc:	4a05      	ldr	r2, [pc, #20]	; (80206f4 <prvInitialiseTaskLists+0x64>)
 80206de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80206e0:	4b0a      	ldr	r3, [pc, #40]	; (802070c <prvInitialiseTaskLists+0x7c>)
 80206e2:	4a05      	ldr	r2, [pc, #20]	; (80206f8 <prvInitialiseTaskLists+0x68>)
 80206e4:	601a      	str	r2, [r3, #0]
}
 80206e6:	bf00      	nop
 80206e8:	3708      	adds	r7, #8
 80206ea:	46bd      	mov	sp, r7
 80206ec:	bd80      	pop	{r7, pc}
 80206ee:	bf00      	nop
 80206f0:	24004de8 	.word	0x24004de8
 80206f4:	24005248 	.word	0x24005248
 80206f8:	2400525c 	.word	0x2400525c
 80206fc:	24005278 	.word	0x24005278
 8020700:	2400528c 	.word	0x2400528c
 8020704:	240052a4 	.word	0x240052a4
 8020708:	24005270 	.word	0x24005270
 802070c:	24005274 	.word	0x24005274

08020710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8020710:	b580      	push	{r7, lr}
 8020712:	b082      	sub	sp, #8
 8020714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8020716:	e019      	b.n	802074c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8020718:	f000 ffbc 	bl	8021694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802071c:	4b10      	ldr	r3, [pc, #64]	; (8020760 <prvCheckTasksWaitingTermination+0x50>)
 802071e:	68db      	ldr	r3, [r3, #12]
 8020720:	68db      	ldr	r3, [r3, #12]
 8020722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8020724:	687b      	ldr	r3, [r7, #4]
 8020726:	3304      	adds	r3, #4
 8020728:	4618      	mov	r0, r3
 802072a:	f7fe f9e1 	bl	801eaf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 802072e:	4b0d      	ldr	r3, [pc, #52]	; (8020764 <prvCheckTasksWaitingTermination+0x54>)
 8020730:	681b      	ldr	r3, [r3, #0]
 8020732:	3b01      	subs	r3, #1
 8020734:	4a0b      	ldr	r2, [pc, #44]	; (8020764 <prvCheckTasksWaitingTermination+0x54>)
 8020736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8020738:	4b0b      	ldr	r3, [pc, #44]	; (8020768 <prvCheckTasksWaitingTermination+0x58>)
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	3b01      	subs	r3, #1
 802073e:	4a0a      	ldr	r2, [pc, #40]	; (8020768 <prvCheckTasksWaitingTermination+0x58>)
 8020740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8020742:	f000 ffd7 	bl	80216f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8020746:	6878      	ldr	r0, [r7, #4]
 8020748:	f000 f810 	bl	802076c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802074c:	4b06      	ldr	r3, [pc, #24]	; (8020768 <prvCheckTasksWaitingTermination+0x58>)
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	2b00      	cmp	r3, #0
 8020752:	d1e1      	bne.n	8020718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8020754:	bf00      	nop
 8020756:	bf00      	nop
 8020758:	3708      	adds	r7, #8
 802075a:	46bd      	mov	sp, r7
 802075c:	bd80      	pop	{r7, pc}
 802075e:	bf00      	nop
 8020760:	2400528c 	.word	0x2400528c
 8020764:	240052b8 	.word	0x240052b8
 8020768:	240052a0 	.word	0x240052a0

0802076c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802076c:	b580      	push	{r7, lr}
 802076e:	b084      	sub	sp, #16
 8020770:	af00      	add	r7, sp, #0
 8020772:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	3354      	adds	r3, #84	; 0x54
 8020778:	4618      	mov	r0, r3
 802077a:	f002 fba5 	bl	8022ec8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8020784:	2b00      	cmp	r3, #0
 8020786:	d108      	bne.n	802079a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802078c:	4618      	mov	r0, r3
 802078e:	f001 f96f 	bl	8021a70 <vPortFree>
				vPortFree( pxTCB );
 8020792:	6878      	ldr	r0, [r7, #4]
 8020794:	f001 f96c 	bl	8021a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8020798:	e018      	b.n	80207cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80207a0:	2b01      	cmp	r3, #1
 80207a2:	d103      	bne.n	80207ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80207a4:	6878      	ldr	r0, [r7, #4]
 80207a6:	f001 f963 	bl	8021a70 <vPortFree>
	}
 80207aa:	e00f      	b.n	80207cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80207b2:	2b02      	cmp	r3, #2
 80207b4:	d00a      	beq.n	80207cc <prvDeleteTCB+0x60>
	__asm volatile
 80207b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207ba:	f383 8811 	msr	BASEPRI, r3
 80207be:	f3bf 8f6f 	isb	sy
 80207c2:	f3bf 8f4f 	dsb	sy
 80207c6:	60fb      	str	r3, [r7, #12]
}
 80207c8:	bf00      	nop
 80207ca:	e7fe      	b.n	80207ca <prvDeleteTCB+0x5e>
	}
 80207cc:	bf00      	nop
 80207ce:	3710      	adds	r7, #16
 80207d0:	46bd      	mov	sp, r7
 80207d2:	bd80      	pop	{r7, pc}

080207d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80207d4:	b480      	push	{r7}
 80207d6:	b083      	sub	sp, #12
 80207d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80207da:	4b0c      	ldr	r3, [pc, #48]	; (802080c <prvResetNextTaskUnblockTime+0x38>)
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	681b      	ldr	r3, [r3, #0]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d104      	bne.n	80207ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80207e4:	4b0a      	ldr	r3, [pc, #40]	; (8020810 <prvResetNextTaskUnblockTime+0x3c>)
 80207e6:	f04f 32ff 	mov.w	r2, #4294967295
 80207ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80207ec:	e008      	b.n	8020800 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80207ee:	4b07      	ldr	r3, [pc, #28]	; (802080c <prvResetNextTaskUnblockTime+0x38>)
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	68db      	ldr	r3, [r3, #12]
 80207f4:	68db      	ldr	r3, [r3, #12]
 80207f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80207f8:	687b      	ldr	r3, [r7, #4]
 80207fa:	685b      	ldr	r3, [r3, #4]
 80207fc:	4a04      	ldr	r2, [pc, #16]	; (8020810 <prvResetNextTaskUnblockTime+0x3c>)
 80207fe:	6013      	str	r3, [r2, #0]
}
 8020800:	bf00      	nop
 8020802:	370c      	adds	r7, #12
 8020804:	46bd      	mov	sp, r7
 8020806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802080a:	4770      	bx	lr
 802080c:	24005270 	.word	0x24005270
 8020810:	240052d8 	.word	0x240052d8

08020814 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8020814:	b480      	push	{r7}
 8020816:	b083      	sub	sp, #12
 8020818:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802081a:	4b0b      	ldr	r3, [pc, #44]	; (8020848 <xTaskGetSchedulerState+0x34>)
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	2b00      	cmp	r3, #0
 8020820:	d102      	bne.n	8020828 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8020822:	2301      	movs	r3, #1
 8020824:	607b      	str	r3, [r7, #4]
 8020826:	e008      	b.n	802083a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8020828:	4b08      	ldr	r3, [pc, #32]	; (802084c <xTaskGetSchedulerState+0x38>)
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	2b00      	cmp	r3, #0
 802082e:	d102      	bne.n	8020836 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8020830:	2302      	movs	r3, #2
 8020832:	607b      	str	r3, [r7, #4]
 8020834:	e001      	b.n	802083a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8020836:	2300      	movs	r3, #0
 8020838:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802083a:	687b      	ldr	r3, [r7, #4]
	}
 802083c:	4618      	mov	r0, r3
 802083e:	370c      	adds	r7, #12
 8020840:	46bd      	mov	sp, r7
 8020842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020846:	4770      	bx	lr
 8020848:	240052c4 	.word	0x240052c4
 802084c:	240052e0 	.word	0x240052e0

08020850 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8020850:	b580      	push	{r7, lr}
 8020852:	b084      	sub	sp, #16
 8020854:	af00      	add	r7, sp, #0
 8020856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 802085c:	2300      	movs	r3, #0
 802085e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	2b00      	cmp	r3, #0
 8020864:	d051      	beq.n	802090a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8020866:	68bb      	ldr	r3, [r7, #8]
 8020868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802086a:	4b2a      	ldr	r3, [pc, #168]	; (8020914 <xTaskPriorityInherit+0xc4>)
 802086c:	681b      	ldr	r3, [r3, #0]
 802086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020870:	429a      	cmp	r2, r3
 8020872:	d241      	bcs.n	80208f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8020874:	68bb      	ldr	r3, [r7, #8]
 8020876:	699b      	ldr	r3, [r3, #24]
 8020878:	2b00      	cmp	r3, #0
 802087a:	db06      	blt.n	802088a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802087c:	4b25      	ldr	r3, [pc, #148]	; (8020914 <xTaskPriorityInherit+0xc4>)
 802087e:	681b      	ldr	r3, [r3, #0]
 8020880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020882:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8020886:	68bb      	ldr	r3, [r7, #8]
 8020888:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 802088a:	68bb      	ldr	r3, [r7, #8]
 802088c:	6959      	ldr	r1, [r3, #20]
 802088e:	68bb      	ldr	r3, [r7, #8]
 8020890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020892:	4613      	mov	r3, r2
 8020894:	009b      	lsls	r3, r3, #2
 8020896:	4413      	add	r3, r2
 8020898:	009b      	lsls	r3, r3, #2
 802089a:	4a1f      	ldr	r2, [pc, #124]	; (8020918 <xTaskPriorityInherit+0xc8>)
 802089c:	4413      	add	r3, r2
 802089e:	4299      	cmp	r1, r3
 80208a0:	d122      	bne.n	80208e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80208a2:	68bb      	ldr	r3, [r7, #8]
 80208a4:	3304      	adds	r3, #4
 80208a6:	4618      	mov	r0, r3
 80208a8:	f7fe f922 	bl	801eaf0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80208ac:	4b19      	ldr	r3, [pc, #100]	; (8020914 <xTaskPriorityInherit+0xc4>)
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80208b2:	68bb      	ldr	r3, [r7, #8]
 80208b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80208b6:	68bb      	ldr	r3, [r7, #8]
 80208b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80208ba:	4b18      	ldr	r3, [pc, #96]	; (802091c <xTaskPriorityInherit+0xcc>)
 80208bc:	681b      	ldr	r3, [r3, #0]
 80208be:	429a      	cmp	r2, r3
 80208c0:	d903      	bls.n	80208ca <xTaskPriorityInherit+0x7a>
 80208c2:	68bb      	ldr	r3, [r7, #8]
 80208c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208c6:	4a15      	ldr	r2, [pc, #84]	; (802091c <xTaskPriorityInherit+0xcc>)
 80208c8:	6013      	str	r3, [r2, #0]
 80208ca:	68bb      	ldr	r3, [r7, #8]
 80208cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80208ce:	4613      	mov	r3, r2
 80208d0:	009b      	lsls	r3, r3, #2
 80208d2:	4413      	add	r3, r2
 80208d4:	009b      	lsls	r3, r3, #2
 80208d6:	4a10      	ldr	r2, [pc, #64]	; (8020918 <xTaskPriorityInherit+0xc8>)
 80208d8:	441a      	add	r2, r3
 80208da:	68bb      	ldr	r3, [r7, #8]
 80208dc:	3304      	adds	r3, #4
 80208de:	4619      	mov	r1, r3
 80208e0:	4610      	mov	r0, r2
 80208e2:	f7fe f8a8 	bl	801ea36 <vListInsertEnd>
 80208e6:	e004      	b.n	80208f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80208e8:	4b0a      	ldr	r3, [pc, #40]	; (8020914 <xTaskPriorityInherit+0xc4>)
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80208ee:	68bb      	ldr	r3, [r7, #8]
 80208f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80208f2:	2301      	movs	r3, #1
 80208f4:	60fb      	str	r3, [r7, #12]
 80208f6:	e008      	b.n	802090a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80208f8:	68bb      	ldr	r3, [r7, #8]
 80208fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80208fc:	4b05      	ldr	r3, [pc, #20]	; (8020914 <xTaskPriorityInherit+0xc4>)
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020902:	429a      	cmp	r2, r3
 8020904:	d201      	bcs.n	802090a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8020906:	2301      	movs	r3, #1
 8020908:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 802090a:	68fb      	ldr	r3, [r7, #12]
	}
 802090c:	4618      	mov	r0, r3
 802090e:	3710      	adds	r7, #16
 8020910:	46bd      	mov	sp, r7
 8020912:	bd80      	pop	{r7, pc}
 8020914:	24004de4 	.word	0x24004de4
 8020918:	24004de8 	.word	0x24004de8
 802091c:	240052c0 	.word	0x240052c0

08020920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8020920:	b580      	push	{r7, lr}
 8020922:	b086      	sub	sp, #24
 8020924:	af00      	add	r7, sp, #0
 8020926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 802092c:	2300      	movs	r3, #0
 802092e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8020930:	687b      	ldr	r3, [r7, #4]
 8020932:	2b00      	cmp	r3, #0
 8020934:	d056      	beq.n	80209e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8020936:	4b2e      	ldr	r3, [pc, #184]	; (80209f0 <xTaskPriorityDisinherit+0xd0>)
 8020938:	681b      	ldr	r3, [r3, #0]
 802093a:	693a      	ldr	r2, [r7, #16]
 802093c:	429a      	cmp	r2, r3
 802093e:	d00a      	beq.n	8020956 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8020940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020944:	f383 8811 	msr	BASEPRI, r3
 8020948:	f3bf 8f6f 	isb	sy
 802094c:	f3bf 8f4f 	dsb	sy
 8020950:	60fb      	str	r3, [r7, #12]
}
 8020952:	bf00      	nop
 8020954:	e7fe      	b.n	8020954 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8020956:	693b      	ldr	r3, [r7, #16]
 8020958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802095a:	2b00      	cmp	r3, #0
 802095c:	d10a      	bne.n	8020974 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020962:	f383 8811 	msr	BASEPRI, r3
 8020966:	f3bf 8f6f 	isb	sy
 802096a:	f3bf 8f4f 	dsb	sy
 802096e:	60bb      	str	r3, [r7, #8]
}
 8020970:	bf00      	nop
 8020972:	e7fe      	b.n	8020972 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8020974:	693b      	ldr	r3, [r7, #16]
 8020976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020978:	1e5a      	subs	r2, r3, #1
 802097a:	693b      	ldr	r3, [r7, #16]
 802097c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802097e:	693b      	ldr	r3, [r7, #16]
 8020980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020982:	693b      	ldr	r3, [r7, #16]
 8020984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020986:	429a      	cmp	r2, r3
 8020988:	d02c      	beq.n	80209e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802098a:	693b      	ldr	r3, [r7, #16]
 802098c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802098e:	2b00      	cmp	r3, #0
 8020990:	d128      	bne.n	80209e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020992:	693b      	ldr	r3, [r7, #16]
 8020994:	3304      	adds	r3, #4
 8020996:	4618      	mov	r0, r3
 8020998:	f7fe f8aa 	bl	801eaf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802099c:	693b      	ldr	r3, [r7, #16]
 802099e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80209a0:	693b      	ldr	r3, [r7, #16]
 80209a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80209a4:	693b      	ldr	r3, [r7, #16]
 80209a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80209ac:	693b      	ldr	r3, [r7, #16]
 80209ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80209b0:	693b      	ldr	r3, [r7, #16]
 80209b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209b4:	4b0f      	ldr	r3, [pc, #60]	; (80209f4 <xTaskPriorityDisinherit+0xd4>)
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	429a      	cmp	r2, r3
 80209ba:	d903      	bls.n	80209c4 <xTaskPriorityDisinherit+0xa4>
 80209bc:	693b      	ldr	r3, [r7, #16]
 80209be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209c0:	4a0c      	ldr	r2, [pc, #48]	; (80209f4 <xTaskPriorityDisinherit+0xd4>)
 80209c2:	6013      	str	r3, [r2, #0]
 80209c4:	693b      	ldr	r3, [r7, #16]
 80209c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209c8:	4613      	mov	r3, r2
 80209ca:	009b      	lsls	r3, r3, #2
 80209cc:	4413      	add	r3, r2
 80209ce:	009b      	lsls	r3, r3, #2
 80209d0:	4a09      	ldr	r2, [pc, #36]	; (80209f8 <xTaskPriorityDisinherit+0xd8>)
 80209d2:	441a      	add	r2, r3
 80209d4:	693b      	ldr	r3, [r7, #16]
 80209d6:	3304      	adds	r3, #4
 80209d8:	4619      	mov	r1, r3
 80209da:	4610      	mov	r0, r2
 80209dc:	f7fe f82b 	bl	801ea36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80209e0:	2301      	movs	r3, #1
 80209e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80209e4:	697b      	ldr	r3, [r7, #20]
	}
 80209e6:	4618      	mov	r0, r3
 80209e8:	3718      	adds	r7, #24
 80209ea:	46bd      	mov	sp, r7
 80209ec:	bd80      	pop	{r7, pc}
 80209ee:	bf00      	nop
 80209f0:	24004de4 	.word	0x24004de4
 80209f4:	240052c0 	.word	0x240052c0
 80209f8:	24004de8 	.word	0x24004de8

080209fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80209fc:	b580      	push	{r7, lr}
 80209fe:	b088      	sub	sp, #32
 8020a00:	af00      	add	r7, sp, #0
 8020a02:	6078      	str	r0, [r7, #4]
 8020a04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8020a06:	687b      	ldr	r3, [r7, #4]
 8020a08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8020a0a:	2301      	movs	r3, #1
 8020a0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	d06a      	beq.n	8020aea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8020a14:	69bb      	ldr	r3, [r7, #24]
 8020a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	d10a      	bne.n	8020a32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8020a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a20:	f383 8811 	msr	BASEPRI, r3
 8020a24:	f3bf 8f6f 	isb	sy
 8020a28:	f3bf 8f4f 	dsb	sy
 8020a2c:	60fb      	str	r3, [r7, #12]
}
 8020a2e:	bf00      	nop
 8020a30:	e7fe      	b.n	8020a30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8020a32:	69bb      	ldr	r3, [r7, #24]
 8020a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020a36:	683a      	ldr	r2, [r7, #0]
 8020a38:	429a      	cmp	r2, r3
 8020a3a:	d902      	bls.n	8020a42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8020a3c:	683b      	ldr	r3, [r7, #0]
 8020a3e:	61fb      	str	r3, [r7, #28]
 8020a40:	e002      	b.n	8020a48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8020a42:	69bb      	ldr	r3, [r7, #24]
 8020a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020a46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8020a48:	69bb      	ldr	r3, [r7, #24]
 8020a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a4c:	69fa      	ldr	r2, [r7, #28]
 8020a4e:	429a      	cmp	r2, r3
 8020a50:	d04b      	beq.n	8020aea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8020a52:	69bb      	ldr	r3, [r7, #24]
 8020a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020a56:	697a      	ldr	r2, [r7, #20]
 8020a58:	429a      	cmp	r2, r3
 8020a5a:	d146      	bne.n	8020aea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8020a5c:	4b25      	ldr	r3, [pc, #148]	; (8020af4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	69ba      	ldr	r2, [r7, #24]
 8020a62:	429a      	cmp	r2, r3
 8020a64:	d10a      	bne.n	8020a7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8020a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a6a:	f383 8811 	msr	BASEPRI, r3
 8020a6e:	f3bf 8f6f 	isb	sy
 8020a72:	f3bf 8f4f 	dsb	sy
 8020a76:	60bb      	str	r3, [r7, #8]
}
 8020a78:	bf00      	nop
 8020a7a:	e7fe      	b.n	8020a7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8020a7c:	69bb      	ldr	r3, [r7, #24]
 8020a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8020a82:	69bb      	ldr	r3, [r7, #24]
 8020a84:	69fa      	ldr	r2, [r7, #28]
 8020a86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8020a88:	69bb      	ldr	r3, [r7, #24]
 8020a8a:	699b      	ldr	r3, [r3, #24]
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	db04      	blt.n	8020a9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020a90:	69fb      	ldr	r3, [r7, #28]
 8020a92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8020a96:	69bb      	ldr	r3, [r7, #24]
 8020a98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8020a9a:	69bb      	ldr	r3, [r7, #24]
 8020a9c:	6959      	ldr	r1, [r3, #20]
 8020a9e:	693a      	ldr	r2, [r7, #16]
 8020aa0:	4613      	mov	r3, r2
 8020aa2:	009b      	lsls	r3, r3, #2
 8020aa4:	4413      	add	r3, r2
 8020aa6:	009b      	lsls	r3, r3, #2
 8020aa8:	4a13      	ldr	r2, [pc, #76]	; (8020af8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8020aaa:	4413      	add	r3, r2
 8020aac:	4299      	cmp	r1, r3
 8020aae:	d11c      	bne.n	8020aea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020ab0:	69bb      	ldr	r3, [r7, #24]
 8020ab2:	3304      	adds	r3, #4
 8020ab4:	4618      	mov	r0, r3
 8020ab6:	f7fe f81b 	bl	801eaf0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8020aba:	69bb      	ldr	r3, [r7, #24]
 8020abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020abe:	4b0f      	ldr	r3, [pc, #60]	; (8020afc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	429a      	cmp	r2, r3
 8020ac4:	d903      	bls.n	8020ace <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8020ac6:	69bb      	ldr	r3, [r7, #24]
 8020ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020aca:	4a0c      	ldr	r2, [pc, #48]	; (8020afc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8020acc:	6013      	str	r3, [r2, #0]
 8020ace:	69bb      	ldr	r3, [r7, #24]
 8020ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020ad2:	4613      	mov	r3, r2
 8020ad4:	009b      	lsls	r3, r3, #2
 8020ad6:	4413      	add	r3, r2
 8020ad8:	009b      	lsls	r3, r3, #2
 8020ada:	4a07      	ldr	r2, [pc, #28]	; (8020af8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8020adc:	441a      	add	r2, r3
 8020ade:	69bb      	ldr	r3, [r7, #24]
 8020ae0:	3304      	adds	r3, #4
 8020ae2:	4619      	mov	r1, r3
 8020ae4:	4610      	mov	r0, r2
 8020ae6:	f7fd ffa6 	bl	801ea36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8020aea:	bf00      	nop
 8020aec:	3720      	adds	r7, #32
 8020aee:	46bd      	mov	sp, r7
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	24004de4 	.word	0x24004de4
 8020af8:	24004de8 	.word	0x24004de8
 8020afc:	240052c0 	.word	0x240052c0

08020b00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8020b00:	b480      	push	{r7}
 8020b02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8020b04:	4b07      	ldr	r3, [pc, #28]	; (8020b24 <pvTaskIncrementMutexHeldCount+0x24>)
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d004      	beq.n	8020b16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8020b0c:	4b05      	ldr	r3, [pc, #20]	; (8020b24 <pvTaskIncrementMutexHeldCount+0x24>)
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020b12:	3201      	adds	r2, #1
 8020b14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8020b16:	4b03      	ldr	r3, [pc, #12]	; (8020b24 <pvTaskIncrementMutexHeldCount+0x24>)
 8020b18:	681b      	ldr	r3, [r3, #0]
	}
 8020b1a:	4618      	mov	r0, r3
 8020b1c:	46bd      	mov	sp, r7
 8020b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b22:	4770      	bx	lr
 8020b24:	24004de4 	.word	0x24004de4

08020b28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8020b28:	b580      	push	{r7, lr}
 8020b2a:	b084      	sub	sp, #16
 8020b2c:	af00      	add	r7, sp, #0
 8020b2e:	6078      	str	r0, [r7, #4]
 8020b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8020b32:	4b21      	ldr	r3, [pc, #132]	; (8020bb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8020b34:	681b      	ldr	r3, [r3, #0]
 8020b36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020b38:	4b20      	ldr	r3, [pc, #128]	; (8020bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8020b3a:	681b      	ldr	r3, [r3, #0]
 8020b3c:	3304      	adds	r3, #4
 8020b3e:	4618      	mov	r0, r3
 8020b40:	f7fd ffd6 	bl	801eaf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b4a:	d10a      	bne.n	8020b62 <prvAddCurrentTaskToDelayedList+0x3a>
 8020b4c:	683b      	ldr	r3, [r7, #0]
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	d007      	beq.n	8020b62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020b52:	4b1a      	ldr	r3, [pc, #104]	; (8020bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	3304      	adds	r3, #4
 8020b58:	4619      	mov	r1, r3
 8020b5a:	4819      	ldr	r0, [pc, #100]	; (8020bc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8020b5c:	f7fd ff6b 	bl	801ea36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8020b60:	e026      	b.n	8020bb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8020b62:	68fa      	ldr	r2, [r7, #12]
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	4413      	add	r3, r2
 8020b68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8020b6a:	4b14      	ldr	r3, [pc, #80]	; (8020bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8020b6c:	681b      	ldr	r3, [r3, #0]
 8020b6e:	68ba      	ldr	r2, [r7, #8]
 8020b70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8020b72:	68ba      	ldr	r2, [r7, #8]
 8020b74:	68fb      	ldr	r3, [r7, #12]
 8020b76:	429a      	cmp	r2, r3
 8020b78:	d209      	bcs.n	8020b8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020b7a:	4b12      	ldr	r3, [pc, #72]	; (8020bc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8020b7c:	681a      	ldr	r2, [r3, #0]
 8020b7e:	4b0f      	ldr	r3, [pc, #60]	; (8020bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8020b80:	681b      	ldr	r3, [r3, #0]
 8020b82:	3304      	adds	r3, #4
 8020b84:	4619      	mov	r1, r3
 8020b86:	4610      	mov	r0, r2
 8020b88:	f7fd ff79 	bl	801ea7e <vListInsert>
}
 8020b8c:	e010      	b.n	8020bb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020b8e:	4b0e      	ldr	r3, [pc, #56]	; (8020bc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8020b90:	681a      	ldr	r2, [r3, #0]
 8020b92:	4b0a      	ldr	r3, [pc, #40]	; (8020bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	3304      	adds	r3, #4
 8020b98:	4619      	mov	r1, r3
 8020b9a:	4610      	mov	r0, r2
 8020b9c:	f7fd ff6f 	bl	801ea7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8020ba0:	4b0a      	ldr	r3, [pc, #40]	; (8020bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	68ba      	ldr	r2, [r7, #8]
 8020ba6:	429a      	cmp	r2, r3
 8020ba8:	d202      	bcs.n	8020bb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8020baa:	4a08      	ldr	r2, [pc, #32]	; (8020bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8020bac:	68bb      	ldr	r3, [r7, #8]
 8020bae:	6013      	str	r3, [r2, #0]
}
 8020bb0:	bf00      	nop
 8020bb2:	3710      	adds	r7, #16
 8020bb4:	46bd      	mov	sp, r7
 8020bb6:	bd80      	pop	{r7, pc}
 8020bb8:	240052bc 	.word	0x240052bc
 8020bbc:	24004de4 	.word	0x24004de4
 8020bc0:	240052a4 	.word	0x240052a4
 8020bc4:	24005274 	.word	0x24005274
 8020bc8:	24005270 	.word	0x24005270
 8020bcc:	240052d8 	.word	0x240052d8

08020bd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8020bd0:	b580      	push	{r7, lr}
 8020bd2:	b08a      	sub	sp, #40	; 0x28
 8020bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8020bd6:	2300      	movs	r3, #0
 8020bd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8020bda:	f000 fba1 	bl	8021320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8020bde:	4b1c      	ldr	r3, [pc, #112]	; (8020c50 <xTimerCreateTimerTask+0x80>)
 8020be0:	681b      	ldr	r3, [r3, #0]
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	d021      	beq.n	8020c2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8020be6:	2300      	movs	r3, #0
 8020be8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8020bea:	2300      	movs	r3, #0
 8020bec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8020bee:	1d3a      	adds	r2, r7, #4
 8020bf0:	f107 0108 	add.w	r1, r7, #8
 8020bf4:	f107 030c 	add.w	r3, r7, #12
 8020bf8:	4618      	mov	r0, r3
 8020bfa:	f7fd fed5 	bl	801e9a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8020bfe:	6879      	ldr	r1, [r7, #4]
 8020c00:	68bb      	ldr	r3, [r7, #8]
 8020c02:	68fa      	ldr	r2, [r7, #12]
 8020c04:	9202      	str	r2, [sp, #8]
 8020c06:	9301      	str	r3, [sp, #4]
 8020c08:	2302      	movs	r3, #2
 8020c0a:	9300      	str	r3, [sp, #0]
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	460a      	mov	r2, r1
 8020c10:	4910      	ldr	r1, [pc, #64]	; (8020c54 <xTimerCreateTimerTask+0x84>)
 8020c12:	4811      	ldr	r0, [pc, #68]	; (8020c58 <xTimerCreateTimerTask+0x88>)
 8020c14:	f7fe ffa4 	bl	801fb60 <xTaskCreateStatic>
 8020c18:	4603      	mov	r3, r0
 8020c1a:	4a10      	ldr	r2, [pc, #64]	; (8020c5c <xTimerCreateTimerTask+0x8c>)
 8020c1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8020c1e:	4b0f      	ldr	r3, [pc, #60]	; (8020c5c <xTimerCreateTimerTask+0x8c>)
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d001      	beq.n	8020c2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8020c26:	2301      	movs	r3, #1
 8020c28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8020c2a:	697b      	ldr	r3, [r7, #20]
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d10a      	bne.n	8020c46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8020c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c34:	f383 8811 	msr	BASEPRI, r3
 8020c38:	f3bf 8f6f 	isb	sy
 8020c3c:	f3bf 8f4f 	dsb	sy
 8020c40:	613b      	str	r3, [r7, #16]
}
 8020c42:	bf00      	nop
 8020c44:	e7fe      	b.n	8020c44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8020c46:	697b      	ldr	r3, [r7, #20]
}
 8020c48:	4618      	mov	r0, r3
 8020c4a:	3718      	adds	r7, #24
 8020c4c:	46bd      	mov	sp, r7
 8020c4e:	bd80      	pop	{r7, pc}
 8020c50:	24005314 	.word	0x24005314
 8020c54:	08027b3c 	.word	0x08027b3c
 8020c58:	08020ec9 	.word	0x08020ec9
 8020c5c:	24005318 	.word	0x24005318

08020c60 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8020c60:	b580      	push	{r7, lr}
 8020c62:	b088      	sub	sp, #32
 8020c64:	af02      	add	r7, sp, #8
 8020c66:	60f8      	str	r0, [r7, #12]
 8020c68:	60b9      	str	r1, [r7, #8]
 8020c6a:	607a      	str	r2, [r7, #4]
 8020c6c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8020c6e:	202c      	movs	r0, #44	; 0x2c
 8020c70:	f000 fe32 	bl	80218d8 <pvPortMalloc>
 8020c74:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8020c76:	697b      	ldr	r3, [r7, #20]
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d00d      	beq.n	8020c98 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8020c7c:	697b      	ldr	r3, [r7, #20]
 8020c7e:	2200      	movs	r2, #0
 8020c80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8020c84:	697b      	ldr	r3, [r7, #20]
 8020c86:	9301      	str	r3, [sp, #4]
 8020c88:	6a3b      	ldr	r3, [r7, #32]
 8020c8a:	9300      	str	r3, [sp, #0]
 8020c8c:	683b      	ldr	r3, [r7, #0]
 8020c8e:	687a      	ldr	r2, [r7, #4]
 8020c90:	68b9      	ldr	r1, [r7, #8]
 8020c92:	68f8      	ldr	r0, [r7, #12]
 8020c94:	f000 f843 	bl	8020d1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8020c98:	697b      	ldr	r3, [r7, #20]
	}
 8020c9a:	4618      	mov	r0, r3
 8020c9c:	3718      	adds	r7, #24
 8020c9e:	46bd      	mov	sp, r7
 8020ca0:	bd80      	pop	{r7, pc}

08020ca2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8020ca2:	b580      	push	{r7, lr}
 8020ca4:	b08a      	sub	sp, #40	; 0x28
 8020ca6:	af02      	add	r7, sp, #8
 8020ca8:	60f8      	str	r0, [r7, #12]
 8020caa:	60b9      	str	r1, [r7, #8]
 8020cac:	607a      	str	r2, [r7, #4]
 8020cae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8020cb0:	232c      	movs	r3, #44	; 0x2c
 8020cb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8020cb4:	693b      	ldr	r3, [r7, #16]
 8020cb6:	2b2c      	cmp	r3, #44	; 0x2c
 8020cb8:	d00a      	beq.n	8020cd0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8020cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cbe:	f383 8811 	msr	BASEPRI, r3
 8020cc2:	f3bf 8f6f 	isb	sy
 8020cc6:	f3bf 8f4f 	dsb	sy
 8020cca:	61bb      	str	r3, [r7, #24]
}
 8020ccc:	bf00      	nop
 8020cce:	e7fe      	b.n	8020cce <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8020cd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8020cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cd4:	2b00      	cmp	r3, #0
 8020cd6:	d10a      	bne.n	8020cee <xTimerCreateStatic+0x4c>
	__asm volatile
 8020cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cdc:	f383 8811 	msr	BASEPRI, r3
 8020ce0:	f3bf 8f6f 	isb	sy
 8020ce4:	f3bf 8f4f 	dsb	sy
 8020ce8:	617b      	str	r3, [r7, #20]
}
 8020cea:	bf00      	nop
 8020cec:	e7fe      	b.n	8020cec <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8020cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cf0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8020cf2:	69fb      	ldr	r3, [r7, #28]
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	d00d      	beq.n	8020d14 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8020cf8:	69fb      	ldr	r3, [r7, #28]
 8020cfa:	2202      	movs	r2, #2
 8020cfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8020d00:	69fb      	ldr	r3, [r7, #28]
 8020d02:	9301      	str	r3, [sp, #4]
 8020d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d06:	9300      	str	r3, [sp, #0]
 8020d08:	683b      	ldr	r3, [r7, #0]
 8020d0a:	687a      	ldr	r2, [r7, #4]
 8020d0c:	68b9      	ldr	r1, [r7, #8]
 8020d0e:	68f8      	ldr	r0, [r7, #12]
 8020d10:	f000 f805 	bl	8020d1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8020d14:	69fb      	ldr	r3, [r7, #28]
	}
 8020d16:	4618      	mov	r0, r3
 8020d18:	3720      	adds	r7, #32
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	bd80      	pop	{r7, pc}

08020d1e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8020d1e:	b580      	push	{r7, lr}
 8020d20:	b086      	sub	sp, #24
 8020d22:	af00      	add	r7, sp, #0
 8020d24:	60f8      	str	r0, [r7, #12]
 8020d26:	60b9      	str	r1, [r7, #8]
 8020d28:	607a      	str	r2, [r7, #4]
 8020d2a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8020d2c:	68bb      	ldr	r3, [r7, #8]
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	d10a      	bne.n	8020d48 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8020d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d36:	f383 8811 	msr	BASEPRI, r3
 8020d3a:	f3bf 8f6f 	isb	sy
 8020d3e:	f3bf 8f4f 	dsb	sy
 8020d42:	617b      	str	r3, [r7, #20]
}
 8020d44:	bf00      	nop
 8020d46:	e7fe      	b.n	8020d46 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8020d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	d01e      	beq.n	8020d8c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8020d4e:	f000 fae7 	bl	8021320 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8020d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d54:	68fa      	ldr	r2, [r7, #12]
 8020d56:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8020d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d5a:	68ba      	ldr	r2, [r7, #8]
 8020d5c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8020d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d60:	683a      	ldr	r2, [r7, #0]
 8020d62:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8020d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d66:	6a3a      	ldr	r2, [r7, #32]
 8020d68:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8020d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d6c:	3304      	adds	r3, #4
 8020d6e:	4618      	mov	r0, r3
 8020d70:	f7fd fe54 	bl	801ea1c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d008      	beq.n	8020d8c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8020d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020d80:	f043 0304 	orr.w	r3, r3, #4
 8020d84:	b2da      	uxtb	r2, r3
 8020d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8020d8c:	bf00      	nop
 8020d8e:	3718      	adds	r7, #24
 8020d90:	46bd      	mov	sp, r7
 8020d92:	bd80      	pop	{r7, pc}

08020d94 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8020d94:	b580      	push	{r7, lr}
 8020d96:	b08a      	sub	sp, #40	; 0x28
 8020d98:	af00      	add	r7, sp, #0
 8020d9a:	60f8      	str	r0, [r7, #12]
 8020d9c:	60b9      	str	r1, [r7, #8]
 8020d9e:	607a      	str	r2, [r7, #4]
 8020da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8020da2:	2300      	movs	r3, #0
 8020da4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8020da6:	68fb      	ldr	r3, [r7, #12]
 8020da8:	2b00      	cmp	r3, #0
 8020daa:	d10a      	bne.n	8020dc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8020dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020db0:	f383 8811 	msr	BASEPRI, r3
 8020db4:	f3bf 8f6f 	isb	sy
 8020db8:	f3bf 8f4f 	dsb	sy
 8020dbc:	623b      	str	r3, [r7, #32]
}
 8020dbe:	bf00      	nop
 8020dc0:	e7fe      	b.n	8020dc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8020dc2:	4b1a      	ldr	r3, [pc, #104]	; (8020e2c <xTimerGenericCommand+0x98>)
 8020dc4:	681b      	ldr	r3, [r3, #0]
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d02a      	beq.n	8020e20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8020dca:	68bb      	ldr	r3, [r7, #8]
 8020dcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8020dce:	687b      	ldr	r3, [r7, #4]
 8020dd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8020dd2:	68fb      	ldr	r3, [r7, #12]
 8020dd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8020dd6:	68bb      	ldr	r3, [r7, #8]
 8020dd8:	2b05      	cmp	r3, #5
 8020dda:	dc18      	bgt.n	8020e0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020ddc:	f7ff fd1a 	bl	8020814 <xTaskGetSchedulerState>
 8020de0:	4603      	mov	r3, r0
 8020de2:	2b02      	cmp	r3, #2
 8020de4:	d109      	bne.n	8020dfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8020de6:	4b11      	ldr	r3, [pc, #68]	; (8020e2c <xTimerGenericCommand+0x98>)
 8020de8:	6818      	ldr	r0, [r3, #0]
 8020dea:	f107 0110 	add.w	r1, r7, #16
 8020dee:	2300      	movs	r3, #0
 8020df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020df2:	f7fe f84f 	bl	801ee94 <xQueueGenericSend>
 8020df6:	6278      	str	r0, [r7, #36]	; 0x24
 8020df8:	e012      	b.n	8020e20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8020dfa:	4b0c      	ldr	r3, [pc, #48]	; (8020e2c <xTimerGenericCommand+0x98>)
 8020dfc:	6818      	ldr	r0, [r3, #0]
 8020dfe:	f107 0110 	add.w	r1, r7, #16
 8020e02:	2300      	movs	r3, #0
 8020e04:	2200      	movs	r2, #0
 8020e06:	f7fe f845 	bl	801ee94 <xQueueGenericSend>
 8020e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8020e0c:	e008      	b.n	8020e20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8020e0e:	4b07      	ldr	r3, [pc, #28]	; (8020e2c <xTimerGenericCommand+0x98>)
 8020e10:	6818      	ldr	r0, [r3, #0]
 8020e12:	f107 0110 	add.w	r1, r7, #16
 8020e16:	2300      	movs	r3, #0
 8020e18:	683a      	ldr	r2, [r7, #0]
 8020e1a:	f7fe f939 	bl	801f090 <xQueueGenericSendFromISR>
 8020e1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8020e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020e22:	4618      	mov	r0, r3
 8020e24:	3728      	adds	r7, #40	; 0x28
 8020e26:	46bd      	mov	sp, r7
 8020e28:	bd80      	pop	{r7, pc}
 8020e2a:	bf00      	nop
 8020e2c:	24005314 	.word	0x24005314

08020e30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8020e30:	b580      	push	{r7, lr}
 8020e32:	b088      	sub	sp, #32
 8020e34:	af02      	add	r7, sp, #8
 8020e36:	6078      	str	r0, [r7, #4]
 8020e38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020e3a:	4b22      	ldr	r3, [pc, #136]	; (8020ec4 <prvProcessExpiredTimer+0x94>)
 8020e3c:	681b      	ldr	r3, [r3, #0]
 8020e3e:	68db      	ldr	r3, [r3, #12]
 8020e40:	68db      	ldr	r3, [r3, #12]
 8020e42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020e44:	697b      	ldr	r3, [r7, #20]
 8020e46:	3304      	adds	r3, #4
 8020e48:	4618      	mov	r0, r3
 8020e4a:	f7fd fe51 	bl	801eaf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020e4e:	697b      	ldr	r3, [r7, #20]
 8020e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020e54:	f003 0304 	and.w	r3, r3, #4
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d022      	beq.n	8020ea2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8020e5c:	697b      	ldr	r3, [r7, #20]
 8020e5e:	699a      	ldr	r2, [r3, #24]
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	18d1      	adds	r1, r2, r3
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	683a      	ldr	r2, [r7, #0]
 8020e68:	6978      	ldr	r0, [r7, #20]
 8020e6a:	f000 f8d1 	bl	8021010 <prvInsertTimerInActiveList>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d01f      	beq.n	8020eb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020e74:	2300      	movs	r3, #0
 8020e76:	9300      	str	r3, [sp, #0]
 8020e78:	2300      	movs	r3, #0
 8020e7a:	687a      	ldr	r2, [r7, #4]
 8020e7c:	2100      	movs	r1, #0
 8020e7e:	6978      	ldr	r0, [r7, #20]
 8020e80:	f7ff ff88 	bl	8020d94 <xTimerGenericCommand>
 8020e84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8020e86:	693b      	ldr	r3, [r7, #16]
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	d113      	bne.n	8020eb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8020e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e90:	f383 8811 	msr	BASEPRI, r3
 8020e94:	f3bf 8f6f 	isb	sy
 8020e98:	f3bf 8f4f 	dsb	sy
 8020e9c:	60fb      	str	r3, [r7, #12]
}
 8020e9e:	bf00      	nop
 8020ea0:	e7fe      	b.n	8020ea0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020ea2:	697b      	ldr	r3, [r7, #20]
 8020ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020ea8:	f023 0301 	bic.w	r3, r3, #1
 8020eac:	b2da      	uxtb	r2, r3
 8020eae:	697b      	ldr	r3, [r7, #20]
 8020eb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020eb4:	697b      	ldr	r3, [r7, #20]
 8020eb6:	6a1b      	ldr	r3, [r3, #32]
 8020eb8:	6978      	ldr	r0, [r7, #20]
 8020eba:	4798      	blx	r3
}
 8020ebc:	bf00      	nop
 8020ebe:	3718      	adds	r7, #24
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	bd80      	pop	{r7, pc}
 8020ec4:	2400530c 	.word	0x2400530c

08020ec8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	b084      	sub	sp, #16
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020ed0:	f107 0308 	add.w	r3, r7, #8
 8020ed4:	4618      	mov	r0, r3
 8020ed6:	f000 f857 	bl	8020f88 <prvGetNextExpireTime>
 8020eda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8020edc:	68bb      	ldr	r3, [r7, #8]
 8020ede:	4619      	mov	r1, r3
 8020ee0:	68f8      	ldr	r0, [r7, #12]
 8020ee2:	f000 f803 	bl	8020eec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8020ee6:	f000 f8d5 	bl	8021094 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020eea:	e7f1      	b.n	8020ed0 <prvTimerTask+0x8>

08020eec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8020eec:	b580      	push	{r7, lr}
 8020eee:	b084      	sub	sp, #16
 8020ef0:	af00      	add	r7, sp, #0
 8020ef2:	6078      	str	r0, [r7, #4]
 8020ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8020ef6:	f7ff f88f 	bl	8020018 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8020efa:	f107 0308 	add.w	r3, r7, #8
 8020efe:	4618      	mov	r0, r3
 8020f00:	f000 f866 	bl	8020fd0 <prvSampleTimeNow>
 8020f04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8020f06:	68bb      	ldr	r3, [r7, #8]
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d130      	bne.n	8020f6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8020f0c:	683b      	ldr	r3, [r7, #0]
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d10a      	bne.n	8020f28 <prvProcessTimerOrBlockTask+0x3c>
 8020f12:	687a      	ldr	r2, [r7, #4]
 8020f14:	68fb      	ldr	r3, [r7, #12]
 8020f16:	429a      	cmp	r2, r3
 8020f18:	d806      	bhi.n	8020f28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8020f1a:	f7ff f88b 	bl	8020034 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8020f1e:	68f9      	ldr	r1, [r7, #12]
 8020f20:	6878      	ldr	r0, [r7, #4]
 8020f22:	f7ff ff85 	bl	8020e30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8020f26:	e024      	b.n	8020f72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8020f28:	683b      	ldr	r3, [r7, #0]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d008      	beq.n	8020f40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8020f2e:	4b13      	ldr	r3, [pc, #76]	; (8020f7c <prvProcessTimerOrBlockTask+0x90>)
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d101      	bne.n	8020f3c <prvProcessTimerOrBlockTask+0x50>
 8020f38:	2301      	movs	r3, #1
 8020f3a:	e000      	b.n	8020f3e <prvProcessTimerOrBlockTask+0x52>
 8020f3c:	2300      	movs	r3, #0
 8020f3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8020f40:	4b0f      	ldr	r3, [pc, #60]	; (8020f80 <prvProcessTimerOrBlockTask+0x94>)
 8020f42:	6818      	ldr	r0, [r3, #0]
 8020f44:	687a      	ldr	r2, [r7, #4]
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	1ad3      	subs	r3, r2, r3
 8020f4a:	683a      	ldr	r2, [r7, #0]
 8020f4c:	4619      	mov	r1, r3
 8020f4e:	f7fe fdd3 	bl	801faf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8020f52:	f7ff f86f 	bl	8020034 <xTaskResumeAll>
 8020f56:	4603      	mov	r3, r0
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d10a      	bne.n	8020f72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8020f5c:	4b09      	ldr	r3, [pc, #36]	; (8020f84 <prvProcessTimerOrBlockTask+0x98>)
 8020f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020f62:	601a      	str	r2, [r3, #0]
 8020f64:	f3bf 8f4f 	dsb	sy
 8020f68:	f3bf 8f6f 	isb	sy
}
 8020f6c:	e001      	b.n	8020f72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8020f6e:	f7ff f861 	bl	8020034 <xTaskResumeAll>
}
 8020f72:	bf00      	nop
 8020f74:	3710      	adds	r7, #16
 8020f76:	46bd      	mov	sp, r7
 8020f78:	bd80      	pop	{r7, pc}
 8020f7a:	bf00      	nop
 8020f7c:	24005310 	.word	0x24005310
 8020f80:	24005314 	.word	0x24005314
 8020f84:	e000ed04 	.word	0xe000ed04

08020f88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8020f88:	b480      	push	{r7}
 8020f8a:	b085      	sub	sp, #20
 8020f8c:	af00      	add	r7, sp, #0
 8020f8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020f90:	4b0e      	ldr	r3, [pc, #56]	; (8020fcc <prvGetNextExpireTime+0x44>)
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	681b      	ldr	r3, [r3, #0]
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d101      	bne.n	8020f9e <prvGetNextExpireTime+0x16>
 8020f9a:	2201      	movs	r2, #1
 8020f9c:	e000      	b.n	8020fa0 <prvGetNextExpireTime+0x18>
 8020f9e:	2200      	movs	r2, #0
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	2b00      	cmp	r3, #0
 8020faa:	d105      	bne.n	8020fb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020fac:	4b07      	ldr	r3, [pc, #28]	; (8020fcc <prvGetNextExpireTime+0x44>)
 8020fae:	681b      	ldr	r3, [r3, #0]
 8020fb0:	68db      	ldr	r3, [r3, #12]
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	60fb      	str	r3, [r7, #12]
 8020fb6:	e001      	b.n	8020fbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8020fb8:	2300      	movs	r3, #0
 8020fba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8020fbc:	68fb      	ldr	r3, [r7, #12]
}
 8020fbe:	4618      	mov	r0, r3
 8020fc0:	3714      	adds	r7, #20
 8020fc2:	46bd      	mov	sp, r7
 8020fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fc8:	4770      	bx	lr
 8020fca:	bf00      	nop
 8020fcc:	2400530c 	.word	0x2400530c

08020fd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8020fd0:	b580      	push	{r7, lr}
 8020fd2:	b084      	sub	sp, #16
 8020fd4:	af00      	add	r7, sp, #0
 8020fd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8020fd8:	f7ff f8ca 	bl	8020170 <xTaskGetTickCount>
 8020fdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8020fde:	4b0b      	ldr	r3, [pc, #44]	; (802100c <prvSampleTimeNow+0x3c>)
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	68fa      	ldr	r2, [r7, #12]
 8020fe4:	429a      	cmp	r2, r3
 8020fe6:	d205      	bcs.n	8020ff4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8020fe8:	f000 f936 	bl	8021258 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	2201      	movs	r2, #1
 8020ff0:	601a      	str	r2, [r3, #0]
 8020ff2:	e002      	b.n	8020ffa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	2200      	movs	r2, #0
 8020ff8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8020ffa:	4a04      	ldr	r2, [pc, #16]	; (802100c <prvSampleTimeNow+0x3c>)
 8020ffc:	68fb      	ldr	r3, [r7, #12]
 8020ffe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8021000:	68fb      	ldr	r3, [r7, #12]
}
 8021002:	4618      	mov	r0, r3
 8021004:	3710      	adds	r7, #16
 8021006:	46bd      	mov	sp, r7
 8021008:	bd80      	pop	{r7, pc}
 802100a:	bf00      	nop
 802100c:	2400531c 	.word	0x2400531c

08021010 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8021010:	b580      	push	{r7, lr}
 8021012:	b086      	sub	sp, #24
 8021014:	af00      	add	r7, sp, #0
 8021016:	60f8      	str	r0, [r7, #12]
 8021018:	60b9      	str	r1, [r7, #8]
 802101a:	607a      	str	r2, [r7, #4]
 802101c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802101e:	2300      	movs	r3, #0
 8021020:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	68ba      	ldr	r2, [r7, #8]
 8021026:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	68fa      	ldr	r2, [r7, #12]
 802102c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802102e:	68ba      	ldr	r2, [r7, #8]
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	429a      	cmp	r2, r3
 8021034:	d812      	bhi.n	802105c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021036:	687a      	ldr	r2, [r7, #4]
 8021038:	683b      	ldr	r3, [r7, #0]
 802103a:	1ad2      	subs	r2, r2, r3
 802103c:	68fb      	ldr	r3, [r7, #12]
 802103e:	699b      	ldr	r3, [r3, #24]
 8021040:	429a      	cmp	r2, r3
 8021042:	d302      	bcc.n	802104a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8021044:	2301      	movs	r3, #1
 8021046:	617b      	str	r3, [r7, #20]
 8021048:	e01b      	b.n	8021082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802104a:	4b10      	ldr	r3, [pc, #64]	; (802108c <prvInsertTimerInActiveList+0x7c>)
 802104c:	681a      	ldr	r2, [r3, #0]
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	3304      	adds	r3, #4
 8021052:	4619      	mov	r1, r3
 8021054:	4610      	mov	r0, r2
 8021056:	f7fd fd12 	bl	801ea7e <vListInsert>
 802105a:	e012      	b.n	8021082 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802105c:	687a      	ldr	r2, [r7, #4]
 802105e:	683b      	ldr	r3, [r7, #0]
 8021060:	429a      	cmp	r2, r3
 8021062:	d206      	bcs.n	8021072 <prvInsertTimerInActiveList+0x62>
 8021064:	68ba      	ldr	r2, [r7, #8]
 8021066:	683b      	ldr	r3, [r7, #0]
 8021068:	429a      	cmp	r2, r3
 802106a:	d302      	bcc.n	8021072 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802106c:	2301      	movs	r3, #1
 802106e:	617b      	str	r3, [r7, #20]
 8021070:	e007      	b.n	8021082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8021072:	4b07      	ldr	r3, [pc, #28]	; (8021090 <prvInsertTimerInActiveList+0x80>)
 8021074:	681a      	ldr	r2, [r3, #0]
 8021076:	68fb      	ldr	r3, [r7, #12]
 8021078:	3304      	adds	r3, #4
 802107a:	4619      	mov	r1, r3
 802107c:	4610      	mov	r0, r2
 802107e:	f7fd fcfe 	bl	801ea7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8021082:	697b      	ldr	r3, [r7, #20]
}
 8021084:	4618      	mov	r0, r3
 8021086:	3718      	adds	r7, #24
 8021088:	46bd      	mov	sp, r7
 802108a:	bd80      	pop	{r7, pc}
 802108c:	24005310 	.word	0x24005310
 8021090:	2400530c 	.word	0x2400530c

08021094 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8021094:	b580      	push	{r7, lr}
 8021096:	b08e      	sub	sp, #56	; 0x38
 8021098:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802109a:	e0ca      	b.n	8021232 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802109c:	687b      	ldr	r3, [r7, #4]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	da18      	bge.n	80210d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80210a2:	1d3b      	adds	r3, r7, #4
 80210a4:	3304      	adds	r3, #4
 80210a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80210a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d10a      	bne.n	80210c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80210ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80210b2:	f383 8811 	msr	BASEPRI, r3
 80210b6:	f3bf 8f6f 	isb	sy
 80210ba:	f3bf 8f4f 	dsb	sy
 80210be:	61fb      	str	r3, [r7, #28]
}
 80210c0:	bf00      	nop
 80210c2:	e7fe      	b.n	80210c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80210c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80210ca:	6850      	ldr	r0, [r2, #4]
 80210cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80210ce:	6892      	ldr	r2, [r2, #8]
 80210d0:	4611      	mov	r1, r2
 80210d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	f2c0 80aa 	blt.w	8021230 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80210e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210e2:	695b      	ldr	r3, [r3, #20]
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	d004      	beq.n	80210f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80210e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80210ea:	3304      	adds	r3, #4
 80210ec:	4618      	mov	r0, r3
 80210ee:	f7fd fcff 	bl	801eaf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80210f2:	463b      	mov	r3, r7
 80210f4:	4618      	mov	r0, r3
 80210f6:	f7ff ff6b 	bl	8020fd0 <prvSampleTimeNow>
 80210fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	2b09      	cmp	r3, #9
 8021100:	f200 8097 	bhi.w	8021232 <prvProcessReceivedCommands+0x19e>
 8021104:	a201      	add	r2, pc, #4	; (adr r2, 802110c <prvProcessReceivedCommands+0x78>)
 8021106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802110a:	bf00      	nop
 802110c:	08021135 	.word	0x08021135
 8021110:	08021135 	.word	0x08021135
 8021114:	08021135 	.word	0x08021135
 8021118:	080211a9 	.word	0x080211a9
 802111c:	080211bd 	.word	0x080211bd
 8021120:	08021207 	.word	0x08021207
 8021124:	08021135 	.word	0x08021135
 8021128:	08021135 	.word	0x08021135
 802112c:	080211a9 	.word	0x080211a9
 8021130:	080211bd 	.word	0x080211bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8021134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802113a:	f043 0301 	orr.w	r3, r3, #1
 802113e:	b2da      	uxtb	r2, r3
 8021140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8021146:	68ba      	ldr	r2, [r7, #8]
 8021148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802114a:	699b      	ldr	r3, [r3, #24]
 802114c:	18d1      	adds	r1, r2, r3
 802114e:	68bb      	ldr	r3, [r7, #8]
 8021150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021154:	f7ff ff5c 	bl	8021010 <prvInsertTimerInActiveList>
 8021158:	4603      	mov	r3, r0
 802115a:	2b00      	cmp	r3, #0
 802115c:	d069      	beq.n	8021232 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021160:	6a1b      	ldr	r3, [r3, #32]
 8021162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021164:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802116c:	f003 0304 	and.w	r3, r3, #4
 8021170:	2b00      	cmp	r3, #0
 8021172:	d05e      	beq.n	8021232 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8021174:	68ba      	ldr	r2, [r7, #8]
 8021176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021178:	699b      	ldr	r3, [r3, #24]
 802117a:	441a      	add	r2, r3
 802117c:	2300      	movs	r3, #0
 802117e:	9300      	str	r3, [sp, #0]
 8021180:	2300      	movs	r3, #0
 8021182:	2100      	movs	r1, #0
 8021184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021186:	f7ff fe05 	bl	8020d94 <xTimerGenericCommand>
 802118a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802118c:	6a3b      	ldr	r3, [r7, #32]
 802118e:	2b00      	cmp	r3, #0
 8021190:	d14f      	bne.n	8021232 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8021192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021196:	f383 8811 	msr	BASEPRI, r3
 802119a:	f3bf 8f6f 	isb	sy
 802119e:	f3bf 8f4f 	dsb	sy
 80211a2:	61bb      	str	r3, [r7, #24]
}
 80211a4:	bf00      	nop
 80211a6:	e7fe      	b.n	80211a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80211a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80211ae:	f023 0301 	bic.w	r3, r3, #1
 80211b2:	b2da      	uxtb	r2, r3
 80211b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80211ba:	e03a      	b.n	8021232 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80211bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80211c2:	f043 0301 	orr.w	r3, r3, #1
 80211c6:	b2da      	uxtb	r2, r3
 80211c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80211ce:	68ba      	ldr	r2, [r7, #8]
 80211d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80211d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211d6:	699b      	ldr	r3, [r3, #24]
 80211d8:	2b00      	cmp	r3, #0
 80211da:	d10a      	bne.n	80211f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80211dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211e0:	f383 8811 	msr	BASEPRI, r3
 80211e4:	f3bf 8f6f 	isb	sy
 80211e8:	f3bf 8f4f 	dsb	sy
 80211ec:	617b      	str	r3, [r7, #20]
}
 80211ee:	bf00      	nop
 80211f0:	e7fe      	b.n	80211f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80211f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211f4:	699a      	ldr	r2, [r3, #24]
 80211f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211f8:	18d1      	adds	r1, r2, r3
 80211fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80211fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021200:	f7ff ff06 	bl	8021010 <prvInsertTimerInActiveList>
					break;
 8021204:	e015      	b.n	8021232 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8021206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802120c:	f003 0302 	and.w	r3, r3, #2
 8021210:	2b00      	cmp	r3, #0
 8021212:	d103      	bne.n	802121c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8021214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021216:	f000 fc2b 	bl	8021a70 <vPortFree>
 802121a:	e00a      	b.n	8021232 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802121e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021222:	f023 0301 	bic.w	r3, r3, #1
 8021226:	b2da      	uxtb	r2, r3
 8021228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802122a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802122e:	e000      	b.n	8021232 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8021230:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8021232:	4b08      	ldr	r3, [pc, #32]	; (8021254 <prvProcessReceivedCommands+0x1c0>)
 8021234:	681b      	ldr	r3, [r3, #0]
 8021236:	1d39      	adds	r1, r7, #4
 8021238:	2200      	movs	r2, #0
 802123a:	4618      	mov	r0, r3
 802123c:	f7fe f850 	bl	801f2e0 <xQueueReceive>
 8021240:	4603      	mov	r3, r0
 8021242:	2b00      	cmp	r3, #0
 8021244:	f47f af2a 	bne.w	802109c <prvProcessReceivedCommands+0x8>
	}
}
 8021248:	bf00      	nop
 802124a:	bf00      	nop
 802124c:	3730      	adds	r7, #48	; 0x30
 802124e:	46bd      	mov	sp, r7
 8021250:	bd80      	pop	{r7, pc}
 8021252:	bf00      	nop
 8021254:	24005314 	.word	0x24005314

08021258 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8021258:	b580      	push	{r7, lr}
 802125a:	b088      	sub	sp, #32
 802125c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802125e:	e048      	b.n	80212f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8021260:	4b2d      	ldr	r3, [pc, #180]	; (8021318 <prvSwitchTimerLists+0xc0>)
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	68db      	ldr	r3, [r3, #12]
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802126a:	4b2b      	ldr	r3, [pc, #172]	; (8021318 <prvSwitchTimerLists+0xc0>)
 802126c:	681b      	ldr	r3, [r3, #0]
 802126e:	68db      	ldr	r3, [r3, #12]
 8021270:	68db      	ldr	r3, [r3, #12]
 8021272:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8021274:	68fb      	ldr	r3, [r7, #12]
 8021276:	3304      	adds	r3, #4
 8021278:	4618      	mov	r0, r3
 802127a:	f7fd fc39 	bl	801eaf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802127e:	68fb      	ldr	r3, [r7, #12]
 8021280:	6a1b      	ldr	r3, [r3, #32]
 8021282:	68f8      	ldr	r0, [r7, #12]
 8021284:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8021286:	68fb      	ldr	r3, [r7, #12]
 8021288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802128c:	f003 0304 	and.w	r3, r3, #4
 8021290:	2b00      	cmp	r3, #0
 8021292:	d02e      	beq.n	80212f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8021294:	68fb      	ldr	r3, [r7, #12]
 8021296:	699b      	ldr	r3, [r3, #24]
 8021298:	693a      	ldr	r2, [r7, #16]
 802129a:	4413      	add	r3, r2
 802129c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802129e:	68ba      	ldr	r2, [r7, #8]
 80212a0:	693b      	ldr	r3, [r7, #16]
 80212a2:	429a      	cmp	r2, r3
 80212a4:	d90e      	bls.n	80212c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80212a6:	68fb      	ldr	r3, [r7, #12]
 80212a8:	68ba      	ldr	r2, [r7, #8]
 80212aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	68fa      	ldr	r2, [r7, #12]
 80212b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80212b2:	4b19      	ldr	r3, [pc, #100]	; (8021318 <prvSwitchTimerLists+0xc0>)
 80212b4:	681a      	ldr	r2, [r3, #0]
 80212b6:	68fb      	ldr	r3, [r7, #12]
 80212b8:	3304      	adds	r3, #4
 80212ba:	4619      	mov	r1, r3
 80212bc:	4610      	mov	r0, r2
 80212be:	f7fd fbde 	bl	801ea7e <vListInsert>
 80212c2:	e016      	b.n	80212f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80212c4:	2300      	movs	r3, #0
 80212c6:	9300      	str	r3, [sp, #0]
 80212c8:	2300      	movs	r3, #0
 80212ca:	693a      	ldr	r2, [r7, #16]
 80212cc:	2100      	movs	r1, #0
 80212ce:	68f8      	ldr	r0, [r7, #12]
 80212d0:	f7ff fd60 	bl	8020d94 <xTimerGenericCommand>
 80212d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d10a      	bne.n	80212f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80212dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80212e0:	f383 8811 	msr	BASEPRI, r3
 80212e4:	f3bf 8f6f 	isb	sy
 80212e8:	f3bf 8f4f 	dsb	sy
 80212ec:	603b      	str	r3, [r7, #0]
}
 80212ee:	bf00      	nop
 80212f0:	e7fe      	b.n	80212f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80212f2:	4b09      	ldr	r3, [pc, #36]	; (8021318 <prvSwitchTimerLists+0xc0>)
 80212f4:	681b      	ldr	r3, [r3, #0]
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d1b1      	bne.n	8021260 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80212fc:	4b06      	ldr	r3, [pc, #24]	; (8021318 <prvSwitchTimerLists+0xc0>)
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8021302:	4b06      	ldr	r3, [pc, #24]	; (802131c <prvSwitchTimerLists+0xc4>)
 8021304:	681b      	ldr	r3, [r3, #0]
 8021306:	4a04      	ldr	r2, [pc, #16]	; (8021318 <prvSwitchTimerLists+0xc0>)
 8021308:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802130a:	4a04      	ldr	r2, [pc, #16]	; (802131c <prvSwitchTimerLists+0xc4>)
 802130c:	697b      	ldr	r3, [r7, #20]
 802130e:	6013      	str	r3, [r2, #0]
}
 8021310:	bf00      	nop
 8021312:	3718      	adds	r7, #24
 8021314:	46bd      	mov	sp, r7
 8021316:	bd80      	pop	{r7, pc}
 8021318:	2400530c 	.word	0x2400530c
 802131c:	24005310 	.word	0x24005310

08021320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8021320:	b580      	push	{r7, lr}
 8021322:	b082      	sub	sp, #8
 8021324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8021326:	f000 f9b5 	bl	8021694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802132a:	4b15      	ldr	r3, [pc, #84]	; (8021380 <prvCheckForValidListAndQueue+0x60>)
 802132c:	681b      	ldr	r3, [r3, #0]
 802132e:	2b00      	cmp	r3, #0
 8021330:	d120      	bne.n	8021374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8021332:	4814      	ldr	r0, [pc, #80]	; (8021384 <prvCheckForValidListAndQueue+0x64>)
 8021334:	f7fd fb52 	bl	801e9dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8021338:	4813      	ldr	r0, [pc, #76]	; (8021388 <prvCheckForValidListAndQueue+0x68>)
 802133a:	f7fd fb4f 	bl	801e9dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802133e:	4b13      	ldr	r3, [pc, #76]	; (802138c <prvCheckForValidListAndQueue+0x6c>)
 8021340:	4a10      	ldr	r2, [pc, #64]	; (8021384 <prvCheckForValidListAndQueue+0x64>)
 8021342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8021344:	4b12      	ldr	r3, [pc, #72]	; (8021390 <prvCheckForValidListAndQueue+0x70>)
 8021346:	4a10      	ldr	r2, [pc, #64]	; (8021388 <prvCheckForValidListAndQueue+0x68>)
 8021348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802134a:	2300      	movs	r3, #0
 802134c:	9300      	str	r3, [sp, #0]
 802134e:	4b11      	ldr	r3, [pc, #68]	; (8021394 <prvCheckForValidListAndQueue+0x74>)
 8021350:	4a11      	ldr	r2, [pc, #68]	; (8021398 <prvCheckForValidListAndQueue+0x78>)
 8021352:	2110      	movs	r1, #16
 8021354:	200a      	movs	r0, #10
 8021356:	f7fd fc5d 	bl	801ec14 <xQueueGenericCreateStatic>
 802135a:	4603      	mov	r3, r0
 802135c:	4a08      	ldr	r2, [pc, #32]	; (8021380 <prvCheckForValidListAndQueue+0x60>)
 802135e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8021360:	4b07      	ldr	r3, [pc, #28]	; (8021380 <prvCheckForValidListAndQueue+0x60>)
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	2b00      	cmp	r3, #0
 8021366:	d005      	beq.n	8021374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8021368:	4b05      	ldr	r3, [pc, #20]	; (8021380 <prvCheckForValidListAndQueue+0x60>)
 802136a:	681b      	ldr	r3, [r3, #0]
 802136c:	490b      	ldr	r1, [pc, #44]	; (802139c <prvCheckForValidListAndQueue+0x7c>)
 802136e:	4618      	mov	r0, r3
 8021370:	f7fe fb6e 	bl	801fa50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021374:	f000 f9be 	bl	80216f4 <vPortExitCritical>
}
 8021378:	bf00      	nop
 802137a:	46bd      	mov	sp, r7
 802137c:	bd80      	pop	{r7, pc}
 802137e:	bf00      	nop
 8021380:	24005314 	.word	0x24005314
 8021384:	240052e4 	.word	0x240052e4
 8021388:	240052f8 	.word	0x240052f8
 802138c:	2400530c 	.word	0x2400530c
 8021390:	24005310 	.word	0x24005310
 8021394:	240053c0 	.word	0x240053c0
 8021398:	24005320 	.word	0x24005320
 802139c:	08027b44 	.word	0x08027b44

080213a0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80213a0:	b580      	push	{r7, lr}
 80213a2:	b086      	sub	sp, #24
 80213a4:	af00      	add	r7, sp, #0
 80213a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80213ac:	687b      	ldr	r3, [r7, #4]
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	d10a      	bne.n	80213c8 <xTimerIsTimerActive+0x28>
	__asm volatile
 80213b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80213b6:	f383 8811 	msr	BASEPRI, r3
 80213ba:	f3bf 8f6f 	isb	sy
 80213be:	f3bf 8f4f 	dsb	sy
 80213c2:	60fb      	str	r3, [r7, #12]
}
 80213c4:	bf00      	nop
 80213c6:	e7fe      	b.n	80213c6 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80213c8:	f000 f964 	bl	8021694 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80213cc:	693b      	ldr	r3, [r7, #16]
 80213ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80213d2:	f003 0301 	and.w	r3, r3, #1
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d102      	bne.n	80213e0 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 80213da:	2300      	movs	r3, #0
 80213dc:	617b      	str	r3, [r7, #20]
 80213de:	e001      	b.n	80213e4 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 80213e0:	2301      	movs	r3, #1
 80213e2:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80213e4:	f000 f986 	bl	80216f4 <vPortExitCritical>

	return xReturn;
 80213e8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80213ea:	4618      	mov	r0, r3
 80213ec:	3718      	adds	r7, #24
 80213ee:	46bd      	mov	sp, r7
 80213f0:	bd80      	pop	{r7, pc}

080213f2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80213f2:	b580      	push	{r7, lr}
 80213f4:	b086      	sub	sp, #24
 80213f6:	af00      	add	r7, sp, #0
 80213f8:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80213fe:	687b      	ldr	r3, [r7, #4]
 8021400:	2b00      	cmp	r3, #0
 8021402:	d10a      	bne.n	802141a <pvTimerGetTimerID+0x28>
	__asm volatile
 8021404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021408:	f383 8811 	msr	BASEPRI, r3
 802140c:	f3bf 8f6f 	isb	sy
 8021410:	f3bf 8f4f 	dsb	sy
 8021414:	60fb      	str	r3, [r7, #12]
}
 8021416:	bf00      	nop
 8021418:	e7fe      	b.n	8021418 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 802141a:	f000 f93b 	bl	8021694 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 802141e:	697b      	ldr	r3, [r7, #20]
 8021420:	69db      	ldr	r3, [r3, #28]
 8021422:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8021424:	f000 f966 	bl	80216f4 <vPortExitCritical>

	return pvReturn;
 8021428:	693b      	ldr	r3, [r7, #16]
}
 802142a:	4618      	mov	r0, r3
 802142c:	3718      	adds	r7, #24
 802142e:	46bd      	mov	sp, r7
 8021430:	bd80      	pop	{r7, pc}
	...

08021434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8021434:	b480      	push	{r7}
 8021436:	b085      	sub	sp, #20
 8021438:	af00      	add	r7, sp, #0
 802143a:	60f8      	str	r0, [r7, #12]
 802143c:	60b9      	str	r1, [r7, #8]
 802143e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8021440:	68fb      	ldr	r3, [r7, #12]
 8021442:	3b04      	subs	r3, #4
 8021444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8021446:	68fb      	ldr	r3, [r7, #12]
 8021448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802144c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802144e:	68fb      	ldr	r3, [r7, #12]
 8021450:	3b04      	subs	r3, #4
 8021452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8021454:	68bb      	ldr	r3, [r7, #8]
 8021456:	f023 0201 	bic.w	r2, r3, #1
 802145a:	68fb      	ldr	r3, [r7, #12]
 802145c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802145e:	68fb      	ldr	r3, [r7, #12]
 8021460:	3b04      	subs	r3, #4
 8021462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8021464:	4a0c      	ldr	r2, [pc, #48]	; (8021498 <pxPortInitialiseStack+0x64>)
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802146a:	68fb      	ldr	r3, [r7, #12]
 802146c:	3b14      	subs	r3, #20
 802146e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8021470:	687a      	ldr	r2, [r7, #4]
 8021472:	68fb      	ldr	r3, [r7, #12]
 8021474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8021476:	68fb      	ldr	r3, [r7, #12]
 8021478:	3b04      	subs	r3, #4
 802147a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802147c:	68fb      	ldr	r3, [r7, #12]
 802147e:	f06f 0202 	mvn.w	r2, #2
 8021482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8021484:	68fb      	ldr	r3, [r7, #12]
 8021486:	3b20      	subs	r3, #32
 8021488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802148a:	68fb      	ldr	r3, [r7, #12]
}
 802148c:	4618      	mov	r0, r3
 802148e:	3714      	adds	r7, #20
 8021490:	46bd      	mov	sp, r7
 8021492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021496:	4770      	bx	lr
 8021498:	0802149d 	.word	0x0802149d

0802149c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802149c:	b480      	push	{r7}
 802149e:	b085      	sub	sp, #20
 80214a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80214a2:	2300      	movs	r3, #0
 80214a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80214a6:	4b12      	ldr	r3, [pc, #72]	; (80214f0 <prvTaskExitError+0x54>)
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80214ae:	d00a      	beq.n	80214c6 <prvTaskExitError+0x2a>
	__asm volatile
 80214b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80214b4:	f383 8811 	msr	BASEPRI, r3
 80214b8:	f3bf 8f6f 	isb	sy
 80214bc:	f3bf 8f4f 	dsb	sy
 80214c0:	60fb      	str	r3, [r7, #12]
}
 80214c2:	bf00      	nop
 80214c4:	e7fe      	b.n	80214c4 <prvTaskExitError+0x28>
	__asm volatile
 80214c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80214ca:	f383 8811 	msr	BASEPRI, r3
 80214ce:	f3bf 8f6f 	isb	sy
 80214d2:	f3bf 8f4f 	dsb	sy
 80214d6:	60bb      	str	r3, [r7, #8]
}
 80214d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80214da:	bf00      	nop
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	2b00      	cmp	r3, #0
 80214e0:	d0fc      	beq.n	80214dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80214e2:	bf00      	nop
 80214e4:	bf00      	nop
 80214e6:	3714      	adds	r7, #20
 80214e8:	46bd      	mov	sp, r7
 80214ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ee:	4770      	bx	lr
 80214f0:	240002f4 	.word	0x240002f4
	...

08021500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8021500:	4b07      	ldr	r3, [pc, #28]	; (8021520 <pxCurrentTCBConst2>)
 8021502:	6819      	ldr	r1, [r3, #0]
 8021504:	6808      	ldr	r0, [r1, #0]
 8021506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802150a:	f380 8809 	msr	PSP, r0
 802150e:	f3bf 8f6f 	isb	sy
 8021512:	f04f 0000 	mov.w	r0, #0
 8021516:	f380 8811 	msr	BASEPRI, r0
 802151a:	4770      	bx	lr
 802151c:	f3af 8000 	nop.w

08021520 <pxCurrentTCBConst2>:
 8021520:	24004de4 	.word	0x24004de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8021524:	bf00      	nop
 8021526:	bf00      	nop

08021528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8021528:	4808      	ldr	r0, [pc, #32]	; (802154c <prvPortStartFirstTask+0x24>)
 802152a:	6800      	ldr	r0, [r0, #0]
 802152c:	6800      	ldr	r0, [r0, #0]
 802152e:	f380 8808 	msr	MSP, r0
 8021532:	f04f 0000 	mov.w	r0, #0
 8021536:	f380 8814 	msr	CONTROL, r0
 802153a:	b662      	cpsie	i
 802153c:	b661      	cpsie	f
 802153e:	f3bf 8f4f 	dsb	sy
 8021542:	f3bf 8f6f 	isb	sy
 8021546:	df00      	svc	0
 8021548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802154a:	bf00      	nop
 802154c:	e000ed08 	.word	0xe000ed08

08021550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8021550:	b580      	push	{r7, lr}
 8021552:	b086      	sub	sp, #24
 8021554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8021556:	4b46      	ldr	r3, [pc, #280]	; (8021670 <xPortStartScheduler+0x120>)
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	4a46      	ldr	r2, [pc, #280]	; (8021674 <xPortStartScheduler+0x124>)
 802155c:	4293      	cmp	r3, r2
 802155e:	d10a      	bne.n	8021576 <xPortStartScheduler+0x26>
	__asm volatile
 8021560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021564:	f383 8811 	msr	BASEPRI, r3
 8021568:	f3bf 8f6f 	isb	sy
 802156c:	f3bf 8f4f 	dsb	sy
 8021570:	613b      	str	r3, [r7, #16]
}
 8021572:	bf00      	nop
 8021574:	e7fe      	b.n	8021574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8021576:	4b3e      	ldr	r3, [pc, #248]	; (8021670 <xPortStartScheduler+0x120>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	4a3f      	ldr	r2, [pc, #252]	; (8021678 <xPortStartScheduler+0x128>)
 802157c:	4293      	cmp	r3, r2
 802157e:	d10a      	bne.n	8021596 <xPortStartScheduler+0x46>
	__asm volatile
 8021580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021584:	f383 8811 	msr	BASEPRI, r3
 8021588:	f3bf 8f6f 	isb	sy
 802158c:	f3bf 8f4f 	dsb	sy
 8021590:	60fb      	str	r3, [r7, #12]
}
 8021592:	bf00      	nop
 8021594:	e7fe      	b.n	8021594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8021596:	4b39      	ldr	r3, [pc, #228]	; (802167c <xPortStartScheduler+0x12c>)
 8021598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802159a:	697b      	ldr	r3, [r7, #20]
 802159c:	781b      	ldrb	r3, [r3, #0]
 802159e:	b2db      	uxtb	r3, r3
 80215a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80215a2:	697b      	ldr	r3, [r7, #20]
 80215a4:	22ff      	movs	r2, #255	; 0xff
 80215a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80215a8:	697b      	ldr	r3, [r7, #20]
 80215aa:	781b      	ldrb	r3, [r3, #0]
 80215ac:	b2db      	uxtb	r3, r3
 80215ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80215b0:	78fb      	ldrb	r3, [r7, #3]
 80215b2:	b2db      	uxtb	r3, r3
 80215b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80215b8:	b2da      	uxtb	r2, r3
 80215ba:	4b31      	ldr	r3, [pc, #196]	; (8021680 <xPortStartScheduler+0x130>)
 80215bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80215be:	4b31      	ldr	r3, [pc, #196]	; (8021684 <xPortStartScheduler+0x134>)
 80215c0:	2207      	movs	r2, #7
 80215c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80215c4:	e009      	b.n	80215da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80215c6:	4b2f      	ldr	r3, [pc, #188]	; (8021684 <xPortStartScheduler+0x134>)
 80215c8:	681b      	ldr	r3, [r3, #0]
 80215ca:	3b01      	subs	r3, #1
 80215cc:	4a2d      	ldr	r2, [pc, #180]	; (8021684 <xPortStartScheduler+0x134>)
 80215ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80215d0:	78fb      	ldrb	r3, [r7, #3]
 80215d2:	b2db      	uxtb	r3, r3
 80215d4:	005b      	lsls	r3, r3, #1
 80215d6:	b2db      	uxtb	r3, r3
 80215d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80215da:	78fb      	ldrb	r3, [r7, #3]
 80215dc:	b2db      	uxtb	r3, r3
 80215de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80215e2:	2b80      	cmp	r3, #128	; 0x80
 80215e4:	d0ef      	beq.n	80215c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80215e6:	4b27      	ldr	r3, [pc, #156]	; (8021684 <xPortStartScheduler+0x134>)
 80215e8:	681b      	ldr	r3, [r3, #0]
 80215ea:	f1c3 0307 	rsb	r3, r3, #7
 80215ee:	2b04      	cmp	r3, #4
 80215f0:	d00a      	beq.n	8021608 <xPortStartScheduler+0xb8>
	__asm volatile
 80215f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215f6:	f383 8811 	msr	BASEPRI, r3
 80215fa:	f3bf 8f6f 	isb	sy
 80215fe:	f3bf 8f4f 	dsb	sy
 8021602:	60bb      	str	r3, [r7, #8]
}
 8021604:	bf00      	nop
 8021606:	e7fe      	b.n	8021606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8021608:	4b1e      	ldr	r3, [pc, #120]	; (8021684 <xPortStartScheduler+0x134>)
 802160a:	681b      	ldr	r3, [r3, #0]
 802160c:	021b      	lsls	r3, r3, #8
 802160e:	4a1d      	ldr	r2, [pc, #116]	; (8021684 <xPortStartScheduler+0x134>)
 8021610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8021612:	4b1c      	ldr	r3, [pc, #112]	; (8021684 <xPortStartScheduler+0x134>)
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802161a:	4a1a      	ldr	r2, [pc, #104]	; (8021684 <xPortStartScheduler+0x134>)
 802161c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802161e:	687b      	ldr	r3, [r7, #4]
 8021620:	b2da      	uxtb	r2, r3
 8021622:	697b      	ldr	r3, [r7, #20]
 8021624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8021626:	4b18      	ldr	r3, [pc, #96]	; (8021688 <xPortStartScheduler+0x138>)
 8021628:	681b      	ldr	r3, [r3, #0]
 802162a:	4a17      	ldr	r2, [pc, #92]	; (8021688 <xPortStartScheduler+0x138>)
 802162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8021632:	4b15      	ldr	r3, [pc, #84]	; (8021688 <xPortStartScheduler+0x138>)
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	4a14      	ldr	r2, [pc, #80]	; (8021688 <xPortStartScheduler+0x138>)
 8021638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802163c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802163e:	f000 f8dd 	bl	80217fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8021642:	4b12      	ldr	r3, [pc, #72]	; (802168c <xPortStartScheduler+0x13c>)
 8021644:	2200      	movs	r2, #0
 8021646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8021648:	f000 f8fc 	bl	8021844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802164c:	4b10      	ldr	r3, [pc, #64]	; (8021690 <xPortStartScheduler+0x140>)
 802164e:	681b      	ldr	r3, [r3, #0]
 8021650:	4a0f      	ldr	r2, [pc, #60]	; (8021690 <xPortStartScheduler+0x140>)
 8021652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8021656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8021658:	f7ff ff66 	bl	8021528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802165c:	f7fe fe64 	bl	8020328 <vTaskSwitchContext>
	prvTaskExitError();
 8021660:	f7ff ff1c 	bl	802149c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8021664:	2300      	movs	r3, #0
}
 8021666:	4618      	mov	r0, r3
 8021668:	3718      	adds	r7, #24
 802166a:	46bd      	mov	sp, r7
 802166c:	bd80      	pop	{r7, pc}
 802166e:	bf00      	nop
 8021670:	e000ed00 	.word	0xe000ed00
 8021674:	410fc271 	.word	0x410fc271
 8021678:	410fc270 	.word	0x410fc270
 802167c:	e000e400 	.word	0xe000e400
 8021680:	24005410 	.word	0x24005410
 8021684:	24005414 	.word	0x24005414
 8021688:	e000ed20 	.word	0xe000ed20
 802168c:	240002f4 	.word	0x240002f4
 8021690:	e000ef34 	.word	0xe000ef34

08021694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8021694:	b480      	push	{r7}
 8021696:	b083      	sub	sp, #12
 8021698:	af00      	add	r7, sp, #0
	__asm volatile
 802169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802169e:	f383 8811 	msr	BASEPRI, r3
 80216a2:	f3bf 8f6f 	isb	sy
 80216a6:	f3bf 8f4f 	dsb	sy
 80216aa:	607b      	str	r3, [r7, #4]
}
 80216ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80216ae:	4b0f      	ldr	r3, [pc, #60]	; (80216ec <vPortEnterCritical+0x58>)
 80216b0:	681b      	ldr	r3, [r3, #0]
 80216b2:	3301      	adds	r3, #1
 80216b4:	4a0d      	ldr	r2, [pc, #52]	; (80216ec <vPortEnterCritical+0x58>)
 80216b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80216b8:	4b0c      	ldr	r3, [pc, #48]	; (80216ec <vPortEnterCritical+0x58>)
 80216ba:	681b      	ldr	r3, [r3, #0]
 80216bc:	2b01      	cmp	r3, #1
 80216be:	d10f      	bne.n	80216e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80216c0:	4b0b      	ldr	r3, [pc, #44]	; (80216f0 <vPortEnterCritical+0x5c>)
 80216c2:	681b      	ldr	r3, [r3, #0]
 80216c4:	b2db      	uxtb	r3, r3
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	d00a      	beq.n	80216e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80216ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80216ce:	f383 8811 	msr	BASEPRI, r3
 80216d2:	f3bf 8f6f 	isb	sy
 80216d6:	f3bf 8f4f 	dsb	sy
 80216da:	603b      	str	r3, [r7, #0]
}
 80216dc:	bf00      	nop
 80216de:	e7fe      	b.n	80216de <vPortEnterCritical+0x4a>
	}
}
 80216e0:	bf00      	nop
 80216e2:	370c      	adds	r7, #12
 80216e4:	46bd      	mov	sp, r7
 80216e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216ea:	4770      	bx	lr
 80216ec:	240002f4 	.word	0x240002f4
 80216f0:	e000ed04 	.word	0xe000ed04

080216f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80216f4:	b480      	push	{r7}
 80216f6:	b083      	sub	sp, #12
 80216f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80216fa:	4b12      	ldr	r3, [pc, #72]	; (8021744 <vPortExitCritical+0x50>)
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d10a      	bne.n	8021718 <vPortExitCritical+0x24>
	__asm volatile
 8021702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021706:	f383 8811 	msr	BASEPRI, r3
 802170a:	f3bf 8f6f 	isb	sy
 802170e:	f3bf 8f4f 	dsb	sy
 8021712:	607b      	str	r3, [r7, #4]
}
 8021714:	bf00      	nop
 8021716:	e7fe      	b.n	8021716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8021718:	4b0a      	ldr	r3, [pc, #40]	; (8021744 <vPortExitCritical+0x50>)
 802171a:	681b      	ldr	r3, [r3, #0]
 802171c:	3b01      	subs	r3, #1
 802171e:	4a09      	ldr	r2, [pc, #36]	; (8021744 <vPortExitCritical+0x50>)
 8021720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8021722:	4b08      	ldr	r3, [pc, #32]	; (8021744 <vPortExitCritical+0x50>)
 8021724:	681b      	ldr	r3, [r3, #0]
 8021726:	2b00      	cmp	r3, #0
 8021728:	d105      	bne.n	8021736 <vPortExitCritical+0x42>
 802172a:	2300      	movs	r3, #0
 802172c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802172e:	683b      	ldr	r3, [r7, #0]
 8021730:	f383 8811 	msr	BASEPRI, r3
}
 8021734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8021736:	bf00      	nop
 8021738:	370c      	adds	r7, #12
 802173a:	46bd      	mov	sp, r7
 802173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021740:	4770      	bx	lr
 8021742:	bf00      	nop
 8021744:	240002f4 	.word	0x240002f4
	...

08021750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8021750:	f3ef 8009 	mrs	r0, PSP
 8021754:	f3bf 8f6f 	isb	sy
 8021758:	4b15      	ldr	r3, [pc, #84]	; (80217b0 <pxCurrentTCBConst>)
 802175a:	681a      	ldr	r2, [r3, #0]
 802175c:	f01e 0f10 	tst.w	lr, #16
 8021760:	bf08      	it	eq
 8021762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8021766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802176a:	6010      	str	r0, [r2, #0]
 802176c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8021770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8021774:	f380 8811 	msr	BASEPRI, r0
 8021778:	f3bf 8f4f 	dsb	sy
 802177c:	f3bf 8f6f 	isb	sy
 8021780:	f7fe fdd2 	bl	8020328 <vTaskSwitchContext>
 8021784:	f04f 0000 	mov.w	r0, #0
 8021788:	f380 8811 	msr	BASEPRI, r0
 802178c:	bc09      	pop	{r0, r3}
 802178e:	6819      	ldr	r1, [r3, #0]
 8021790:	6808      	ldr	r0, [r1, #0]
 8021792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021796:	f01e 0f10 	tst.w	lr, #16
 802179a:	bf08      	it	eq
 802179c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80217a0:	f380 8809 	msr	PSP, r0
 80217a4:	f3bf 8f6f 	isb	sy
 80217a8:	4770      	bx	lr
 80217aa:	bf00      	nop
 80217ac:	f3af 8000 	nop.w

080217b0 <pxCurrentTCBConst>:
 80217b0:	24004de4 	.word	0x24004de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80217b4:	bf00      	nop
 80217b6:	bf00      	nop

080217b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80217b8:	b580      	push	{r7, lr}
 80217ba:	b082      	sub	sp, #8
 80217bc:	af00      	add	r7, sp, #0
	__asm volatile
 80217be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217c2:	f383 8811 	msr	BASEPRI, r3
 80217c6:	f3bf 8f6f 	isb	sy
 80217ca:	f3bf 8f4f 	dsb	sy
 80217ce:	607b      	str	r3, [r7, #4]
}
 80217d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80217d2:	f7fe fcef 	bl	80201b4 <xTaskIncrementTick>
 80217d6:	4603      	mov	r3, r0
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d003      	beq.n	80217e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80217dc:	4b06      	ldr	r3, [pc, #24]	; (80217f8 <xPortSysTickHandler+0x40>)
 80217de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80217e2:	601a      	str	r2, [r3, #0]
 80217e4:	2300      	movs	r3, #0
 80217e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80217e8:	683b      	ldr	r3, [r7, #0]
 80217ea:	f383 8811 	msr	BASEPRI, r3
}
 80217ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80217f0:	bf00      	nop
 80217f2:	3708      	adds	r7, #8
 80217f4:	46bd      	mov	sp, r7
 80217f6:	bd80      	pop	{r7, pc}
 80217f8:	e000ed04 	.word	0xe000ed04

080217fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80217fc:	b480      	push	{r7}
 80217fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8021800:	4b0b      	ldr	r3, [pc, #44]	; (8021830 <vPortSetupTimerInterrupt+0x34>)
 8021802:	2200      	movs	r2, #0
 8021804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8021806:	4b0b      	ldr	r3, [pc, #44]	; (8021834 <vPortSetupTimerInterrupt+0x38>)
 8021808:	2200      	movs	r2, #0
 802180a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802180c:	4b0a      	ldr	r3, [pc, #40]	; (8021838 <vPortSetupTimerInterrupt+0x3c>)
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	4a0a      	ldr	r2, [pc, #40]	; (802183c <vPortSetupTimerInterrupt+0x40>)
 8021812:	fba2 2303 	umull	r2, r3, r2, r3
 8021816:	099b      	lsrs	r3, r3, #6
 8021818:	4a09      	ldr	r2, [pc, #36]	; (8021840 <vPortSetupTimerInterrupt+0x44>)
 802181a:	3b01      	subs	r3, #1
 802181c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802181e:	4b04      	ldr	r3, [pc, #16]	; (8021830 <vPortSetupTimerInterrupt+0x34>)
 8021820:	2207      	movs	r2, #7
 8021822:	601a      	str	r2, [r3, #0]
}
 8021824:	bf00      	nop
 8021826:	46bd      	mov	sp, r7
 8021828:	f85d 7b04 	ldr.w	r7, [sp], #4
 802182c:	4770      	bx	lr
 802182e:	bf00      	nop
 8021830:	e000e010 	.word	0xe000e010
 8021834:	e000e018 	.word	0xe000e018
 8021838:	240002dc 	.word	0x240002dc
 802183c:	10624dd3 	.word	0x10624dd3
 8021840:	e000e014 	.word	0xe000e014

08021844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8021844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8021854 <vPortEnableVFP+0x10>
 8021848:	6801      	ldr	r1, [r0, #0]
 802184a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802184e:	6001      	str	r1, [r0, #0]
 8021850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8021852:	bf00      	nop
 8021854:	e000ed88 	.word	0xe000ed88

08021858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8021858:	b480      	push	{r7}
 802185a:	b085      	sub	sp, #20
 802185c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802185e:	f3ef 8305 	mrs	r3, IPSR
 8021862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8021864:	68fb      	ldr	r3, [r7, #12]
 8021866:	2b0f      	cmp	r3, #15
 8021868:	d914      	bls.n	8021894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802186a:	4a17      	ldr	r2, [pc, #92]	; (80218c8 <vPortValidateInterruptPriority+0x70>)
 802186c:	68fb      	ldr	r3, [r7, #12]
 802186e:	4413      	add	r3, r2
 8021870:	781b      	ldrb	r3, [r3, #0]
 8021872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8021874:	4b15      	ldr	r3, [pc, #84]	; (80218cc <vPortValidateInterruptPriority+0x74>)
 8021876:	781b      	ldrb	r3, [r3, #0]
 8021878:	7afa      	ldrb	r2, [r7, #11]
 802187a:	429a      	cmp	r2, r3
 802187c:	d20a      	bcs.n	8021894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802187e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021882:	f383 8811 	msr	BASEPRI, r3
 8021886:	f3bf 8f6f 	isb	sy
 802188a:	f3bf 8f4f 	dsb	sy
 802188e:	607b      	str	r3, [r7, #4]
}
 8021890:	bf00      	nop
 8021892:	e7fe      	b.n	8021892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8021894:	4b0e      	ldr	r3, [pc, #56]	; (80218d0 <vPortValidateInterruptPriority+0x78>)
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802189c:	4b0d      	ldr	r3, [pc, #52]	; (80218d4 <vPortValidateInterruptPriority+0x7c>)
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	429a      	cmp	r2, r3
 80218a2:	d90a      	bls.n	80218ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80218a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80218a8:	f383 8811 	msr	BASEPRI, r3
 80218ac:	f3bf 8f6f 	isb	sy
 80218b0:	f3bf 8f4f 	dsb	sy
 80218b4:	603b      	str	r3, [r7, #0]
}
 80218b6:	bf00      	nop
 80218b8:	e7fe      	b.n	80218b8 <vPortValidateInterruptPriority+0x60>
	}
 80218ba:	bf00      	nop
 80218bc:	3714      	adds	r7, #20
 80218be:	46bd      	mov	sp, r7
 80218c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218c4:	4770      	bx	lr
 80218c6:	bf00      	nop
 80218c8:	e000e3f0 	.word	0xe000e3f0
 80218cc:	24005410 	.word	0x24005410
 80218d0:	e000ed0c 	.word	0xe000ed0c
 80218d4:	24005414 	.word	0x24005414

080218d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80218d8:	b580      	push	{r7, lr}
 80218da:	b08a      	sub	sp, #40	; 0x28
 80218dc:	af00      	add	r7, sp, #0
 80218de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80218e0:	2300      	movs	r3, #0
 80218e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80218e4:	f7fe fb98 	bl	8020018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80218e8:	4b5b      	ldr	r3, [pc, #364]	; (8021a58 <pvPortMalloc+0x180>)
 80218ea:	681b      	ldr	r3, [r3, #0]
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d101      	bne.n	80218f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80218f0:	f000 f920 	bl	8021b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80218f4:	4b59      	ldr	r3, [pc, #356]	; (8021a5c <pvPortMalloc+0x184>)
 80218f6:	681a      	ldr	r2, [r3, #0]
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	4013      	ands	r3, r2
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	f040 8093 	bne.w	8021a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	2b00      	cmp	r3, #0
 8021906:	d01d      	beq.n	8021944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8021908:	2208      	movs	r2, #8
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	4413      	add	r3, r2
 802190e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	f003 0307 	and.w	r3, r3, #7
 8021916:	2b00      	cmp	r3, #0
 8021918:	d014      	beq.n	8021944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	f023 0307 	bic.w	r3, r3, #7
 8021920:	3308      	adds	r3, #8
 8021922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8021924:	687b      	ldr	r3, [r7, #4]
 8021926:	f003 0307 	and.w	r3, r3, #7
 802192a:	2b00      	cmp	r3, #0
 802192c:	d00a      	beq.n	8021944 <pvPortMalloc+0x6c>
	__asm volatile
 802192e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021932:	f383 8811 	msr	BASEPRI, r3
 8021936:	f3bf 8f6f 	isb	sy
 802193a:	f3bf 8f4f 	dsb	sy
 802193e:	617b      	str	r3, [r7, #20]
}
 8021940:	bf00      	nop
 8021942:	e7fe      	b.n	8021942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	2b00      	cmp	r3, #0
 8021948:	d06e      	beq.n	8021a28 <pvPortMalloc+0x150>
 802194a:	4b45      	ldr	r3, [pc, #276]	; (8021a60 <pvPortMalloc+0x188>)
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	687a      	ldr	r2, [r7, #4]
 8021950:	429a      	cmp	r2, r3
 8021952:	d869      	bhi.n	8021a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8021954:	4b43      	ldr	r3, [pc, #268]	; (8021a64 <pvPortMalloc+0x18c>)
 8021956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8021958:	4b42      	ldr	r3, [pc, #264]	; (8021a64 <pvPortMalloc+0x18c>)
 802195a:	681b      	ldr	r3, [r3, #0]
 802195c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802195e:	e004      	b.n	802196a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8021960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8021964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021966:	681b      	ldr	r3, [r3, #0]
 8021968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802196c:	685b      	ldr	r3, [r3, #4]
 802196e:	687a      	ldr	r2, [r7, #4]
 8021970:	429a      	cmp	r2, r3
 8021972:	d903      	bls.n	802197c <pvPortMalloc+0xa4>
 8021974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	2b00      	cmp	r3, #0
 802197a:	d1f1      	bne.n	8021960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802197c:	4b36      	ldr	r3, [pc, #216]	; (8021a58 <pvPortMalloc+0x180>)
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021982:	429a      	cmp	r2, r3
 8021984:	d050      	beq.n	8021a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8021986:	6a3b      	ldr	r3, [r7, #32]
 8021988:	681b      	ldr	r3, [r3, #0]
 802198a:	2208      	movs	r2, #8
 802198c:	4413      	add	r3, r2
 802198e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8021990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021992:	681a      	ldr	r2, [r3, #0]
 8021994:	6a3b      	ldr	r3, [r7, #32]
 8021996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8021998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802199a:	685a      	ldr	r2, [r3, #4]
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	1ad2      	subs	r2, r2, r3
 80219a0:	2308      	movs	r3, #8
 80219a2:	005b      	lsls	r3, r3, #1
 80219a4:	429a      	cmp	r2, r3
 80219a6:	d91f      	bls.n	80219e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80219a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	4413      	add	r3, r2
 80219ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80219b0:	69bb      	ldr	r3, [r7, #24]
 80219b2:	f003 0307 	and.w	r3, r3, #7
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	d00a      	beq.n	80219d0 <pvPortMalloc+0xf8>
	__asm volatile
 80219ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80219be:	f383 8811 	msr	BASEPRI, r3
 80219c2:	f3bf 8f6f 	isb	sy
 80219c6:	f3bf 8f4f 	dsb	sy
 80219ca:	613b      	str	r3, [r7, #16]
}
 80219cc:	bf00      	nop
 80219ce:	e7fe      	b.n	80219ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80219d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219d2:	685a      	ldr	r2, [r3, #4]
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	1ad2      	subs	r2, r2, r3
 80219d8:	69bb      	ldr	r3, [r7, #24]
 80219da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80219dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219de:	687a      	ldr	r2, [r7, #4]
 80219e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80219e2:	69b8      	ldr	r0, [r7, #24]
 80219e4:	f000 f908 	bl	8021bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80219e8:	4b1d      	ldr	r3, [pc, #116]	; (8021a60 <pvPortMalloc+0x188>)
 80219ea:	681a      	ldr	r2, [r3, #0]
 80219ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219ee:	685b      	ldr	r3, [r3, #4]
 80219f0:	1ad3      	subs	r3, r2, r3
 80219f2:	4a1b      	ldr	r2, [pc, #108]	; (8021a60 <pvPortMalloc+0x188>)
 80219f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80219f6:	4b1a      	ldr	r3, [pc, #104]	; (8021a60 <pvPortMalloc+0x188>)
 80219f8:	681a      	ldr	r2, [r3, #0]
 80219fa:	4b1b      	ldr	r3, [pc, #108]	; (8021a68 <pvPortMalloc+0x190>)
 80219fc:	681b      	ldr	r3, [r3, #0]
 80219fe:	429a      	cmp	r2, r3
 8021a00:	d203      	bcs.n	8021a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8021a02:	4b17      	ldr	r3, [pc, #92]	; (8021a60 <pvPortMalloc+0x188>)
 8021a04:	681b      	ldr	r3, [r3, #0]
 8021a06:	4a18      	ldr	r2, [pc, #96]	; (8021a68 <pvPortMalloc+0x190>)
 8021a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8021a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a0c:	685a      	ldr	r2, [r3, #4]
 8021a0e:	4b13      	ldr	r3, [pc, #76]	; (8021a5c <pvPortMalloc+0x184>)
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	431a      	orrs	r2, r3
 8021a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8021a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a1a:	2200      	movs	r2, #0
 8021a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8021a1e:	4b13      	ldr	r3, [pc, #76]	; (8021a6c <pvPortMalloc+0x194>)
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	3301      	adds	r3, #1
 8021a24:	4a11      	ldr	r2, [pc, #68]	; (8021a6c <pvPortMalloc+0x194>)
 8021a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8021a28:	f7fe fb04 	bl	8020034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8021a2c:	69fb      	ldr	r3, [r7, #28]
 8021a2e:	f003 0307 	and.w	r3, r3, #7
 8021a32:	2b00      	cmp	r3, #0
 8021a34:	d00a      	beq.n	8021a4c <pvPortMalloc+0x174>
	__asm volatile
 8021a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021a3a:	f383 8811 	msr	BASEPRI, r3
 8021a3e:	f3bf 8f6f 	isb	sy
 8021a42:	f3bf 8f4f 	dsb	sy
 8021a46:	60fb      	str	r3, [r7, #12]
}
 8021a48:	bf00      	nop
 8021a4a:	e7fe      	b.n	8021a4a <pvPortMalloc+0x172>
	return pvReturn;
 8021a4c:	69fb      	ldr	r3, [r7, #28]
}
 8021a4e:	4618      	mov	r0, r3
 8021a50:	3728      	adds	r7, #40	; 0x28
 8021a52:	46bd      	mov	sp, r7
 8021a54:	bd80      	pop	{r7, pc}
 8021a56:	bf00      	nop
 8021a58:	24009020 	.word	0x24009020
 8021a5c:	24009034 	.word	0x24009034
 8021a60:	24009024 	.word	0x24009024
 8021a64:	24009018 	.word	0x24009018
 8021a68:	24009028 	.word	0x24009028
 8021a6c:	2400902c 	.word	0x2400902c

08021a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8021a70:	b580      	push	{r7, lr}
 8021a72:	b086      	sub	sp, #24
 8021a74:	af00      	add	r7, sp, #0
 8021a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d04d      	beq.n	8021b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8021a82:	2308      	movs	r3, #8
 8021a84:	425b      	negs	r3, r3
 8021a86:	697a      	ldr	r2, [r7, #20]
 8021a88:	4413      	add	r3, r2
 8021a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8021a8c:	697b      	ldr	r3, [r7, #20]
 8021a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8021a90:	693b      	ldr	r3, [r7, #16]
 8021a92:	685a      	ldr	r2, [r3, #4]
 8021a94:	4b24      	ldr	r3, [pc, #144]	; (8021b28 <vPortFree+0xb8>)
 8021a96:	681b      	ldr	r3, [r3, #0]
 8021a98:	4013      	ands	r3, r2
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d10a      	bne.n	8021ab4 <vPortFree+0x44>
	__asm volatile
 8021a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021aa2:	f383 8811 	msr	BASEPRI, r3
 8021aa6:	f3bf 8f6f 	isb	sy
 8021aaa:	f3bf 8f4f 	dsb	sy
 8021aae:	60fb      	str	r3, [r7, #12]
}
 8021ab0:	bf00      	nop
 8021ab2:	e7fe      	b.n	8021ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8021ab4:	693b      	ldr	r3, [r7, #16]
 8021ab6:	681b      	ldr	r3, [r3, #0]
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d00a      	beq.n	8021ad2 <vPortFree+0x62>
	__asm volatile
 8021abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ac0:	f383 8811 	msr	BASEPRI, r3
 8021ac4:	f3bf 8f6f 	isb	sy
 8021ac8:	f3bf 8f4f 	dsb	sy
 8021acc:	60bb      	str	r3, [r7, #8]
}
 8021ace:	bf00      	nop
 8021ad0:	e7fe      	b.n	8021ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8021ad2:	693b      	ldr	r3, [r7, #16]
 8021ad4:	685a      	ldr	r2, [r3, #4]
 8021ad6:	4b14      	ldr	r3, [pc, #80]	; (8021b28 <vPortFree+0xb8>)
 8021ad8:	681b      	ldr	r3, [r3, #0]
 8021ada:	4013      	ands	r3, r2
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d01e      	beq.n	8021b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8021ae0:	693b      	ldr	r3, [r7, #16]
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d11a      	bne.n	8021b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8021ae8:	693b      	ldr	r3, [r7, #16]
 8021aea:	685a      	ldr	r2, [r3, #4]
 8021aec:	4b0e      	ldr	r3, [pc, #56]	; (8021b28 <vPortFree+0xb8>)
 8021aee:	681b      	ldr	r3, [r3, #0]
 8021af0:	43db      	mvns	r3, r3
 8021af2:	401a      	ands	r2, r3
 8021af4:	693b      	ldr	r3, [r7, #16]
 8021af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8021af8:	f7fe fa8e 	bl	8020018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8021afc:	693b      	ldr	r3, [r7, #16]
 8021afe:	685a      	ldr	r2, [r3, #4]
 8021b00:	4b0a      	ldr	r3, [pc, #40]	; (8021b2c <vPortFree+0xbc>)
 8021b02:	681b      	ldr	r3, [r3, #0]
 8021b04:	4413      	add	r3, r2
 8021b06:	4a09      	ldr	r2, [pc, #36]	; (8021b2c <vPortFree+0xbc>)
 8021b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8021b0a:	6938      	ldr	r0, [r7, #16]
 8021b0c:	f000 f874 	bl	8021bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8021b10:	4b07      	ldr	r3, [pc, #28]	; (8021b30 <vPortFree+0xc0>)
 8021b12:	681b      	ldr	r3, [r3, #0]
 8021b14:	3301      	adds	r3, #1
 8021b16:	4a06      	ldr	r2, [pc, #24]	; (8021b30 <vPortFree+0xc0>)
 8021b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8021b1a:	f7fe fa8b 	bl	8020034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8021b1e:	bf00      	nop
 8021b20:	3718      	adds	r7, #24
 8021b22:	46bd      	mov	sp, r7
 8021b24:	bd80      	pop	{r7, pc}
 8021b26:	bf00      	nop
 8021b28:	24009034 	.word	0x24009034
 8021b2c:	24009024 	.word	0x24009024
 8021b30:	24009030 	.word	0x24009030

08021b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8021b34:	b480      	push	{r7}
 8021b36:	b085      	sub	sp, #20
 8021b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8021b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8021b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8021b40:	4b27      	ldr	r3, [pc, #156]	; (8021be0 <prvHeapInit+0xac>)
 8021b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8021b44:	68fb      	ldr	r3, [r7, #12]
 8021b46:	f003 0307 	and.w	r3, r3, #7
 8021b4a:	2b00      	cmp	r3, #0
 8021b4c:	d00c      	beq.n	8021b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8021b4e:	68fb      	ldr	r3, [r7, #12]
 8021b50:	3307      	adds	r3, #7
 8021b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021b54:	68fb      	ldr	r3, [r7, #12]
 8021b56:	f023 0307 	bic.w	r3, r3, #7
 8021b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8021b5c:	68ba      	ldr	r2, [r7, #8]
 8021b5e:	68fb      	ldr	r3, [r7, #12]
 8021b60:	1ad3      	subs	r3, r2, r3
 8021b62:	4a1f      	ldr	r2, [pc, #124]	; (8021be0 <prvHeapInit+0xac>)
 8021b64:	4413      	add	r3, r2
 8021b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8021b68:	68fb      	ldr	r3, [r7, #12]
 8021b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8021b6c:	4a1d      	ldr	r2, [pc, #116]	; (8021be4 <prvHeapInit+0xb0>)
 8021b6e:	687b      	ldr	r3, [r7, #4]
 8021b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8021b72:	4b1c      	ldr	r3, [pc, #112]	; (8021be4 <prvHeapInit+0xb0>)
 8021b74:	2200      	movs	r2, #0
 8021b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	68ba      	ldr	r2, [r7, #8]
 8021b7c:	4413      	add	r3, r2
 8021b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8021b80:	2208      	movs	r2, #8
 8021b82:	68fb      	ldr	r3, [r7, #12]
 8021b84:	1a9b      	subs	r3, r3, r2
 8021b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021b88:	68fb      	ldr	r3, [r7, #12]
 8021b8a:	f023 0307 	bic.w	r3, r3, #7
 8021b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8021b90:	68fb      	ldr	r3, [r7, #12]
 8021b92:	4a15      	ldr	r2, [pc, #84]	; (8021be8 <prvHeapInit+0xb4>)
 8021b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8021b96:	4b14      	ldr	r3, [pc, #80]	; (8021be8 <prvHeapInit+0xb4>)
 8021b98:	681b      	ldr	r3, [r3, #0]
 8021b9a:	2200      	movs	r2, #0
 8021b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8021b9e:	4b12      	ldr	r3, [pc, #72]	; (8021be8 <prvHeapInit+0xb4>)
 8021ba0:	681b      	ldr	r3, [r3, #0]
 8021ba2:	2200      	movs	r2, #0
 8021ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8021baa:	683b      	ldr	r3, [r7, #0]
 8021bac:	68fa      	ldr	r2, [r7, #12]
 8021bae:	1ad2      	subs	r2, r2, r3
 8021bb0:	683b      	ldr	r3, [r7, #0]
 8021bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8021bb4:	4b0c      	ldr	r3, [pc, #48]	; (8021be8 <prvHeapInit+0xb4>)
 8021bb6:	681a      	ldr	r2, [r3, #0]
 8021bb8:	683b      	ldr	r3, [r7, #0]
 8021bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021bbc:	683b      	ldr	r3, [r7, #0]
 8021bbe:	685b      	ldr	r3, [r3, #4]
 8021bc0:	4a0a      	ldr	r2, [pc, #40]	; (8021bec <prvHeapInit+0xb8>)
 8021bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021bc4:	683b      	ldr	r3, [r7, #0]
 8021bc6:	685b      	ldr	r3, [r3, #4]
 8021bc8:	4a09      	ldr	r2, [pc, #36]	; (8021bf0 <prvHeapInit+0xbc>)
 8021bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8021bcc:	4b09      	ldr	r3, [pc, #36]	; (8021bf4 <prvHeapInit+0xc0>)
 8021bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8021bd2:	601a      	str	r2, [r3, #0]
}
 8021bd4:	bf00      	nop
 8021bd6:	3714      	adds	r7, #20
 8021bd8:	46bd      	mov	sp, r7
 8021bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bde:	4770      	bx	lr
 8021be0:	24005418 	.word	0x24005418
 8021be4:	24009018 	.word	0x24009018
 8021be8:	24009020 	.word	0x24009020
 8021bec:	24009028 	.word	0x24009028
 8021bf0:	24009024 	.word	0x24009024
 8021bf4:	24009034 	.word	0x24009034

08021bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8021bf8:	b480      	push	{r7}
 8021bfa:	b085      	sub	sp, #20
 8021bfc:	af00      	add	r7, sp, #0
 8021bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8021c00:	4b28      	ldr	r3, [pc, #160]	; (8021ca4 <prvInsertBlockIntoFreeList+0xac>)
 8021c02:	60fb      	str	r3, [r7, #12]
 8021c04:	e002      	b.n	8021c0c <prvInsertBlockIntoFreeList+0x14>
 8021c06:	68fb      	ldr	r3, [r7, #12]
 8021c08:	681b      	ldr	r3, [r3, #0]
 8021c0a:	60fb      	str	r3, [r7, #12]
 8021c0c:	68fb      	ldr	r3, [r7, #12]
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	687a      	ldr	r2, [r7, #4]
 8021c12:	429a      	cmp	r2, r3
 8021c14:	d8f7      	bhi.n	8021c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8021c16:	68fb      	ldr	r3, [r7, #12]
 8021c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8021c1a:	68fb      	ldr	r3, [r7, #12]
 8021c1c:	685b      	ldr	r3, [r3, #4]
 8021c1e:	68ba      	ldr	r2, [r7, #8]
 8021c20:	4413      	add	r3, r2
 8021c22:	687a      	ldr	r2, [r7, #4]
 8021c24:	429a      	cmp	r2, r3
 8021c26:	d108      	bne.n	8021c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8021c28:	68fb      	ldr	r3, [r7, #12]
 8021c2a:	685a      	ldr	r2, [r3, #4]
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	685b      	ldr	r3, [r3, #4]
 8021c30:	441a      	add	r2, r3
 8021c32:	68fb      	ldr	r3, [r7, #12]
 8021c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8021c36:	68fb      	ldr	r3, [r7, #12]
 8021c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8021c3e:	687b      	ldr	r3, [r7, #4]
 8021c40:	685b      	ldr	r3, [r3, #4]
 8021c42:	68ba      	ldr	r2, [r7, #8]
 8021c44:	441a      	add	r2, r3
 8021c46:	68fb      	ldr	r3, [r7, #12]
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	429a      	cmp	r2, r3
 8021c4c:	d118      	bne.n	8021c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8021c4e:	68fb      	ldr	r3, [r7, #12]
 8021c50:	681a      	ldr	r2, [r3, #0]
 8021c52:	4b15      	ldr	r3, [pc, #84]	; (8021ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	429a      	cmp	r2, r3
 8021c58:	d00d      	beq.n	8021c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	685a      	ldr	r2, [r3, #4]
 8021c5e:	68fb      	ldr	r3, [r7, #12]
 8021c60:	681b      	ldr	r3, [r3, #0]
 8021c62:	685b      	ldr	r3, [r3, #4]
 8021c64:	441a      	add	r2, r3
 8021c66:	687b      	ldr	r3, [r7, #4]
 8021c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8021c6a:	68fb      	ldr	r3, [r7, #12]
 8021c6c:	681b      	ldr	r3, [r3, #0]
 8021c6e:	681a      	ldr	r2, [r3, #0]
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	601a      	str	r2, [r3, #0]
 8021c74:	e008      	b.n	8021c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8021c76:	4b0c      	ldr	r3, [pc, #48]	; (8021ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8021c78:	681a      	ldr	r2, [r3, #0]
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	601a      	str	r2, [r3, #0]
 8021c7e:	e003      	b.n	8021c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8021c80:	68fb      	ldr	r3, [r7, #12]
 8021c82:	681a      	ldr	r2, [r3, #0]
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8021c88:	68fa      	ldr	r2, [r7, #12]
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	429a      	cmp	r2, r3
 8021c8e:	d002      	beq.n	8021c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8021c90:	68fb      	ldr	r3, [r7, #12]
 8021c92:	687a      	ldr	r2, [r7, #4]
 8021c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021c96:	bf00      	nop
 8021c98:	3714      	adds	r7, #20
 8021c9a:	46bd      	mov	sp, r7
 8021c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ca0:	4770      	bx	lr
 8021ca2:	bf00      	nop
 8021ca4:	24009018 	.word	0x24009018
 8021ca8:	24009020 	.word	0x24009020

08021cac <atof>:
 8021cac:	2100      	movs	r1, #0
 8021cae:	f002 b817 	b.w	8023ce0 <strtod>

08021cb2 <atoi>:
 8021cb2:	220a      	movs	r2, #10
 8021cb4:	2100      	movs	r1, #0
 8021cb6:	f002 b8ff 	b.w	8023eb8 <strtol>
	...

08021cbc <__errno>:
 8021cbc:	4b01      	ldr	r3, [pc, #4]	; (8021cc4 <__errno+0x8>)
 8021cbe:	6818      	ldr	r0, [r3, #0]
 8021cc0:	4770      	bx	lr
 8021cc2:	bf00      	nop
 8021cc4:	240002f8 	.word	0x240002f8

08021cc8 <std>:
 8021cc8:	2300      	movs	r3, #0
 8021cca:	b510      	push	{r4, lr}
 8021ccc:	4604      	mov	r4, r0
 8021cce:	e9c0 3300 	strd	r3, r3, [r0]
 8021cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021cd6:	6083      	str	r3, [r0, #8]
 8021cd8:	8181      	strh	r1, [r0, #12]
 8021cda:	6643      	str	r3, [r0, #100]	; 0x64
 8021cdc:	81c2      	strh	r2, [r0, #14]
 8021cde:	6183      	str	r3, [r0, #24]
 8021ce0:	4619      	mov	r1, r3
 8021ce2:	2208      	movs	r2, #8
 8021ce4:	305c      	adds	r0, #92	; 0x5c
 8021ce6:	f000 f923 	bl	8021f30 <memset>
 8021cea:	4b05      	ldr	r3, [pc, #20]	; (8021d00 <std+0x38>)
 8021cec:	6263      	str	r3, [r4, #36]	; 0x24
 8021cee:	4b05      	ldr	r3, [pc, #20]	; (8021d04 <std+0x3c>)
 8021cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8021cf2:	4b05      	ldr	r3, [pc, #20]	; (8021d08 <std+0x40>)
 8021cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021cf6:	4b05      	ldr	r3, [pc, #20]	; (8021d0c <std+0x44>)
 8021cf8:	6224      	str	r4, [r4, #32]
 8021cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8021cfc:	bd10      	pop	{r4, pc}
 8021cfe:	bf00      	nop
 8021d00:	08023055 	.word	0x08023055
 8021d04:	08023077 	.word	0x08023077
 8021d08:	080230af 	.word	0x080230af
 8021d0c:	080230d3 	.word	0x080230d3

08021d10 <_cleanup_r>:
 8021d10:	4901      	ldr	r1, [pc, #4]	; (8021d18 <_cleanup_r+0x8>)
 8021d12:	f000 b8af 	b.w	8021e74 <_fwalk_reent>
 8021d16:	bf00      	nop
 8021d18:	08024dd1 	.word	0x08024dd1

08021d1c <__sfmoreglue>:
 8021d1c:	b570      	push	{r4, r5, r6, lr}
 8021d1e:	2268      	movs	r2, #104	; 0x68
 8021d20:	1e4d      	subs	r5, r1, #1
 8021d22:	4355      	muls	r5, r2
 8021d24:	460e      	mov	r6, r1
 8021d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021d2a:	f000 f975 	bl	8022018 <_malloc_r>
 8021d2e:	4604      	mov	r4, r0
 8021d30:	b140      	cbz	r0, 8021d44 <__sfmoreglue+0x28>
 8021d32:	2100      	movs	r1, #0
 8021d34:	e9c0 1600 	strd	r1, r6, [r0]
 8021d38:	300c      	adds	r0, #12
 8021d3a:	60a0      	str	r0, [r4, #8]
 8021d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021d40:	f000 f8f6 	bl	8021f30 <memset>
 8021d44:	4620      	mov	r0, r4
 8021d46:	bd70      	pop	{r4, r5, r6, pc}

08021d48 <__sfp_lock_acquire>:
 8021d48:	4801      	ldr	r0, [pc, #4]	; (8021d50 <__sfp_lock_acquire+0x8>)
 8021d4a:	f000 b8d8 	b.w	8021efe <__retarget_lock_acquire_recursive>
 8021d4e:	bf00      	nop
 8021d50:	24009039 	.word	0x24009039

08021d54 <__sfp_lock_release>:
 8021d54:	4801      	ldr	r0, [pc, #4]	; (8021d5c <__sfp_lock_release+0x8>)
 8021d56:	f000 b8d3 	b.w	8021f00 <__retarget_lock_release_recursive>
 8021d5a:	bf00      	nop
 8021d5c:	24009039 	.word	0x24009039

08021d60 <__sinit_lock_acquire>:
 8021d60:	4801      	ldr	r0, [pc, #4]	; (8021d68 <__sinit_lock_acquire+0x8>)
 8021d62:	f000 b8cc 	b.w	8021efe <__retarget_lock_acquire_recursive>
 8021d66:	bf00      	nop
 8021d68:	2400903a 	.word	0x2400903a

08021d6c <__sinit_lock_release>:
 8021d6c:	4801      	ldr	r0, [pc, #4]	; (8021d74 <__sinit_lock_release+0x8>)
 8021d6e:	f000 b8c7 	b.w	8021f00 <__retarget_lock_release_recursive>
 8021d72:	bf00      	nop
 8021d74:	2400903a 	.word	0x2400903a

08021d78 <__sinit>:
 8021d78:	b510      	push	{r4, lr}
 8021d7a:	4604      	mov	r4, r0
 8021d7c:	f7ff fff0 	bl	8021d60 <__sinit_lock_acquire>
 8021d80:	69a3      	ldr	r3, [r4, #24]
 8021d82:	b11b      	cbz	r3, 8021d8c <__sinit+0x14>
 8021d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d88:	f7ff bff0 	b.w	8021d6c <__sinit_lock_release>
 8021d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021d90:	6523      	str	r3, [r4, #80]	; 0x50
 8021d92:	4b13      	ldr	r3, [pc, #76]	; (8021de0 <__sinit+0x68>)
 8021d94:	4a13      	ldr	r2, [pc, #76]	; (8021de4 <__sinit+0x6c>)
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8021d9a:	42a3      	cmp	r3, r4
 8021d9c:	bf04      	itt	eq
 8021d9e:	2301      	moveq	r3, #1
 8021da0:	61a3      	streq	r3, [r4, #24]
 8021da2:	4620      	mov	r0, r4
 8021da4:	f000 f820 	bl	8021de8 <__sfp>
 8021da8:	6060      	str	r0, [r4, #4]
 8021daa:	4620      	mov	r0, r4
 8021dac:	f000 f81c 	bl	8021de8 <__sfp>
 8021db0:	60a0      	str	r0, [r4, #8]
 8021db2:	4620      	mov	r0, r4
 8021db4:	f000 f818 	bl	8021de8 <__sfp>
 8021db8:	2200      	movs	r2, #0
 8021dba:	60e0      	str	r0, [r4, #12]
 8021dbc:	2104      	movs	r1, #4
 8021dbe:	6860      	ldr	r0, [r4, #4]
 8021dc0:	f7ff ff82 	bl	8021cc8 <std>
 8021dc4:	68a0      	ldr	r0, [r4, #8]
 8021dc6:	2201      	movs	r2, #1
 8021dc8:	2109      	movs	r1, #9
 8021dca:	f7ff ff7d 	bl	8021cc8 <std>
 8021dce:	68e0      	ldr	r0, [r4, #12]
 8021dd0:	2202      	movs	r2, #2
 8021dd2:	2112      	movs	r1, #18
 8021dd4:	f7ff ff78 	bl	8021cc8 <std>
 8021dd8:	2301      	movs	r3, #1
 8021dda:	61a3      	str	r3, [r4, #24]
 8021ddc:	e7d2      	b.n	8021d84 <__sinit+0xc>
 8021dde:	bf00      	nop
 8021de0:	08027e30 	.word	0x08027e30
 8021de4:	08021d11 	.word	0x08021d11

08021de8 <__sfp>:
 8021de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021dea:	4607      	mov	r7, r0
 8021dec:	f7ff ffac 	bl	8021d48 <__sfp_lock_acquire>
 8021df0:	4b1e      	ldr	r3, [pc, #120]	; (8021e6c <__sfp+0x84>)
 8021df2:	681e      	ldr	r6, [r3, #0]
 8021df4:	69b3      	ldr	r3, [r6, #24]
 8021df6:	b913      	cbnz	r3, 8021dfe <__sfp+0x16>
 8021df8:	4630      	mov	r0, r6
 8021dfa:	f7ff ffbd 	bl	8021d78 <__sinit>
 8021dfe:	3648      	adds	r6, #72	; 0x48
 8021e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021e04:	3b01      	subs	r3, #1
 8021e06:	d503      	bpl.n	8021e10 <__sfp+0x28>
 8021e08:	6833      	ldr	r3, [r6, #0]
 8021e0a:	b30b      	cbz	r3, 8021e50 <__sfp+0x68>
 8021e0c:	6836      	ldr	r6, [r6, #0]
 8021e0e:	e7f7      	b.n	8021e00 <__sfp+0x18>
 8021e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021e14:	b9d5      	cbnz	r5, 8021e4c <__sfp+0x64>
 8021e16:	4b16      	ldr	r3, [pc, #88]	; (8021e70 <__sfp+0x88>)
 8021e18:	60e3      	str	r3, [r4, #12]
 8021e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8021e20:	f000 f86c 	bl	8021efc <__retarget_lock_init_recursive>
 8021e24:	f7ff ff96 	bl	8021d54 <__sfp_lock_release>
 8021e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021e30:	6025      	str	r5, [r4, #0]
 8021e32:	61a5      	str	r5, [r4, #24]
 8021e34:	2208      	movs	r2, #8
 8021e36:	4629      	mov	r1, r5
 8021e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021e3c:	f000 f878 	bl	8021f30 <memset>
 8021e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021e48:	4620      	mov	r0, r4
 8021e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e4c:	3468      	adds	r4, #104	; 0x68
 8021e4e:	e7d9      	b.n	8021e04 <__sfp+0x1c>
 8021e50:	2104      	movs	r1, #4
 8021e52:	4638      	mov	r0, r7
 8021e54:	f7ff ff62 	bl	8021d1c <__sfmoreglue>
 8021e58:	4604      	mov	r4, r0
 8021e5a:	6030      	str	r0, [r6, #0]
 8021e5c:	2800      	cmp	r0, #0
 8021e5e:	d1d5      	bne.n	8021e0c <__sfp+0x24>
 8021e60:	f7ff ff78 	bl	8021d54 <__sfp_lock_release>
 8021e64:	230c      	movs	r3, #12
 8021e66:	603b      	str	r3, [r7, #0]
 8021e68:	e7ee      	b.n	8021e48 <__sfp+0x60>
 8021e6a:	bf00      	nop
 8021e6c:	08027e30 	.word	0x08027e30
 8021e70:	ffff0001 	.word	0xffff0001

08021e74 <_fwalk_reent>:
 8021e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021e78:	4606      	mov	r6, r0
 8021e7a:	4688      	mov	r8, r1
 8021e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021e80:	2700      	movs	r7, #0
 8021e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021e86:	f1b9 0901 	subs.w	r9, r9, #1
 8021e8a:	d505      	bpl.n	8021e98 <_fwalk_reent+0x24>
 8021e8c:	6824      	ldr	r4, [r4, #0]
 8021e8e:	2c00      	cmp	r4, #0
 8021e90:	d1f7      	bne.n	8021e82 <_fwalk_reent+0xe>
 8021e92:	4638      	mov	r0, r7
 8021e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e98:	89ab      	ldrh	r3, [r5, #12]
 8021e9a:	2b01      	cmp	r3, #1
 8021e9c:	d907      	bls.n	8021eae <_fwalk_reent+0x3a>
 8021e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021ea2:	3301      	adds	r3, #1
 8021ea4:	d003      	beq.n	8021eae <_fwalk_reent+0x3a>
 8021ea6:	4629      	mov	r1, r5
 8021ea8:	4630      	mov	r0, r6
 8021eaa:	47c0      	blx	r8
 8021eac:	4307      	orrs	r7, r0
 8021eae:	3568      	adds	r5, #104	; 0x68
 8021eb0:	e7e9      	b.n	8021e86 <_fwalk_reent+0x12>
	...

08021eb4 <__libc_init_array>:
 8021eb4:	b570      	push	{r4, r5, r6, lr}
 8021eb6:	4d0d      	ldr	r5, [pc, #52]	; (8021eec <__libc_init_array+0x38>)
 8021eb8:	4c0d      	ldr	r4, [pc, #52]	; (8021ef0 <__libc_init_array+0x3c>)
 8021eba:	1b64      	subs	r4, r4, r5
 8021ebc:	10a4      	asrs	r4, r4, #2
 8021ebe:	2600      	movs	r6, #0
 8021ec0:	42a6      	cmp	r6, r4
 8021ec2:	d109      	bne.n	8021ed8 <__libc_init_array+0x24>
 8021ec4:	4d0b      	ldr	r5, [pc, #44]	; (8021ef4 <__libc_init_array+0x40>)
 8021ec6:	4c0c      	ldr	r4, [pc, #48]	; (8021ef8 <__libc_init_array+0x44>)
 8021ec8:	f005 f9f2 	bl	80272b0 <_init>
 8021ecc:	1b64      	subs	r4, r4, r5
 8021ece:	10a4      	asrs	r4, r4, #2
 8021ed0:	2600      	movs	r6, #0
 8021ed2:	42a6      	cmp	r6, r4
 8021ed4:	d105      	bne.n	8021ee2 <__libc_init_array+0x2e>
 8021ed6:	bd70      	pop	{r4, r5, r6, pc}
 8021ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8021edc:	4798      	blx	r3
 8021ede:	3601      	adds	r6, #1
 8021ee0:	e7ee      	b.n	8021ec0 <__libc_init_array+0xc>
 8021ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8021ee6:	4798      	blx	r3
 8021ee8:	3601      	adds	r6, #1
 8021eea:	e7f2      	b.n	8021ed2 <__libc_init_array+0x1e>
 8021eec:	08029ac8 	.word	0x08029ac8
 8021ef0:	08029ac8 	.word	0x08029ac8
 8021ef4:	08029ac8 	.word	0x08029ac8
 8021ef8:	08029acc 	.word	0x08029acc

08021efc <__retarget_lock_init_recursive>:
 8021efc:	4770      	bx	lr

08021efe <__retarget_lock_acquire_recursive>:
 8021efe:	4770      	bx	lr

08021f00 <__retarget_lock_release_recursive>:
 8021f00:	4770      	bx	lr
	...

08021f04 <malloc>:
 8021f04:	4b02      	ldr	r3, [pc, #8]	; (8021f10 <malloc+0xc>)
 8021f06:	4601      	mov	r1, r0
 8021f08:	6818      	ldr	r0, [r3, #0]
 8021f0a:	f000 b885 	b.w	8022018 <_malloc_r>
 8021f0e:	bf00      	nop
 8021f10:	240002f8 	.word	0x240002f8

08021f14 <memcpy>:
 8021f14:	440a      	add	r2, r1
 8021f16:	4291      	cmp	r1, r2
 8021f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8021f1c:	d100      	bne.n	8021f20 <memcpy+0xc>
 8021f1e:	4770      	bx	lr
 8021f20:	b510      	push	{r4, lr}
 8021f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021f2a:	4291      	cmp	r1, r2
 8021f2c:	d1f9      	bne.n	8021f22 <memcpy+0xe>
 8021f2e:	bd10      	pop	{r4, pc}

08021f30 <memset>:
 8021f30:	4402      	add	r2, r0
 8021f32:	4603      	mov	r3, r0
 8021f34:	4293      	cmp	r3, r2
 8021f36:	d100      	bne.n	8021f3a <memset+0xa>
 8021f38:	4770      	bx	lr
 8021f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8021f3e:	e7f9      	b.n	8021f34 <memset+0x4>

08021f40 <_free_r>:
 8021f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021f42:	2900      	cmp	r1, #0
 8021f44:	d044      	beq.n	8021fd0 <_free_r+0x90>
 8021f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f4a:	9001      	str	r0, [sp, #4]
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8021f52:	bfb8      	it	lt
 8021f54:	18e4      	addlt	r4, r4, r3
 8021f56:	f003 fb87 	bl	8025668 <__malloc_lock>
 8021f5a:	4a1e      	ldr	r2, [pc, #120]	; (8021fd4 <_free_r+0x94>)
 8021f5c:	9801      	ldr	r0, [sp, #4]
 8021f5e:	6813      	ldr	r3, [r2, #0]
 8021f60:	b933      	cbnz	r3, 8021f70 <_free_r+0x30>
 8021f62:	6063      	str	r3, [r4, #4]
 8021f64:	6014      	str	r4, [r2, #0]
 8021f66:	b003      	add	sp, #12
 8021f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021f6c:	f003 bb82 	b.w	8025674 <__malloc_unlock>
 8021f70:	42a3      	cmp	r3, r4
 8021f72:	d908      	bls.n	8021f86 <_free_r+0x46>
 8021f74:	6825      	ldr	r5, [r4, #0]
 8021f76:	1961      	adds	r1, r4, r5
 8021f78:	428b      	cmp	r3, r1
 8021f7a:	bf01      	itttt	eq
 8021f7c:	6819      	ldreq	r1, [r3, #0]
 8021f7e:	685b      	ldreq	r3, [r3, #4]
 8021f80:	1949      	addeq	r1, r1, r5
 8021f82:	6021      	streq	r1, [r4, #0]
 8021f84:	e7ed      	b.n	8021f62 <_free_r+0x22>
 8021f86:	461a      	mov	r2, r3
 8021f88:	685b      	ldr	r3, [r3, #4]
 8021f8a:	b10b      	cbz	r3, 8021f90 <_free_r+0x50>
 8021f8c:	42a3      	cmp	r3, r4
 8021f8e:	d9fa      	bls.n	8021f86 <_free_r+0x46>
 8021f90:	6811      	ldr	r1, [r2, #0]
 8021f92:	1855      	adds	r5, r2, r1
 8021f94:	42a5      	cmp	r5, r4
 8021f96:	d10b      	bne.n	8021fb0 <_free_r+0x70>
 8021f98:	6824      	ldr	r4, [r4, #0]
 8021f9a:	4421      	add	r1, r4
 8021f9c:	1854      	adds	r4, r2, r1
 8021f9e:	42a3      	cmp	r3, r4
 8021fa0:	6011      	str	r1, [r2, #0]
 8021fa2:	d1e0      	bne.n	8021f66 <_free_r+0x26>
 8021fa4:	681c      	ldr	r4, [r3, #0]
 8021fa6:	685b      	ldr	r3, [r3, #4]
 8021fa8:	6053      	str	r3, [r2, #4]
 8021faa:	4421      	add	r1, r4
 8021fac:	6011      	str	r1, [r2, #0]
 8021fae:	e7da      	b.n	8021f66 <_free_r+0x26>
 8021fb0:	d902      	bls.n	8021fb8 <_free_r+0x78>
 8021fb2:	230c      	movs	r3, #12
 8021fb4:	6003      	str	r3, [r0, #0]
 8021fb6:	e7d6      	b.n	8021f66 <_free_r+0x26>
 8021fb8:	6825      	ldr	r5, [r4, #0]
 8021fba:	1961      	adds	r1, r4, r5
 8021fbc:	428b      	cmp	r3, r1
 8021fbe:	bf04      	itt	eq
 8021fc0:	6819      	ldreq	r1, [r3, #0]
 8021fc2:	685b      	ldreq	r3, [r3, #4]
 8021fc4:	6063      	str	r3, [r4, #4]
 8021fc6:	bf04      	itt	eq
 8021fc8:	1949      	addeq	r1, r1, r5
 8021fca:	6021      	streq	r1, [r4, #0]
 8021fcc:	6054      	str	r4, [r2, #4]
 8021fce:	e7ca      	b.n	8021f66 <_free_r+0x26>
 8021fd0:	b003      	add	sp, #12
 8021fd2:	bd30      	pop	{r4, r5, pc}
 8021fd4:	2400903c 	.word	0x2400903c

08021fd8 <sbrk_aligned>:
 8021fd8:	b570      	push	{r4, r5, r6, lr}
 8021fda:	4e0e      	ldr	r6, [pc, #56]	; (8022014 <sbrk_aligned+0x3c>)
 8021fdc:	460c      	mov	r4, r1
 8021fde:	6831      	ldr	r1, [r6, #0]
 8021fe0:	4605      	mov	r5, r0
 8021fe2:	b911      	cbnz	r1, 8021fea <sbrk_aligned+0x12>
 8021fe4:	f000 ffcc 	bl	8022f80 <_sbrk_r>
 8021fe8:	6030      	str	r0, [r6, #0]
 8021fea:	4621      	mov	r1, r4
 8021fec:	4628      	mov	r0, r5
 8021fee:	f000 ffc7 	bl	8022f80 <_sbrk_r>
 8021ff2:	1c43      	adds	r3, r0, #1
 8021ff4:	d00a      	beq.n	802200c <sbrk_aligned+0x34>
 8021ff6:	1cc4      	adds	r4, r0, #3
 8021ff8:	f024 0403 	bic.w	r4, r4, #3
 8021ffc:	42a0      	cmp	r0, r4
 8021ffe:	d007      	beq.n	8022010 <sbrk_aligned+0x38>
 8022000:	1a21      	subs	r1, r4, r0
 8022002:	4628      	mov	r0, r5
 8022004:	f000 ffbc 	bl	8022f80 <_sbrk_r>
 8022008:	3001      	adds	r0, #1
 802200a:	d101      	bne.n	8022010 <sbrk_aligned+0x38>
 802200c:	f04f 34ff 	mov.w	r4, #4294967295
 8022010:	4620      	mov	r0, r4
 8022012:	bd70      	pop	{r4, r5, r6, pc}
 8022014:	24009040 	.word	0x24009040

08022018 <_malloc_r>:
 8022018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802201c:	1ccd      	adds	r5, r1, #3
 802201e:	f025 0503 	bic.w	r5, r5, #3
 8022022:	3508      	adds	r5, #8
 8022024:	2d0c      	cmp	r5, #12
 8022026:	bf38      	it	cc
 8022028:	250c      	movcc	r5, #12
 802202a:	2d00      	cmp	r5, #0
 802202c:	4607      	mov	r7, r0
 802202e:	db01      	blt.n	8022034 <_malloc_r+0x1c>
 8022030:	42a9      	cmp	r1, r5
 8022032:	d905      	bls.n	8022040 <_malloc_r+0x28>
 8022034:	230c      	movs	r3, #12
 8022036:	603b      	str	r3, [r7, #0]
 8022038:	2600      	movs	r6, #0
 802203a:	4630      	mov	r0, r6
 802203c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022040:	4e2e      	ldr	r6, [pc, #184]	; (80220fc <_malloc_r+0xe4>)
 8022042:	f003 fb11 	bl	8025668 <__malloc_lock>
 8022046:	6833      	ldr	r3, [r6, #0]
 8022048:	461c      	mov	r4, r3
 802204a:	bb34      	cbnz	r4, 802209a <_malloc_r+0x82>
 802204c:	4629      	mov	r1, r5
 802204e:	4638      	mov	r0, r7
 8022050:	f7ff ffc2 	bl	8021fd8 <sbrk_aligned>
 8022054:	1c43      	adds	r3, r0, #1
 8022056:	4604      	mov	r4, r0
 8022058:	d14d      	bne.n	80220f6 <_malloc_r+0xde>
 802205a:	6834      	ldr	r4, [r6, #0]
 802205c:	4626      	mov	r6, r4
 802205e:	2e00      	cmp	r6, #0
 8022060:	d140      	bne.n	80220e4 <_malloc_r+0xcc>
 8022062:	6823      	ldr	r3, [r4, #0]
 8022064:	4631      	mov	r1, r6
 8022066:	4638      	mov	r0, r7
 8022068:	eb04 0803 	add.w	r8, r4, r3
 802206c:	f000 ff88 	bl	8022f80 <_sbrk_r>
 8022070:	4580      	cmp	r8, r0
 8022072:	d13a      	bne.n	80220ea <_malloc_r+0xd2>
 8022074:	6821      	ldr	r1, [r4, #0]
 8022076:	3503      	adds	r5, #3
 8022078:	1a6d      	subs	r5, r5, r1
 802207a:	f025 0503 	bic.w	r5, r5, #3
 802207e:	3508      	adds	r5, #8
 8022080:	2d0c      	cmp	r5, #12
 8022082:	bf38      	it	cc
 8022084:	250c      	movcc	r5, #12
 8022086:	4629      	mov	r1, r5
 8022088:	4638      	mov	r0, r7
 802208a:	f7ff ffa5 	bl	8021fd8 <sbrk_aligned>
 802208e:	3001      	adds	r0, #1
 8022090:	d02b      	beq.n	80220ea <_malloc_r+0xd2>
 8022092:	6823      	ldr	r3, [r4, #0]
 8022094:	442b      	add	r3, r5
 8022096:	6023      	str	r3, [r4, #0]
 8022098:	e00e      	b.n	80220b8 <_malloc_r+0xa0>
 802209a:	6822      	ldr	r2, [r4, #0]
 802209c:	1b52      	subs	r2, r2, r5
 802209e:	d41e      	bmi.n	80220de <_malloc_r+0xc6>
 80220a0:	2a0b      	cmp	r2, #11
 80220a2:	d916      	bls.n	80220d2 <_malloc_r+0xba>
 80220a4:	1961      	adds	r1, r4, r5
 80220a6:	42a3      	cmp	r3, r4
 80220a8:	6025      	str	r5, [r4, #0]
 80220aa:	bf18      	it	ne
 80220ac:	6059      	strne	r1, [r3, #4]
 80220ae:	6863      	ldr	r3, [r4, #4]
 80220b0:	bf08      	it	eq
 80220b2:	6031      	streq	r1, [r6, #0]
 80220b4:	5162      	str	r2, [r4, r5]
 80220b6:	604b      	str	r3, [r1, #4]
 80220b8:	4638      	mov	r0, r7
 80220ba:	f104 060b 	add.w	r6, r4, #11
 80220be:	f003 fad9 	bl	8025674 <__malloc_unlock>
 80220c2:	f026 0607 	bic.w	r6, r6, #7
 80220c6:	1d23      	adds	r3, r4, #4
 80220c8:	1af2      	subs	r2, r6, r3
 80220ca:	d0b6      	beq.n	802203a <_malloc_r+0x22>
 80220cc:	1b9b      	subs	r3, r3, r6
 80220ce:	50a3      	str	r3, [r4, r2]
 80220d0:	e7b3      	b.n	802203a <_malloc_r+0x22>
 80220d2:	6862      	ldr	r2, [r4, #4]
 80220d4:	42a3      	cmp	r3, r4
 80220d6:	bf0c      	ite	eq
 80220d8:	6032      	streq	r2, [r6, #0]
 80220da:	605a      	strne	r2, [r3, #4]
 80220dc:	e7ec      	b.n	80220b8 <_malloc_r+0xa0>
 80220de:	4623      	mov	r3, r4
 80220e0:	6864      	ldr	r4, [r4, #4]
 80220e2:	e7b2      	b.n	802204a <_malloc_r+0x32>
 80220e4:	4634      	mov	r4, r6
 80220e6:	6876      	ldr	r6, [r6, #4]
 80220e8:	e7b9      	b.n	802205e <_malloc_r+0x46>
 80220ea:	230c      	movs	r3, #12
 80220ec:	603b      	str	r3, [r7, #0]
 80220ee:	4638      	mov	r0, r7
 80220f0:	f003 fac0 	bl	8025674 <__malloc_unlock>
 80220f4:	e7a1      	b.n	802203a <_malloc_r+0x22>
 80220f6:	6025      	str	r5, [r4, #0]
 80220f8:	e7de      	b.n	80220b8 <_malloc_r+0xa0>
 80220fa:	bf00      	nop
 80220fc:	2400903c 	.word	0x2400903c

08022100 <__cvt>:
 8022100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022102:	ed2d 8b02 	vpush	{d8}
 8022106:	eeb0 8b40 	vmov.f64	d8, d0
 802210a:	b085      	sub	sp, #20
 802210c:	4617      	mov	r7, r2
 802210e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022110:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022112:	ee18 2a90 	vmov	r2, s17
 8022116:	f025 0520 	bic.w	r5, r5, #32
 802211a:	2a00      	cmp	r2, #0
 802211c:	bfb6      	itet	lt
 802211e:	222d      	movlt	r2, #45	; 0x2d
 8022120:	2200      	movge	r2, #0
 8022122:	eeb1 8b40 	vneglt.f64	d8, d0
 8022126:	2d46      	cmp	r5, #70	; 0x46
 8022128:	460c      	mov	r4, r1
 802212a:	701a      	strb	r2, [r3, #0]
 802212c:	d004      	beq.n	8022138 <__cvt+0x38>
 802212e:	2d45      	cmp	r5, #69	; 0x45
 8022130:	d100      	bne.n	8022134 <__cvt+0x34>
 8022132:	3401      	adds	r4, #1
 8022134:	2102      	movs	r1, #2
 8022136:	e000      	b.n	802213a <__cvt+0x3a>
 8022138:	2103      	movs	r1, #3
 802213a:	ab03      	add	r3, sp, #12
 802213c:	9301      	str	r3, [sp, #4]
 802213e:	ab02      	add	r3, sp, #8
 8022140:	9300      	str	r3, [sp, #0]
 8022142:	4622      	mov	r2, r4
 8022144:	4633      	mov	r3, r6
 8022146:	eeb0 0b48 	vmov.f64	d0, d8
 802214a:	f002 f84d 	bl	80241e8 <_dtoa_r>
 802214e:	2d47      	cmp	r5, #71	; 0x47
 8022150:	d101      	bne.n	8022156 <__cvt+0x56>
 8022152:	07fb      	lsls	r3, r7, #31
 8022154:	d51a      	bpl.n	802218c <__cvt+0x8c>
 8022156:	2d46      	cmp	r5, #70	; 0x46
 8022158:	eb00 0204 	add.w	r2, r0, r4
 802215c:	d10c      	bne.n	8022178 <__cvt+0x78>
 802215e:	7803      	ldrb	r3, [r0, #0]
 8022160:	2b30      	cmp	r3, #48	; 0x30
 8022162:	d107      	bne.n	8022174 <__cvt+0x74>
 8022164:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8022168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802216c:	bf1c      	itt	ne
 802216e:	f1c4 0401 	rsbne	r4, r4, #1
 8022172:	6034      	strne	r4, [r6, #0]
 8022174:	6833      	ldr	r3, [r6, #0]
 8022176:	441a      	add	r2, r3
 8022178:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802217c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022180:	bf08      	it	eq
 8022182:	9203      	streq	r2, [sp, #12]
 8022184:	2130      	movs	r1, #48	; 0x30
 8022186:	9b03      	ldr	r3, [sp, #12]
 8022188:	4293      	cmp	r3, r2
 802218a:	d307      	bcc.n	802219c <__cvt+0x9c>
 802218c:	9b03      	ldr	r3, [sp, #12]
 802218e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022190:	1a1b      	subs	r3, r3, r0
 8022192:	6013      	str	r3, [r2, #0]
 8022194:	b005      	add	sp, #20
 8022196:	ecbd 8b02 	vpop	{d8}
 802219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802219c:	1c5c      	adds	r4, r3, #1
 802219e:	9403      	str	r4, [sp, #12]
 80221a0:	7019      	strb	r1, [r3, #0]
 80221a2:	e7f0      	b.n	8022186 <__cvt+0x86>

080221a4 <__exponent>:
 80221a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221a6:	4603      	mov	r3, r0
 80221a8:	2900      	cmp	r1, #0
 80221aa:	bfb8      	it	lt
 80221ac:	4249      	neglt	r1, r1
 80221ae:	f803 2b02 	strb.w	r2, [r3], #2
 80221b2:	bfb4      	ite	lt
 80221b4:	222d      	movlt	r2, #45	; 0x2d
 80221b6:	222b      	movge	r2, #43	; 0x2b
 80221b8:	2909      	cmp	r1, #9
 80221ba:	7042      	strb	r2, [r0, #1]
 80221bc:	dd2a      	ble.n	8022214 <__exponent+0x70>
 80221be:	f10d 0407 	add.w	r4, sp, #7
 80221c2:	46a4      	mov	ip, r4
 80221c4:	270a      	movs	r7, #10
 80221c6:	46a6      	mov	lr, r4
 80221c8:	460a      	mov	r2, r1
 80221ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80221ce:	fb07 1516 	mls	r5, r7, r6, r1
 80221d2:	3530      	adds	r5, #48	; 0x30
 80221d4:	2a63      	cmp	r2, #99	; 0x63
 80221d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80221da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80221de:	4631      	mov	r1, r6
 80221e0:	dcf1      	bgt.n	80221c6 <__exponent+0x22>
 80221e2:	3130      	adds	r1, #48	; 0x30
 80221e4:	f1ae 0502 	sub.w	r5, lr, #2
 80221e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80221ec:	1c44      	adds	r4, r0, #1
 80221ee:	4629      	mov	r1, r5
 80221f0:	4561      	cmp	r1, ip
 80221f2:	d30a      	bcc.n	802220a <__exponent+0x66>
 80221f4:	f10d 0209 	add.w	r2, sp, #9
 80221f8:	eba2 020e 	sub.w	r2, r2, lr
 80221fc:	4565      	cmp	r5, ip
 80221fe:	bf88      	it	hi
 8022200:	2200      	movhi	r2, #0
 8022202:	4413      	add	r3, r2
 8022204:	1a18      	subs	r0, r3, r0
 8022206:	b003      	add	sp, #12
 8022208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802220a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802220e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022212:	e7ed      	b.n	80221f0 <__exponent+0x4c>
 8022214:	2330      	movs	r3, #48	; 0x30
 8022216:	3130      	adds	r1, #48	; 0x30
 8022218:	7083      	strb	r3, [r0, #2]
 802221a:	70c1      	strb	r1, [r0, #3]
 802221c:	1d03      	adds	r3, r0, #4
 802221e:	e7f1      	b.n	8022204 <__exponent+0x60>

08022220 <_printf_float>:
 8022220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022224:	b08b      	sub	sp, #44	; 0x2c
 8022226:	460c      	mov	r4, r1
 8022228:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802222c:	4616      	mov	r6, r2
 802222e:	461f      	mov	r7, r3
 8022230:	4605      	mov	r5, r0
 8022232:	f003 f98b 	bl	802554c <_localeconv_r>
 8022236:	f8d0 b000 	ldr.w	fp, [r0]
 802223a:	4658      	mov	r0, fp
 802223c:	f7de f85a 	bl	80002f4 <strlen>
 8022240:	2300      	movs	r3, #0
 8022242:	9308      	str	r3, [sp, #32]
 8022244:	f8d8 3000 	ldr.w	r3, [r8]
 8022248:	f894 9018 	ldrb.w	r9, [r4, #24]
 802224c:	6822      	ldr	r2, [r4, #0]
 802224e:	3307      	adds	r3, #7
 8022250:	f023 0307 	bic.w	r3, r3, #7
 8022254:	f103 0108 	add.w	r1, r3, #8
 8022258:	f8c8 1000 	str.w	r1, [r8]
 802225c:	4682      	mov	sl, r0
 802225e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022262:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8022266:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80224c8 <_printf_float+0x2a8>
 802226a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802226e:	eeb0 6bc0 	vabs.f64	d6, d0
 8022272:	eeb4 6b47 	vcmp.f64	d6, d7
 8022276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802227a:	dd24      	ble.n	80222c6 <_printf_float+0xa6>
 802227c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8022280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022284:	d502      	bpl.n	802228c <_printf_float+0x6c>
 8022286:	232d      	movs	r3, #45	; 0x2d
 8022288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802228c:	4b90      	ldr	r3, [pc, #576]	; (80224d0 <_printf_float+0x2b0>)
 802228e:	4891      	ldr	r0, [pc, #580]	; (80224d4 <_printf_float+0x2b4>)
 8022290:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8022294:	bf94      	ite	ls
 8022296:	4698      	movls	r8, r3
 8022298:	4680      	movhi	r8, r0
 802229a:	2303      	movs	r3, #3
 802229c:	6123      	str	r3, [r4, #16]
 802229e:	f022 0204 	bic.w	r2, r2, #4
 80222a2:	2300      	movs	r3, #0
 80222a4:	6022      	str	r2, [r4, #0]
 80222a6:	9304      	str	r3, [sp, #16]
 80222a8:	9700      	str	r7, [sp, #0]
 80222aa:	4633      	mov	r3, r6
 80222ac:	aa09      	add	r2, sp, #36	; 0x24
 80222ae:	4621      	mov	r1, r4
 80222b0:	4628      	mov	r0, r5
 80222b2:	f000 f9d3 	bl	802265c <_printf_common>
 80222b6:	3001      	adds	r0, #1
 80222b8:	f040 808a 	bne.w	80223d0 <_printf_float+0x1b0>
 80222bc:	f04f 30ff 	mov.w	r0, #4294967295
 80222c0:	b00b      	add	sp, #44	; 0x2c
 80222c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80222ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222ce:	d709      	bvc.n	80222e4 <_printf_float+0xc4>
 80222d0:	ee10 3a90 	vmov	r3, s1
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	bfbc      	itt	lt
 80222d8:	232d      	movlt	r3, #45	; 0x2d
 80222da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80222de:	487e      	ldr	r0, [pc, #504]	; (80224d8 <_printf_float+0x2b8>)
 80222e0:	4b7e      	ldr	r3, [pc, #504]	; (80224dc <_printf_float+0x2bc>)
 80222e2:	e7d5      	b.n	8022290 <_printf_float+0x70>
 80222e4:	6863      	ldr	r3, [r4, #4]
 80222e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80222ea:	9104      	str	r1, [sp, #16]
 80222ec:	1c59      	adds	r1, r3, #1
 80222ee:	d13c      	bne.n	802236a <_printf_float+0x14a>
 80222f0:	2306      	movs	r3, #6
 80222f2:	6063      	str	r3, [r4, #4]
 80222f4:	2300      	movs	r3, #0
 80222f6:	9303      	str	r3, [sp, #12]
 80222f8:	ab08      	add	r3, sp, #32
 80222fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80222fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8022302:	ab07      	add	r3, sp, #28
 8022304:	6861      	ldr	r1, [r4, #4]
 8022306:	9300      	str	r3, [sp, #0]
 8022308:	6022      	str	r2, [r4, #0]
 802230a:	f10d 031b 	add.w	r3, sp, #27
 802230e:	4628      	mov	r0, r5
 8022310:	f7ff fef6 	bl	8022100 <__cvt>
 8022314:	9b04      	ldr	r3, [sp, #16]
 8022316:	9907      	ldr	r1, [sp, #28]
 8022318:	2b47      	cmp	r3, #71	; 0x47
 802231a:	4680      	mov	r8, r0
 802231c:	d108      	bne.n	8022330 <_printf_float+0x110>
 802231e:	1cc8      	adds	r0, r1, #3
 8022320:	db02      	blt.n	8022328 <_printf_float+0x108>
 8022322:	6863      	ldr	r3, [r4, #4]
 8022324:	4299      	cmp	r1, r3
 8022326:	dd41      	ble.n	80223ac <_printf_float+0x18c>
 8022328:	f1a9 0902 	sub.w	r9, r9, #2
 802232c:	fa5f f989 	uxtb.w	r9, r9
 8022330:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8022334:	d820      	bhi.n	8022378 <_printf_float+0x158>
 8022336:	3901      	subs	r1, #1
 8022338:	464a      	mov	r2, r9
 802233a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802233e:	9107      	str	r1, [sp, #28]
 8022340:	f7ff ff30 	bl	80221a4 <__exponent>
 8022344:	9a08      	ldr	r2, [sp, #32]
 8022346:	9004      	str	r0, [sp, #16]
 8022348:	1813      	adds	r3, r2, r0
 802234a:	2a01      	cmp	r2, #1
 802234c:	6123      	str	r3, [r4, #16]
 802234e:	dc02      	bgt.n	8022356 <_printf_float+0x136>
 8022350:	6822      	ldr	r2, [r4, #0]
 8022352:	07d2      	lsls	r2, r2, #31
 8022354:	d501      	bpl.n	802235a <_printf_float+0x13a>
 8022356:	3301      	adds	r3, #1
 8022358:	6123      	str	r3, [r4, #16]
 802235a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802235e:	2b00      	cmp	r3, #0
 8022360:	d0a2      	beq.n	80222a8 <_printf_float+0x88>
 8022362:	232d      	movs	r3, #45	; 0x2d
 8022364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022368:	e79e      	b.n	80222a8 <_printf_float+0x88>
 802236a:	9904      	ldr	r1, [sp, #16]
 802236c:	2947      	cmp	r1, #71	; 0x47
 802236e:	d1c1      	bne.n	80222f4 <_printf_float+0xd4>
 8022370:	2b00      	cmp	r3, #0
 8022372:	d1bf      	bne.n	80222f4 <_printf_float+0xd4>
 8022374:	2301      	movs	r3, #1
 8022376:	e7bc      	b.n	80222f2 <_printf_float+0xd2>
 8022378:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802237c:	d118      	bne.n	80223b0 <_printf_float+0x190>
 802237e:	2900      	cmp	r1, #0
 8022380:	6863      	ldr	r3, [r4, #4]
 8022382:	dd0b      	ble.n	802239c <_printf_float+0x17c>
 8022384:	6121      	str	r1, [r4, #16]
 8022386:	b913      	cbnz	r3, 802238e <_printf_float+0x16e>
 8022388:	6822      	ldr	r2, [r4, #0]
 802238a:	07d0      	lsls	r0, r2, #31
 802238c:	d502      	bpl.n	8022394 <_printf_float+0x174>
 802238e:	3301      	adds	r3, #1
 8022390:	440b      	add	r3, r1
 8022392:	6123      	str	r3, [r4, #16]
 8022394:	2300      	movs	r3, #0
 8022396:	65a1      	str	r1, [r4, #88]	; 0x58
 8022398:	9304      	str	r3, [sp, #16]
 802239a:	e7de      	b.n	802235a <_printf_float+0x13a>
 802239c:	b913      	cbnz	r3, 80223a4 <_printf_float+0x184>
 802239e:	6822      	ldr	r2, [r4, #0]
 80223a0:	07d2      	lsls	r2, r2, #31
 80223a2:	d501      	bpl.n	80223a8 <_printf_float+0x188>
 80223a4:	3302      	adds	r3, #2
 80223a6:	e7f4      	b.n	8022392 <_printf_float+0x172>
 80223a8:	2301      	movs	r3, #1
 80223aa:	e7f2      	b.n	8022392 <_printf_float+0x172>
 80223ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80223b0:	9b08      	ldr	r3, [sp, #32]
 80223b2:	4299      	cmp	r1, r3
 80223b4:	db05      	blt.n	80223c2 <_printf_float+0x1a2>
 80223b6:	6823      	ldr	r3, [r4, #0]
 80223b8:	6121      	str	r1, [r4, #16]
 80223ba:	07d8      	lsls	r0, r3, #31
 80223bc:	d5ea      	bpl.n	8022394 <_printf_float+0x174>
 80223be:	1c4b      	adds	r3, r1, #1
 80223c0:	e7e7      	b.n	8022392 <_printf_float+0x172>
 80223c2:	2900      	cmp	r1, #0
 80223c4:	bfd4      	ite	le
 80223c6:	f1c1 0202 	rsble	r2, r1, #2
 80223ca:	2201      	movgt	r2, #1
 80223cc:	4413      	add	r3, r2
 80223ce:	e7e0      	b.n	8022392 <_printf_float+0x172>
 80223d0:	6823      	ldr	r3, [r4, #0]
 80223d2:	055a      	lsls	r2, r3, #21
 80223d4:	d407      	bmi.n	80223e6 <_printf_float+0x1c6>
 80223d6:	6923      	ldr	r3, [r4, #16]
 80223d8:	4642      	mov	r2, r8
 80223da:	4631      	mov	r1, r6
 80223dc:	4628      	mov	r0, r5
 80223de:	47b8      	blx	r7
 80223e0:	3001      	adds	r0, #1
 80223e2:	d12a      	bne.n	802243a <_printf_float+0x21a>
 80223e4:	e76a      	b.n	80222bc <_printf_float+0x9c>
 80223e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80223ea:	f240 80e2 	bls.w	80225b2 <_printf_float+0x392>
 80223ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80223f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80223f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223fa:	d133      	bne.n	8022464 <_printf_float+0x244>
 80223fc:	4a38      	ldr	r2, [pc, #224]	; (80224e0 <_printf_float+0x2c0>)
 80223fe:	2301      	movs	r3, #1
 8022400:	4631      	mov	r1, r6
 8022402:	4628      	mov	r0, r5
 8022404:	47b8      	blx	r7
 8022406:	3001      	adds	r0, #1
 8022408:	f43f af58 	beq.w	80222bc <_printf_float+0x9c>
 802240c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022410:	429a      	cmp	r2, r3
 8022412:	db02      	blt.n	802241a <_printf_float+0x1fa>
 8022414:	6823      	ldr	r3, [r4, #0]
 8022416:	07d8      	lsls	r0, r3, #31
 8022418:	d50f      	bpl.n	802243a <_printf_float+0x21a>
 802241a:	4653      	mov	r3, sl
 802241c:	465a      	mov	r2, fp
 802241e:	4631      	mov	r1, r6
 8022420:	4628      	mov	r0, r5
 8022422:	47b8      	blx	r7
 8022424:	3001      	adds	r0, #1
 8022426:	f43f af49 	beq.w	80222bc <_printf_float+0x9c>
 802242a:	f04f 0800 	mov.w	r8, #0
 802242e:	f104 091a 	add.w	r9, r4, #26
 8022432:	9b08      	ldr	r3, [sp, #32]
 8022434:	3b01      	subs	r3, #1
 8022436:	4543      	cmp	r3, r8
 8022438:	dc09      	bgt.n	802244e <_printf_float+0x22e>
 802243a:	6823      	ldr	r3, [r4, #0]
 802243c:	079b      	lsls	r3, r3, #30
 802243e:	f100 8108 	bmi.w	8022652 <_printf_float+0x432>
 8022442:	68e0      	ldr	r0, [r4, #12]
 8022444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022446:	4298      	cmp	r0, r3
 8022448:	bfb8      	it	lt
 802244a:	4618      	movlt	r0, r3
 802244c:	e738      	b.n	80222c0 <_printf_float+0xa0>
 802244e:	2301      	movs	r3, #1
 8022450:	464a      	mov	r2, r9
 8022452:	4631      	mov	r1, r6
 8022454:	4628      	mov	r0, r5
 8022456:	47b8      	blx	r7
 8022458:	3001      	adds	r0, #1
 802245a:	f43f af2f 	beq.w	80222bc <_printf_float+0x9c>
 802245e:	f108 0801 	add.w	r8, r8, #1
 8022462:	e7e6      	b.n	8022432 <_printf_float+0x212>
 8022464:	9b07      	ldr	r3, [sp, #28]
 8022466:	2b00      	cmp	r3, #0
 8022468:	dc3c      	bgt.n	80224e4 <_printf_float+0x2c4>
 802246a:	4a1d      	ldr	r2, [pc, #116]	; (80224e0 <_printf_float+0x2c0>)
 802246c:	2301      	movs	r3, #1
 802246e:	4631      	mov	r1, r6
 8022470:	4628      	mov	r0, r5
 8022472:	47b8      	blx	r7
 8022474:	3001      	adds	r0, #1
 8022476:	f43f af21 	beq.w	80222bc <_printf_float+0x9c>
 802247a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802247e:	4313      	orrs	r3, r2
 8022480:	d102      	bne.n	8022488 <_printf_float+0x268>
 8022482:	6823      	ldr	r3, [r4, #0]
 8022484:	07d9      	lsls	r1, r3, #31
 8022486:	d5d8      	bpl.n	802243a <_printf_float+0x21a>
 8022488:	4653      	mov	r3, sl
 802248a:	465a      	mov	r2, fp
 802248c:	4631      	mov	r1, r6
 802248e:	4628      	mov	r0, r5
 8022490:	47b8      	blx	r7
 8022492:	3001      	adds	r0, #1
 8022494:	f43f af12 	beq.w	80222bc <_printf_float+0x9c>
 8022498:	f04f 0900 	mov.w	r9, #0
 802249c:	f104 0a1a 	add.w	sl, r4, #26
 80224a0:	9b07      	ldr	r3, [sp, #28]
 80224a2:	425b      	negs	r3, r3
 80224a4:	454b      	cmp	r3, r9
 80224a6:	dc01      	bgt.n	80224ac <_printf_float+0x28c>
 80224a8:	9b08      	ldr	r3, [sp, #32]
 80224aa:	e795      	b.n	80223d8 <_printf_float+0x1b8>
 80224ac:	2301      	movs	r3, #1
 80224ae:	4652      	mov	r2, sl
 80224b0:	4631      	mov	r1, r6
 80224b2:	4628      	mov	r0, r5
 80224b4:	47b8      	blx	r7
 80224b6:	3001      	adds	r0, #1
 80224b8:	f43f af00 	beq.w	80222bc <_printf_float+0x9c>
 80224bc:	f109 0901 	add.w	r9, r9, #1
 80224c0:	e7ee      	b.n	80224a0 <_printf_float+0x280>
 80224c2:	bf00      	nop
 80224c4:	f3af 8000 	nop.w
 80224c8:	ffffffff 	.word	0xffffffff
 80224cc:	7fefffff 	.word	0x7fefffff
 80224d0:	08027e34 	.word	0x08027e34
 80224d4:	08027e38 	.word	0x08027e38
 80224d8:	08027e40 	.word	0x08027e40
 80224dc:	08027e3c 	.word	0x08027e3c
 80224e0:	08027e44 	.word	0x08027e44
 80224e4:	9a08      	ldr	r2, [sp, #32]
 80224e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80224e8:	429a      	cmp	r2, r3
 80224ea:	bfa8      	it	ge
 80224ec:	461a      	movge	r2, r3
 80224ee:	2a00      	cmp	r2, #0
 80224f0:	4691      	mov	r9, r2
 80224f2:	dc38      	bgt.n	8022566 <_printf_float+0x346>
 80224f4:	2300      	movs	r3, #0
 80224f6:	9305      	str	r3, [sp, #20]
 80224f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80224fc:	f104 021a 	add.w	r2, r4, #26
 8022500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022502:	9905      	ldr	r1, [sp, #20]
 8022504:	9304      	str	r3, [sp, #16]
 8022506:	eba3 0309 	sub.w	r3, r3, r9
 802250a:	428b      	cmp	r3, r1
 802250c:	dc33      	bgt.n	8022576 <_printf_float+0x356>
 802250e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022512:	429a      	cmp	r2, r3
 8022514:	db3c      	blt.n	8022590 <_printf_float+0x370>
 8022516:	6823      	ldr	r3, [r4, #0]
 8022518:	07da      	lsls	r2, r3, #31
 802251a:	d439      	bmi.n	8022590 <_printf_float+0x370>
 802251c:	9b08      	ldr	r3, [sp, #32]
 802251e:	9a04      	ldr	r2, [sp, #16]
 8022520:	9907      	ldr	r1, [sp, #28]
 8022522:	1a9a      	subs	r2, r3, r2
 8022524:	eba3 0901 	sub.w	r9, r3, r1
 8022528:	4591      	cmp	r9, r2
 802252a:	bfa8      	it	ge
 802252c:	4691      	movge	r9, r2
 802252e:	f1b9 0f00 	cmp.w	r9, #0
 8022532:	dc35      	bgt.n	80225a0 <_printf_float+0x380>
 8022534:	f04f 0800 	mov.w	r8, #0
 8022538:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802253c:	f104 0a1a 	add.w	sl, r4, #26
 8022540:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022544:	1a9b      	subs	r3, r3, r2
 8022546:	eba3 0309 	sub.w	r3, r3, r9
 802254a:	4543      	cmp	r3, r8
 802254c:	f77f af75 	ble.w	802243a <_printf_float+0x21a>
 8022550:	2301      	movs	r3, #1
 8022552:	4652      	mov	r2, sl
 8022554:	4631      	mov	r1, r6
 8022556:	4628      	mov	r0, r5
 8022558:	47b8      	blx	r7
 802255a:	3001      	adds	r0, #1
 802255c:	f43f aeae 	beq.w	80222bc <_printf_float+0x9c>
 8022560:	f108 0801 	add.w	r8, r8, #1
 8022564:	e7ec      	b.n	8022540 <_printf_float+0x320>
 8022566:	4613      	mov	r3, r2
 8022568:	4631      	mov	r1, r6
 802256a:	4642      	mov	r2, r8
 802256c:	4628      	mov	r0, r5
 802256e:	47b8      	blx	r7
 8022570:	3001      	adds	r0, #1
 8022572:	d1bf      	bne.n	80224f4 <_printf_float+0x2d4>
 8022574:	e6a2      	b.n	80222bc <_printf_float+0x9c>
 8022576:	2301      	movs	r3, #1
 8022578:	4631      	mov	r1, r6
 802257a:	4628      	mov	r0, r5
 802257c:	9204      	str	r2, [sp, #16]
 802257e:	47b8      	blx	r7
 8022580:	3001      	adds	r0, #1
 8022582:	f43f ae9b 	beq.w	80222bc <_printf_float+0x9c>
 8022586:	9b05      	ldr	r3, [sp, #20]
 8022588:	9a04      	ldr	r2, [sp, #16]
 802258a:	3301      	adds	r3, #1
 802258c:	9305      	str	r3, [sp, #20]
 802258e:	e7b7      	b.n	8022500 <_printf_float+0x2e0>
 8022590:	4653      	mov	r3, sl
 8022592:	465a      	mov	r2, fp
 8022594:	4631      	mov	r1, r6
 8022596:	4628      	mov	r0, r5
 8022598:	47b8      	blx	r7
 802259a:	3001      	adds	r0, #1
 802259c:	d1be      	bne.n	802251c <_printf_float+0x2fc>
 802259e:	e68d      	b.n	80222bc <_printf_float+0x9c>
 80225a0:	9a04      	ldr	r2, [sp, #16]
 80225a2:	464b      	mov	r3, r9
 80225a4:	4442      	add	r2, r8
 80225a6:	4631      	mov	r1, r6
 80225a8:	4628      	mov	r0, r5
 80225aa:	47b8      	blx	r7
 80225ac:	3001      	adds	r0, #1
 80225ae:	d1c1      	bne.n	8022534 <_printf_float+0x314>
 80225b0:	e684      	b.n	80222bc <_printf_float+0x9c>
 80225b2:	9a08      	ldr	r2, [sp, #32]
 80225b4:	2a01      	cmp	r2, #1
 80225b6:	dc01      	bgt.n	80225bc <_printf_float+0x39c>
 80225b8:	07db      	lsls	r3, r3, #31
 80225ba:	d537      	bpl.n	802262c <_printf_float+0x40c>
 80225bc:	2301      	movs	r3, #1
 80225be:	4642      	mov	r2, r8
 80225c0:	4631      	mov	r1, r6
 80225c2:	4628      	mov	r0, r5
 80225c4:	47b8      	blx	r7
 80225c6:	3001      	adds	r0, #1
 80225c8:	f43f ae78 	beq.w	80222bc <_printf_float+0x9c>
 80225cc:	4653      	mov	r3, sl
 80225ce:	465a      	mov	r2, fp
 80225d0:	4631      	mov	r1, r6
 80225d2:	4628      	mov	r0, r5
 80225d4:	47b8      	blx	r7
 80225d6:	3001      	adds	r0, #1
 80225d8:	f43f ae70 	beq.w	80222bc <_printf_float+0x9c>
 80225dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80225e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80225e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225e8:	d01b      	beq.n	8022622 <_printf_float+0x402>
 80225ea:	9b08      	ldr	r3, [sp, #32]
 80225ec:	f108 0201 	add.w	r2, r8, #1
 80225f0:	3b01      	subs	r3, #1
 80225f2:	4631      	mov	r1, r6
 80225f4:	4628      	mov	r0, r5
 80225f6:	47b8      	blx	r7
 80225f8:	3001      	adds	r0, #1
 80225fa:	d10e      	bne.n	802261a <_printf_float+0x3fa>
 80225fc:	e65e      	b.n	80222bc <_printf_float+0x9c>
 80225fe:	2301      	movs	r3, #1
 8022600:	464a      	mov	r2, r9
 8022602:	4631      	mov	r1, r6
 8022604:	4628      	mov	r0, r5
 8022606:	47b8      	blx	r7
 8022608:	3001      	adds	r0, #1
 802260a:	f43f ae57 	beq.w	80222bc <_printf_float+0x9c>
 802260e:	f108 0801 	add.w	r8, r8, #1
 8022612:	9b08      	ldr	r3, [sp, #32]
 8022614:	3b01      	subs	r3, #1
 8022616:	4543      	cmp	r3, r8
 8022618:	dcf1      	bgt.n	80225fe <_printf_float+0x3de>
 802261a:	9b04      	ldr	r3, [sp, #16]
 802261c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022620:	e6db      	b.n	80223da <_printf_float+0x1ba>
 8022622:	f04f 0800 	mov.w	r8, #0
 8022626:	f104 091a 	add.w	r9, r4, #26
 802262a:	e7f2      	b.n	8022612 <_printf_float+0x3f2>
 802262c:	2301      	movs	r3, #1
 802262e:	4642      	mov	r2, r8
 8022630:	e7df      	b.n	80225f2 <_printf_float+0x3d2>
 8022632:	2301      	movs	r3, #1
 8022634:	464a      	mov	r2, r9
 8022636:	4631      	mov	r1, r6
 8022638:	4628      	mov	r0, r5
 802263a:	47b8      	blx	r7
 802263c:	3001      	adds	r0, #1
 802263e:	f43f ae3d 	beq.w	80222bc <_printf_float+0x9c>
 8022642:	f108 0801 	add.w	r8, r8, #1
 8022646:	68e3      	ldr	r3, [r4, #12]
 8022648:	9909      	ldr	r1, [sp, #36]	; 0x24
 802264a:	1a5b      	subs	r3, r3, r1
 802264c:	4543      	cmp	r3, r8
 802264e:	dcf0      	bgt.n	8022632 <_printf_float+0x412>
 8022650:	e6f7      	b.n	8022442 <_printf_float+0x222>
 8022652:	f04f 0800 	mov.w	r8, #0
 8022656:	f104 0919 	add.w	r9, r4, #25
 802265a:	e7f4      	b.n	8022646 <_printf_float+0x426>

0802265c <_printf_common>:
 802265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022660:	4616      	mov	r6, r2
 8022662:	4699      	mov	r9, r3
 8022664:	688a      	ldr	r2, [r1, #8]
 8022666:	690b      	ldr	r3, [r1, #16]
 8022668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802266c:	4293      	cmp	r3, r2
 802266e:	bfb8      	it	lt
 8022670:	4613      	movlt	r3, r2
 8022672:	6033      	str	r3, [r6, #0]
 8022674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022678:	4607      	mov	r7, r0
 802267a:	460c      	mov	r4, r1
 802267c:	b10a      	cbz	r2, 8022682 <_printf_common+0x26>
 802267e:	3301      	adds	r3, #1
 8022680:	6033      	str	r3, [r6, #0]
 8022682:	6823      	ldr	r3, [r4, #0]
 8022684:	0699      	lsls	r1, r3, #26
 8022686:	bf42      	ittt	mi
 8022688:	6833      	ldrmi	r3, [r6, #0]
 802268a:	3302      	addmi	r3, #2
 802268c:	6033      	strmi	r3, [r6, #0]
 802268e:	6825      	ldr	r5, [r4, #0]
 8022690:	f015 0506 	ands.w	r5, r5, #6
 8022694:	d106      	bne.n	80226a4 <_printf_common+0x48>
 8022696:	f104 0a19 	add.w	sl, r4, #25
 802269a:	68e3      	ldr	r3, [r4, #12]
 802269c:	6832      	ldr	r2, [r6, #0]
 802269e:	1a9b      	subs	r3, r3, r2
 80226a0:	42ab      	cmp	r3, r5
 80226a2:	dc26      	bgt.n	80226f2 <_printf_common+0x96>
 80226a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80226a8:	1e13      	subs	r3, r2, #0
 80226aa:	6822      	ldr	r2, [r4, #0]
 80226ac:	bf18      	it	ne
 80226ae:	2301      	movne	r3, #1
 80226b0:	0692      	lsls	r2, r2, #26
 80226b2:	d42b      	bmi.n	802270c <_printf_common+0xb0>
 80226b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80226b8:	4649      	mov	r1, r9
 80226ba:	4638      	mov	r0, r7
 80226bc:	47c0      	blx	r8
 80226be:	3001      	adds	r0, #1
 80226c0:	d01e      	beq.n	8022700 <_printf_common+0xa4>
 80226c2:	6823      	ldr	r3, [r4, #0]
 80226c4:	68e5      	ldr	r5, [r4, #12]
 80226c6:	6832      	ldr	r2, [r6, #0]
 80226c8:	f003 0306 	and.w	r3, r3, #6
 80226cc:	2b04      	cmp	r3, #4
 80226ce:	bf08      	it	eq
 80226d0:	1aad      	subeq	r5, r5, r2
 80226d2:	68a3      	ldr	r3, [r4, #8]
 80226d4:	6922      	ldr	r2, [r4, #16]
 80226d6:	bf0c      	ite	eq
 80226d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80226dc:	2500      	movne	r5, #0
 80226de:	4293      	cmp	r3, r2
 80226e0:	bfc4      	itt	gt
 80226e2:	1a9b      	subgt	r3, r3, r2
 80226e4:	18ed      	addgt	r5, r5, r3
 80226e6:	2600      	movs	r6, #0
 80226e8:	341a      	adds	r4, #26
 80226ea:	42b5      	cmp	r5, r6
 80226ec:	d11a      	bne.n	8022724 <_printf_common+0xc8>
 80226ee:	2000      	movs	r0, #0
 80226f0:	e008      	b.n	8022704 <_printf_common+0xa8>
 80226f2:	2301      	movs	r3, #1
 80226f4:	4652      	mov	r2, sl
 80226f6:	4649      	mov	r1, r9
 80226f8:	4638      	mov	r0, r7
 80226fa:	47c0      	blx	r8
 80226fc:	3001      	adds	r0, #1
 80226fe:	d103      	bne.n	8022708 <_printf_common+0xac>
 8022700:	f04f 30ff 	mov.w	r0, #4294967295
 8022704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022708:	3501      	adds	r5, #1
 802270a:	e7c6      	b.n	802269a <_printf_common+0x3e>
 802270c:	18e1      	adds	r1, r4, r3
 802270e:	1c5a      	adds	r2, r3, #1
 8022710:	2030      	movs	r0, #48	; 0x30
 8022712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022716:	4422      	add	r2, r4
 8022718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802271c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022720:	3302      	adds	r3, #2
 8022722:	e7c7      	b.n	80226b4 <_printf_common+0x58>
 8022724:	2301      	movs	r3, #1
 8022726:	4622      	mov	r2, r4
 8022728:	4649      	mov	r1, r9
 802272a:	4638      	mov	r0, r7
 802272c:	47c0      	blx	r8
 802272e:	3001      	adds	r0, #1
 8022730:	d0e6      	beq.n	8022700 <_printf_common+0xa4>
 8022732:	3601      	adds	r6, #1
 8022734:	e7d9      	b.n	80226ea <_printf_common+0x8e>
	...

08022738 <_printf_i>:
 8022738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802273c:	7e0f      	ldrb	r7, [r1, #24]
 802273e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022740:	2f78      	cmp	r7, #120	; 0x78
 8022742:	4691      	mov	r9, r2
 8022744:	4680      	mov	r8, r0
 8022746:	460c      	mov	r4, r1
 8022748:	469a      	mov	sl, r3
 802274a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802274e:	d807      	bhi.n	8022760 <_printf_i+0x28>
 8022750:	2f62      	cmp	r7, #98	; 0x62
 8022752:	d80a      	bhi.n	802276a <_printf_i+0x32>
 8022754:	2f00      	cmp	r7, #0
 8022756:	f000 80d8 	beq.w	802290a <_printf_i+0x1d2>
 802275a:	2f58      	cmp	r7, #88	; 0x58
 802275c:	f000 80a3 	beq.w	80228a6 <_printf_i+0x16e>
 8022760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022768:	e03a      	b.n	80227e0 <_printf_i+0xa8>
 802276a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802276e:	2b15      	cmp	r3, #21
 8022770:	d8f6      	bhi.n	8022760 <_printf_i+0x28>
 8022772:	a101      	add	r1, pc, #4	; (adr r1, 8022778 <_printf_i+0x40>)
 8022774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022778:	080227d1 	.word	0x080227d1
 802277c:	080227e5 	.word	0x080227e5
 8022780:	08022761 	.word	0x08022761
 8022784:	08022761 	.word	0x08022761
 8022788:	08022761 	.word	0x08022761
 802278c:	08022761 	.word	0x08022761
 8022790:	080227e5 	.word	0x080227e5
 8022794:	08022761 	.word	0x08022761
 8022798:	08022761 	.word	0x08022761
 802279c:	08022761 	.word	0x08022761
 80227a0:	08022761 	.word	0x08022761
 80227a4:	080228f1 	.word	0x080228f1
 80227a8:	08022815 	.word	0x08022815
 80227ac:	080228d3 	.word	0x080228d3
 80227b0:	08022761 	.word	0x08022761
 80227b4:	08022761 	.word	0x08022761
 80227b8:	08022913 	.word	0x08022913
 80227bc:	08022761 	.word	0x08022761
 80227c0:	08022815 	.word	0x08022815
 80227c4:	08022761 	.word	0x08022761
 80227c8:	08022761 	.word	0x08022761
 80227cc:	080228db 	.word	0x080228db
 80227d0:	682b      	ldr	r3, [r5, #0]
 80227d2:	1d1a      	adds	r2, r3, #4
 80227d4:	681b      	ldr	r3, [r3, #0]
 80227d6:	602a      	str	r2, [r5, #0]
 80227d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80227dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80227e0:	2301      	movs	r3, #1
 80227e2:	e0a3      	b.n	802292c <_printf_i+0x1f4>
 80227e4:	6820      	ldr	r0, [r4, #0]
 80227e6:	6829      	ldr	r1, [r5, #0]
 80227e8:	0606      	lsls	r6, r0, #24
 80227ea:	f101 0304 	add.w	r3, r1, #4
 80227ee:	d50a      	bpl.n	8022806 <_printf_i+0xce>
 80227f0:	680e      	ldr	r6, [r1, #0]
 80227f2:	602b      	str	r3, [r5, #0]
 80227f4:	2e00      	cmp	r6, #0
 80227f6:	da03      	bge.n	8022800 <_printf_i+0xc8>
 80227f8:	232d      	movs	r3, #45	; 0x2d
 80227fa:	4276      	negs	r6, r6
 80227fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022800:	485e      	ldr	r0, [pc, #376]	; (802297c <_printf_i+0x244>)
 8022802:	230a      	movs	r3, #10
 8022804:	e019      	b.n	802283a <_printf_i+0x102>
 8022806:	680e      	ldr	r6, [r1, #0]
 8022808:	602b      	str	r3, [r5, #0]
 802280a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802280e:	bf18      	it	ne
 8022810:	b236      	sxthne	r6, r6
 8022812:	e7ef      	b.n	80227f4 <_printf_i+0xbc>
 8022814:	682b      	ldr	r3, [r5, #0]
 8022816:	6820      	ldr	r0, [r4, #0]
 8022818:	1d19      	adds	r1, r3, #4
 802281a:	6029      	str	r1, [r5, #0]
 802281c:	0601      	lsls	r1, r0, #24
 802281e:	d501      	bpl.n	8022824 <_printf_i+0xec>
 8022820:	681e      	ldr	r6, [r3, #0]
 8022822:	e002      	b.n	802282a <_printf_i+0xf2>
 8022824:	0646      	lsls	r6, r0, #25
 8022826:	d5fb      	bpl.n	8022820 <_printf_i+0xe8>
 8022828:	881e      	ldrh	r6, [r3, #0]
 802282a:	4854      	ldr	r0, [pc, #336]	; (802297c <_printf_i+0x244>)
 802282c:	2f6f      	cmp	r7, #111	; 0x6f
 802282e:	bf0c      	ite	eq
 8022830:	2308      	moveq	r3, #8
 8022832:	230a      	movne	r3, #10
 8022834:	2100      	movs	r1, #0
 8022836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802283a:	6865      	ldr	r5, [r4, #4]
 802283c:	60a5      	str	r5, [r4, #8]
 802283e:	2d00      	cmp	r5, #0
 8022840:	bfa2      	ittt	ge
 8022842:	6821      	ldrge	r1, [r4, #0]
 8022844:	f021 0104 	bicge.w	r1, r1, #4
 8022848:	6021      	strge	r1, [r4, #0]
 802284a:	b90e      	cbnz	r6, 8022850 <_printf_i+0x118>
 802284c:	2d00      	cmp	r5, #0
 802284e:	d04d      	beq.n	80228ec <_printf_i+0x1b4>
 8022850:	4615      	mov	r5, r2
 8022852:	fbb6 f1f3 	udiv	r1, r6, r3
 8022856:	fb03 6711 	mls	r7, r3, r1, r6
 802285a:	5dc7      	ldrb	r7, [r0, r7]
 802285c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022860:	4637      	mov	r7, r6
 8022862:	42bb      	cmp	r3, r7
 8022864:	460e      	mov	r6, r1
 8022866:	d9f4      	bls.n	8022852 <_printf_i+0x11a>
 8022868:	2b08      	cmp	r3, #8
 802286a:	d10b      	bne.n	8022884 <_printf_i+0x14c>
 802286c:	6823      	ldr	r3, [r4, #0]
 802286e:	07de      	lsls	r6, r3, #31
 8022870:	d508      	bpl.n	8022884 <_printf_i+0x14c>
 8022872:	6923      	ldr	r3, [r4, #16]
 8022874:	6861      	ldr	r1, [r4, #4]
 8022876:	4299      	cmp	r1, r3
 8022878:	bfde      	ittt	le
 802287a:	2330      	movle	r3, #48	; 0x30
 802287c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022880:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022884:	1b52      	subs	r2, r2, r5
 8022886:	6122      	str	r2, [r4, #16]
 8022888:	f8cd a000 	str.w	sl, [sp]
 802288c:	464b      	mov	r3, r9
 802288e:	aa03      	add	r2, sp, #12
 8022890:	4621      	mov	r1, r4
 8022892:	4640      	mov	r0, r8
 8022894:	f7ff fee2 	bl	802265c <_printf_common>
 8022898:	3001      	adds	r0, #1
 802289a:	d14c      	bne.n	8022936 <_printf_i+0x1fe>
 802289c:	f04f 30ff 	mov.w	r0, #4294967295
 80228a0:	b004      	add	sp, #16
 80228a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80228a6:	4835      	ldr	r0, [pc, #212]	; (802297c <_printf_i+0x244>)
 80228a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80228ac:	6829      	ldr	r1, [r5, #0]
 80228ae:	6823      	ldr	r3, [r4, #0]
 80228b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80228b4:	6029      	str	r1, [r5, #0]
 80228b6:	061d      	lsls	r5, r3, #24
 80228b8:	d514      	bpl.n	80228e4 <_printf_i+0x1ac>
 80228ba:	07df      	lsls	r7, r3, #31
 80228bc:	bf44      	itt	mi
 80228be:	f043 0320 	orrmi.w	r3, r3, #32
 80228c2:	6023      	strmi	r3, [r4, #0]
 80228c4:	b91e      	cbnz	r6, 80228ce <_printf_i+0x196>
 80228c6:	6823      	ldr	r3, [r4, #0]
 80228c8:	f023 0320 	bic.w	r3, r3, #32
 80228cc:	6023      	str	r3, [r4, #0]
 80228ce:	2310      	movs	r3, #16
 80228d0:	e7b0      	b.n	8022834 <_printf_i+0xfc>
 80228d2:	6823      	ldr	r3, [r4, #0]
 80228d4:	f043 0320 	orr.w	r3, r3, #32
 80228d8:	6023      	str	r3, [r4, #0]
 80228da:	2378      	movs	r3, #120	; 0x78
 80228dc:	4828      	ldr	r0, [pc, #160]	; (8022980 <_printf_i+0x248>)
 80228de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80228e2:	e7e3      	b.n	80228ac <_printf_i+0x174>
 80228e4:	0659      	lsls	r1, r3, #25
 80228e6:	bf48      	it	mi
 80228e8:	b2b6      	uxthmi	r6, r6
 80228ea:	e7e6      	b.n	80228ba <_printf_i+0x182>
 80228ec:	4615      	mov	r5, r2
 80228ee:	e7bb      	b.n	8022868 <_printf_i+0x130>
 80228f0:	682b      	ldr	r3, [r5, #0]
 80228f2:	6826      	ldr	r6, [r4, #0]
 80228f4:	6961      	ldr	r1, [r4, #20]
 80228f6:	1d18      	adds	r0, r3, #4
 80228f8:	6028      	str	r0, [r5, #0]
 80228fa:	0635      	lsls	r5, r6, #24
 80228fc:	681b      	ldr	r3, [r3, #0]
 80228fe:	d501      	bpl.n	8022904 <_printf_i+0x1cc>
 8022900:	6019      	str	r1, [r3, #0]
 8022902:	e002      	b.n	802290a <_printf_i+0x1d2>
 8022904:	0670      	lsls	r0, r6, #25
 8022906:	d5fb      	bpl.n	8022900 <_printf_i+0x1c8>
 8022908:	8019      	strh	r1, [r3, #0]
 802290a:	2300      	movs	r3, #0
 802290c:	6123      	str	r3, [r4, #16]
 802290e:	4615      	mov	r5, r2
 8022910:	e7ba      	b.n	8022888 <_printf_i+0x150>
 8022912:	682b      	ldr	r3, [r5, #0]
 8022914:	1d1a      	adds	r2, r3, #4
 8022916:	602a      	str	r2, [r5, #0]
 8022918:	681d      	ldr	r5, [r3, #0]
 802291a:	6862      	ldr	r2, [r4, #4]
 802291c:	2100      	movs	r1, #0
 802291e:	4628      	mov	r0, r5
 8022920:	f7dd fcf6 	bl	8000310 <memchr>
 8022924:	b108      	cbz	r0, 802292a <_printf_i+0x1f2>
 8022926:	1b40      	subs	r0, r0, r5
 8022928:	6060      	str	r0, [r4, #4]
 802292a:	6863      	ldr	r3, [r4, #4]
 802292c:	6123      	str	r3, [r4, #16]
 802292e:	2300      	movs	r3, #0
 8022930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022934:	e7a8      	b.n	8022888 <_printf_i+0x150>
 8022936:	6923      	ldr	r3, [r4, #16]
 8022938:	462a      	mov	r2, r5
 802293a:	4649      	mov	r1, r9
 802293c:	4640      	mov	r0, r8
 802293e:	47d0      	blx	sl
 8022940:	3001      	adds	r0, #1
 8022942:	d0ab      	beq.n	802289c <_printf_i+0x164>
 8022944:	6823      	ldr	r3, [r4, #0]
 8022946:	079b      	lsls	r3, r3, #30
 8022948:	d413      	bmi.n	8022972 <_printf_i+0x23a>
 802294a:	68e0      	ldr	r0, [r4, #12]
 802294c:	9b03      	ldr	r3, [sp, #12]
 802294e:	4298      	cmp	r0, r3
 8022950:	bfb8      	it	lt
 8022952:	4618      	movlt	r0, r3
 8022954:	e7a4      	b.n	80228a0 <_printf_i+0x168>
 8022956:	2301      	movs	r3, #1
 8022958:	4632      	mov	r2, r6
 802295a:	4649      	mov	r1, r9
 802295c:	4640      	mov	r0, r8
 802295e:	47d0      	blx	sl
 8022960:	3001      	adds	r0, #1
 8022962:	d09b      	beq.n	802289c <_printf_i+0x164>
 8022964:	3501      	adds	r5, #1
 8022966:	68e3      	ldr	r3, [r4, #12]
 8022968:	9903      	ldr	r1, [sp, #12]
 802296a:	1a5b      	subs	r3, r3, r1
 802296c:	42ab      	cmp	r3, r5
 802296e:	dcf2      	bgt.n	8022956 <_printf_i+0x21e>
 8022970:	e7eb      	b.n	802294a <_printf_i+0x212>
 8022972:	2500      	movs	r5, #0
 8022974:	f104 0619 	add.w	r6, r4, #25
 8022978:	e7f5      	b.n	8022966 <_printf_i+0x22e>
 802297a:	bf00      	nop
 802297c:	08027e46 	.word	0x08027e46
 8022980:	08027e57 	.word	0x08027e57

08022984 <_scanf_float>:
 8022984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022988:	b087      	sub	sp, #28
 802298a:	4617      	mov	r7, r2
 802298c:	9303      	str	r3, [sp, #12]
 802298e:	688b      	ldr	r3, [r1, #8]
 8022990:	1e5a      	subs	r2, r3, #1
 8022992:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022996:	bf83      	ittte	hi
 8022998:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802299c:	195b      	addhi	r3, r3, r5
 802299e:	9302      	strhi	r3, [sp, #8]
 80229a0:	2300      	movls	r3, #0
 80229a2:	bf86      	itte	hi
 80229a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80229a8:	608b      	strhi	r3, [r1, #8]
 80229aa:	9302      	strls	r3, [sp, #8]
 80229ac:	680b      	ldr	r3, [r1, #0]
 80229ae:	468b      	mov	fp, r1
 80229b0:	2500      	movs	r5, #0
 80229b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80229b6:	f84b 3b1c 	str.w	r3, [fp], #28
 80229ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80229be:	4680      	mov	r8, r0
 80229c0:	460c      	mov	r4, r1
 80229c2:	465e      	mov	r6, fp
 80229c4:	46aa      	mov	sl, r5
 80229c6:	46a9      	mov	r9, r5
 80229c8:	9501      	str	r5, [sp, #4]
 80229ca:	68a2      	ldr	r2, [r4, #8]
 80229cc:	b152      	cbz	r2, 80229e4 <_scanf_float+0x60>
 80229ce:	683b      	ldr	r3, [r7, #0]
 80229d0:	781b      	ldrb	r3, [r3, #0]
 80229d2:	2b4e      	cmp	r3, #78	; 0x4e
 80229d4:	d864      	bhi.n	8022aa0 <_scanf_float+0x11c>
 80229d6:	2b40      	cmp	r3, #64	; 0x40
 80229d8:	d83c      	bhi.n	8022a54 <_scanf_float+0xd0>
 80229da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80229de:	b2c8      	uxtb	r0, r1
 80229e0:	280e      	cmp	r0, #14
 80229e2:	d93a      	bls.n	8022a5a <_scanf_float+0xd6>
 80229e4:	f1b9 0f00 	cmp.w	r9, #0
 80229e8:	d003      	beq.n	80229f2 <_scanf_float+0x6e>
 80229ea:	6823      	ldr	r3, [r4, #0]
 80229ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80229f0:	6023      	str	r3, [r4, #0]
 80229f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80229f6:	f1ba 0f01 	cmp.w	sl, #1
 80229fa:	f200 8113 	bhi.w	8022c24 <_scanf_float+0x2a0>
 80229fe:	455e      	cmp	r6, fp
 8022a00:	f200 8105 	bhi.w	8022c0e <_scanf_float+0x28a>
 8022a04:	2501      	movs	r5, #1
 8022a06:	4628      	mov	r0, r5
 8022a08:	b007      	add	sp, #28
 8022a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8022a12:	2a0d      	cmp	r2, #13
 8022a14:	d8e6      	bhi.n	80229e4 <_scanf_float+0x60>
 8022a16:	a101      	add	r1, pc, #4	; (adr r1, 8022a1c <_scanf_float+0x98>)
 8022a18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022a1c:	08022b5b 	.word	0x08022b5b
 8022a20:	080229e5 	.word	0x080229e5
 8022a24:	080229e5 	.word	0x080229e5
 8022a28:	080229e5 	.word	0x080229e5
 8022a2c:	08022bbb 	.word	0x08022bbb
 8022a30:	08022b93 	.word	0x08022b93
 8022a34:	080229e5 	.word	0x080229e5
 8022a38:	080229e5 	.word	0x080229e5
 8022a3c:	08022b69 	.word	0x08022b69
 8022a40:	080229e5 	.word	0x080229e5
 8022a44:	080229e5 	.word	0x080229e5
 8022a48:	080229e5 	.word	0x080229e5
 8022a4c:	080229e5 	.word	0x080229e5
 8022a50:	08022b21 	.word	0x08022b21
 8022a54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8022a58:	e7db      	b.n	8022a12 <_scanf_float+0x8e>
 8022a5a:	290e      	cmp	r1, #14
 8022a5c:	d8c2      	bhi.n	80229e4 <_scanf_float+0x60>
 8022a5e:	a001      	add	r0, pc, #4	; (adr r0, 8022a64 <_scanf_float+0xe0>)
 8022a60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8022a64:	08022b13 	.word	0x08022b13
 8022a68:	080229e5 	.word	0x080229e5
 8022a6c:	08022b13 	.word	0x08022b13
 8022a70:	08022ba7 	.word	0x08022ba7
 8022a74:	080229e5 	.word	0x080229e5
 8022a78:	08022ac1 	.word	0x08022ac1
 8022a7c:	08022afd 	.word	0x08022afd
 8022a80:	08022afd 	.word	0x08022afd
 8022a84:	08022afd 	.word	0x08022afd
 8022a88:	08022afd 	.word	0x08022afd
 8022a8c:	08022afd 	.word	0x08022afd
 8022a90:	08022afd 	.word	0x08022afd
 8022a94:	08022afd 	.word	0x08022afd
 8022a98:	08022afd 	.word	0x08022afd
 8022a9c:	08022afd 	.word	0x08022afd
 8022aa0:	2b6e      	cmp	r3, #110	; 0x6e
 8022aa2:	d809      	bhi.n	8022ab8 <_scanf_float+0x134>
 8022aa4:	2b60      	cmp	r3, #96	; 0x60
 8022aa6:	d8b2      	bhi.n	8022a0e <_scanf_float+0x8a>
 8022aa8:	2b54      	cmp	r3, #84	; 0x54
 8022aaa:	d077      	beq.n	8022b9c <_scanf_float+0x218>
 8022aac:	2b59      	cmp	r3, #89	; 0x59
 8022aae:	d199      	bne.n	80229e4 <_scanf_float+0x60>
 8022ab0:	2d07      	cmp	r5, #7
 8022ab2:	d197      	bne.n	80229e4 <_scanf_float+0x60>
 8022ab4:	2508      	movs	r5, #8
 8022ab6:	e029      	b.n	8022b0c <_scanf_float+0x188>
 8022ab8:	2b74      	cmp	r3, #116	; 0x74
 8022aba:	d06f      	beq.n	8022b9c <_scanf_float+0x218>
 8022abc:	2b79      	cmp	r3, #121	; 0x79
 8022abe:	e7f6      	b.n	8022aae <_scanf_float+0x12a>
 8022ac0:	6821      	ldr	r1, [r4, #0]
 8022ac2:	05c8      	lsls	r0, r1, #23
 8022ac4:	d51a      	bpl.n	8022afc <_scanf_float+0x178>
 8022ac6:	9b02      	ldr	r3, [sp, #8]
 8022ac8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8022acc:	6021      	str	r1, [r4, #0]
 8022ace:	f109 0901 	add.w	r9, r9, #1
 8022ad2:	b11b      	cbz	r3, 8022adc <_scanf_float+0x158>
 8022ad4:	3b01      	subs	r3, #1
 8022ad6:	3201      	adds	r2, #1
 8022ad8:	9302      	str	r3, [sp, #8]
 8022ada:	60a2      	str	r2, [r4, #8]
 8022adc:	68a3      	ldr	r3, [r4, #8]
 8022ade:	3b01      	subs	r3, #1
 8022ae0:	60a3      	str	r3, [r4, #8]
 8022ae2:	6923      	ldr	r3, [r4, #16]
 8022ae4:	3301      	adds	r3, #1
 8022ae6:	6123      	str	r3, [r4, #16]
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	3b01      	subs	r3, #1
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	607b      	str	r3, [r7, #4]
 8022af0:	f340 8084 	ble.w	8022bfc <_scanf_float+0x278>
 8022af4:	683b      	ldr	r3, [r7, #0]
 8022af6:	3301      	adds	r3, #1
 8022af8:	603b      	str	r3, [r7, #0]
 8022afa:	e766      	b.n	80229ca <_scanf_float+0x46>
 8022afc:	eb1a 0f05 	cmn.w	sl, r5
 8022b00:	f47f af70 	bne.w	80229e4 <_scanf_float+0x60>
 8022b04:	6822      	ldr	r2, [r4, #0]
 8022b06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8022b0a:	6022      	str	r2, [r4, #0]
 8022b0c:	f806 3b01 	strb.w	r3, [r6], #1
 8022b10:	e7e4      	b.n	8022adc <_scanf_float+0x158>
 8022b12:	6822      	ldr	r2, [r4, #0]
 8022b14:	0610      	lsls	r0, r2, #24
 8022b16:	f57f af65 	bpl.w	80229e4 <_scanf_float+0x60>
 8022b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022b1e:	e7f4      	b.n	8022b0a <_scanf_float+0x186>
 8022b20:	f1ba 0f00 	cmp.w	sl, #0
 8022b24:	d10e      	bne.n	8022b44 <_scanf_float+0x1c0>
 8022b26:	f1b9 0f00 	cmp.w	r9, #0
 8022b2a:	d10e      	bne.n	8022b4a <_scanf_float+0x1c6>
 8022b2c:	6822      	ldr	r2, [r4, #0]
 8022b2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8022b32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8022b36:	d108      	bne.n	8022b4a <_scanf_float+0x1c6>
 8022b38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8022b3c:	6022      	str	r2, [r4, #0]
 8022b3e:	f04f 0a01 	mov.w	sl, #1
 8022b42:	e7e3      	b.n	8022b0c <_scanf_float+0x188>
 8022b44:	f1ba 0f02 	cmp.w	sl, #2
 8022b48:	d055      	beq.n	8022bf6 <_scanf_float+0x272>
 8022b4a:	2d01      	cmp	r5, #1
 8022b4c:	d002      	beq.n	8022b54 <_scanf_float+0x1d0>
 8022b4e:	2d04      	cmp	r5, #4
 8022b50:	f47f af48 	bne.w	80229e4 <_scanf_float+0x60>
 8022b54:	3501      	adds	r5, #1
 8022b56:	b2ed      	uxtb	r5, r5
 8022b58:	e7d8      	b.n	8022b0c <_scanf_float+0x188>
 8022b5a:	f1ba 0f01 	cmp.w	sl, #1
 8022b5e:	f47f af41 	bne.w	80229e4 <_scanf_float+0x60>
 8022b62:	f04f 0a02 	mov.w	sl, #2
 8022b66:	e7d1      	b.n	8022b0c <_scanf_float+0x188>
 8022b68:	b97d      	cbnz	r5, 8022b8a <_scanf_float+0x206>
 8022b6a:	f1b9 0f00 	cmp.w	r9, #0
 8022b6e:	f47f af3c 	bne.w	80229ea <_scanf_float+0x66>
 8022b72:	6822      	ldr	r2, [r4, #0]
 8022b74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8022b78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8022b7c:	f47f af39 	bne.w	80229f2 <_scanf_float+0x6e>
 8022b80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8022b84:	6022      	str	r2, [r4, #0]
 8022b86:	2501      	movs	r5, #1
 8022b88:	e7c0      	b.n	8022b0c <_scanf_float+0x188>
 8022b8a:	2d03      	cmp	r5, #3
 8022b8c:	d0e2      	beq.n	8022b54 <_scanf_float+0x1d0>
 8022b8e:	2d05      	cmp	r5, #5
 8022b90:	e7de      	b.n	8022b50 <_scanf_float+0x1cc>
 8022b92:	2d02      	cmp	r5, #2
 8022b94:	f47f af26 	bne.w	80229e4 <_scanf_float+0x60>
 8022b98:	2503      	movs	r5, #3
 8022b9a:	e7b7      	b.n	8022b0c <_scanf_float+0x188>
 8022b9c:	2d06      	cmp	r5, #6
 8022b9e:	f47f af21 	bne.w	80229e4 <_scanf_float+0x60>
 8022ba2:	2507      	movs	r5, #7
 8022ba4:	e7b2      	b.n	8022b0c <_scanf_float+0x188>
 8022ba6:	6822      	ldr	r2, [r4, #0]
 8022ba8:	0591      	lsls	r1, r2, #22
 8022baa:	f57f af1b 	bpl.w	80229e4 <_scanf_float+0x60>
 8022bae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8022bb2:	6022      	str	r2, [r4, #0]
 8022bb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8022bb8:	e7a8      	b.n	8022b0c <_scanf_float+0x188>
 8022bba:	6822      	ldr	r2, [r4, #0]
 8022bbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8022bc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8022bc4:	d006      	beq.n	8022bd4 <_scanf_float+0x250>
 8022bc6:	0550      	lsls	r0, r2, #21
 8022bc8:	f57f af0c 	bpl.w	80229e4 <_scanf_float+0x60>
 8022bcc:	f1b9 0f00 	cmp.w	r9, #0
 8022bd0:	f43f af0f 	beq.w	80229f2 <_scanf_float+0x6e>
 8022bd4:	0591      	lsls	r1, r2, #22
 8022bd6:	bf58      	it	pl
 8022bd8:	9901      	ldrpl	r1, [sp, #4]
 8022bda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8022bde:	bf58      	it	pl
 8022be0:	eba9 0101 	subpl.w	r1, r9, r1
 8022be4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8022be8:	bf58      	it	pl
 8022bea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8022bee:	6022      	str	r2, [r4, #0]
 8022bf0:	f04f 0900 	mov.w	r9, #0
 8022bf4:	e78a      	b.n	8022b0c <_scanf_float+0x188>
 8022bf6:	f04f 0a03 	mov.w	sl, #3
 8022bfa:	e787      	b.n	8022b0c <_scanf_float+0x188>
 8022bfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022c00:	4639      	mov	r1, r7
 8022c02:	4640      	mov	r0, r8
 8022c04:	4798      	blx	r3
 8022c06:	2800      	cmp	r0, #0
 8022c08:	f43f aedf 	beq.w	80229ca <_scanf_float+0x46>
 8022c0c:	e6ea      	b.n	80229e4 <_scanf_float+0x60>
 8022c0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022c12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8022c16:	463a      	mov	r2, r7
 8022c18:	4640      	mov	r0, r8
 8022c1a:	4798      	blx	r3
 8022c1c:	6923      	ldr	r3, [r4, #16]
 8022c1e:	3b01      	subs	r3, #1
 8022c20:	6123      	str	r3, [r4, #16]
 8022c22:	e6ec      	b.n	80229fe <_scanf_float+0x7a>
 8022c24:	1e6b      	subs	r3, r5, #1
 8022c26:	2b06      	cmp	r3, #6
 8022c28:	d825      	bhi.n	8022c76 <_scanf_float+0x2f2>
 8022c2a:	2d02      	cmp	r5, #2
 8022c2c:	d836      	bhi.n	8022c9c <_scanf_float+0x318>
 8022c2e:	455e      	cmp	r6, fp
 8022c30:	f67f aee8 	bls.w	8022a04 <_scanf_float+0x80>
 8022c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022c38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8022c3c:	463a      	mov	r2, r7
 8022c3e:	4640      	mov	r0, r8
 8022c40:	4798      	blx	r3
 8022c42:	6923      	ldr	r3, [r4, #16]
 8022c44:	3b01      	subs	r3, #1
 8022c46:	6123      	str	r3, [r4, #16]
 8022c48:	e7f1      	b.n	8022c2e <_scanf_float+0x2aa>
 8022c4a:	9802      	ldr	r0, [sp, #8]
 8022c4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022c50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8022c54:	9002      	str	r0, [sp, #8]
 8022c56:	463a      	mov	r2, r7
 8022c58:	4640      	mov	r0, r8
 8022c5a:	4798      	blx	r3
 8022c5c:	6923      	ldr	r3, [r4, #16]
 8022c5e:	3b01      	subs	r3, #1
 8022c60:	6123      	str	r3, [r4, #16]
 8022c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022c66:	fa5f fa8a 	uxtb.w	sl, sl
 8022c6a:	f1ba 0f02 	cmp.w	sl, #2
 8022c6e:	d1ec      	bne.n	8022c4a <_scanf_float+0x2c6>
 8022c70:	3d03      	subs	r5, #3
 8022c72:	b2ed      	uxtb	r5, r5
 8022c74:	1b76      	subs	r6, r6, r5
 8022c76:	6823      	ldr	r3, [r4, #0]
 8022c78:	05da      	lsls	r2, r3, #23
 8022c7a:	d52f      	bpl.n	8022cdc <_scanf_float+0x358>
 8022c7c:	055b      	lsls	r3, r3, #21
 8022c7e:	d510      	bpl.n	8022ca2 <_scanf_float+0x31e>
 8022c80:	455e      	cmp	r6, fp
 8022c82:	f67f aebf 	bls.w	8022a04 <_scanf_float+0x80>
 8022c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022c8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8022c8e:	463a      	mov	r2, r7
 8022c90:	4640      	mov	r0, r8
 8022c92:	4798      	blx	r3
 8022c94:	6923      	ldr	r3, [r4, #16]
 8022c96:	3b01      	subs	r3, #1
 8022c98:	6123      	str	r3, [r4, #16]
 8022c9a:	e7f1      	b.n	8022c80 <_scanf_float+0x2fc>
 8022c9c:	46aa      	mov	sl, r5
 8022c9e:	9602      	str	r6, [sp, #8]
 8022ca0:	e7df      	b.n	8022c62 <_scanf_float+0x2de>
 8022ca2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8022ca6:	6923      	ldr	r3, [r4, #16]
 8022ca8:	2965      	cmp	r1, #101	; 0x65
 8022caa:	f103 33ff 	add.w	r3, r3, #4294967295
 8022cae:	f106 35ff 	add.w	r5, r6, #4294967295
 8022cb2:	6123      	str	r3, [r4, #16]
 8022cb4:	d00c      	beq.n	8022cd0 <_scanf_float+0x34c>
 8022cb6:	2945      	cmp	r1, #69	; 0x45
 8022cb8:	d00a      	beq.n	8022cd0 <_scanf_float+0x34c>
 8022cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022cbe:	463a      	mov	r2, r7
 8022cc0:	4640      	mov	r0, r8
 8022cc2:	4798      	blx	r3
 8022cc4:	6923      	ldr	r3, [r4, #16]
 8022cc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8022cca:	3b01      	subs	r3, #1
 8022ccc:	1eb5      	subs	r5, r6, #2
 8022cce:	6123      	str	r3, [r4, #16]
 8022cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022cd4:	463a      	mov	r2, r7
 8022cd6:	4640      	mov	r0, r8
 8022cd8:	4798      	blx	r3
 8022cda:	462e      	mov	r6, r5
 8022cdc:	6825      	ldr	r5, [r4, #0]
 8022cde:	f015 0510 	ands.w	r5, r5, #16
 8022ce2:	d14e      	bne.n	8022d82 <_scanf_float+0x3fe>
 8022ce4:	7035      	strb	r5, [r6, #0]
 8022ce6:	6823      	ldr	r3, [r4, #0]
 8022ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8022cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022cf0:	d119      	bne.n	8022d26 <_scanf_float+0x3a2>
 8022cf2:	9b01      	ldr	r3, [sp, #4]
 8022cf4:	454b      	cmp	r3, r9
 8022cf6:	eba3 0209 	sub.w	r2, r3, r9
 8022cfa:	d121      	bne.n	8022d40 <_scanf_float+0x3bc>
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	4659      	mov	r1, fp
 8022d00:	4640      	mov	r0, r8
 8022d02:	f000 ffe7 	bl	8023cd4 <_strtod_r>
 8022d06:	6822      	ldr	r2, [r4, #0]
 8022d08:	9b03      	ldr	r3, [sp, #12]
 8022d0a:	f012 0f02 	tst.w	r2, #2
 8022d0e:	681b      	ldr	r3, [r3, #0]
 8022d10:	d021      	beq.n	8022d56 <_scanf_float+0x3d2>
 8022d12:	9903      	ldr	r1, [sp, #12]
 8022d14:	1d1a      	adds	r2, r3, #4
 8022d16:	600a      	str	r2, [r1, #0]
 8022d18:	681b      	ldr	r3, [r3, #0]
 8022d1a:	ed83 0b00 	vstr	d0, [r3]
 8022d1e:	68e3      	ldr	r3, [r4, #12]
 8022d20:	3301      	adds	r3, #1
 8022d22:	60e3      	str	r3, [r4, #12]
 8022d24:	e66f      	b.n	8022a06 <_scanf_float+0x82>
 8022d26:	9b04      	ldr	r3, [sp, #16]
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	d0e7      	beq.n	8022cfc <_scanf_float+0x378>
 8022d2c:	9905      	ldr	r1, [sp, #20]
 8022d2e:	230a      	movs	r3, #10
 8022d30:	462a      	mov	r2, r5
 8022d32:	3101      	adds	r1, #1
 8022d34:	4640      	mov	r0, r8
 8022d36:	f001 f8bd 	bl	8023eb4 <_strtol_r>
 8022d3a:	9b04      	ldr	r3, [sp, #16]
 8022d3c:	9e05      	ldr	r6, [sp, #20]
 8022d3e:	1ac2      	subs	r2, r0, r3
 8022d40:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8022d44:	429e      	cmp	r6, r3
 8022d46:	bf28      	it	cs
 8022d48:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8022d4c:	490e      	ldr	r1, [pc, #56]	; (8022d88 <_scanf_float+0x404>)
 8022d4e:	4630      	mov	r0, r6
 8022d50:	f000 f960 	bl	8023014 <siprintf>
 8022d54:	e7d2      	b.n	8022cfc <_scanf_float+0x378>
 8022d56:	9903      	ldr	r1, [sp, #12]
 8022d58:	f012 0f04 	tst.w	r2, #4
 8022d5c:	f103 0204 	add.w	r2, r3, #4
 8022d60:	600a      	str	r2, [r1, #0]
 8022d62:	d1d9      	bne.n	8022d18 <_scanf_float+0x394>
 8022d64:	eeb4 0b40 	vcmp.f64	d0, d0
 8022d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d6c:	681e      	ldr	r6, [r3, #0]
 8022d6e:	d705      	bvc.n	8022d7c <_scanf_float+0x3f8>
 8022d70:	4806      	ldr	r0, [pc, #24]	; (8022d8c <_scanf_float+0x408>)
 8022d72:	f000 f915 	bl	8022fa0 <nanf>
 8022d76:	ed86 0a00 	vstr	s0, [r6]
 8022d7a:	e7d0      	b.n	8022d1e <_scanf_float+0x39a>
 8022d7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022d80:	e7f9      	b.n	8022d76 <_scanf_float+0x3f2>
 8022d82:	2500      	movs	r5, #0
 8022d84:	e63f      	b.n	8022a06 <_scanf_float+0x82>
 8022d86:	bf00      	nop
 8022d88:	08027e68 	.word	0x08027e68
 8022d8c:	08027f6f 	.word	0x08027f6f

08022d90 <iprintf>:
 8022d90:	b40f      	push	{r0, r1, r2, r3}
 8022d92:	4b0a      	ldr	r3, [pc, #40]	; (8022dbc <iprintf+0x2c>)
 8022d94:	b513      	push	{r0, r1, r4, lr}
 8022d96:	681c      	ldr	r4, [r3, #0]
 8022d98:	b124      	cbz	r4, 8022da4 <iprintf+0x14>
 8022d9a:	69a3      	ldr	r3, [r4, #24]
 8022d9c:	b913      	cbnz	r3, 8022da4 <iprintf+0x14>
 8022d9e:	4620      	mov	r0, r4
 8022da0:	f7fe ffea 	bl	8021d78 <__sinit>
 8022da4:	ab05      	add	r3, sp, #20
 8022da6:	9a04      	ldr	r2, [sp, #16]
 8022da8:	68a1      	ldr	r1, [r4, #8]
 8022daa:	9301      	str	r3, [sp, #4]
 8022dac:	4620      	mov	r0, r4
 8022dae:	f003 fac1 	bl	8026334 <_vfiprintf_r>
 8022db2:	b002      	add	sp, #8
 8022db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022db8:	b004      	add	sp, #16
 8022dba:	4770      	bx	lr
 8022dbc:	240002f8 	.word	0x240002f8

08022dc0 <_puts_r>:
 8022dc0:	b570      	push	{r4, r5, r6, lr}
 8022dc2:	460e      	mov	r6, r1
 8022dc4:	4605      	mov	r5, r0
 8022dc6:	b118      	cbz	r0, 8022dd0 <_puts_r+0x10>
 8022dc8:	6983      	ldr	r3, [r0, #24]
 8022dca:	b90b      	cbnz	r3, 8022dd0 <_puts_r+0x10>
 8022dcc:	f7fe ffd4 	bl	8021d78 <__sinit>
 8022dd0:	69ab      	ldr	r3, [r5, #24]
 8022dd2:	68ac      	ldr	r4, [r5, #8]
 8022dd4:	b913      	cbnz	r3, 8022ddc <_puts_r+0x1c>
 8022dd6:	4628      	mov	r0, r5
 8022dd8:	f7fe ffce 	bl	8021d78 <__sinit>
 8022ddc:	4b2c      	ldr	r3, [pc, #176]	; (8022e90 <_puts_r+0xd0>)
 8022dde:	429c      	cmp	r4, r3
 8022de0:	d120      	bne.n	8022e24 <_puts_r+0x64>
 8022de2:	686c      	ldr	r4, [r5, #4]
 8022de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022de6:	07db      	lsls	r3, r3, #31
 8022de8:	d405      	bmi.n	8022df6 <_puts_r+0x36>
 8022dea:	89a3      	ldrh	r3, [r4, #12]
 8022dec:	0598      	lsls	r0, r3, #22
 8022dee:	d402      	bmi.n	8022df6 <_puts_r+0x36>
 8022df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022df2:	f7ff f884 	bl	8021efe <__retarget_lock_acquire_recursive>
 8022df6:	89a3      	ldrh	r3, [r4, #12]
 8022df8:	0719      	lsls	r1, r3, #28
 8022dfa:	d51d      	bpl.n	8022e38 <_puts_r+0x78>
 8022dfc:	6923      	ldr	r3, [r4, #16]
 8022dfe:	b1db      	cbz	r3, 8022e38 <_puts_r+0x78>
 8022e00:	3e01      	subs	r6, #1
 8022e02:	68a3      	ldr	r3, [r4, #8]
 8022e04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022e08:	3b01      	subs	r3, #1
 8022e0a:	60a3      	str	r3, [r4, #8]
 8022e0c:	bb39      	cbnz	r1, 8022e5e <_puts_r+0x9e>
 8022e0e:	2b00      	cmp	r3, #0
 8022e10:	da38      	bge.n	8022e84 <_puts_r+0xc4>
 8022e12:	4622      	mov	r2, r4
 8022e14:	210a      	movs	r1, #10
 8022e16:	4628      	mov	r0, r5
 8022e18:	f001 f858 	bl	8023ecc <__swbuf_r>
 8022e1c:	3001      	adds	r0, #1
 8022e1e:	d011      	beq.n	8022e44 <_puts_r+0x84>
 8022e20:	250a      	movs	r5, #10
 8022e22:	e011      	b.n	8022e48 <_puts_r+0x88>
 8022e24:	4b1b      	ldr	r3, [pc, #108]	; (8022e94 <_puts_r+0xd4>)
 8022e26:	429c      	cmp	r4, r3
 8022e28:	d101      	bne.n	8022e2e <_puts_r+0x6e>
 8022e2a:	68ac      	ldr	r4, [r5, #8]
 8022e2c:	e7da      	b.n	8022de4 <_puts_r+0x24>
 8022e2e:	4b1a      	ldr	r3, [pc, #104]	; (8022e98 <_puts_r+0xd8>)
 8022e30:	429c      	cmp	r4, r3
 8022e32:	bf08      	it	eq
 8022e34:	68ec      	ldreq	r4, [r5, #12]
 8022e36:	e7d5      	b.n	8022de4 <_puts_r+0x24>
 8022e38:	4621      	mov	r1, r4
 8022e3a:	4628      	mov	r0, r5
 8022e3c:	f001 f8aa 	bl	8023f94 <__swsetup_r>
 8022e40:	2800      	cmp	r0, #0
 8022e42:	d0dd      	beq.n	8022e00 <_puts_r+0x40>
 8022e44:	f04f 35ff 	mov.w	r5, #4294967295
 8022e48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e4a:	07da      	lsls	r2, r3, #31
 8022e4c:	d405      	bmi.n	8022e5a <_puts_r+0x9a>
 8022e4e:	89a3      	ldrh	r3, [r4, #12]
 8022e50:	059b      	lsls	r3, r3, #22
 8022e52:	d402      	bmi.n	8022e5a <_puts_r+0x9a>
 8022e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e56:	f7ff f853 	bl	8021f00 <__retarget_lock_release_recursive>
 8022e5a:	4628      	mov	r0, r5
 8022e5c:	bd70      	pop	{r4, r5, r6, pc}
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	da04      	bge.n	8022e6c <_puts_r+0xac>
 8022e62:	69a2      	ldr	r2, [r4, #24]
 8022e64:	429a      	cmp	r2, r3
 8022e66:	dc06      	bgt.n	8022e76 <_puts_r+0xb6>
 8022e68:	290a      	cmp	r1, #10
 8022e6a:	d004      	beq.n	8022e76 <_puts_r+0xb6>
 8022e6c:	6823      	ldr	r3, [r4, #0]
 8022e6e:	1c5a      	adds	r2, r3, #1
 8022e70:	6022      	str	r2, [r4, #0]
 8022e72:	7019      	strb	r1, [r3, #0]
 8022e74:	e7c5      	b.n	8022e02 <_puts_r+0x42>
 8022e76:	4622      	mov	r2, r4
 8022e78:	4628      	mov	r0, r5
 8022e7a:	f001 f827 	bl	8023ecc <__swbuf_r>
 8022e7e:	3001      	adds	r0, #1
 8022e80:	d1bf      	bne.n	8022e02 <_puts_r+0x42>
 8022e82:	e7df      	b.n	8022e44 <_puts_r+0x84>
 8022e84:	6823      	ldr	r3, [r4, #0]
 8022e86:	250a      	movs	r5, #10
 8022e88:	1c5a      	adds	r2, r3, #1
 8022e8a:	6022      	str	r2, [r4, #0]
 8022e8c:	701d      	strb	r5, [r3, #0]
 8022e8e:	e7db      	b.n	8022e48 <_puts_r+0x88>
 8022e90:	08027df0 	.word	0x08027df0
 8022e94:	08027e10 	.word	0x08027e10
 8022e98:	08027dd0 	.word	0x08027dd0

08022e9c <puts>:
 8022e9c:	4b02      	ldr	r3, [pc, #8]	; (8022ea8 <puts+0xc>)
 8022e9e:	4601      	mov	r1, r0
 8022ea0:	6818      	ldr	r0, [r3, #0]
 8022ea2:	f7ff bf8d 	b.w	8022dc0 <_puts_r>
 8022ea6:	bf00      	nop
 8022ea8:	240002f8 	.word	0x240002f8

08022eac <cleanup_glue>:
 8022eac:	b538      	push	{r3, r4, r5, lr}
 8022eae:	460c      	mov	r4, r1
 8022eb0:	6809      	ldr	r1, [r1, #0]
 8022eb2:	4605      	mov	r5, r0
 8022eb4:	b109      	cbz	r1, 8022eba <cleanup_glue+0xe>
 8022eb6:	f7ff fff9 	bl	8022eac <cleanup_glue>
 8022eba:	4621      	mov	r1, r4
 8022ebc:	4628      	mov	r0, r5
 8022ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022ec2:	f7ff b83d 	b.w	8021f40 <_free_r>
	...

08022ec8 <_reclaim_reent>:
 8022ec8:	4b2c      	ldr	r3, [pc, #176]	; (8022f7c <_reclaim_reent+0xb4>)
 8022eca:	681b      	ldr	r3, [r3, #0]
 8022ecc:	4283      	cmp	r3, r0
 8022ece:	b570      	push	{r4, r5, r6, lr}
 8022ed0:	4604      	mov	r4, r0
 8022ed2:	d051      	beq.n	8022f78 <_reclaim_reent+0xb0>
 8022ed4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8022ed6:	b143      	cbz	r3, 8022eea <_reclaim_reent+0x22>
 8022ed8:	68db      	ldr	r3, [r3, #12]
 8022eda:	2b00      	cmp	r3, #0
 8022edc:	d14a      	bne.n	8022f74 <_reclaim_reent+0xac>
 8022ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022ee0:	6819      	ldr	r1, [r3, #0]
 8022ee2:	b111      	cbz	r1, 8022eea <_reclaim_reent+0x22>
 8022ee4:	4620      	mov	r0, r4
 8022ee6:	f7ff f82b 	bl	8021f40 <_free_r>
 8022eea:	6961      	ldr	r1, [r4, #20]
 8022eec:	b111      	cbz	r1, 8022ef4 <_reclaim_reent+0x2c>
 8022eee:	4620      	mov	r0, r4
 8022ef0:	f7ff f826 	bl	8021f40 <_free_r>
 8022ef4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8022ef6:	b111      	cbz	r1, 8022efe <_reclaim_reent+0x36>
 8022ef8:	4620      	mov	r0, r4
 8022efa:	f7ff f821 	bl	8021f40 <_free_r>
 8022efe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022f00:	b111      	cbz	r1, 8022f08 <_reclaim_reent+0x40>
 8022f02:	4620      	mov	r0, r4
 8022f04:	f7ff f81c 	bl	8021f40 <_free_r>
 8022f08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8022f0a:	b111      	cbz	r1, 8022f12 <_reclaim_reent+0x4a>
 8022f0c:	4620      	mov	r0, r4
 8022f0e:	f7ff f817 	bl	8021f40 <_free_r>
 8022f12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022f14:	b111      	cbz	r1, 8022f1c <_reclaim_reent+0x54>
 8022f16:	4620      	mov	r0, r4
 8022f18:	f7ff f812 	bl	8021f40 <_free_r>
 8022f1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8022f1e:	b111      	cbz	r1, 8022f26 <_reclaim_reent+0x5e>
 8022f20:	4620      	mov	r0, r4
 8022f22:	f7ff f80d 	bl	8021f40 <_free_r>
 8022f26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8022f28:	b111      	cbz	r1, 8022f30 <_reclaim_reent+0x68>
 8022f2a:	4620      	mov	r0, r4
 8022f2c:	f7ff f808 	bl	8021f40 <_free_r>
 8022f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022f32:	b111      	cbz	r1, 8022f3a <_reclaim_reent+0x72>
 8022f34:	4620      	mov	r0, r4
 8022f36:	f7ff f803 	bl	8021f40 <_free_r>
 8022f3a:	69a3      	ldr	r3, [r4, #24]
 8022f3c:	b1e3      	cbz	r3, 8022f78 <_reclaim_reent+0xb0>
 8022f3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022f40:	4620      	mov	r0, r4
 8022f42:	4798      	blx	r3
 8022f44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8022f46:	b1b9      	cbz	r1, 8022f78 <_reclaim_reent+0xb0>
 8022f48:	4620      	mov	r0, r4
 8022f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022f4e:	f7ff bfad 	b.w	8022eac <cleanup_glue>
 8022f52:	5949      	ldr	r1, [r1, r5]
 8022f54:	b941      	cbnz	r1, 8022f68 <_reclaim_reent+0xa0>
 8022f56:	3504      	adds	r5, #4
 8022f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022f5a:	2d80      	cmp	r5, #128	; 0x80
 8022f5c:	68d9      	ldr	r1, [r3, #12]
 8022f5e:	d1f8      	bne.n	8022f52 <_reclaim_reent+0x8a>
 8022f60:	4620      	mov	r0, r4
 8022f62:	f7fe ffed 	bl	8021f40 <_free_r>
 8022f66:	e7ba      	b.n	8022ede <_reclaim_reent+0x16>
 8022f68:	680e      	ldr	r6, [r1, #0]
 8022f6a:	4620      	mov	r0, r4
 8022f6c:	f7fe ffe8 	bl	8021f40 <_free_r>
 8022f70:	4631      	mov	r1, r6
 8022f72:	e7ef      	b.n	8022f54 <_reclaim_reent+0x8c>
 8022f74:	2500      	movs	r5, #0
 8022f76:	e7ef      	b.n	8022f58 <_reclaim_reent+0x90>
 8022f78:	bd70      	pop	{r4, r5, r6, pc}
 8022f7a:	bf00      	nop
 8022f7c:	240002f8 	.word	0x240002f8

08022f80 <_sbrk_r>:
 8022f80:	b538      	push	{r3, r4, r5, lr}
 8022f82:	4d06      	ldr	r5, [pc, #24]	; (8022f9c <_sbrk_r+0x1c>)
 8022f84:	2300      	movs	r3, #0
 8022f86:	4604      	mov	r4, r0
 8022f88:	4608      	mov	r0, r1
 8022f8a:	602b      	str	r3, [r5, #0]
 8022f8c:	f7e4 ffa6 	bl	8007edc <_sbrk>
 8022f90:	1c43      	adds	r3, r0, #1
 8022f92:	d102      	bne.n	8022f9a <_sbrk_r+0x1a>
 8022f94:	682b      	ldr	r3, [r5, #0]
 8022f96:	b103      	cbz	r3, 8022f9a <_sbrk_r+0x1a>
 8022f98:	6023      	str	r3, [r4, #0]
 8022f9a:	bd38      	pop	{r3, r4, r5, pc}
 8022f9c:	24009044 	.word	0x24009044

08022fa0 <nanf>:
 8022fa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022fa8 <nanf+0x8>
 8022fa4:	4770      	bx	lr
 8022fa6:	bf00      	nop
 8022fa8:	7fc00000 	.word	0x7fc00000

08022fac <sniprintf>:
 8022fac:	b40c      	push	{r2, r3}
 8022fae:	b530      	push	{r4, r5, lr}
 8022fb0:	4b17      	ldr	r3, [pc, #92]	; (8023010 <sniprintf+0x64>)
 8022fb2:	1e0c      	subs	r4, r1, #0
 8022fb4:	681d      	ldr	r5, [r3, #0]
 8022fb6:	b09d      	sub	sp, #116	; 0x74
 8022fb8:	da08      	bge.n	8022fcc <sniprintf+0x20>
 8022fba:	238b      	movs	r3, #139	; 0x8b
 8022fbc:	602b      	str	r3, [r5, #0]
 8022fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8022fc2:	b01d      	add	sp, #116	; 0x74
 8022fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022fc8:	b002      	add	sp, #8
 8022fca:	4770      	bx	lr
 8022fcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022fd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022fd4:	bf14      	ite	ne
 8022fd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022fda:	4623      	moveq	r3, r4
 8022fdc:	9304      	str	r3, [sp, #16]
 8022fde:	9307      	str	r3, [sp, #28]
 8022fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022fe4:	9002      	str	r0, [sp, #8]
 8022fe6:	9006      	str	r0, [sp, #24]
 8022fe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022fec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022fee:	ab21      	add	r3, sp, #132	; 0x84
 8022ff0:	a902      	add	r1, sp, #8
 8022ff2:	4628      	mov	r0, r5
 8022ff4:	9301      	str	r3, [sp, #4]
 8022ff6:	f003 f873 	bl	80260e0 <_svfiprintf_r>
 8022ffa:	1c43      	adds	r3, r0, #1
 8022ffc:	bfbc      	itt	lt
 8022ffe:	238b      	movlt	r3, #139	; 0x8b
 8023000:	602b      	strlt	r3, [r5, #0]
 8023002:	2c00      	cmp	r4, #0
 8023004:	d0dd      	beq.n	8022fc2 <sniprintf+0x16>
 8023006:	9b02      	ldr	r3, [sp, #8]
 8023008:	2200      	movs	r2, #0
 802300a:	701a      	strb	r2, [r3, #0]
 802300c:	e7d9      	b.n	8022fc2 <sniprintf+0x16>
 802300e:	bf00      	nop
 8023010:	240002f8 	.word	0x240002f8

08023014 <siprintf>:
 8023014:	b40e      	push	{r1, r2, r3}
 8023016:	b500      	push	{lr}
 8023018:	b09c      	sub	sp, #112	; 0x70
 802301a:	ab1d      	add	r3, sp, #116	; 0x74
 802301c:	9002      	str	r0, [sp, #8]
 802301e:	9006      	str	r0, [sp, #24]
 8023020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023024:	4809      	ldr	r0, [pc, #36]	; (802304c <siprintf+0x38>)
 8023026:	9107      	str	r1, [sp, #28]
 8023028:	9104      	str	r1, [sp, #16]
 802302a:	4909      	ldr	r1, [pc, #36]	; (8023050 <siprintf+0x3c>)
 802302c:	f853 2b04 	ldr.w	r2, [r3], #4
 8023030:	9105      	str	r1, [sp, #20]
 8023032:	6800      	ldr	r0, [r0, #0]
 8023034:	9301      	str	r3, [sp, #4]
 8023036:	a902      	add	r1, sp, #8
 8023038:	f003 f852 	bl	80260e0 <_svfiprintf_r>
 802303c:	9b02      	ldr	r3, [sp, #8]
 802303e:	2200      	movs	r2, #0
 8023040:	701a      	strb	r2, [r3, #0]
 8023042:	b01c      	add	sp, #112	; 0x70
 8023044:	f85d eb04 	ldr.w	lr, [sp], #4
 8023048:	b003      	add	sp, #12
 802304a:	4770      	bx	lr
 802304c:	240002f8 	.word	0x240002f8
 8023050:	ffff0208 	.word	0xffff0208

08023054 <__sread>:
 8023054:	b510      	push	{r4, lr}
 8023056:	460c      	mov	r4, r1
 8023058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802305c:	f003 fa9a 	bl	8026594 <_read_r>
 8023060:	2800      	cmp	r0, #0
 8023062:	bfab      	itete	ge
 8023064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023066:	89a3      	ldrhlt	r3, [r4, #12]
 8023068:	181b      	addge	r3, r3, r0
 802306a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802306e:	bfac      	ite	ge
 8023070:	6563      	strge	r3, [r4, #84]	; 0x54
 8023072:	81a3      	strhlt	r3, [r4, #12]
 8023074:	bd10      	pop	{r4, pc}

08023076 <__swrite>:
 8023076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802307a:	461f      	mov	r7, r3
 802307c:	898b      	ldrh	r3, [r1, #12]
 802307e:	05db      	lsls	r3, r3, #23
 8023080:	4605      	mov	r5, r0
 8023082:	460c      	mov	r4, r1
 8023084:	4616      	mov	r6, r2
 8023086:	d505      	bpl.n	8023094 <__swrite+0x1e>
 8023088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802308c:	2302      	movs	r3, #2
 802308e:	2200      	movs	r2, #0
 8023090:	f002 fa60 	bl	8025554 <_lseek_r>
 8023094:	89a3      	ldrh	r3, [r4, #12]
 8023096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802309a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802309e:	81a3      	strh	r3, [r4, #12]
 80230a0:	4632      	mov	r2, r6
 80230a2:	463b      	mov	r3, r7
 80230a4:	4628      	mov	r0, r5
 80230a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80230aa:	f000 bf61 	b.w	8023f70 <_write_r>

080230ae <__sseek>:
 80230ae:	b510      	push	{r4, lr}
 80230b0:	460c      	mov	r4, r1
 80230b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80230b6:	f002 fa4d 	bl	8025554 <_lseek_r>
 80230ba:	1c43      	adds	r3, r0, #1
 80230bc:	89a3      	ldrh	r3, [r4, #12]
 80230be:	bf15      	itete	ne
 80230c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80230c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80230c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80230ca:	81a3      	strheq	r3, [r4, #12]
 80230cc:	bf18      	it	ne
 80230ce:	81a3      	strhne	r3, [r4, #12]
 80230d0:	bd10      	pop	{r4, pc}

080230d2 <__sclose>:
 80230d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80230d6:	f000 bfe9 	b.w	80240ac <_close_r>

080230da <strcat>:
 80230da:	b510      	push	{r4, lr}
 80230dc:	4602      	mov	r2, r0
 80230de:	7814      	ldrb	r4, [r2, #0]
 80230e0:	4613      	mov	r3, r2
 80230e2:	3201      	adds	r2, #1
 80230e4:	2c00      	cmp	r4, #0
 80230e6:	d1fa      	bne.n	80230de <strcat+0x4>
 80230e8:	3b01      	subs	r3, #1
 80230ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80230ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80230f2:	2a00      	cmp	r2, #0
 80230f4:	d1f9      	bne.n	80230ea <strcat+0x10>
 80230f6:	bd10      	pop	{r4, pc}

080230f8 <strcpy>:
 80230f8:	4603      	mov	r3, r0
 80230fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80230fe:	f803 2b01 	strb.w	r2, [r3], #1
 8023102:	2a00      	cmp	r2, #0
 8023104:	d1f9      	bne.n	80230fa <strcpy+0x2>
 8023106:	4770      	bx	lr

08023108 <strncmp>:
 8023108:	b510      	push	{r4, lr}
 802310a:	b17a      	cbz	r2, 802312c <strncmp+0x24>
 802310c:	4603      	mov	r3, r0
 802310e:	3901      	subs	r1, #1
 8023110:	1884      	adds	r4, r0, r2
 8023112:	f813 0b01 	ldrb.w	r0, [r3], #1
 8023116:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802311a:	4290      	cmp	r0, r2
 802311c:	d101      	bne.n	8023122 <strncmp+0x1a>
 802311e:	42a3      	cmp	r3, r4
 8023120:	d101      	bne.n	8023126 <strncmp+0x1e>
 8023122:	1a80      	subs	r0, r0, r2
 8023124:	bd10      	pop	{r4, pc}
 8023126:	2800      	cmp	r0, #0
 8023128:	d1f3      	bne.n	8023112 <strncmp+0xa>
 802312a:	e7fa      	b.n	8023122 <strncmp+0x1a>
 802312c:	4610      	mov	r0, r2
 802312e:	e7f9      	b.n	8023124 <strncmp+0x1c>

08023130 <sulp>:
 8023130:	b570      	push	{r4, r5, r6, lr}
 8023132:	4604      	mov	r4, r0
 8023134:	460d      	mov	r5, r1
 8023136:	4616      	mov	r6, r2
 8023138:	ec45 4b10 	vmov	d0, r4, r5
 802313c:	f002 fe12 	bl	8025d64 <__ulp>
 8023140:	b17e      	cbz	r6, 8023162 <sulp+0x32>
 8023142:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8023146:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802314a:	2b00      	cmp	r3, #0
 802314c:	dd09      	ble.n	8023162 <sulp+0x32>
 802314e:	051b      	lsls	r3, r3, #20
 8023150:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8023154:	2000      	movs	r0, #0
 8023156:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802315a:	ec41 0b17 	vmov	d7, r0, r1
 802315e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8023162:	bd70      	pop	{r4, r5, r6, pc}
 8023164:	0000      	movs	r0, r0
	...

08023168 <_strtod_l>:
 8023168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802316c:	ed2d 8b0e 	vpush	{d8-d14}
 8023170:	b097      	sub	sp, #92	; 0x5c
 8023172:	461f      	mov	r7, r3
 8023174:	2300      	movs	r3, #0
 8023176:	9312      	str	r3, [sp, #72]	; 0x48
 8023178:	4ba1      	ldr	r3, [pc, #644]	; (8023400 <_strtod_l+0x298>)
 802317a:	920d      	str	r2, [sp, #52]	; 0x34
 802317c:	681b      	ldr	r3, [r3, #0]
 802317e:	9307      	str	r3, [sp, #28]
 8023180:	4604      	mov	r4, r0
 8023182:	4618      	mov	r0, r3
 8023184:	468b      	mov	fp, r1
 8023186:	f7dd f8b5 	bl	80002f4 <strlen>
 802318a:	f04f 0800 	mov.w	r8, #0
 802318e:	4605      	mov	r5, r0
 8023190:	f04f 0900 	mov.w	r9, #0
 8023194:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8023198:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802319a:	7813      	ldrb	r3, [r2, #0]
 802319c:	2b2b      	cmp	r3, #43	; 0x2b
 802319e:	d04d      	beq.n	802323c <_strtod_l+0xd4>
 80231a0:	d83a      	bhi.n	8023218 <_strtod_l+0xb0>
 80231a2:	2b0d      	cmp	r3, #13
 80231a4:	d833      	bhi.n	802320e <_strtod_l+0xa6>
 80231a6:	2b08      	cmp	r3, #8
 80231a8:	d833      	bhi.n	8023212 <_strtod_l+0xaa>
 80231aa:	2b00      	cmp	r3, #0
 80231ac:	d03d      	beq.n	802322a <_strtod_l+0xc2>
 80231ae:	2300      	movs	r3, #0
 80231b0:	9308      	str	r3, [sp, #32]
 80231b2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80231b4:	7833      	ldrb	r3, [r6, #0]
 80231b6:	2b30      	cmp	r3, #48	; 0x30
 80231b8:	f040 80b0 	bne.w	802331c <_strtod_l+0x1b4>
 80231bc:	7873      	ldrb	r3, [r6, #1]
 80231be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80231c2:	2b58      	cmp	r3, #88	; 0x58
 80231c4:	d167      	bne.n	8023296 <_strtod_l+0x12e>
 80231c6:	9b08      	ldr	r3, [sp, #32]
 80231c8:	9301      	str	r3, [sp, #4]
 80231ca:	ab12      	add	r3, sp, #72	; 0x48
 80231cc:	9702      	str	r7, [sp, #8]
 80231ce:	9300      	str	r3, [sp, #0]
 80231d0:	4a8c      	ldr	r2, [pc, #560]	; (8023404 <_strtod_l+0x29c>)
 80231d2:	ab13      	add	r3, sp, #76	; 0x4c
 80231d4:	a911      	add	r1, sp, #68	; 0x44
 80231d6:	4620      	mov	r0, r4
 80231d8:	f001 feb0 	bl	8024f3c <__gethex>
 80231dc:	f010 0507 	ands.w	r5, r0, #7
 80231e0:	4607      	mov	r7, r0
 80231e2:	d005      	beq.n	80231f0 <_strtod_l+0x88>
 80231e4:	2d06      	cmp	r5, #6
 80231e6:	d12b      	bne.n	8023240 <_strtod_l+0xd8>
 80231e8:	3601      	adds	r6, #1
 80231ea:	2300      	movs	r3, #0
 80231ec:	9611      	str	r6, [sp, #68]	; 0x44
 80231ee:	9308      	str	r3, [sp, #32]
 80231f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	f040 854e 	bne.w	8023c94 <_strtod_l+0xb2c>
 80231f8:	9b08      	ldr	r3, [sp, #32]
 80231fa:	b1e3      	cbz	r3, 8023236 <_strtod_l+0xce>
 80231fc:	ec49 8b17 	vmov	d7, r8, r9
 8023200:	eeb1 0b47 	vneg.f64	d0, d7
 8023204:	b017      	add	sp, #92	; 0x5c
 8023206:	ecbd 8b0e 	vpop	{d8-d14}
 802320a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802320e:	2b20      	cmp	r3, #32
 8023210:	d1cd      	bne.n	80231ae <_strtod_l+0x46>
 8023212:	3201      	adds	r2, #1
 8023214:	9211      	str	r2, [sp, #68]	; 0x44
 8023216:	e7bf      	b.n	8023198 <_strtod_l+0x30>
 8023218:	2b2d      	cmp	r3, #45	; 0x2d
 802321a:	d1c8      	bne.n	80231ae <_strtod_l+0x46>
 802321c:	2301      	movs	r3, #1
 802321e:	9308      	str	r3, [sp, #32]
 8023220:	1c53      	adds	r3, r2, #1
 8023222:	9311      	str	r3, [sp, #68]	; 0x44
 8023224:	7853      	ldrb	r3, [r2, #1]
 8023226:	2b00      	cmp	r3, #0
 8023228:	d1c3      	bne.n	80231b2 <_strtod_l+0x4a>
 802322a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802322c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8023230:	2b00      	cmp	r3, #0
 8023232:	f040 852d 	bne.w	8023c90 <_strtod_l+0xb28>
 8023236:	ec49 8b10 	vmov	d0, r8, r9
 802323a:	e7e3      	b.n	8023204 <_strtod_l+0x9c>
 802323c:	2300      	movs	r3, #0
 802323e:	e7ee      	b.n	802321e <_strtod_l+0xb6>
 8023240:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023242:	b13a      	cbz	r2, 8023254 <_strtod_l+0xec>
 8023244:	2135      	movs	r1, #53	; 0x35
 8023246:	a814      	add	r0, sp, #80	; 0x50
 8023248:	f002 fe94 	bl	8025f74 <__copybits>
 802324c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802324e:	4620      	mov	r0, r4
 8023250:	f002 fa56 	bl	8025700 <_Bfree>
 8023254:	3d01      	subs	r5, #1
 8023256:	2d04      	cmp	r5, #4
 8023258:	d806      	bhi.n	8023268 <_strtod_l+0x100>
 802325a:	e8df f005 	tbb	[pc, r5]
 802325e:	030a      	.short	0x030a
 8023260:	1714      	.short	0x1714
 8023262:	0a          	.byte	0x0a
 8023263:	00          	.byte	0x00
 8023264:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8023268:	073f      	lsls	r7, r7, #28
 802326a:	d5c1      	bpl.n	80231f0 <_strtod_l+0x88>
 802326c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8023270:	e7be      	b.n	80231f0 <_strtod_l+0x88>
 8023272:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8023276:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023278:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802327c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023280:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8023284:	e7f0      	b.n	8023268 <_strtod_l+0x100>
 8023286:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8023408 <_strtod_l+0x2a0>
 802328a:	e7ed      	b.n	8023268 <_strtod_l+0x100>
 802328c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8023290:	f04f 38ff 	mov.w	r8, #4294967295
 8023294:	e7e8      	b.n	8023268 <_strtod_l+0x100>
 8023296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023298:	1c5a      	adds	r2, r3, #1
 802329a:	9211      	str	r2, [sp, #68]	; 0x44
 802329c:	785b      	ldrb	r3, [r3, #1]
 802329e:	2b30      	cmp	r3, #48	; 0x30
 80232a0:	d0f9      	beq.n	8023296 <_strtod_l+0x12e>
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	d0a4      	beq.n	80231f0 <_strtod_l+0x88>
 80232a6:	2301      	movs	r3, #1
 80232a8:	f04f 0a00 	mov.w	sl, #0
 80232ac:	9304      	str	r3, [sp, #16]
 80232ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80232b0:	930a      	str	r3, [sp, #40]	; 0x28
 80232b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80232b6:	f8cd a018 	str.w	sl, [sp, #24]
 80232ba:	220a      	movs	r2, #10
 80232bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80232be:	7807      	ldrb	r7, [r0, #0]
 80232c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80232c4:	b2d9      	uxtb	r1, r3
 80232c6:	2909      	cmp	r1, #9
 80232c8:	d92a      	bls.n	8023320 <_strtod_l+0x1b8>
 80232ca:	9907      	ldr	r1, [sp, #28]
 80232cc:	462a      	mov	r2, r5
 80232ce:	f7ff ff1b 	bl	8023108 <strncmp>
 80232d2:	2800      	cmp	r0, #0
 80232d4:	d033      	beq.n	802333e <_strtod_l+0x1d6>
 80232d6:	2000      	movs	r0, #0
 80232d8:	9b06      	ldr	r3, [sp, #24]
 80232da:	463a      	mov	r2, r7
 80232dc:	4601      	mov	r1, r0
 80232de:	4607      	mov	r7, r0
 80232e0:	2a65      	cmp	r2, #101	; 0x65
 80232e2:	d001      	beq.n	80232e8 <_strtod_l+0x180>
 80232e4:	2a45      	cmp	r2, #69	; 0x45
 80232e6:	d117      	bne.n	8023318 <_strtod_l+0x1b0>
 80232e8:	b91b      	cbnz	r3, 80232f2 <_strtod_l+0x18a>
 80232ea:	9b04      	ldr	r3, [sp, #16]
 80232ec:	4303      	orrs	r3, r0
 80232ee:	d09c      	beq.n	802322a <_strtod_l+0xc2>
 80232f0:	2300      	movs	r3, #0
 80232f2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80232f6:	f10b 0201 	add.w	r2, fp, #1
 80232fa:	9211      	str	r2, [sp, #68]	; 0x44
 80232fc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8023300:	2a2b      	cmp	r2, #43	; 0x2b
 8023302:	d071      	beq.n	80233e8 <_strtod_l+0x280>
 8023304:	2a2d      	cmp	r2, #45	; 0x2d
 8023306:	d077      	beq.n	80233f8 <_strtod_l+0x290>
 8023308:	f04f 0e00 	mov.w	lr, #0
 802330c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8023310:	2d09      	cmp	r5, #9
 8023312:	d97f      	bls.n	8023414 <_strtod_l+0x2ac>
 8023314:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8023318:	2500      	movs	r5, #0
 802331a:	e09b      	b.n	8023454 <_strtod_l+0x2ec>
 802331c:	2300      	movs	r3, #0
 802331e:	e7c3      	b.n	80232a8 <_strtod_l+0x140>
 8023320:	9906      	ldr	r1, [sp, #24]
 8023322:	2908      	cmp	r1, #8
 8023324:	bfdd      	ittte	le
 8023326:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8023328:	fb02 3301 	mlale	r3, r2, r1, r3
 802332c:	9309      	strle	r3, [sp, #36]	; 0x24
 802332e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8023332:	9b06      	ldr	r3, [sp, #24]
 8023334:	3001      	adds	r0, #1
 8023336:	3301      	adds	r3, #1
 8023338:	9306      	str	r3, [sp, #24]
 802333a:	9011      	str	r0, [sp, #68]	; 0x44
 802333c:	e7be      	b.n	80232bc <_strtod_l+0x154>
 802333e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023340:	195a      	adds	r2, r3, r5
 8023342:	9211      	str	r2, [sp, #68]	; 0x44
 8023344:	5d5a      	ldrb	r2, [r3, r5]
 8023346:	9b06      	ldr	r3, [sp, #24]
 8023348:	b3a3      	cbz	r3, 80233b4 <_strtod_l+0x24c>
 802334a:	4607      	mov	r7, r0
 802334c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8023350:	2909      	cmp	r1, #9
 8023352:	d912      	bls.n	802337a <_strtod_l+0x212>
 8023354:	2101      	movs	r1, #1
 8023356:	e7c3      	b.n	80232e0 <_strtod_l+0x178>
 8023358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802335a:	1c5a      	adds	r2, r3, #1
 802335c:	9211      	str	r2, [sp, #68]	; 0x44
 802335e:	785a      	ldrb	r2, [r3, #1]
 8023360:	3001      	adds	r0, #1
 8023362:	2a30      	cmp	r2, #48	; 0x30
 8023364:	d0f8      	beq.n	8023358 <_strtod_l+0x1f0>
 8023366:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802336a:	2b08      	cmp	r3, #8
 802336c:	f200 8497 	bhi.w	8023c9e <_strtod_l+0xb36>
 8023370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023372:	930a      	str	r3, [sp, #40]	; 0x28
 8023374:	4607      	mov	r7, r0
 8023376:	2000      	movs	r0, #0
 8023378:	4603      	mov	r3, r0
 802337a:	3a30      	subs	r2, #48	; 0x30
 802337c:	f100 0101 	add.w	r1, r0, #1
 8023380:	d012      	beq.n	80233a8 <_strtod_l+0x240>
 8023382:	440f      	add	r7, r1
 8023384:	eb00 0c03 	add.w	ip, r0, r3
 8023388:	4619      	mov	r1, r3
 802338a:	250a      	movs	r5, #10
 802338c:	4561      	cmp	r1, ip
 802338e:	d113      	bne.n	80233b8 <_strtod_l+0x250>
 8023390:	1819      	adds	r1, r3, r0
 8023392:	2908      	cmp	r1, #8
 8023394:	f103 0301 	add.w	r3, r3, #1
 8023398:	4403      	add	r3, r0
 802339a:	dc1c      	bgt.n	80233d6 <_strtod_l+0x26e>
 802339c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802339e:	210a      	movs	r1, #10
 80233a0:	fb01 2200 	mla	r2, r1, r0, r2
 80233a4:	9209      	str	r2, [sp, #36]	; 0x24
 80233a6:	2100      	movs	r1, #0
 80233a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80233aa:	1c50      	adds	r0, r2, #1
 80233ac:	9011      	str	r0, [sp, #68]	; 0x44
 80233ae:	7852      	ldrb	r2, [r2, #1]
 80233b0:	4608      	mov	r0, r1
 80233b2:	e7cb      	b.n	802334c <_strtod_l+0x1e4>
 80233b4:	9806      	ldr	r0, [sp, #24]
 80233b6:	e7d4      	b.n	8023362 <_strtod_l+0x1fa>
 80233b8:	2908      	cmp	r1, #8
 80233ba:	dc04      	bgt.n	80233c6 <_strtod_l+0x25e>
 80233bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80233be:	436e      	muls	r6, r5
 80233c0:	9609      	str	r6, [sp, #36]	; 0x24
 80233c2:	3101      	adds	r1, #1
 80233c4:	e7e2      	b.n	802338c <_strtod_l+0x224>
 80233c6:	f101 0e01 	add.w	lr, r1, #1
 80233ca:	f1be 0f10 	cmp.w	lr, #16
 80233ce:	bfd8      	it	le
 80233d0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80233d4:	e7f5      	b.n	80233c2 <_strtod_l+0x25a>
 80233d6:	2b10      	cmp	r3, #16
 80233d8:	bfdc      	itt	le
 80233da:	210a      	movle	r1, #10
 80233dc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80233e0:	e7e1      	b.n	80233a6 <_strtod_l+0x23e>
 80233e2:	2700      	movs	r7, #0
 80233e4:	2101      	movs	r1, #1
 80233e6:	e780      	b.n	80232ea <_strtod_l+0x182>
 80233e8:	f04f 0e00 	mov.w	lr, #0
 80233ec:	f10b 0202 	add.w	r2, fp, #2
 80233f0:	9211      	str	r2, [sp, #68]	; 0x44
 80233f2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80233f6:	e789      	b.n	802330c <_strtod_l+0x1a4>
 80233f8:	f04f 0e01 	mov.w	lr, #1
 80233fc:	e7f6      	b.n	80233ec <_strtod_l+0x284>
 80233fe:	bf00      	nop
 8023400:	08028050 	.word	0x08028050
 8023404:	08027e70 	.word	0x08027e70
 8023408:	7ff00000 	.word	0x7ff00000
 802340c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802340e:	1c55      	adds	r5, r2, #1
 8023410:	9511      	str	r5, [sp, #68]	; 0x44
 8023412:	7852      	ldrb	r2, [r2, #1]
 8023414:	2a30      	cmp	r2, #48	; 0x30
 8023416:	d0f9      	beq.n	802340c <_strtod_l+0x2a4>
 8023418:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 802341c:	2d08      	cmp	r5, #8
 802341e:	f63f af7b 	bhi.w	8023318 <_strtod_l+0x1b0>
 8023422:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8023426:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023428:	9207      	str	r2, [sp, #28]
 802342a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802342c:	1c55      	adds	r5, r2, #1
 802342e:	9511      	str	r5, [sp, #68]	; 0x44
 8023430:	7852      	ldrb	r2, [r2, #1]
 8023432:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8023436:	2e09      	cmp	r6, #9
 8023438:	d937      	bls.n	80234aa <_strtod_l+0x342>
 802343a:	9e07      	ldr	r6, [sp, #28]
 802343c:	1bad      	subs	r5, r5, r6
 802343e:	2d08      	cmp	r5, #8
 8023440:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8023444:	dc02      	bgt.n	802344c <_strtod_l+0x2e4>
 8023446:	4565      	cmp	r5, ip
 8023448:	bfa8      	it	ge
 802344a:	4665      	movge	r5, ip
 802344c:	f1be 0f00 	cmp.w	lr, #0
 8023450:	d000      	beq.n	8023454 <_strtod_l+0x2ec>
 8023452:	426d      	negs	r5, r5
 8023454:	2b00      	cmp	r3, #0
 8023456:	d14d      	bne.n	80234f4 <_strtod_l+0x38c>
 8023458:	9b04      	ldr	r3, [sp, #16]
 802345a:	4303      	orrs	r3, r0
 802345c:	f47f aec8 	bne.w	80231f0 <_strtod_l+0x88>
 8023460:	2900      	cmp	r1, #0
 8023462:	f47f aee2 	bne.w	802322a <_strtod_l+0xc2>
 8023466:	2a69      	cmp	r2, #105	; 0x69
 8023468:	d027      	beq.n	80234ba <_strtod_l+0x352>
 802346a:	dc24      	bgt.n	80234b6 <_strtod_l+0x34e>
 802346c:	2a49      	cmp	r2, #73	; 0x49
 802346e:	d024      	beq.n	80234ba <_strtod_l+0x352>
 8023470:	2a4e      	cmp	r2, #78	; 0x4e
 8023472:	f47f aeda 	bne.w	802322a <_strtod_l+0xc2>
 8023476:	4996      	ldr	r1, [pc, #600]	; (80236d0 <_strtod_l+0x568>)
 8023478:	a811      	add	r0, sp, #68	; 0x44
 802347a:	f001 ffb7 	bl	80253ec <__match>
 802347e:	2800      	cmp	r0, #0
 8023480:	f43f aed3 	beq.w	802322a <_strtod_l+0xc2>
 8023484:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023486:	781b      	ldrb	r3, [r3, #0]
 8023488:	2b28      	cmp	r3, #40	; 0x28
 802348a:	d12d      	bne.n	80234e8 <_strtod_l+0x380>
 802348c:	4991      	ldr	r1, [pc, #580]	; (80236d4 <_strtod_l+0x56c>)
 802348e:	aa14      	add	r2, sp, #80	; 0x50
 8023490:	a811      	add	r0, sp, #68	; 0x44
 8023492:	f001 ffbf 	bl	8025414 <__hexnan>
 8023496:	2805      	cmp	r0, #5
 8023498:	d126      	bne.n	80234e8 <_strtod_l+0x380>
 802349a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802349c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80234a0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80234a4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80234a8:	e6a2      	b.n	80231f0 <_strtod_l+0x88>
 80234aa:	250a      	movs	r5, #10
 80234ac:	fb05 250c 	mla	r5, r5, ip, r2
 80234b0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80234b4:	e7b9      	b.n	802342a <_strtod_l+0x2c2>
 80234b6:	2a6e      	cmp	r2, #110	; 0x6e
 80234b8:	e7db      	b.n	8023472 <_strtod_l+0x30a>
 80234ba:	4987      	ldr	r1, [pc, #540]	; (80236d8 <_strtod_l+0x570>)
 80234bc:	a811      	add	r0, sp, #68	; 0x44
 80234be:	f001 ff95 	bl	80253ec <__match>
 80234c2:	2800      	cmp	r0, #0
 80234c4:	f43f aeb1 	beq.w	802322a <_strtod_l+0xc2>
 80234c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80234ca:	4984      	ldr	r1, [pc, #528]	; (80236dc <_strtod_l+0x574>)
 80234cc:	3b01      	subs	r3, #1
 80234ce:	a811      	add	r0, sp, #68	; 0x44
 80234d0:	9311      	str	r3, [sp, #68]	; 0x44
 80234d2:	f001 ff8b 	bl	80253ec <__match>
 80234d6:	b910      	cbnz	r0, 80234de <_strtod_l+0x376>
 80234d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80234da:	3301      	adds	r3, #1
 80234dc:	9311      	str	r3, [sp, #68]	; 0x44
 80234de:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80236f0 <_strtod_l+0x588>
 80234e2:	f04f 0800 	mov.w	r8, #0
 80234e6:	e683      	b.n	80231f0 <_strtod_l+0x88>
 80234e8:	487d      	ldr	r0, [pc, #500]	; (80236e0 <_strtod_l+0x578>)
 80234ea:	f003 f865 	bl	80265b8 <nan>
 80234ee:	ec59 8b10 	vmov	r8, r9, d0
 80234f2:	e67d      	b.n	80231f0 <_strtod_l+0x88>
 80234f4:	1bea      	subs	r2, r5, r7
 80234f6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80234fa:	9207      	str	r2, [sp, #28]
 80234fc:	9a06      	ldr	r2, [sp, #24]
 80234fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8023502:	2a00      	cmp	r2, #0
 8023504:	bf08      	it	eq
 8023506:	461a      	moveq	r2, r3
 8023508:	2b10      	cmp	r3, #16
 802350a:	9206      	str	r2, [sp, #24]
 802350c:	461a      	mov	r2, r3
 802350e:	bfa8      	it	ge
 8023510:	2210      	movge	r2, #16
 8023512:	2b09      	cmp	r3, #9
 8023514:	ec59 8b17 	vmov	r8, r9, d7
 8023518:	dd0c      	ble.n	8023534 <_strtod_l+0x3cc>
 802351a:	4972      	ldr	r1, [pc, #456]	; (80236e4 <_strtod_l+0x57c>)
 802351c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8023520:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8023524:	ee06 aa90 	vmov	s13, sl
 8023528:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 802352c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023530:	ec59 8b16 	vmov	r8, r9, d6
 8023534:	2b0f      	cmp	r3, #15
 8023536:	dc36      	bgt.n	80235a6 <_strtod_l+0x43e>
 8023538:	9907      	ldr	r1, [sp, #28]
 802353a:	2900      	cmp	r1, #0
 802353c:	f43f ae58 	beq.w	80231f0 <_strtod_l+0x88>
 8023540:	dd23      	ble.n	802358a <_strtod_l+0x422>
 8023542:	2916      	cmp	r1, #22
 8023544:	dc0b      	bgt.n	802355e <_strtod_l+0x3f6>
 8023546:	4b67      	ldr	r3, [pc, #412]	; (80236e4 <_strtod_l+0x57c>)
 8023548:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802354c:	ed93 7b00 	vldr	d7, [r3]
 8023550:	ec49 8b16 	vmov	d6, r8, r9
 8023554:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023558:	ec59 8b17 	vmov	r8, r9, d7
 802355c:	e648      	b.n	80231f0 <_strtod_l+0x88>
 802355e:	9807      	ldr	r0, [sp, #28]
 8023560:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8023564:	4281      	cmp	r1, r0
 8023566:	db1e      	blt.n	80235a6 <_strtod_l+0x43e>
 8023568:	4a5e      	ldr	r2, [pc, #376]	; (80236e4 <_strtod_l+0x57c>)
 802356a:	f1c3 030f 	rsb	r3, r3, #15
 802356e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8023572:	ed91 7b00 	vldr	d7, [r1]
 8023576:	ec49 8b16 	vmov	d6, r8, r9
 802357a:	1ac3      	subs	r3, r0, r3
 802357c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8023580:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023584:	ed92 6b00 	vldr	d6, [r2]
 8023588:	e7e4      	b.n	8023554 <_strtod_l+0x3ec>
 802358a:	9907      	ldr	r1, [sp, #28]
 802358c:	3116      	adds	r1, #22
 802358e:	db0a      	blt.n	80235a6 <_strtod_l+0x43e>
 8023590:	4b54      	ldr	r3, [pc, #336]	; (80236e4 <_strtod_l+0x57c>)
 8023592:	1b7d      	subs	r5, r7, r5
 8023594:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8023598:	ed95 7b00 	vldr	d7, [r5]
 802359c:	ec49 8b16 	vmov	d6, r8, r9
 80235a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80235a4:	e7d8      	b.n	8023558 <_strtod_l+0x3f0>
 80235a6:	9907      	ldr	r1, [sp, #28]
 80235a8:	1a9a      	subs	r2, r3, r2
 80235aa:	440a      	add	r2, r1
 80235ac:	2a00      	cmp	r2, #0
 80235ae:	dd6f      	ble.n	8023690 <_strtod_l+0x528>
 80235b0:	f012 000f 	ands.w	r0, r2, #15
 80235b4:	d00a      	beq.n	80235cc <_strtod_l+0x464>
 80235b6:	494b      	ldr	r1, [pc, #300]	; (80236e4 <_strtod_l+0x57c>)
 80235b8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80235bc:	ed91 7b00 	vldr	d7, [r1]
 80235c0:	ec49 8b16 	vmov	d6, r8, r9
 80235c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80235c8:	ec59 8b17 	vmov	r8, r9, d7
 80235cc:	f032 020f 	bics.w	r2, r2, #15
 80235d0:	d04f      	beq.n	8023672 <_strtod_l+0x50a>
 80235d2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80235d6:	dd22      	ble.n	802361e <_strtod_l+0x4b6>
 80235d8:	2500      	movs	r5, #0
 80235da:	462e      	mov	r6, r5
 80235dc:	9506      	str	r5, [sp, #24]
 80235de:	462f      	mov	r7, r5
 80235e0:	2322      	movs	r3, #34	; 0x22
 80235e2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80236f0 <_strtod_l+0x588>
 80235e6:	6023      	str	r3, [r4, #0]
 80235e8:	f04f 0800 	mov.w	r8, #0
 80235ec:	9b06      	ldr	r3, [sp, #24]
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	f43f adfe 	beq.w	80231f0 <_strtod_l+0x88>
 80235f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80235f6:	4620      	mov	r0, r4
 80235f8:	f002 f882 	bl	8025700 <_Bfree>
 80235fc:	4639      	mov	r1, r7
 80235fe:	4620      	mov	r0, r4
 8023600:	f002 f87e 	bl	8025700 <_Bfree>
 8023604:	4631      	mov	r1, r6
 8023606:	4620      	mov	r0, r4
 8023608:	f002 f87a 	bl	8025700 <_Bfree>
 802360c:	9906      	ldr	r1, [sp, #24]
 802360e:	4620      	mov	r0, r4
 8023610:	f002 f876 	bl	8025700 <_Bfree>
 8023614:	4629      	mov	r1, r5
 8023616:	4620      	mov	r0, r4
 8023618:	f002 f872 	bl	8025700 <_Bfree>
 802361c:	e5e8      	b.n	80231f0 <_strtod_l+0x88>
 802361e:	2000      	movs	r0, #0
 8023620:	ec49 8b17 	vmov	d7, r8, r9
 8023624:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80236e8 <_strtod_l+0x580>
 8023628:	1112      	asrs	r2, r2, #4
 802362a:	4601      	mov	r1, r0
 802362c:	2a01      	cmp	r2, #1
 802362e:	dc23      	bgt.n	8023678 <_strtod_l+0x510>
 8023630:	b108      	cbz	r0, 8023636 <_strtod_l+0x4ce>
 8023632:	ec59 8b17 	vmov	r8, r9, d7
 8023636:	4a2c      	ldr	r2, [pc, #176]	; (80236e8 <_strtod_l+0x580>)
 8023638:	482c      	ldr	r0, [pc, #176]	; (80236ec <_strtod_l+0x584>)
 802363a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802363e:	ed92 7b00 	vldr	d7, [r2]
 8023642:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8023646:	ec49 8b16 	vmov	d6, r8, r9
 802364a:	4a29      	ldr	r2, [pc, #164]	; (80236f0 <_strtod_l+0x588>)
 802364c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023650:	ee17 1a90 	vmov	r1, s15
 8023654:	400a      	ands	r2, r1
 8023656:	4282      	cmp	r2, r0
 8023658:	ec59 8b17 	vmov	r8, r9, d7
 802365c:	d8bc      	bhi.n	80235d8 <_strtod_l+0x470>
 802365e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8023662:	4282      	cmp	r2, r0
 8023664:	bf86      	itte	hi
 8023666:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80236f4 <_strtod_l+0x58c>
 802366a:	f04f 38ff 	movhi.w	r8, #4294967295
 802366e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8023672:	2200      	movs	r2, #0
 8023674:	9204      	str	r2, [sp, #16]
 8023676:	e078      	b.n	802376a <_strtod_l+0x602>
 8023678:	07d6      	lsls	r6, r2, #31
 802367a:	d504      	bpl.n	8023686 <_strtod_l+0x51e>
 802367c:	ed9c 6b00 	vldr	d6, [ip]
 8023680:	2001      	movs	r0, #1
 8023682:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023686:	3101      	adds	r1, #1
 8023688:	1052      	asrs	r2, r2, #1
 802368a:	f10c 0c08 	add.w	ip, ip, #8
 802368e:	e7cd      	b.n	802362c <_strtod_l+0x4c4>
 8023690:	d0ef      	beq.n	8023672 <_strtod_l+0x50a>
 8023692:	4252      	negs	r2, r2
 8023694:	f012 000f 	ands.w	r0, r2, #15
 8023698:	d00a      	beq.n	80236b0 <_strtod_l+0x548>
 802369a:	4912      	ldr	r1, [pc, #72]	; (80236e4 <_strtod_l+0x57c>)
 802369c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80236a0:	ed91 7b00 	vldr	d7, [r1]
 80236a4:	ec49 8b16 	vmov	d6, r8, r9
 80236a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80236ac:	ec59 8b17 	vmov	r8, r9, d7
 80236b0:	1112      	asrs	r2, r2, #4
 80236b2:	d0de      	beq.n	8023672 <_strtod_l+0x50a>
 80236b4:	2a1f      	cmp	r2, #31
 80236b6:	dd1f      	ble.n	80236f8 <_strtod_l+0x590>
 80236b8:	2500      	movs	r5, #0
 80236ba:	462e      	mov	r6, r5
 80236bc:	9506      	str	r5, [sp, #24]
 80236be:	462f      	mov	r7, r5
 80236c0:	2322      	movs	r3, #34	; 0x22
 80236c2:	f04f 0800 	mov.w	r8, #0
 80236c6:	f04f 0900 	mov.w	r9, #0
 80236ca:	6023      	str	r3, [r4, #0]
 80236cc:	e78e      	b.n	80235ec <_strtod_l+0x484>
 80236ce:	bf00      	nop
 80236d0:	08027e41 	.word	0x08027e41
 80236d4:	08027e84 	.word	0x08027e84
 80236d8:	08027e39 	.word	0x08027e39
 80236dc:	08027f73 	.word	0x08027f73
 80236e0:	08027f6f 	.word	0x08027f6f
 80236e4:	080280e8 	.word	0x080280e8
 80236e8:	080280c0 	.word	0x080280c0
 80236ec:	7ca00000 	.word	0x7ca00000
 80236f0:	7ff00000 	.word	0x7ff00000
 80236f4:	7fefffff 	.word	0x7fefffff
 80236f8:	f012 0110 	ands.w	r1, r2, #16
 80236fc:	bf18      	it	ne
 80236fe:	216a      	movne	r1, #106	; 0x6a
 8023700:	9104      	str	r1, [sp, #16]
 8023702:	ec49 8b17 	vmov	d7, r8, r9
 8023706:	49be      	ldr	r1, [pc, #760]	; (8023a00 <_strtod_l+0x898>)
 8023708:	2000      	movs	r0, #0
 802370a:	07d6      	lsls	r6, r2, #31
 802370c:	d504      	bpl.n	8023718 <_strtod_l+0x5b0>
 802370e:	ed91 6b00 	vldr	d6, [r1]
 8023712:	2001      	movs	r0, #1
 8023714:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023718:	1052      	asrs	r2, r2, #1
 802371a:	f101 0108 	add.w	r1, r1, #8
 802371e:	d1f4      	bne.n	802370a <_strtod_l+0x5a2>
 8023720:	b108      	cbz	r0, 8023726 <_strtod_l+0x5be>
 8023722:	ec59 8b17 	vmov	r8, r9, d7
 8023726:	9a04      	ldr	r2, [sp, #16]
 8023728:	b1c2      	cbz	r2, 802375c <_strtod_l+0x5f4>
 802372a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 802372e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8023732:	2a00      	cmp	r2, #0
 8023734:	4648      	mov	r0, r9
 8023736:	dd11      	ble.n	802375c <_strtod_l+0x5f4>
 8023738:	2a1f      	cmp	r2, #31
 802373a:	f340 812e 	ble.w	802399a <_strtod_l+0x832>
 802373e:	2a34      	cmp	r2, #52	; 0x34
 8023740:	bfde      	ittt	le
 8023742:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8023746:	f04f 32ff 	movle.w	r2, #4294967295
 802374a:	fa02 f101 	lslle.w	r1, r2, r1
 802374e:	f04f 0800 	mov.w	r8, #0
 8023752:	bfcc      	ite	gt
 8023754:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8023758:	ea01 0900 	andle.w	r9, r1, r0
 802375c:	ec49 8b17 	vmov	d7, r8, r9
 8023760:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023768:	d0a6      	beq.n	80236b8 <_strtod_l+0x550>
 802376a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802376c:	9200      	str	r2, [sp, #0]
 802376e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023770:	9a06      	ldr	r2, [sp, #24]
 8023772:	4620      	mov	r0, r4
 8023774:	f002 f82c 	bl	80257d0 <__s2b>
 8023778:	9006      	str	r0, [sp, #24]
 802377a:	2800      	cmp	r0, #0
 802377c:	f43f af2c 	beq.w	80235d8 <_strtod_l+0x470>
 8023780:	9b07      	ldr	r3, [sp, #28]
 8023782:	1b7d      	subs	r5, r7, r5
 8023784:	2b00      	cmp	r3, #0
 8023786:	bfb4      	ite	lt
 8023788:	462b      	movlt	r3, r5
 802378a:	2300      	movge	r3, #0
 802378c:	9309      	str	r3, [sp, #36]	; 0x24
 802378e:	9b07      	ldr	r3, [sp, #28]
 8023790:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80239e0 <_strtod_l+0x878>
 8023794:	ed9f ab94 	vldr	d10, [pc, #592]	; 80239e8 <_strtod_l+0x880>
 8023798:	ed9f bb95 	vldr	d11, [pc, #596]	; 80239f0 <_strtod_l+0x888>
 802379c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80237a0:	2500      	movs	r5, #0
 80237a2:	930c      	str	r3, [sp, #48]	; 0x30
 80237a4:	462e      	mov	r6, r5
 80237a6:	9b06      	ldr	r3, [sp, #24]
 80237a8:	4620      	mov	r0, r4
 80237aa:	6859      	ldr	r1, [r3, #4]
 80237ac:	f001 ff68 	bl	8025680 <_Balloc>
 80237b0:	4607      	mov	r7, r0
 80237b2:	2800      	cmp	r0, #0
 80237b4:	f43f af14 	beq.w	80235e0 <_strtod_l+0x478>
 80237b8:	9b06      	ldr	r3, [sp, #24]
 80237ba:	691a      	ldr	r2, [r3, #16]
 80237bc:	3202      	adds	r2, #2
 80237be:	f103 010c 	add.w	r1, r3, #12
 80237c2:	0092      	lsls	r2, r2, #2
 80237c4:	300c      	adds	r0, #12
 80237c6:	f7fe fba5 	bl	8021f14 <memcpy>
 80237ca:	ec49 8b10 	vmov	d0, r8, r9
 80237ce:	aa14      	add	r2, sp, #80	; 0x50
 80237d0:	a913      	add	r1, sp, #76	; 0x4c
 80237d2:	4620      	mov	r0, r4
 80237d4:	f002 fb42 	bl	8025e5c <__d2b>
 80237d8:	ec49 8b18 	vmov	d8, r8, r9
 80237dc:	9012      	str	r0, [sp, #72]	; 0x48
 80237de:	2800      	cmp	r0, #0
 80237e0:	f43f aefe 	beq.w	80235e0 <_strtod_l+0x478>
 80237e4:	2101      	movs	r1, #1
 80237e6:	4620      	mov	r0, r4
 80237e8:	f002 f88c 	bl	8025904 <__i2b>
 80237ec:	4606      	mov	r6, r0
 80237ee:	2800      	cmp	r0, #0
 80237f0:	f43f aef6 	beq.w	80235e0 <_strtod_l+0x478>
 80237f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80237f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	bfab      	itete	ge
 80237fc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80237fe:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8023800:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8023804:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8023808:	bfac      	ite	ge
 802380a:	eb03 0b02 	addge.w	fp, r3, r2
 802380e:	eba2 0a03 	sublt.w	sl, r2, r3
 8023812:	9a04      	ldr	r2, [sp, #16]
 8023814:	1a9b      	subs	r3, r3, r2
 8023816:	440b      	add	r3, r1
 8023818:	4a7a      	ldr	r2, [pc, #488]	; (8023a04 <_strtod_l+0x89c>)
 802381a:	3b01      	subs	r3, #1
 802381c:	4293      	cmp	r3, r2
 802381e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8023822:	f280 80cd 	bge.w	80239c0 <_strtod_l+0x858>
 8023826:	1ad2      	subs	r2, r2, r3
 8023828:	2a1f      	cmp	r2, #31
 802382a:	eba1 0102 	sub.w	r1, r1, r2
 802382e:	f04f 0001 	mov.w	r0, #1
 8023832:	f300 80b9 	bgt.w	80239a8 <_strtod_l+0x840>
 8023836:	fa00 f302 	lsl.w	r3, r0, r2
 802383a:	930b      	str	r3, [sp, #44]	; 0x2c
 802383c:	2300      	movs	r3, #0
 802383e:	930a      	str	r3, [sp, #40]	; 0x28
 8023840:	eb0b 0301 	add.w	r3, fp, r1
 8023844:	9a04      	ldr	r2, [sp, #16]
 8023846:	459b      	cmp	fp, r3
 8023848:	448a      	add	sl, r1
 802384a:	4492      	add	sl, r2
 802384c:	465a      	mov	r2, fp
 802384e:	bfa8      	it	ge
 8023850:	461a      	movge	r2, r3
 8023852:	4552      	cmp	r2, sl
 8023854:	bfa8      	it	ge
 8023856:	4652      	movge	r2, sl
 8023858:	2a00      	cmp	r2, #0
 802385a:	bfc2      	ittt	gt
 802385c:	1a9b      	subgt	r3, r3, r2
 802385e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8023862:	ebab 0b02 	subgt.w	fp, fp, r2
 8023866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023868:	2a00      	cmp	r2, #0
 802386a:	dd18      	ble.n	802389e <_strtod_l+0x736>
 802386c:	4631      	mov	r1, r6
 802386e:	4620      	mov	r0, r4
 8023870:	930f      	str	r3, [sp, #60]	; 0x3c
 8023872:	f002 f907 	bl	8025a84 <__pow5mult>
 8023876:	4606      	mov	r6, r0
 8023878:	2800      	cmp	r0, #0
 802387a:	f43f aeb1 	beq.w	80235e0 <_strtod_l+0x478>
 802387e:	4601      	mov	r1, r0
 8023880:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023882:	4620      	mov	r0, r4
 8023884:	f002 f854 	bl	8025930 <__multiply>
 8023888:	900e      	str	r0, [sp, #56]	; 0x38
 802388a:	2800      	cmp	r0, #0
 802388c:	f43f aea8 	beq.w	80235e0 <_strtod_l+0x478>
 8023890:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023892:	4620      	mov	r0, r4
 8023894:	f001 ff34 	bl	8025700 <_Bfree>
 8023898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802389a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802389c:	9212      	str	r2, [sp, #72]	; 0x48
 802389e:	2b00      	cmp	r3, #0
 80238a0:	f300 8093 	bgt.w	80239ca <_strtod_l+0x862>
 80238a4:	9b07      	ldr	r3, [sp, #28]
 80238a6:	2b00      	cmp	r3, #0
 80238a8:	dd08      	ble.n	80238bc <_strtod_l+0x754>
 80238aa:	4639      	mov	r1, r7
 80238ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80238ae:	4620      	mov	r0, r4
 80238b0:	f002 f8e8 	bl	8025a84 <__pow5mult>
 80238b4:	4607      	mov	r7, r0
 80238b6:	2800      	cmp	r0, #0
 80238b8:	f43f ae92 	beq.w	80235e0 <_strtod_l+0x478>
 80238bc:	f1ba 0f00 	cmp.w	sl, #0
 80238c0:	dd08      	ble.n	80238d4 <_strtod_l+0x76c>
 80238c2:	4639      	mov	r1, r7
 80238c4:	4652      	mov	r2, sl
 80238c6:	4620      	mov	r0, r4
 80238c8:	f002 f936 	bl	8025b38 <__lshift>
 80238cc:	4607      	mov	r7, r0
 80238ce:	2800      	cmp	r0, #0
 80238d0:	f43f ae86 	beq.w	80235e0 <_strtod_l+0x478>
 80238d4:	f1bb 0f00 	cmp.w	fp, #0
 80238d8:	dd08      	ble.n	80238ec <_strtod_l+0x784>
 80238da:	4631      	mov	r1, r6
 80238dc:	465a      	mov	r2, fp
 80238de:	4620      	mov	r0, r4
 80238e0:	f002 f92a 	bl	8025b38 <__lshift>
 80238e4:	4606      	mov	r6, r0
 80238e6:	2800      	cmp	r0, #0
 80238e8:	f43f ae7a 	beq.w	80235e0 <_strtod_l+0x478>
 80238ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80238ee:	463a      	mov	r2, r7
 80238f0:	4620      	mov	r0, r4
 80238f2:	f002 f9ad 	bl	8025c50 <__mdiff>
 80238f6:	4605      	mov	r5, r0
 80238f8:	2800      	cmp	r0, #0
 80238fa:	f43f ae71 	beq.w	80235e0 <_strtod_l+0x478>
 80238fe:	2300      	movs	r3, #0
 8023900:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8023904:	60c3      	str	r3, [r0, #12]
 8023906:	4631      	mov	r1, r6
 8023908:	f002 f986 	bl	8025c18 <__mcmp>
 802390c:	2800      	cmp	r0, #0
 802390e:	da7d      	bge.n	8023a0c <_strtod_l+0x8a4>
 8023910:	ea5a 0308 	orrs.w	r3, sl, r8
 8023914:	f040 80a3 	bne.w	8023a5e <_strtod_l+0x8f6>
 8023918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802391c:	2b00      	cmp	r3, #0
 802391e:	f040 809e 	bne.w	8023a5e <_strtod_l+0x8f6>
 8023922:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023926:	0d1b      	lsrs	r3, r3, #20
 8023928:	051b      	lsls	r3, r3, #20
 802392a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802392e:	f240 8096 	bls.w	8023a5e <_strtod_l+0x8f6>
 8023932:	696b      	ldr	r3, [r5, #20]
 8023934:	b91b      	cbnz	r3, 802393e <_strtod_l+0x7d6>
 8023936:	692b      	ldr	r3, [r5, #16]
 8023938:	2b01      	cmp	r3, #1
 802393a:	f340 8090 	ble.w	8023a5e <_strtod_l+0x8f6>
 802393e:	4629      	mov	r1, r5
 8023940:	2201      	movs	r2, #1
 8023942:	4620      	mov	r0, r4
 8023944:	f002 f8f8 	bl	8025b38 <__lshift>
 8023948:	4631      	mov	r1, r6
 802394a:	4605      	mov	r5, r0
 802394c:	f002 f964 	bl	8025c18 <__mcmp>
 8023950:	2800      	cmp	r0, #0
 8023952:	f340 8084 	ble.w	8023a5e <_strtod_l+0x8f6>
 8023956:	9904      	ldr	r1, [sp, #16]
 8023958:	4a2b      	ldr	r2, [pc, #172]	; (8023a08 <_strtod_l+0x8a0>)
 802395a:	464b      	mov	r3, r9
 802395c:	2900      	cmp	r1, #0
 802395e:	f000 809d 	beq.w	8023a9c <_strtod_l+0x934>
 8023962:	ea02 0109 	and.w	r1, r2, r9
 8023966:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802396a:	f300 8097 	bgt.w	8023a9c <_strtod_l+0x934>
 802396e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8023972:	f77f aea5 	ble.w	80236c0 <_strtod_l+0x558>
 8023976:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80239f8 <_strtod_l+0x890>
 802397a:	ec49 8b16 	vmov	d6, r8, r9
 802397e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023982:	ed8d 7b04 	vstr	d7, [sp, #16]
 8023986:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 802398a:	4313      	orrs	r3, r2
 802398c:	bf08      	it	eq
 802398e:	2322      	moveq	r3, #34	; 0x22
 8023990:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8023994:	bf08      	it	eq
 8023996:	6023      	streq	r3, [r4, #0]
 8023998:	e62c      	b.n	80235f4 <_strtod_l+0x48c>
 802399a:	f04f 31ff 	mov.w	r1, #4294967295
 802399e:	fa01 f202 	lsl.w	r2, r1, r2
 80239a2:	ea02 0808 	and.w	r8, r2, r8
 80239a6:	e6d9      	b.n	802375c <_strtod_l+0x5f4>
 80239a8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80239ac:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80239b0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80239b4:	33e2      	adds	r3, #226	; 0xe2
 80239b6:	fa00 f303 	lsl.w	r3, r0, r3
 80239ba:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80239be:	e73f      	b.n	8023840 <_strtod_l+0x6d8>
 80239c0:	2200      	movs	r2, #0
 80239c2:	2301      	movs	r3, #1
 80239c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80239c8:	e73a      	b.n	8023840 <_strtod_l+0x6d8>
 80239ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 80239cc:	461a      	mov	r2, r3
 80239ce:	4620      	mov	r0, r4
 80239d0:	f002 f8b2 	bl	8025b38 <__lshift>
 80239d4:	9012      	str	r0, [sp, #72]	; 0x48
 80239d6:	2800      	cmp	r0, #0
 80239d8:	f47f af64 	bne.w	80238a4 <_strtod_l+0x73c>
 80239dc:	e600      	b.n	80235e0 <_strtod_l+0x478>
 80239de:	bf00      	nop
 80239e0:	94a03595 	.word	0x94a03595
 80239e4:	3fcfffff 	.word	0x3fcfffff
 80239e8:	94a03595 	.word	0x94a03595
 80239ec:	3fdfffff 	.word	0x3fdfffff
 80239f0:	35afe535 	.word	0x35afe535
 80239f4:	3fe00000 	.word	0x3fe00000
 80239f8:	00000000 	.word	0x00000000
 80239fc:	39500000 	.word	0x39500000
 8023a00:	08027e98 	.word	0x08027e98
 8023a04:	fffffc02 	.word	0xfffffc02
 8023a08:	7ff00000 	.word	0x7ff00000
 8023a0c:	46cb      	mov	fp, r9
 8023a0e:	d15f      	bne.n	8023ad0 <_strtod_l+0x968>
 8023a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023a14:	f1ba 0f00 	cmp.w	sl, #0
 8023a18:	d02a      	beq.n	8023a70 <_strtod_l+0x908>
 8023a1a:	4aa7      	ldr	r2, [pc, #668]	; (8023cb8 <_strtod_l+0xb50>)
 8023a1c:	4293      	cmp	r3, r2
 8023a1e:	d12b      	bne.n	8023a78 <_strtod_l+0x910>
 8023a20:	9b04      	ldr	r3, [sp, #16]
 8023a22:	4642      	mov	r2, r8
 8023a24:	b1fb      	cbz	r3, 8023a66 <_strtod_l+0x8fe>
 8023a26:	4ba5      	ldr	r3, [pc, #660]	; (8023cbc <_strtod_l+0xb54>)
 8023a28:	ea09 0303 	and.w	r3, r9, r3
 8023a2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8023a30:	f04f 31ff 	mov.w	r1, #4294967295
 8023a34:	d81a      	bhi.n	8023a6c <_strtod_l+0x904>
 8023a36:	0d1b      	lsrs	r3, r3, #20
 8023a38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8023a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8023a40:	429a      	cmp	r2, r3
 8023a42:	d119      	bne.n	8023a78 <_strtod_l+0x910>
 8023a44:	4b9e      	ldr	r3, [pc, #632]	; (8023cc0 <_strtod_l+0xb58>)
 8023a46:	459b      	cmp	fp, r3
 8023a48:	d102      	bne.n	8023a50 <_strtod_l+0x8e8>
 8023a4a:	3201      	adds	r2, #1
 8023a4c:	f43f adc8 	beq.w	80235e0 <_strtod_l+0x478>
 8023a50:	4b9a      	ldr	r3, [pc, #616]	; (8023cbc <_strtod_l+0xb54>)
 8023a52:	ea0b 0303 	and.w	r3, fp, r3
 8023a56:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8023a5a:	f04f 0800 	mov.w	r8, #0
 8023a5e:	9b04      	ldr	r3, [sp, #16]
 8023a60:	2b00      	cmp	r3, #0
 8023a62:	d188      	bne.n	8023976 <_strtod_l+0x80e>
 8023a64:	e5c6      	b.n	80235f4 <_strtod_l+0x48c>
 8023a66:	f04f 33ff 	mov.w	r3, #4294967295
 8023a6a:	e7e9      	b.n	8023a40 <_strtod_l+0x8d8>
 8023a6c:	460b      	mov	r3, r1
 8023a6e:	e7e7      	b.n	8023a40 <_strtod_l+0x8d8>
 8023a70:	ea53 0308 	orrs.w	r3, r3, r8
 8023a74:	f43f af6f 	beq.w	8023956 <_strtod_l+0x7ee>
 8023a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a7a:	b1cb      	cbz	r3, 8023ab0 <_strtod_l+0x948>
 8023a7c:	ea13 0f0b 	tst.w	r3, fp
 8023a80:	d0ed      	beq.n	8023a5e <_strtod_l+0x8f6>
 8023a82:	9a04      	ldr	r2, [sp, #16]
 8023a84:	4640      	mov	r0, r8
 8023a86:	4649      	mov	r1, r9
 8023a88:	f1ba 0f00 	cmp.w	sl, #0
 8023a8c:	d014      	beq.n	8023ab8 <_strtod_l+0x950>
 8023a8e:	f7ff fb4f 	bl	8023130 <sulp>
 8023a92:	ee38 7b00 	vadd.f64	d7, d8, d0
 8023a96:	ec59 8b17 	vmov	r8, r9, d7
 8023a9a:	e7e0      	b.n	8023a5e <_strtod_l+0x8f6>
 8023a9c:	4013      	ands	r3, r2
 8023a9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8023aa2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8023aa6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8023aaa:	f04f 38ff 	mov.w	r8, #4294967295
 8023aae:	e7d6      	b.n	8023a5e <_strtod_l+0x8f6>
 8023ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ab2:	ea13 0f08 	tst.w	r3, r8
 8023ab6:	e7e3      	b.n	8023a80 <_strtod_l+0x918>
 8023ab8:	f7ff fb3a 	bl	8023130 <sulp>
 8023abc:	ee38 0b40 	vsub.f64	d0, d8, d0
 8023ac0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8023ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ac8:	ec59 8b10 	vmov	r8, r9, d0
 8023acc:	d1c7      	bne.n	8023a5e <_strtod_l+0x8f6>
 8023ace:	e5f7      	b.n	80236c0 <_strtod_l+0x558>
 8023ad0:	4631      	mov	r1, r6
 8023ad2:	4628      	mov	r0, r5
 8023ad4:	f002 fa1e 	bl	8025f14 <__ratio>
 8023ad8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8023adc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ae4:	d865      	bhi.n	8023bb2 <_strtod_l+0xa4a>
 8023ae6:	f1ba 0f00 	cmp.w	sl, #0
 8023aea:	d042      	beq.n	8023b72 <_strtod_l+0xa0a>
 8023aec:	4b75      	ldr	r3, [pc, #468]	; (8023cc4 <_strtod_l+0xb5c>)
 8023aee:	2200      	movs	r2, #0
 8023af0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8023af4:	4871      	ldr	r0, [pc, #452]	; (8023cbc <_strtod_l+0xb54>)
 8023af6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8023cd0 <_strtod_l+0xb68>
 8023afa:	ea0b 0100 	and.w	r1, fp, r0
 8023afe:	4561      	cmp	r1, ip
 8023b00:	f040 808e 	bne.w	8023c20 <_strtod_l+0xab8>
 8023b04:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8023b08:	ec49 8b10 	vmov	d0, r8, r9
 8023b0c:	ec43 2b1c 	vmov	d12, r2, r3
 8023b10:	910a      	str	r1, [sp, #40]	; 0x28
 8023b12:	f002 f927 	bl	8025d64 <__ulp>
 8023b16:	ec49 8b1e 	vmov	d14, r8, r9
 8023b1a:	4868      	ldr	r0, [pc, #416]	; (8023cbc <_strtod_l+0xb54>)
 8023b1c:	eeac eb00 	vfma.f64	d14, d12, d0
 8023b20:	ee1e 3a90 	vmov	r3, s29
 8023b24:	4a68      	ldr	r2, [pc, #416]	; (8023cc8 <_strtod_l+0xb60>)
 8023b26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023b28:	4018      	ands	r0, r3
 8023b2a:	4290      	cmp	r0, r2
 8023b2c:	ec59 8b1e 	vmov	r8, r9, d14
 8023b30:	d94e      	bls.n	8023bd0 <_strtod_l+0xa68>
 8023b32:	ee18 3a90 	vmov	r3, s17
 8023b36:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8023b3a:	4293      	cmp	r3, r2
 8023b3c:	d104      	bne.n	8023b48 <_strtod_l+0x9e0>
 8023b3e:	ee18 3a10 	vmov	r3, s16
 8023b42:	3301      	adds	r3, #1
 8023b44:	f43f ad4c 	beq.w	80235e0 <_strtod_l+0x478>
 8023b48:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8023cc0 <_strtod_l+0xb58>
 8023b4c:	f04f 38ff 	mov.w	r8, #4294967295
 8023b50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023b52:	4620      	mov	r0, r4
 8023b54:	f001 fdd4 	bl	8025700 <_Bfree>
 8023b58:	4639      	mov	r1, r7
 8023b5a:	4620      	mov	r0, r4
 8023b5c:	f001 fdd0 	bl	8025700 <_Bfree>
 8023b60:	4631      	mov	r1, r6
 8023b62:	4620      	mov	r0, r4
 8023b64:	f001 fdcc 	bl	8025700 <_Bfree>
 8023b68:	4629      	mov	r1, r5
 8023b6a:	4620      	mov	r0, r4
 8023b6c:	f001 fdc8 	bl	8025700 <_Bfree>
 8023b70:	e619      	b.n	80237a6 <_strtod_l+0x63e>
 8023b72:	f1b8 0f00 	cmp.w	r8, #0
 8023b76:	d112      	bne.n	8023b9e <_strtod_l+0xa36>
 8023b78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023b7c:	b9b3      	cbnz	r3, 8023bac <_strtod_l+0xa44>
 8023b7e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8023b82:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8023b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b8a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8023b8e:	bf58      	it	pl
 8023b90:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8023b94:	eeb1 7b4d 	vneg.f64	d7, d13
 8023b98:	ec53 2b17 	vmov	r2, r3, d7
 8023b9c:	e7aa      	b.n	8023af4 <_strtod_l+0x98c>
 8023b9e:	f1b8 0f01 	cmp.w	r8, #1
 8023ba2:	d103      	bne.n	8023bac <_strtod_l+0xa44>
 8023ba4:	f1b9 0f00 	cmp.w	r9, #0
 8023ba8:	f43f ad8a 	beq.w	80236c0 <_strtod_l+0x558>
 8023bac:	4b47      	ldr	r3, [pc, #284]	; (8023ccc <_strtod_l+0xb64>)
 8023bae:	2200      	movs	r2, #0
 8023bb0:	e79e      	b.n	8023af0 <_strtod_l+0x988>
 8023bb2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8023bb6:	ee20 db0d 	vmul.f64	d13, d0, d13
 8023bba:	f1ba 0f00 	cmp.w	sl, #0
 8023bbe:	d104      	bne.n	8023bca <_strtod_l+0xa62>
 8023bc0:	eeb1 7b4d 	vneg.f64	d7, d13
 8023bc4:	ec53 2b17 	vmov	r2, r3, d7
 8023bc8:	e794      	b.n	8023af4 <_strtod_l+0x98c>
 8023bca:	eeb0 7b4d 	vmov.f64	d7, d13
 8023bce:	e7f9      	b.n	8023bc4 <_strtod_l+0xa5c>
 8023bd0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8023bd4:	9b04      	ldr	r3, [sp, #16]
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d1ba      	bne.n	8023b50 <_strtod_l+0x9e8>
 8023bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023bde:	0d1b      	lsrs	r3, r3, #20
 8023be0:	051b      	lsls	r3, r3, #20
 8023be2:	4299      	cmp	r1, r3
 8023be4:	d1b4      	bne.n	8023b50 <_strtod_l+0x9e8>
 8023be6:	ec51 0b1d 	vmov	r0, r1, d13
 8023bea:	f7dc fdb5 	bl	8000758 <__aeabi_d2lz>
 8023bee:	f7dc fd6d 	bl	80006cc <__aeabi_l2d>
 8023bf2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023bf6:	ec41 0b17 	vmov	d7, r0, r1
 8023bfa:	ea43 0308 	orr.w	r3, r3, r8
 8023bfe:	ea53 030a 	orrs.w	r3, r3, sl
 8023c02:	ee3d db47 	vsub.f64	d13, d13, d7
 8023c06:	d03c      	beq.n	8023c82 <_strtod_l+0xb1a>
 8023c08:	eeb4 dbca 	vcmpe.f64	d13, d10
 8023c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c10:	f53f acf0 	bmi.w	80235f4 <_strtod_l+0x48c>
 8023c14:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8023c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c1c:	dd98      	ble.n	8023b50 <_strtod_l+0x9e8>
 8023c1e:	e4e9      	b.n	80235f4 <_strtod_l+0x48c>
 8023c20:	9804      	ldr	r0, [sp, #16]
 8023c22:	b1f0      	cbz	r0, 8023c62 <_strtod_l+0xafa>
 8023c24:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8023c28:	d81b      	bhi.n	8023c62 <_strtod_l+0xafa>
 8023c2a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8023cb0 <_strtod_l+0xb48>
 8023c2e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8023c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c36:	d811      	bhi.n	8023c5c <_strtod_l+0xaf4>
 8023c38:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8023c3c:	ee1d 3a10 	vmov	r3, s26
 8023c40:	2b01      	cmp	r3, #1
 8023c42:	bf38      	it	cc
 8023c44:	2301      	movcc	r3, #1
 8023c46:	ee0d 3a10 	vmov	s26, r3
 8023c4a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8023c4e:	f1ba 0f00 	cmp.w	sl, #0
 8023c52:	d113      	bne.n	8023c7c <_strtod_l+0xb14>
 8023c54:	eeb1 7b4d 	vneg.f64	d7, d13
 8023c58:	ec53 2b17 	vmov	r2, r3, d7
 8023c5c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8023c60:	1a43      	subs	r3, r0, r1
 8023c62:	eeb0 0b48 	vmov.f64	d0, d8
 8023c66:	ec43 2b1c 	vmov	d12, r2, r3
 8023c6a:	910a      	str	r1, [sp, #40]	; 0x28
 8023c6c:	f002 f87a 	bl	8025d64 <__ulp>
 8023c70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023c72:	eeac 8b00 	vfma.f64	d8, d12, d0
 8023c76:	ec59 8b18 	vmov	r8, r9, d8
 8023c7a:	e7ab      	b.n	8023bd4 <_strtod_l+0xa6c>
 8023c7c:	eeb0 7b4d 	vmov.f64	d7, d13
 8023c80:	e7ea      	b.n	8023c58 <_strtod_l+0xaf0>
 8023c82:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8023c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c8a:	f57f af61 	bpl.w	8023b50 <_strtod_l+0x9e8>
 8023c8e:	e4b1      	b.n	80235f4 <_strtod_l+0x48c>
 8023c90:	2300      	movs	r3, #0
 8023c92:	9308      	str	r3, [sp, #32]
 8023c94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023c98:	6013      	str	r3, [r2, #0]
 8023c9a:	f7ff baad 	b.w	80231f8 <_strtod_l+0x90>
 8023c9e:	2a65      	cmp	r2, #101	; 0x65
 8023ca0:	f43f ab9f 	beq.w	80233e2 <_strtod_l+0x27a>
 8023ca4:	2a45      	cmp	r2, #69	; 0x45
 8023ca6:	f43f ab9c 	beq.w	80233e2 <_strtod_l+0x27a>
 8023caa:	2101      	movs	r1, #1
 8023cac:	f7ff bbd4 	b.w	8023458 <_strtod_l+0x2f0>
 8023cb0:	ffc00000 	.word	0xffc00000
 8023cb4:	41dfffff 	.word	0x41dfffff
 8023cb8:	000fffff 	.word	0x000fffff
 8023cbc:	7ff00000 	.word	0x7ff00000
 8023cc0:	7fefffff 	.word	0x7fefffff
 8023cc4:	3ff00000 	.word	0x3ff00000
 8023cc8:	7c9fffff 	.word	0x7c9fffff
 8023ccc:	bff00000 	.word	0xbff00000
 8023cd0:	7fe00000 	.word	0x7fe00000

08023cd4 <_strtod_r>:
 8023cd4:	4b01      	ldr	r3, [pc, #4]	; (8023cdc <_strtod_r+0x8>)
 8023cd6:	f7ff ba47 	b.w	8023168 <_strtod_l>
 8023cda:	bf00      	nop
 8023cdc:	24000360 	.word	0x24000360

08023ce0 <strtod>:
 8023ce0:	460a      	mov	r2, r1
 8023ce2:	4601      	mov	r1, r0
 8023ce4:	4802      	ldr	r0, [pc, #8]	; (8023cf0 <strtod+0x10>)
 8023ce6:	4b03      	ldr	r3, [pc, #12]	; (8023cf4 <strtod+0x14>)
 8023ce8:	6800      	ldr	r0, [r0, #0]
 8023cea:	f7ff ba3d 	b.w	8023168 <_strtod_l>
 8023cee:	bf00      	nop
 8023cf0:	240002f8 	.word	0x240002f8
 8023cf4:	24000360 	.word	0x24000360

08023cf8 <strtok>:
 8023cf8:	4b16      	ldr	r3, [pc, #88]	; (8023d54 <strtok+0x5c>)
 8023cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023cfc:	681e      	ldr	r6, [r3, #0]
 8023cfe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8023d00:	4605      	mov	r5, r0
 8023d02:	b9fc      	cbnz	r4, 8023d44 <strtok+0x4c>
 8023d04:	2050      	movs	r0, #80	; 0x50
 8023d06:	9101      	str	r1, [sp, #4]
 8023d08:	f7fe f8fc 	bl	8021f04 <malloc>
 8023d0c:	9901      	ldr	r1, [sp, #4]
 8023d0e:	65b0      	str	r0, [r6, #88]	; 0x58
 8023d10:	4602      	mov	r2, r0
 8023d12:	b920      	cbnz	r0, 8023d1e <strtok+0x26>
 8023d14:	4b10      	ldr	r3, [pc, #64]	; (8023d58 <strtok+0x60>)
 8023d16:	4811      	ldr	r0, [pc, #68]	; (8023d5c <strtok+0x64>)
 8023d18:	2157      	movs	r1, #87	; 0x57
 8023d1a:	f000 f9a9 	bl	8024070 <__assert_func>
 8023d1e:	e9c0 4400 	strd	r4, r4, [r0]
 8023d22:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8023d26:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8023d2a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8023d2e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8023d32:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8023d36:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8023d3a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8023d3e:	6184      	str	r4, [r0, #24]
 8023d40:	7704      	strb	r4, [r0, #28]
 8023d42:	6244      	str	r4, [r0, #36]	; 0x24
 8023d44:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8023d46:	2301      	movs	r3, #1
 8023d48:	4628      	mov	r0, r5
 8023d4a:	b002      	add	sp, #8
 8023d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023d50:	f000 b806 	b.w	8023d60 <__strtok_r>
 8023d54:	240002f8 	.word	0x240002f8
 8023d58:	08027ec0 	.word	0x08027ec0
 8023d5c:	08027ed7 	.word	0x08027ed7

08023d60 <__strtok_r>:
 8023d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d62:	b908      	cbnz	r0, 8023d68 <__strtok_r+0x8>
 8023d64:	6810      	ldr	r0, [r2, #0]
 8023d66:	b188      	cbz	r0, 8023d8c <__strtok_r+0x2c>
 8023d68:	4604      	mov	r4, r0
 8023d6a:	4620      	mov	r0, r4
 8023d6c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8023d70:	460f      	mov	r7, r1
 8023d72:	f817 6b01 	ldrb.w	r6, [r7], #1
 8023d76:	b91e      	cbnz	r6, 8023d80 <__strtok_r+0x20>
 8023d78:	b965      	cbnz	r5, 8023d94 <__strtok_r+0x34>
 8023d7a:	6015      	str	r5, [r2, #0]
 8023d7c:	4628      	mov	r0, r5
 8023d7e:	e005      	b.n	8023d8c <__strtok_r+0x2c>
 8023d80:	42b5      	cmp	r5, r6
 8023d82:	d1f6      	bne.n	8023d72 <__strtok_r+0x12>
 8023d84:	2b00      	cmp	r3, #0
 8023d86:	d1f0      	bne.n	8023d6a <__strtok_r+0xa>
 8023d88:	6014      	str	r4, [r2, #0]
 8023d8a:	7003      	strb	r3, [r0, #0]
 8023d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d8e:	461c      	mov	r4, r3
 8023d90:	e00c      	b.n	8023dac <__strtok_r+0x4c>
 8023d92:	b915      	cbnz	r5, 8023d9a <__strtok_r+0x3a>
 8023d94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023d98:	460e      	mov	r6, r1
 8023d9a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8023d9e:	42ab      	cmp	r3, r5
 8023da0:	d1f7      	bne.n	8023d92 <__strtok_r+0x32>
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	d0f3      	beq.n	8023d8e <__strtok_r+0x2e>
 8023da6:	2300      	movs	r3, #0
 8023da8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8023dac:	6014      	str	r4, [r2, #0]
 8023dae:	e7ed      	b.n	8023d8c <__strtok_r+0x2c>

08023db0 <_strtol_l.constprop.0>:
 8023db0:	2b01      	cmp	r3, #1
 8023db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023db6:	d001      	beq.n	8023dbc <_strtol_l.constprop.0+0xc>
 8023db8:	2b24      	cmp	r3, #36	; 0x24
 8023dba:	d906      	bls.n	8023dca <_strtol_l.constprop.0+0x1a>
 8023dbc:	f7fd ff7e 	bl	8021cbc <__errno>
 8023dc0:	2316      	movs	r3, #22
 8023dc2:	6003      	str	r3, [r0, #0]
 8023dc4:	2000      	movs	r0, #0
 8023dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023dca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8023eb0 <_strtol_l.constprop.0+0x100>
 8023dce:	460d      	mov	r5, r1
 8023dd0:	462e      	mov	r6, r5
 8023dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023dd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8023dda:	f017 0708 	ands.w	r7, r7, #8
 8023dde:	d1f7      	bne.n	8023dd0 <_strtol_l.constprop.0+0x20>
 8023de0:	2c2d      	cmp	r4, #45	; 0x2d
 8023de2:	d132      	bne.n	8023e4a <_strtol_l.constprop.0+0x9a>
 8023de4:	782c      	ldrb	r4, [r5, #0]
 8023de6:	2701      	movs	r7, #1
 8023de8:	1cb5      	adds	r5, r6, #2
 8023dea:	2b00      	cmp	r3, #0
 8023dec:	d05b      	beq.n	8023ea6 <_strtol_l.constprop.0+0xf6>
 8023dee:	2b10      	cmp	r3, #16
 8023df0:	d109      	bne.n	8023e06 <_strtol_l.constprop.0+0x56>
 8023df2:	2c30      	cmp	r4, #48	; 0x30
 8023df4:	d107      	bne.n	8023e06 <_strtol_l.constprop.0+0x56>
 8023df6:	782c      	ldrb	r4, [r5, #0]
 8023df8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023dfc:	2c58      	cmp	r4, #88	; 0x58
 8023dfe:	d14d      	bne.n	8023e9c <_strtol_l.constprop.0+0xec>
 8023e00:	786c      	ldrb	r4, [r5, #1]
 8023e02:	2310      	movs	r3, #16
 8023e04:	3502      	adds	r5, #2
 8023e06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8023e0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8023e0e:	f04f 0c00 	mov.w	ip, #0
 8023e12:	fbb8 f9f3 	udiv	r9, r8, r3
 8023e16:	4666      	mov	r6, ip
 8023e18:	fb03 8a19 	mls	sl, r3, r9, r8
 8023e1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8023e20:	f1be 0f09 	cmp.w	lr, #9
 8023e24:	d816      	bhi.n	8023e54 <_strtol_l.constprop.0+0xa4>
 8023e26:	4674      	mov	r4, lr
 8023e28:	42a3      	cmp	r3, r4
 8023e2a:	dd24      	ble.n	8023e76 <_strtol_l.constprop.0+0xc6>
 8023e2c:	f1bc 0f00 	cmp.w	ip, #0
 8023e30:	db1e      	blt.n	8023e70 <_strtol_l.constprop.0+0xc0>
 8023e32:	45b1      	cmp	r9, r6
 8023e34:	d31c      	bcc.n	8023e70 <_strtol_l.constprop.0+0xc0>
 8023e36:	d101      	bne.n	8023e3c <_strtol_l.constprop.0+0x8c>
 8023e38:	45a2      	cmp	sl, r4
 8023e3a:	db19      	blt.n	8023e70 <_strtol_l.constprop.0+0xc0>
 8023e3c:	fb06 4603 	mla	r6, r6, r3, r4
 8023e40:	f04f 0c01 	mov.w	ip, #1
 8023e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023e48:	e7e8      	b.n	8023e1c <_strtol_l.constprop.0+0x6c>
 8023e4a:	2c2b      	cmp	r4, #43	; 0x2b
 8023e4c:	bf04      	itt	eq
 8023e4e:	782c      	ldrbeq	r4, [r5, #0]
 8023e50:	1cb5      	addeq	r5, r6, #2
 8023e52:	e7ca      	b.n	8023dea <_strtol_l.constprop.0+0x3a>
 8023e54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8023e58:	f1be 0f19 	cmp.w	lr, #25
 8023e5c:	d801      	bhi.n	8023e62 <_strtol_l.constprop.0+0xb2>
 8023e5e:	3c37      	subs	r4, #55	; 0x37
 8023e60:	e7e2      	b.n	8023e28 <_strtol_l.constprop.0+0x78>
 8023e62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8023e66:	f1be 0f19 	cmp.w	lr, #25
 8023e6a:	d804      	bhi.n	8023e76 <_strtol_l.constprop.0+0xc6>
 8023e6c:	3c57      	subs	r4, #87	; 0x57
 8023e6e:	e7db      	b.n	8023e28 <_strtol_l.constprop.0+0x78>
 8023e70:	f04f 3cff 	mov.w	ip, #4294967295
 8023e74:	e7e6      	b.n	8023e44 <_strtol_l.constprop.0+0x94>
 8023e76:	f1bc 0f00 	cmp.w	ip, #0
 8023e7a:	da05      	bge.n	8023e88 <_strtol_l.constprop.0+0xd8>
 8023e7c:	2322      	movs	r3, #34	; 0x22
 8023e7e:	6003      	str	r3, [r0, #0]
 8023e80:	4646      	mov	r6, r8
 8023e82:	b942      	cbnz	r2, 8023e96 <_strtol_l.constprop.0+0xe6>
 8023e84:	4630      	mov	r0, r6
 8023e86:	e79e      	b.n	8023dc6 <_strtol_l.constprop.0+0x16>
 8023e88:	b107      	cbz	r7, 8023e8c <_strtol_l.constprop.0+0xdc>
 8023e8a:	4276      	negs	r6, r6
 8023e8c:	2a00      	cmp	r2, #0
 8023e8e:	d0f9      	beq.n	8023e84 <_strtol_l.constprop.0+0xd4>
 8023e90:	f1bc 0f00 	cmp.w	ip, #0
 8023e94:	d000      	beq.n	8023e98 <_strtol_l.constprop.0+0xe8>
 8023e96:	1e69      	subs	r1, r5, #1
 8023e98:	6011      	str	r1, [r2, #0]
 8023e9a:	e7f3      	b.n	8023e84 <_strtol_l.constprop.0+0xd4>
 8023e9c:	2430      	movs	r4, #48	; 0x30
 8023e9e:	2b00      	cmp	r3, #0
 8023ea0:	d1b1      	bne.n	8023e06 <_strtol_l.constprop.0+0x56>
 8023ea2:	2308      	movs	r3, #8
 8023ea4:	e7af      	b.n	8023e06 <_strtol_l.constprop.0+0x56>
 8023ea6:	2c30      	cmp	r4, #48	; 0x30
 8023ea8:	d0a5      	beq.n	8023df6 <_strtol_l.constprop.0+0x46>
 8023eaa:	230a      	movs	r3, #10
 8023eac:	e7ab      	b.n	8023e06 <_strtol_l.constprop.0+0x56>
 8023eae:	bf00      	nop
 8023eb0:	08027ccd 	.word	0x08027ccd

08023eb4 <_strtol_r>:
 8023eb4:	f7ff bf7c 	b.w	8023db0 <_strtol_l.constprop.0>

08023eb8 <strtol>:
 8023eb8:	4613      	mov	r3, r2
 8023eba:	460a      	mov	r2, r1
 8023ebc:	4601      	mov	r1, r0
 8023ebe:	4802      	ldr	r0, [pc, #8]	; (8023ec8 <strtol+0x10>)
 8023ec0:	6800      	ldr	r0, [r0, #0]
 8023ec2:	f7ff bf75 	b.w	8023db0 <_strtol_l.constprop.0>
 8023ec6:	bf00      	nop
 8023ec8:	240002f8 	.word	0x240002f8

08023ecc <__swbuf_r>:
 8023ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ece:	460e      	mov	r6, r1
 8023ed0:	4614      	mov	r4, r2
 8023ed2:	4605      	mov	r5, r0
 8023ed4:	b118      	cbz	r0, 8023ede <__swbuf_r+0x12>
 8023ed6:	6983      	ldr	r3, [r0, #24]
 8023ed8:	b90b      	cbnz	r3, 8023ede <__swbuf_r+0x12>
 8023eda:	f7fd ff4d 	bl	8021d78 <__sinit>
 8023ede:	4b21      	ldr	r3, [pc, #132]	; (8023f64 <__swbuf_r+0x98>)
 8023ee0:	429c      	cmp	r4, r3
 8023ee2:	d12b      	bne.n	8023f3c <__swbuf_r+0x70>
 8023ee4:	686c      	ldr	r4, [r5, #4]
 8023ee6:	69a3      	ldr	r3, [r4, #24]
 8023ee8:	60a3      	str	r3, [r4, #8]
 8023eea:	89a3      	ldrh	r3, [r4, #12]
 8023eec:	071a      	lsls	r2, r3, #28
 8023eee:	d52f      	bpl.n	8023f50 <__swbuf_r+0x84>
 8023ef0:	6923      	ldr	r3, [r4, #16]
 8023ef2:	b36b      	cbz	r3, 8023f50 <__swbuf_r+0x84>
 8023ef4:	6923      	ldr	r3, [r4, #16]
 8023ef6:	6820      	ldr	r0, [r4, #0]
 8023ef8:	1ac0      	subs	r0, r0, r3
 8023efa:	6963      	ldr	r3, [r4, #20]
 8023efc:	b2f6      	uxtb	r6, r6
 8023efe:	4283      	cmp	r3, r0
 8023f00:	4637      	mov	r7, r6
 8023f02:	dc04      	bgt.n	8023f0e <__swbuf_r+0x42>
 8023f04:	4621      	mov	r1, r4
 8023f06:	4628      	mov	r0, r5
 8023f08:	f000 ff62 	bl	8024dd0 <_fflush_r>
 8023f0c:	bb30      	cbnz	r0, 8023f5c <__swbuf_r+0x90>
 8023f0e:	68a3      	ldr	r3, [r4, #8]
 8023f10:	3b01      	subs	r3, #1
 8023f12:	60a3      	str	r3, [r4, #8]
 8023f14:	6823      	ldr	r3, [r4, #0]
 8023f16:	1c5a      	adds	r2, r3, #1
 8023f18:	6022      	str	r2, [r4, #0]
 8023f1a:	701e      	strb	r6, [r3, #0]
 8023f1c:	6963      	ldr	r3, [r4, #20]
 8023f1e:	3001      	adds	r0, #1
 8023f20:	4283      	cmp	r3, r0
 8023f22:	d004      	beq.n	8023f2e <__swbuf_r+0x62>
 8023f24:	89a3      	ldrh	r3, [r4, #12]
 8023f26:	07db      	lsls	r3, r3, #31
 8023f28:	d506      	bpl.n	8023f38 <__swbuf_r+0x6c>
 8023f2a:	2e0a      	cmp	r6, #10
 8023f2c:	d104      	bne.n	8023f38 <__swbuf_r+0x6c>
 8023f2e:	4621      	mov	r1, r4
 8023f30:	4628      	mov	r0, r5
 8023f32:	f000 ff4d 	bl	8024dd0 <_fflush_r>
 8023f36:	b988      	cbnz	r0, 8023f5c <__swbuf_r+0x90>
 8023f38:	4638      	mov	r0, r7
 8023f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023f3c:	4b0a      	ldr	r3, [pc, #40]	; (8023f68 <__swbuf_r+0x9c>)
 8023f3e:	429c      	cmp	r4, r3
 8023f40:	d101      	bne.n	8023f46 <__swbuf_r+0x7a>
 8023f42:	68ac      	ldr	r4, [r5, #8]
 8023f44:	e7cf      	b.n	8023ee6 <__swbuf_r+0x1a>
 8023f46:	4b09      	ldr	r3, [pc, #36]	; (8023f6c <__swbuf_r+0xa0>)
 8023f48:	429c      	cmp	r4, r3
 8023f4a:	bf08      	it	eq
 8023f4c:	68ec      	ldreq	r4, [r5, #12]
 8023f4e:	e7ca      	b.n	8023ee6 <__swbuf_r+0x1a>
 8023f50:	4621      	mov	r1, r4
 8023f52:	4628      	mov	r0, r5
 8023f54:	f000 f81e 	bl	8023f94 <__swsetup_r>
 8023f58:	2800      	cmp	r0, #0
 8023f5a:	d0cb      	beq.n	8023ef4 <__swbuf_r+0x28>
 8023f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8023f60:	e7ea      	b.n	8023f38 <__swbuf_r+0x6c>
 8023f62:	bf00      	nop
 8023f64:	08027df0 	.word	0x08027df0
 8023f68:	08027e10 	.word	0x08027e10
 8023f6c:	08027dd0 	.word	0x08027dd0

08023f70 <_write_r>:
 8023f70:	b538      	push	{r3, r4, r5, lr}
 8023f72:	4d07      	ldr	r5, [pc, #28]	; (8023f90 <_write_r+0x20>)
 8023f74:	4604      	mov	r4, r0
 8023f76:	4608      	mov	r0, r1
 8023f78:	4611      	mov	r1, r2
 8023f7a:	2200      	movs	r2, #0
 8023f7c:	602a      	str	r2, [r5, #0]
 8023f7e:	461a      	mov	r2, r3
 8023f80:	f7e2 fd16 	bl	80069b0 <_write>
 8023f84:	1c43      	adds	r3, r0, #1
 8023f86:	d102      	bne.n	8023f8e <_write_r+0x1e>
 8023f88:	682b      	ldr	r3, [r5, #0]
 8023f8a:	b103      	cbz	r3, 8023f8e <_write_r+0x1e>
 8023f8c:	6023      	str	r3, [r4, #0]
 8023f8e:	bd38      	pop	{r3, r4, r5, pc}
 8023f90:	24009044 	.word	0x24009044

08023f94 <__swsetup_r>:
 8023f94:	4b32      	ldr	r3, [pc, #200]	; (8024060 <__swsetup_r+0xcc>)
 8023f96:	b570      	push	{r4, r5, r6, lr}
 8023f98:	681d      	ldr	r5, [r3, #0]
 8023f9a:	4606      	mov	r6, r0
 8023f9c:	460c      	mov	r4, r1
 8023f9e:	b125      	cbz	r5, 8023faa <__swsetup_r+0x16>
 8023fa0:	69ab      	ldr	r3, [r5, #24]
 8023fa2:	b913      	cbnz	r3, 8023faa <__swsetup_r+0x16>
 8023fa4:	4628      	mov	r0, r5
 8023fa6:	f7fd fee7 	bl	8021d78 <__sinit>
 8023faa:	4b2e      	ldr	r3, [pc, #184]	; (8024064 <__swsetup_r+0xd0>)
 8023fac:	429c      	cmp	r4, r3
 8023fae:	d10f      	bne.n	8023fd0 <__swsetup_r+0x3c>
 8023fb0:	686c      	ldr	r4, [r5, #4]
 8023fb2:	89a3      	ldrh	r3, [r4, #12]
 8023fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023fb8:	0719      	lsls	r1, r3, #28
 8023fba:	d42c      	bmi.n	8024016 <__swsetup_r+0x82>
 8023fbc:	06dd      	lsls	r5, r3, #27
 8023fbe:	d411      	bmi.n	8023fe4 <__swsetup_r+0x50>
 8023fc0:	2309      	movs	r3, #9
 8023fc2:	6033      	str	r3, [r6, #0]
 8023fc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023fc8:	81a3      	strh	r3, [r4, #12]
 8023fca:	f04f 30ff 	mov.w	r0, #4294967295
 8023fce:	e03e      	b.n	802404e <__swsetup_r+0xba>
 8023fd0:	4b25      	ldr	r3, [pc, #148]	; (8024068 <__swsetup_r+0xd4>)
 8023fd2:	429c      	cmp	r4, r3
 8023fd4:	d101      	bne.n	8023fda <__swsetup_r+0x46>
 8023fd6:	68ac      	ldr	r4, [r5, #8]
 8023fd8:	e7eb      	b.n	8023fb2 <__swsetup_r+0x1e>
 8023fda:	4b24      	ldr	r3, [pc, #144]	; (802406c <__swsetup_r+0xd8>)
 8023fdc:	429c      	cmp	r4, r3
 8023fde:	bf08      	it	eq
 8023fe0:	68ec      	ldreq	r4, [r5, #12]
 8023fe2:	e7e6      	b.n	8023fb2 <__swsetup_r+0x1e>
 8023fe4:	0758      	lsls	r0, r3, #29
 8023fe6:	d512      	bpl.n	802400e <__swsetup_r+0x7a>
 8023fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023fea:	b141      	cbz	r1, 8023ffe <__swsetup_r+0x6a>
 8023fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023ff0:	4299      	cmp	r1, r3
 8023ff2:	d002      	beq.n	8023ffa <__swsetup_r+0x66>
 8023ff4:	4630      	mov	r0, r6
 8023ff6:	f7fd ffa3 	bl	8021f40 <_free_r>
 8023ffa:	2300      	movs	r3, #0
 8023ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8023ffe:	89a3      	ldrh	r3, [r4, #12]
 8024000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024004:	81a3      	strh	r3, [r4, #12]
 8024006:	2300      	movs	r3, #0
 8024008:	6063      	str	r3, [r4, #4]
 802400a:	6923      	ldr	r3, [r4, #16]
 802400c:	6023      	str	r3, [r4, #0]
 802400e:	89a3      	ldrh	r3, [r4, #12]
 8024010:	f043 0308 	orr.w	r3, r3, #8
 8024014:	81a3      	strh	r3, [r4, #12]
 8024016:	6923      	ldr	r3, [r4, #16]
 8024018:	b94b      	cbnz	r3, 802402e <__swsetup_r+0x9a>
 802401a:	89a3      	ldrh	r3, [r4, #12]
 802401c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024024:	d003      	beq.n	802402e <__swsetup_r+0x9a>
 8024026:	4621      	mov	r1, r4
 8024028:	4630      	mov	r0, r6
 802402a:	f001 facb 	bl	80255c4 <__smakebuf_r>
 802402e:	89a0      	ldrh	r0, [r4, #12]
 8024030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024034:	f010 0301 	ands.w	r3, r0, #1
 8024038:	d00a      	beq.n	8024050 <__swsetup_r+0xbc>
 802403a:	2300      	movs	r3, #0
 802403c:	60a3      	str	r3, [r4, #8]
 802403e:	6963      	ldr	r3, [r4, #20]
 8024040:	425b      	negs	r3, r3
 8024042:	61a3      	str	r3, [r4, #24]
 8024044:	6923      	ldr	r3, [r4, #16]
 8024046:	b943      	cbnz	r3, 802405a <__swsetup_r+0xc6>
 8024048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802404c:	d1ba      	bne.n	8023fc4 <__swsetup_r+0x30>
 802404e:	bd70      	pop	{r4, r5, r6, pc}
 8024050:	0781      	lsls	r1, r0, #30
 8024052:	bf58      	it	pl
 8024054:	6963      	ldrpl	r3, [r4, #20]
 8024056:	60a3      	str	r3, [r4, #8]
 8024058:	e7f4      	b.n	8024044 <__swsetup_r+0xb0>
 802405a:	2000      	movs	r0, #0
 802405c:	e7f7      	b.n	802404e <__swsetup_r+0xba>
 802405e:	bf00      	nop
 8024060:	240002f8 	.word	0x240002f8
 8024064:	08027df0 	.word	0x08027df0
 8024068:	08027e10 	.word	0x08027e10
 802406c:	08027dd0 	.word	0x08027dd0

08024070 <__assert_func>:
 8024070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024072:	4614      	mov	r4, r2
 8024074:	461a      	mov	r2, r3
 8024076:	4b09      	ldr	r3, [pc, #36]	; (802409c <__assert_func+0x2c>)
 8024078:	681b      	ldr	r3, [r3, #0]
 802407a:	4605      	mov	r5, r0
 802407c:	68d8      	ldr	r0, [r3, #12]
 802407e:	b14c      	cbz	r4, 8024094 <__assert_func+0x24>
 8024080:	4b07      	ldr	r3, [pc, #28]	; (80240a0 <__assert_func+0x30>)
 8024082:	9100      	str	r1, [sp, #0]
 8024084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024088:	4906      	ldr	r1, [pc, #24]	; (80240a4 <__assert_func+0x34>)
 802408a:	462b      	mov	r3, r5
 802408c:	f000 fedc 	bl	8024e48 <fiprintf>
 8024090:	f002 faa7 	bl	80265e2 <abort>
 8024094:	4b04      	ldr	r3, [pc, #16]	; (80240a8 <__assert_func+0x38>)
 8024096:	461c      	mov	r4, r3
 8024098:	e7f3      	b.n	8024082 <__assert_func+0x12>
 802409a:	bf00      	nop
 802409c:	240002f8 	.word	0x240002f8
 80240a0:	08027f34 	.word	0x08027f34
 80240a4:	08027f41 	.word	0x08027f41
 80240a8:	08027f6f 	.word	0x08027f6f

080240ac <_close_r>:
 80240ac:	b538      	push	{r3, r4, r5, lr}
 80240ae:	4d06      	ldr	r5, [pc, #24]	; (80240c8 <_close_r+0x1c>)
 80240b0:	2300      	movs	r3, #0
 80240b2:	4604      	mov	r4, r0
 80240b4:	4608      	mov	r0, r1
 80240b6:	602b      	str	r3, [r5, #0]
 80240b8:	f7e3 fedb 	bl	8007e72 <_close>
 80240bc:	1c43      	adds	r3, r0, #1
 80240be:	d102      	bne.n	80240c6 <_close_r+0x1a>
 80240c0:	682b      	ldr	r3, [r5, #0]
 80240c2:	b103      	cbz	r3, 80240c6 <_close_r+0x1a>
 80240c4:	6023      	str	r3, [r4, #0]
 80240c6:	bd38      	pop	{r3, r4, r5, pc}
 80240c8:	24009044 	.word	0x24009044

080240cc <quorem>:
 80240cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240d0:	6903      	ldr	r3, [r0, #16]
 80240d2:	690c      	ldr	r4, [r1, #16]
 80240d4:	42a3      	cmp	r3, r4
 80240d6:	4607      	mov	r7, r0
 80240d8:	f2c0 8081 	blt.w	80241de <quorem+0x112>
 80240dc:	3c01      	subs	r4, #1
 80240de:	f101 0814 	add.w	r8, r1, #20
 80240e2:	f100 0514 	add.w	r5, r0, #20
 80240e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80240ea:	9301      	str	r3, [sp, #4]
 80240ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80240f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80240f4:	3301      	adds	r3, #1
 80240f6:	429a      	cmp	r2, r3
 80240f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80240fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024100:	fbb2 f6f3 	udiv	r6, r2, r3
 8024104:	d331      	bcc.n	802416a <quorem+0x9e>
 8024106:	f04f 0e00 	mov.w	lr, #0
 802410a:	4640      	mov	r0, r8
 802410c:	46ac      	mov	ip, r5
 802410e:	46f2      	mov	sl, lr
 8024110:	f850 2b04 	ldr.w	r2, [r0], #4
 8024114:	b293      	uxth	r3, r2
 8024116:	fb06 e303 	mla	r3, r6, r3, lr
 802411a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802411e:	b29b      	uxth	r3, r3
 8024120:	ebaa 0303 	sub.w	r3, sl, r3
 8024124:	f8dc a000 	ldr.w	sl, [ip]
 8024128:	0c12      	lsrs	r2, r2, #16
 802412a:	fa13 f38a 	uxtah	r3, r3, sl
 802412e:	fb06 e202 	mla	r2, r6, r2, lr
 8024132:	9300      	str	r3, [sp, #0]
 8024134:	9b00      	ldr	r3, [sp, #0]
 8024136:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802413a:	b292      	uxth	r2, r2
 802413c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8024140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024144:	f8bd 3000 	ldrh.w	r3, [sp]
 8024148:	4581      	cmp	r9, r0
 802414a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802414e:	f84c 3b04 	str.w	r3, [ip], #4
 8024152:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8024156:	d2db      	bcs.n	8024110 <quorem+0x44>
 8024158:	f855 300b 	ldr.w	r3, [r5, fp]
 802415c:	b92b      	cbnz	r3, 802416a <quorem+0x9e>
 802415e:	9b01      	ldr	r3, [sp, #4]
 8024160:	3b04      	subs	r3, #4
 8024162:	429d      	cmp	r5, r3
 8024164:	461a      	mov	r2, r3
 8024166:	d32e      	bcc.n	80241c6 <quorem+0xfa>
 8024168:	613c      	str	r4, [r7, #16]
 802416a:	4638      	mov	r0, r7
 802416c:	f001 fd54 	bl	8025c18 <__mcmp>
 8024170:	2800      	cmp	r0, #0
 8024172:	db24      	blt.n	80241be <quorem+0xf2>
 8024174:	3601      	adds	r6, #1
 8024176:	4628      	mov	r0, r5
 8024178:	f04f 0c00 	mov.w	ip, #0
 802417c:	f858 2b04 	ldr.w	r2, [r8], #4
 8024180:	f8d0 e000 	ldr.w	lr, [r0]
 8024184:	b293      	uxth	r3, r2
 8024186:	ebac 0303 	sub.w	r3, ip, r3
 802418a:	0c12      	lsrs	r2, r2, #16
 802418c:	fa13 f38e 	uxtah	r3, r3, lr
 8024190:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8024194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024198:	b29b      	uxth	r3, r3
 802419a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802419e:	45c1      	cmp	r9, r8
 80241a0:	f840 3b04 	str.w	r3, [r0], #4
 80241a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80241a8:	d2e8      	bcs.n	802417c <quorem+0xb0>
 80241aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80241ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80241b2:	b922      	cbnz	r2, 80241be <quorem+0xf2>
 80241b4:	3b04      	subs	r3, #4
 80241b6:	429d      	cmp	r5, r3
 80241b8:	461a      	mov	r2, r3
 80241ba:	d30a      	bcc.n	80241d2 <quorem+0x106>
 80241bc:	613c      	str	r4, [r7, #16]
 80241be:	4630      	mov	r0, r6
 80241c0:	b003      	add	sp, #12
 80241c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241c6:	6812      	ldr	r2, [r2, #0]
 80241c8:	3b04      	subs	r3, #4
 80241ca:	2a00      	cmp	r2, #0
 80241cc:	d1cc      	bne.n	8024168 <quorem+0x9c>
 80241ce:	3c01      	subs	r4, #1
 80241d0:	e7c7      	b.n	8024162 <quorem+0x96>
 80241d2:	6812      	ldr	r2, [r2, #0]
 80241d4:	3b04      	subs	r3, #4
 80241d6:	2a00      	cmp	r2, #0
 80241d8:	d1f0      	bne.n	80241bc <quorem+0xf0>
 80241da:	3c01      	subs	r4, #1
 80241dc:	e7eb      	b.n	80241b6 <quorem+0xea>
 80241de:	2000      	movs	r0, #0
 80241e0:	e7ee      	b.n	80241c0 <quorem+0xf4>
 80241e2:	0000      	movs	r0, r0
 80241e4:	0000      	movs	r0, r0
	...

080241e8 <_dtoa_r>:
 80241e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241ec:	ed2d 8b02 	vpush	{d8}
 80241f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80241f2:	b091      	sub	sp, #68	; 0x44
 80241f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80241f8:	ec59 8b10 	vmov	r8, r9, d0
 80241fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80241fe:	9106      	str	r1, [sp, #24]
 8024200:	4606      	mov	r6, r0
 8024202:	9208      	str	r2, [sp, #32]
 8024204:	930c      	str	r3, [sp, #48]	; 0x30
 8024206:	b975      	cbnz	r5, 8024226 <_dtoa_r+0x3e>
 8024208:	2010      	movs	r0, #16
 802420a:	f7fd fe7b 	bl	8021f04 <malloc>
 802420e:	4602      	mov	r2, r0
 8024210:	6270      	str	r0, [r6, #36]	; 0x24
 8024212:	b920      	cbnz	r0, 802421e <_dtoa_r+0x36>
 8024214:	4baa      	ldr	r3, [pc, #680]	; (80244c0 <_dtoa_r+0x2d8>)
 8024216:	21ea      	movs	r1, #234	; 0xea
 8024218:	48aa      	ldr	r0, [pc, #680]	; (80244c4 <_dtoa_r+0x2dc>)
 802421a:	f7ff ff29 	bl	8024070 <__assert_func>
 802421e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8024222:	6005      	str	r5, [r0, #0]
 8024224:	60c5      	str	r5, [r0, #12]
 8024226:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8024228:	6819      	ldr	r1, [r3, #0]
 802422a:	b151      	cbz	r1, 8024242 <_dtoa_r+0x5a>
 802422c:	685a      	ldr	r2, [r3, #4]
 802422e:	604a      	str	r2, [r1, #4]
 8024230:	2301      	movs	r3, #1
 8024232:	4093      	lsls	r3, r2
 8024234:	608b      	str	r3, [r1, #8]
 8024236:	4630      	mov	r0, r6
 8024238:	f001 fa62 	bl	8025700 <_Bfree>
 802423c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802423e:	2200      	movs	r2, #0
 8024240:	601a      	str	r2, [r3, #0]
 8024242:	f1b9 0300 	subs.w	r3, r9, #0
 8024246:	bfbb      	ittet	lt
 8024248:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802424c:	9303      	strlt	r3, [sp, #12]
 802424e:	2300      	movge	r3, #0
 8024250:	2201      	movlt	r2, #1
 8024252:	bfac      	ite	ge
 8024254:	6023      	strge	r3, [r4, #0]
 8024256:	6022      	strlt	r2, [r4, #0]
 8024258:	4b9b      	ldr	r3, [pc, #620]	; (80244c8 <_dtoa_r+0x2e0>)
 802425a:	9c03      	ldr	r4, [sp, #12]
 802425c:	43a3      	bics	r3, r4
 802425e:	d11c      	bne.n	802429a <_dtoa_r+0xb2>
 8024260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024262:	f242 730f 	movw	r3, #9999	; 0x270f
 8024266:	6013      	str	r3, [r2, #0]
 8024268:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802426c:	ea53 0308 	orrs.w	r3, r3, r8
 8024270:	f000 84fd 	beq.w	8024c6e <_dtoa_r+0xa86>
 8024274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024276:	b963      	cbnz	r3, 8024292 <_dtoa_r+0xaa>
 8024278:	4b94      	ldr	r3, [pc, #592]	; (80244cc <_dtoa_r+0x2e4>)
 802427a:	e01f      	b.n	80242bc <_dtoa_r+0xd4>
 802427c:	4b94      	ldr	r3, [pc, #592]	; (80244d0 <_dtoa_r+0x2e8>)
 802427e:	9301      	str	r3, [sp, #4]
 8024280:	3308      	adds	r3, #8
 8024282:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8024284:	6013      	str	r3, [r2, #0]
 8024286:	9801      	ldr	r0, [sp, #4]
 8024288:	b011      	add	sp, #68	; 0x44
 802428a:	ecbd 8b02 	vpop	{d8}
 802428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024292:	4b8e      	ldr	r3, [pc, #568]	; (80244cc <_dtoa_r+0x2e4>)
 8024294:	9301      	str	r3, [sp, #4]
 8024296:	3303      	adds	r3, #3
 8024298:	e7f3      	b.n	8024282 <_dtoa_r+0x9a>
 802429a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802429e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80242a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242a6:	d10b      	bne.n	80242c0 <_dtoa_r+0xd8>
 80242a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80242aa:	2301      	movs	r3, #1
 80242ac:	6013      	str	r3, [r2, #0]
 80242ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80242b0:	2b00      	cmp	r3, #0
 80242b2:	f000 84d9 	beq.w	8024c68 <_dtoa_r+0xa80>
 80242b6:	4887      	ldr	r0, [pc, #540]	; (80244d4 <_dtoa_r+0x2ec>)
 80242b8:	6018      	str	r0, [r3, #0]
 80242ba:	1e43      	subs	r3, r0, #1
 80242bc:	9301      	str	r3, [sp, #4]
 80242be:	e7e2      	b.n	8024286 <_dtoa_r+0x9e>
 80242c0:	a90f      	add	r1, sp, #60	; 0x3c
 80242c2:	aa0e      	add	r2, sp, #56	; 0x38
 80242c4:	4630      	mov	r0, r6
 80242c6:	eeb0 0b48 	vmov.f64	d0, d8
 80242ca:	f001 fdc7 	bl	8025e5c <__d2b>
 80242ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80242d2:	4605      	mov	r5, r0
 80242d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80242d6:	2900      	cmp	r1, #0
 80242d8:	d046      	beq.n	8024368 <_dtoa_r+0x180>
 80242da:	ee18 4a90 	vmov	r4, s17
 80242de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80242e2:	ec53 2b18 	vmov	r2, r3, d8
 80242e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80242ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80242ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80242f2:	2400      	movs	r4, #0
 80242f4:	ec43 2b16 	vmov	d6, r2, r3
 80242f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80242fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80244a8 <_dtoa_r+0x2c0>
 8024300:	ee36 7b47 	vsub.f64	d7, d6, d7
 8024304:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80244b0 <_dtoa_r+0x2c8>
 8024308:	eea7 6b05 	vfma.f64	d6, d7, d5
 802430c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80244b8 <_dtoa_r+0x2d0>
 8024310:	ee07 1a90 	vmov	s15, r1
 8024314:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8024318:	eeb0 7b46 	vmov.f64	d7, d6
 802431c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8024320:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8024324:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8024328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802432c:	ee16 ba90 	vmov	fp, s13
 8024330:	940a      	str	r4, [sp, #40]	; 0x28
 8024332:	d508      	bpl.n	8024346 <_dtoa_r+0x15e>
 8024334:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8024338:	eeb4 6b47 	vcmp.f64	d6, d7
 802433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024340:	bf18      	it	ne
 8024342:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8024346:	f1bb 0f16 	cmp.w	fp, #22
 802434a:	d82f      	bhi.n	80243ac <_dtoa_r+0x1c4>
 802434c:	4b62      	ldr	r3, [pc, #392]	; (80244d8 <_dtoa_r+0x2f0>)
 802434e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8024352:	ed93 7b00 	vldr	d7, [r3]
 8024356:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802435e:	d501      	bpl.n	8024364 <_dtoa_r+0x17c>
 8024360:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024364:	2300      	movs	r3, #0
 8024366:	e022      	b.n	80243ae <_dtoa_r+0x1c6>
 8024368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802436a:	4401      	add	r1, r0
 802436c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8024370:	2b20      	cmp	r3, #32
 8024372:	bfc1      	itttt	gt
 8024374:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8024378:	fa04 f303 	lslgt.w	r3, r4, r3
 802437c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8024380:	fa28 f804 	lsrgt.w	r8, r8, r4
 8024384:	bfd6      	itet	le
 8024386:	f1c3 0320 	rsble	r3, r3, #32
 802438a:	ea43 0808 	orrgt.w	r8, r3, r8
 802438e:	fa08 f803 	lslle.w	r8, r8, r3
 8024392:	ee07 8a90 	vmov	s15, r8
 8024396:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802439a:	3901      	subs	r1, #1
 802439c:	ee17 4a90 	vmov	r4, s15
 80243a0:	ec53 2b17 	vmov	r2, r3, d7
 80243a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80243a8:	2401      	movs	r4, #1
 80243aa:	e7a3      	b.n	80242f4 <_dtoa_r+0x10c>
 80243ac:	2301      	movs	r3, #1
 80243ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80243b0:	1a43      	subs	r3, r0, r1
 80243b2:	1e5a      	subs	r2, r3, #1
 80243b4:	bf45      	ittet	mi
 80243b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80243ba:	9304      	strmi	r3, [sp, #16]
 80243bc:	2300      	movpl	r3, #0
 80243be:	2300      	movmi	r3, #0
 80243c0:	9205      	str	r2, [sp, #20]
 80243c2:	bf54      	ite	pl
 80243c4:	9304      	strpl	r3, [sp, #16]
 80243c6:	9305      	strmi	r3, [sp, #20]
 80243c8:	f1bb 0f00 	cmp.w	fp, #0
 80243cc:	db18      	blt.n	8024400 <_dtoa_r+0x218>
 80243ce:	9b05      	ldr	r3, [sp, #20]
 80243d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80243d4:	445b      	add	r3, fp
 80243d6:	9305      	str	r3, [sp, #20]
 80243d8:	2300      	movs	r3, #0
 80243da:	9a06      	ldr	r2, [sp, #24]
 80243dc:	2a09      	cmp	r2, #9
 80243de:	d849      	bhi.n	8024474 <_dtoa_r+0x28c>
 80243e0:	2a05      	cmp	r2, #5
 80243e2:	bfc4      	itt	gt
 80243e4:	3a04      	subgt	r2, #4
 80243e6:	9206      	strgt	r2, [sp, #24]
 80243e8:	9a06      	ldr	r2, [sp, #24]
 80243ea:	f1a2 0202 	sub.w	r2, r2, #2
 80243ee:	bfcc      	ite	gt
 80243f0:	2400      	movgt	r4, #0
 80243f2:	2401      	movle	r4, #1
 80243f4:	2a03      	cmp	r2, #3
 80243f6:	d848      	bhi.n	802448a <_dtoa_r+0x2a2>
 80243f8:	e8df f002 	tbb	[pc, r2]
 80243fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8024400:	9b04      	ldr	r3, [sp, #16]
 8024402:	2200      	movs	r2, #0
 8024404:	eba3 030b 	sub.w	r3, r3, fp
 8024408:	9304      	str	r3, [sp, #16]
 802440a:	9209      	str	r2, [sp, #36]	; 0x24
 802440c:	f1cb 0300 	rsb	r3, fp, #0
 8024410:	e7e3      	b.n	80243da <_dtoa_r+0x1f2>
 8024412:	2200      	movs	r2, #0
 8024414:	9207      	str	r2, [sp, #28]
 8024416:	9a08      	ldr	r2, [sp, #32]
 8024418:	2a00      	cmp	r2, #0
 802441a:	dc39      	bgt.n	8024490 <_dtoa_r+0x2a8>
 802441c:	f04f 0a01 	mov.w	sl, #1
 8024420:	46d1      	mov	r9, sl
 8024422:	4652      	mov	r2, sl
 8024424:	f8cd a020 	str.w	sl, [sp, #32]
 8024428:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802442a:	2100      	movs	r1, #0
 802442c:	6079      	str	r1, [r7, #4]
 802442e:	2004      	movs	r0, #4
 8024430:	f100 0c14 	add.w	ip, r0, #20
 8024434:	4594      	cmp	ip, r2
 8024436:	6879      	ldr	r1, [r7, #4]
 8024438:	d92f      	bls.n	802449a <_dtoa_r+0x2b2>
 802443a:	4630      	mov	r0, r6
 802443c:	930d      	str	r3, [sp, #52]	; 0x34
 802443e:	f001 f91f 	bl	8025680 <_Balloc>
 8024442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024444:	9001      	str	r0, [sp, #4]
 8024446:	4602      	mov	r2, r0
 8024448:	2800      	cmp	r0, #0
 802444a:	d149      	bne.n	80244e0 <_dtoa_r+0x2f8>
 802444c:	4b23      	ldr	r3, [pc, #140]	; (80244dc <_dtoa_r+0x2f4>)
 802444e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8024452:	e6e1      	b.n	8024218 <_dtoa_r+0x30>
 8024454:	2201      	movs	r2, #1
 8024456:	e7dd      	b.n	8024414 <_dtoa_r+0x22c>
 8024458:	2200      	movs	r2, #0
 802445a:	9207      	str	r2, [sp, #28]
 802445c:	9a08      	ldr	r2, [sp, #32]
 802445e:	eb0b 0a02 	add.w	sl, fp, r2
 8024462:	f10a 0901 	add.w	r9, sl, #1
 8024466:	464a      	mov	r2, r9
 8024468:	2a01      	cmp	r2, #1
 802446a:	bfb8      	it	lt
 802446c:	2201      	movlt	r2, #1
 802446e:	e7db      	b.n	8024428 <_dtoa_r+0x240>
 8024470:	2201      	movs	r2, #1
 8024472:	e7f2      	b.n	802445a <_dtoa_r+0x272>
 8024474:	2401      	movs	r4, #1
 8024476:	2200      	movs	r2, #0
 8024478:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802447c:	f04f 3aff 	mov.w	sl, #4294967295
 8024480:	2100      	movs	r1, #0
 8024482:	46d1      	mov	r9, sl
 8024484:	2212      	movs	r2, #18
 8024486:	9108      	str	r1, [sp, #32]
 8024488:	e7ce      	b.n	8024428 <_dtoa_r+0x240>
 802448a:	2201      	movs	r2, #1
 802448c:	9207      	str	r2, [sp, #28]
 802448e:	e7f5      	b.n	802447c <_dtoa_r+0x294>
 8024490:	f8dd a020 	ldr.w	sl, [sp, #32]
 8024494:	46d1      	mov	r9, sl
 8024496:	4652      	mov	r2, sl
 8024498:	e7c6      	b.n	8024428 <_dtoa_r+0x240>
 802449a:	3101      	adds	r1, #1
 802449c:	6079      	str	r1, [r7, #4]
 802449e:	0040      	lsls	r0, r0, #1
 80244a0:	e7c6      	b.n	8024430 <_dtoa_r+0x248>
 80244a2:	bf00      	nop
 80244a4:	f3af 8000 	nop.w
 80244a8:	636f4361 	.word	0x636f4361
 80244ac:	3fd287a7 	.word	0x3fd287a7
 80244b0:	8b60c8b3 	.word	0x8b60c8b3
 80244b4:	3fc68a28 	.word	0x3fc68a28
 80244b8:	509f79fb 	.word	0x509f79fb
 80244bc:	3fd34413 	.word	0x3fd34413
 80244c0:	08027ec0 	.word	0x08027ec0
 80244c4:	08027f7d 	.word	0x08027f7d
 80244c8:	7ff00000 	.word	0x7ff00000
 80244cc:	08027f79 	.word	0x08027f79
 80244d0:	08027f70 	.word	0x08027f70
 80244d4:	08027e45 	.word	0x08027e45
 80244d8:	080280e8 	.word	0x080280e8
 80244dc:	08027fd8 	.word	0x08027fd8
 80244e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80244e2:	9901      	ldr	r1, [sp, #4]
 80244e4:	6011      	str	r1, [r2, #0]
 80244e6:	f1b9 0f0e 	cmp.w	r9, #14
 80244ea:	d86c      	bhi.n	80245c6 <_dtoa_r+0x3de>
 80244ec:	2c00      	cmp	r4, #0
 80244ee:	d06a      	beq.n	80245c6 <_dtoa_r+0x3de>
 80244f0:	f1bb 0f00 	cmp.w	fp, #0
 80244f4:	f340 80a0 	ble.w	8024638 <_dtoa_r+0x450>
 80244f8:	49c1      	ldr	r1, [pc, #772]	; (8024800 <_dtoa_r+0x618>)
 80244fa:	f00b 020f 	and.w	r2, fp, #15
 80244fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8024502:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8024506:	ed92 7b00 	vldr	d7, [r2]
 802450a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802450e:	f000 8087 	beq.w	8024620 <_dtoa_r+0x438>
 8024512:	4abc      	ldr	r2, [pc, #752]	; (8024804 <_dtoa_r+0x61c>)
 8024514:	ed92 6b08 	vldr	d6, [r2, #32]
 8024518:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802451c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8024520:	f001 010f 	and.w	r1, r1, #15
 8024524:	2203      	movs	r2, #3
 8024526:	48b7      	ldr	r0, [pc, #732]	; (8024804 <_dtoa_r+0x61c>)
 8024528:	2900      	cmp	r1, #0
 802452a:	d17b      	bne.n	8024624 <_dtoa_r+0x43c>
 802452c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8024530:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8024534:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802453a:	2900      	cmp	r1, #0
 802453c:	f000 80a2 	beq.w	8024684 <_dtoa_r+0x49c>
 8024540:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8024544:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024548:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024550:	f140 8098 	bpl.w	8024684 <_dtoa_r+0x49c>
 8024554:	f1b9 0f00 	cmp.w	r9, #0
 8024558:	f000 8094 	beq.w	8024684 <_dtoa_r+0x49c>
 802455c:	f1ba 0f00 	cmp.w	sl, #0
 8024560:	dd2f      	ble.n	80245c2 <_dtoa_r+0x3da>
 8024562:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8024566:	ee27 7b06 	vmul.f64	d7, d7, d6
 802456a:	ed8d 7b02 	vstr	d7, [sp, #8]
 802456e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8024572:	3201      	adds	r2, #1
 8024574:	4650      	mov	r0, sl
 8024576:	ed9d 6b02 	vldr	d6, [sp, #8]
 802457a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802457e:	ee07 2a90 	vmov	s15, r2
 8024582:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8024586:	eea7 5b06 	vfma.f64	d5, d7, d6
 802458a:	ee15 4a90 	vmov	r4, s11
 802458e:	ec52 1b15 	vmov	r1, r2, d5
 8024592:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8024596:	2800      	cmp	r0, #0
 8024598:	d177      	bne.n	802468a <_dtoa_r+0x4a2>
 802459a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802459e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80245a2:	ec42 1b17 	vmov	d7, r1, r2
 80245a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80245aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245ae:	f300 8263 	bgt.w	8024a78 <_dtoa_r+0x890>
 80245b2:	eeb1 7b47 	vneg.f64	d7, d7
 80245b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80245ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245be:	f100 8258 	bmi.w	8024a72 <_dtoa_r+0x88a>
 80245c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80245c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80245c8:	2a00      	cmp	r2, #0
 80245ca:	f2c0 811d 	blt.w	8024808 <_dtoa_r+0x620>
 80245ce:	f1bb 0f0e 	cmp.w	fp, #14
 80245d2:	f300 8119 	bgt.w	8024808 <_dtoa_r+0x620>
 80245d6:	4b8a      	ldr	r3, [pc, #552]	; (8024800 <_dtoa_r+0x618>)
 80245d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80245dc:	ed93 6b00 	vldr	d6, [r3]
 80245e0:	9b08      	ldr	r3, [sp, #32]
 80245e2:	2b00      	cmp	r3, #0
 80245e4:	f280 80b7 	bge.w	8024756 <_dtoa_r+0x56e>
 80245e8:	f1b9 0f00 	cmp.w	r9, #0
 80245ec:	f300 80b3 	bgt.w	8024756 <_dtoa_r+0x56e>
 80245f0:	f040 823f 	bne.w	8024a72 <_dtoa_r+0x88a>
 80245f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80245f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80245fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024600:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024608:	464c      	mov	r4, r9
 802460a:	464f      	mov	r7, r9
 802460c:	f280 8215 	bge.w	8024a3a <_dtoa_r+0x852>
 8024610:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8024614:	2331      	movs	r3, #49	; 0x31
 8024616:	f808 3b01 	strb.w	r3, [r8], #1
 802461a:	f10b 0b01 	add.w	fp, fp, #1
 802461e:	e211      	b.n	8024a44 <_dtoa_r+0x85c>
 8024620:	2202      	movs	r2, #2
 8024622:	e780      	b.n	8024526 <_dtoa_r+0x33e>
 8024624:	07cc      	lsls	r4, r1, #31
 8024626:	d504      	bpl.n	8024632 <_dtoa_r+0x44a>
 8024628:	ed90 6b00 	vldr	d6, [r0]
 802462c:	3201      	adds	r2, #1
 802462e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024632:	1049      	asrs	r1, r1, #1
 8024634:	3008      	adds	r0, #8
 8024636:	e777      	b.n	8024528 <_dtoa_r+0x340>
 8024638:	d022      	beq.n	8024680 <_dtoa_r+0x498>
 802463a:	f1cb 0100 	rsb	r1, fp, #0
 802463e:	4a70      	ldr	r2, [pc, #448]	; (8024800 <_dtoa_r+0x618>)
 8024640:	f001 000f 	and.w	r0, r1, #15
 8024644:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8024648:	ed92 7b00 	vldr	d7, [r2]
 802464c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8024650:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024654:	486b      	ldr	r0, [pc, #428]	; (8024804 <_dtoa_r+0x61c>)
 8024656:	1109      	asrs	r1, r1, #4
 8024658:	2400      	movs	r4, #0
 802465a:	2202      	movs	r2, #2
 802465c:	b929      	cbnz	r1, 802466a <_dtoa_r+0x482>
 802465e:	2c00      	cmp	r4, #0
 8024660:	f43f af6a 	beq.w	8024538 <_dtoa_r+0x350>
 8024664:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024668:	e766      	b.n	8024538 <_dtoa_r+0x350>
 802466a:	07cf      	lsls	r7, r1, #31
 802466c:	d505      	bpl.n	802467a <_dtoa_r+0x492>
 802466e:	ed90 6b00 	vldr	d6, [r0]
 8024672:	3201      	adds	r2, #1
 8024674:	2401      	movs	r4, #1
 8024676:	ee27 7b06 	vmul.f64	d7, d7, d6
 802467a:	1049      	asrs	r1, r1, #1
 802467c:	3008      	adds	r0, #8
 802467e:	e7ed      	b.n	802465c <_dtoa_r+0x474>
 8024680:	2202      	movs	r2, #2
 8024682:	e759      	b.n	8024538 <_dtoa_r+0x350>
 8024684:	465f      	mov	r7, fp
 8024686:	4648      	mov	r0, r9
 8024688:	e775      	b.n	8024576 <_dtoa_r+0x38e>
 802468a:	ec42 1b17 	vmov	d7, r1, r2
 802468e:	4a5c      	ldr	r2, [pc, #368]	; (8024800 <_dtoa_r+0x618>)
 8024690:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8024694:	ed12 4b02 	vldr	d4, [r2, #-8]
 8024698:	9a01      	ldr	r2, [sp, #4]
 802469a:	1814      	adds	r4, r2, r0
 802469c:	9a07      	ldr	r2, [sp, #28]
 802469e:	b352      	cbz	r2, 80246f6 <_dtoa_r+0x50e>
 80246a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80246a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80246a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80246ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80246b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80246b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80246b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80246bc:	ee14 2a90 	vmov	r2, s9
 80246c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80246c4:	3230      	adds	r2, #48	; 0x30
 80246c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80246ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80246ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246d2:	f808 2b01 	strb.w	r2, [r8], #1
 80246d6:	d439      	bmi.n	802474c <_dtoa_r+0x564>
 80246d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80246dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80246e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246e4:	d472      	bmi.n	80247cc <_dtoa_r+0x5e4>
 80246e6:	45a0      	cmp	r8, r4
 80246e8:	f43f af6b 	beq.w	80245c2 <_dtoa_r+0x3da>
 80246ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 80246f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80246f4:	e7e0      	b.n	80246b8 <_dtoa_r+0x4d0>
 80246f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80246fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80246fe:	4621      	mov	r1, r4
 8024700:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8024704:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024708:	ee14 2a90 	vmov	r2, s9
 802470c:	3230      	adds	r2, #48	; 0x30
 802470e:	f808 2b01 	strb.w	r2, [r8], #1
 8024712:	45a0      	cmp	r8, r4
 8024714:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8024718:	ee36 6b45 	vsub.f64	d6, d6, d5
 802471c:	d118      	bne.n	8024750 <_dtoa_r+0x568>
 802471e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8024722:	ee37 4b05 	vadd.f64	d4, d7, d5
 8024726:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802472a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802472e:	dc4d      	bgt.n	80247cc <_dtoa_r+0x5e4>
 8024730:	ee35 7b47 	vsub.f64	d7, d5, d7
 8024734:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802473c:	f57f af41 	bpl.w	80245c2 <_dtoa_r+0x3da>
 8024740:	4688      	mov	r8, r1
 8024742:	3901      	subs	r1, #1
 8024744:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8024748:	2b30      	cmp	r3, #48	; 0x30
 802474a:	d0f9      	beq.n	8024740 <_dtoa_r+0x558>
 802474c:	46bb      	mov	fp, r7
 802474e:	e02a      	b.n	80247a6 <_dtoa_r+0x5be>
 8024750:	ee26 6b03 	vmul.f64	d6, d6, d3
 8024754:	e7d6      	b.n	8024704 <_dtoa_r+0x51c>
 8024756:	ed9d 7b02 	vldr	d7, [sp, #8]
 802475a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802475e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8024762:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8024766:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802476a:	ee15 3a10 	vmov	r3, s10
 802476e:	3330      	adds	r3, #48	; 0x30
 8024770:	f808 3b01 	strb.w	r3, [r8], #1
 8024774:	9b01      	ldr	r3, [sp, #4]
 8024776:	eba8 0303 	sub.w	r3, r8, r3
 802477a:	4599      	cmp	r9, r3
 802477c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8024780:	eea3 7b46 	vfms.f64	d7, d3, d6
 8024784:	d133      	bne.n	80247ee <_dtoa_r+0x606>
 8024786:	ee37 7b07 	vadd.f64	d7, d7, d7
 802478a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024792:	dc1a      	bgt.n	80247ca <_dtoa_r+0x5e2>
 8024794:	eeb4 7b46 	vcmp.f64	d7, d6
 8024798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802479c:	d103      	bne.n	80247a6 <_dtoa_r+0x5be>
 802479e:	ee15 3a10 	vmov	r3, s10
 80247a2:	07d9      	lsls	r1, r3, #31
 80247a4:	d411      	bmi.n	80247ca <_dtoa_r+0x5e2>
 80247a6:	4629      	mov	r1, r5
 80247a8:	4630      	mov	r0, r6
 80247aa:	f000 ffa9 	bl	8025700 <_Bfree>
 80247ae:	2300      	movs	r3, #0
 80247b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80247b2:	f888 3000 	strb.w	r3, [r8]
 80247b6:	f10b 0301 	add.w	r3, fp, #1
 80247ba:	6013      	str	r3, [r2, #0]
 80247bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80247be:	2b00      	cmp	r3, #0
 80247c0:	f43f ad61 	beq.w	8024286 <_dtoa_r+0x9e>
 80247c4:	f8c3 8000 	str.w	r8, [r3]
 80247c8:	e55d      	b.n	8024286 <_dtoa_r+0x9e>
 80247ca:	465f      	mov	r7, fp
 80247cc:	4643      	mov	r3, r8
 80247ce:	4698      	mov	r8, r3
 80247d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80247d4:	2a39      	cmp	r2, #57	; 0x39
 80247d6:	d106      	bne.n	80247e6 <_dtoa_r+0x5fe>
 80247d8:	9a01      	ldr	r2, [sp, #4]
 80247da:	429a      	cmp	r2, r3
 80247dc:	d1f7      	bne.n	80247ce <_dtoa_r+0x5e6>
 80247de:	9901      	ldr	r1, [sp, #4]
 80247e0:	2230      	movs	r2, #48	; 0x30
 80247e2:	3701      	adds	r7, #1
 80247e4:	700a      	strb	r2, [r1, #0]
 80247e6:	781a      	ldrb	r2, [r3, #0]
 80247e8:	3201      	adds	r2, #1
 80247ea:	701a      	strb	r2, [r3, #0]
 80247ec:	e7ae      	b.n	802474c <_dtoa_r+0x564>
 80247ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80247f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80247f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247fa:	d1b2      	bne.n	8024762 <_dtoa_r+0x57a>
 80247fc:	e7d3      	b.n	80247a6 <_dtoa_r+0x5be>
 80247fe:	bf00      	nop
 8024800:	080280e8 	.word	0x080280e8
 8024804:	080280c0 	.word	0x080280c0
 8024808:	9907      	ldr	r1, [sp, #28]
 802480a:	2900      	cmp	r1, #0
 802480c:	f000 80d0 	beq.w	80249b0 <_dtoa_r+0x7c8>
 8024810:	9906      	ldr	r1, [sp, #24]
 8024812:	2901      	cmp	r1, #1
 8024814:	f300 80b4 	bgt.w	8024980 <_dtoa_r+0x798>
 8024818:	990a      	ldr	r1, [sp, #40]	; 0x28
 802481a:	2900      	cmp	r1, #0
 802481c:	f000 80ac 	beq.w	8024978 <_dtoa_r+0x790>
 8024820:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8024824:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8024828:	461c      	mov	r4, r3
 802482a:	930a      	str	r3, [sp, #40]	; 0x28
 802482c:	9b04      	ldr	r3, [sp, #16]
 802482e:	4413      	add	r3, r2
 8024830:	9304      	str	r3, [sp, #16]
 8024832:	9b05      	ldr	r3, [sp, #20]
 8024834:	2101      	movs	r1, #1
 8024836:	4413      	add	r3, r2
 8024838:	4630      	mov	r0, r6
 802483a:	9305      	str	r3, [sp, #20]
 802483c:	f001 f862 	bl	8025904 <__i2b>
 8024840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024842:	4607      	mov	r7, r0
 8024844:	f1b8 0f00 	cmp.w	r8, #0
 8024848:	dd0d      	ble.n	8024866 <_dtoa_r+0x67e>
 802484a:	9a05      	ldr	r2, [sp, #20]
 802484c:	2a00      	cmp	r2, #0
 802484e:	dd0a      	ble.n	8024866 <_dtoa_r+0x67e>
 8024850:	4542      	cmp	r2, r8
 8024852:	9904      	ldr	r1, [sp, #16]
 8024854:	bfa8      	it	ge
 8024856:	4642      	movge	r2, r8
 8024858:	1a89      	subs	r1, r1, r2
 802485a:	9104      	str	r1, [sp, #16]
 802485c:	9905      	ldr	r1, [sp, #20]
 802485e:	eba8 0802 	sub.w	r8, r8, r2
 8024862:	1a8a      	subs	r2, r1, r2
 8024864:	9205      	str	r2, [sp, #20]
 8024866:	b303      	cbz	r3, 80248aa <_dtoa_r+0x6c2>
 8024868:	9a07      	ldr	r2, [sp, #28]
 802486a:	2a00      	cmp	r2, #0
 802486c:	f000 80a5 	beq.w	80249ba <_dtoa_r+0x7d2>
 8024870:	2c00      	cmp	r4, #0
 8024872:	dd13      	ble.n	802489c <_dtoa_r+0x6b4>
 8024874:	4639      	mov	r1, r7
 8024876:	4622      	mov	r2, r4
 8024878:	4630      	mov	r0, r6
 802487a:	930d      	str	r3, [sp, #52]	; 0x34
 802487c:	f001 f902 	bl	8025a84 <__pow5mult>
 8024880:	462a      	mov	r2, r5
 8024882:	4601      	mov	r1, r0
 8024884:	4607      	mov	r7, r0
 8024886:	4630      	mov	r0, r6
 8024888:	f001 f852 	bl	8025930 <__multiply>
 802488c:	4629      	mov	r1, r5
 802488e:	900a      	str	r0, [sp, #40]	; 0x28
 8024890:	4630      	mov	r0, r6
 8024892:	f000 ff35 	bl	8025700 <_Bfree>
 8024896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802489a:	4615      	mov	r5, r2
 802489c:	1b1a      	subs	r2, r3, r4
 802489e:	d004      	beq.n	80248aa <_dtoa_r+0x6c2>
 80248a0:	4629      	mov	r1, r5
 80248a2:	4630      	mov	r0, r6
 80248a4:	f001 f8ee 	bl	8025a84 <__pow5mult>
 80248a8:	4605      	mov	r5, r0
 80248aa:	2101      	movs	r1, #1
 80248ac:	4630      	mov	r0, r6
 80248ae:	f001 f829 	bl	8025904 <__i2b>
 80248b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248b4:	2b00      	cmp	r3, #0
 80248b6:	4604      	mov	r4, r0
 80248b8:	f340 8081 	ble.w	80249be <_dtoa_r+0x7d6>
 80248bc:	461a      	mov	r2, r3
 80248be:	4601      	mov	r1, r0
 80248c0:	4630      	mov	r0, r6
 80248c2:	f001 f8df 	bl	8025a84 <__pow5mult>
 80248c6:	9b06      	ldr	r3, [sp, #24]
 80248c8:	2b01      	cmp	r3, #1
 80248ca:	4604      	mov	r4, r0
 80248cc:	dd7a      	ble.n	80249c4 <_dtoa_r+0x7dc>
 80248ce:	2300      	movs	r3, #0
 80248d0:	930a      	str	r3, [sp, #40]	; 0x28
 80248d2:	6922      	ldr	r2, [r4, #16]
 80248d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80248d8:	6910      	ldr	r0, [r2, #16]
 80248da:	f000 ffc3 	bl	8025864 <__hi0bits>
 80248de:	f1c0 0020 	rsb	r0, r0, #32
 80248e2:	9b05      	ldr	r3, [sp, #20]
 80248e4:	4418      	add	r0, r3
 80248e6:	f010 001f 	ands.w	r0, r0, #31
 80248ea:	f000 808c 	beq.w	8024a06 <_dtoa_r+0x81e>
 80248ee:	f1c0 0220 	rsb	r2, r0, #32
 80248f2:	2a04      	cmp	r2, #4
 80248f4:	f340 8085 	ble.w	8024a02 <_dtoa_r+0x81a>
 80248f8:	f1c0 001c 	rsb	r0, r0, #28
 80248fc:	9b04      	ldr	r3, [sp, #16]
 80248fe:	4403      	add	r3, r0
 8024900:	9304      	str	r3, [sp, #16]
 8024902:	9b05      	ldr	r3, [sp, #20]
 8024904:	4403      	add	r3, r0
 8024906:	4480      	add	r8, r0
 8024908:	9305      	str	r3, [sp, #20]
 802490a:	9b04      	ldr	r3, [sp, #16]
 802490c:	2b00      	cmp	r3, #0
 802490e:	dd05      	ble.n	802491c <_dtoa_r+0x734>
 8024910:	4629      	mov	r1, r5
 8024912:	461a      	mov	r2, r3
 8024914:	4630      	mov	r0, r6
 8024916:	f001 f90f 	bl	8025b38 <__lshift>
 802491a:	4605      	mov	r5, r0
 802491c:	9b05      	ldr	r3, [sp, #20]
 802491e:	2b00      	cmp	r3, #0
 8024920:	dd05      	ble.n	802492e <_dtoa_r+0x746>
 8024922:	4621      	mov	r1, r4
 8024924:	461a      	mov	r2, r3
 8024926:	4630      	mov	r0, r6
 8024928:	f001 f906 	bl	8025b38 <__lshift>
 802492c:	4604      	mov	r4, r0
 802492e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024930:	2b00      	cmp	r3, #0
 8024932:	d06a      	beq.n	8024a0a <_dtoa_r+0x822>
 8024934:	4621      	mov	r1, r4
 8024936:	4628      	mov	r0, r5
 8024938:	f001 f96e 	bl	8025c18 <__mcmp>
 802493c:	2800      	cmp	r0, #0
 802493e:	da64      	bge.n	8024a0a <_dtoa_r+0x822>
 8024940:	2300      	movs	r3, #0
 8024942:	4629      	mov	r1, r5
 8024944:	220a      	movs	r2, #10
 8024946:	4630      	mov	r0, r6
 8024948:	f000 fefc 	bl	8025744 <__multadd>
 802494c:	9b07      	ldr	r3, [sp, #28]
 802494e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024952:	4605      	mov	r5, r0
 8024954:	2b00      	cmp	r3, #0
 8024956:	f000 8191 	beq.w	8024c7c <_dtoa_r+0xa94>
 802495a:	4639      	mov	r1, r7
 802495c:	2300      	movs	r3, #0
 802495e:	220a      	movs	r2, #10
 8024960:	4630      	mov	r0, r6
 8024962:	f000 feef 	bl	8025744 <__multadd>
 8024966:	f1ba 0f00 	cmp.w	sl, #0
 802496a:	4607      	mov	r7, r0
 802496c:	f300 808d 	bgt.w	8024a8a <_dtoa_r+0x8a2>
 8024970:	9b06      	ldr	r3, [sp, #24]
 8024972:	2b02      	cmp	r3, #2
 8024974:	dc50      	bgt.n	8024a18 <_dtoa_r+0x830>
 8024976:	e088      	b.n	8024a8a <_dtoa_r+0x8a2>
 8024978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802497a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802497e:	e751      	b.n	8024824 <_dtoa_r+0x63c>
 8024980:	f109 34ff 	add.w	r4, r9, #4294967295
 8024984:	42a3      	cmp	r3, r4
 8024986:	bfbf      	itttt	lt
 8024988:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 802498a:	1ae3      	sublt	r3, r4, r3
 802498c:	18d2      	addlt	r2, r2, r3
 802498e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8024990:	bfb6      	itet	lt
 8024992:	4623      	movlt	r3, r4
 8024994:	1b1c      	subge	r4, r3, r4
 8024996:	2400      	movlt	r4, #0
 8024998:	f1b9 0f00 	cmp.w	r9, #0
 802499c:	bfb5      	itete	lt
 802499e:	9a04      	ldrlt	r2, [sp, #16]
 80249a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80249a4:	eba2 0809 	sublt.w	r8, r2, r9
 80249a8:	464a      	movge	r2, r9
 80249aa:	bfb8      	it	lt
 80249ac:	2200      	movlt	r2, #0
 80249ae:	e73c      	b.n	802482a <_dtoa_r+0x642>
 80249b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80249b4:	9f07      	ldr	r7, [sp, #28]
 80249b6:	461c      	mov	r4, r3
 80249b8:	e744      	b.n	8024844 <_dtoa_r+0x65c>
 80249ba:	461a      	mov	r2, r3
 80249bc:	e770      	b.n	80248a0 <_dtoa_r+0x6b8>
 80249be:	9b06      	ldr	r3, [sp, #24]
 80249c0:	2b01      	cmp	r3, #1
 80249c2:	dc18      	bgt.n	80249f6 <_dtoa_r+0x80e>
 80249c4:	9b02      	ldr	r3, [sp, #8]
 80249c6:	b9b3      	cbnz	r3, 80249f6 <_dtoa_r+0x80e>
 80249c8:	9b03      	ldr	r3, [sp, #12]
 80249ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80249ce:	b9a2      	cbnz	r2, 80249fa <_dtoa_r+0x812>
 80249d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80249d4:	0d12      	lsrs	r2, r2, #20
 80249d6:	0512      	lsls	r2, r2, #20
 80249d8:	b18a      	cbz	r2, 80249fe <_dtoa_r+0x816>
 80249da:	9b04      	ldr	r3, [sp, #16]
 80249dc:	3301      	adds	r3, #1
 80249de:	9304      	str	r3, [sp, #16]
 80249e0:	9b05      	ldr	r3, [sp, #20]
 80249e2:	3301      	adds	r3, #1
 80249e4:	9305      	str	r3, [sp, #20]
 80249e6:	2301      	movs	r3, #1
 80249e8:	930a      	str	r3, [sp, #40]	; 0x28
 80249ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80249ec:	2b00      	cmp	r3, #0
 80249ee:	f47f af70 	bne.w	80248d2 <_dtoa_r+0x6ea>
 80249f2:	2001      	movs	r0, #1
 80249f4:	e775      	b.n	80248e2 <_dtoa_r+0x6fa>
 80249f6:	2300      	movs	r3, #0
 80249f8:	e7f6      	b.n	80249e8 <_dtoa_r+0x800>
 80249fa:	9b02      	ldr	r3, [sp, #8]
 80249fc:	e7f4      	b.n	80249e8 <_dtoa_r+0x800>
 80249fe:	920a      	str	r2, [sp, #40]	; 0x28
 8024a00:	e7f3      	b.n	80249ea <_dtoa_r+0x802>
 8024a02:	d082      	beq.n	802490a <_dtoa_r+0x722>
 8024a04:	4610      	mov	r0, r2
 8024a06:	301c      	adds	r0, #28
 8024a08:	e778      	b.n	80248fc <_dtoa_r+0x714>
 8024a0a:	f1b9 0f00 	cmp.w	r9, #0
 8024a0e:	dc37      	bgt.n	8024a80 <_dtoa_r+0x898>
 8024a10:	9b06      	ldr	r3, [sp, #24]
 8024a12:	2b02      	cmp	r3, #2
 8024a14:	dd34      	ble.n	8024a80 <_dtoa_r+0x898>
 8024a16:	46ca      	mov	sl, r9
 8024a18:	f1ba 0f00 	cmp.w	sl, #0
 8024a1c:	d10d      	bne.n	8024a3a <_dtoa_r+0x852>
 8024a1e:	4621      	mov	r1, r4
 8024a20:	4653      	mov	r3, sl
 8024a22:	2205      	movs	r2, #5
 8024a24:	4630      	mov	r0, r6
 8024a26:	f000 fe8d 	bl	8025744 <__multadd>
 8024a2a:	4601      	mov	r1, r0
 8024a2c:	4604      	mov	r4, r0
 8024a2e:	4628      	mov	r0, r5
 8024a30:	f001 f8f2 	bl	8025c18 <__mcmp>
 8024a34:	2800      	cmp	r0, #0
 8024a36:	f73f adeb 	bgt.w	8024610 <_dtoa_r+0x428>
 8024a3a:	9b08      	ldr	r3, [sp, #32]
 8024a3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8024a40:	ea6f 0b03 	mvn.w	fp, r3
 8024a44:	f04f 0900 	mov.w	r9, #0
 8024a48:	4621      	mov	r1, r4
 8024a4a:	4630      	mov	r0, r6
 8024a4c:	f000 fe58 	bl	8025700 <_Bfree>
 8024a50:	2f00      	cmp	r7, #0
 8024a52:	f43f aea8 	beq.w	80247a6 <_dtoa_r+0x5be>
 8024a56:	f1b9 0f00 	cmp.w	r9, #0
 8024a5a:	d005      	beq.n	8024a68 <_dtoa_r+0x880>
 8024a5c:	45b9      	cmp	r9, r7
 8024a5e:	d003      	beq.n	8024a68 <_dtoa_r+0x880>
 8024a60:	4649      	mov	r1, r9
 8024a62:	4630      	mov	r0, r6
 8024a64:	f000 fe4c 	bl	8025700 <_Bfree>
 8024a68:	4639      	mov	r1, r7
 8024a6a:	4630      	mov	r0, r6
 8024a6c:	f000 fe48 	bl	8025700 <_Bfree>
 8024a70:	e699      	b.n	80247a6 <_dtoa_r+0x5be>
 8024a72:	2400      	movs	r4, #0
 8024a74:	4627      	mov	r7, r4
 8024a76:	e7e0      	b.n	8024a3a <_dtoa_r+0x852>
 8024a78:	46bb      	mov	fp, r7
 8024a7a:	4604      	mov	r4, r0
 8024a7c:	4607      	mov	r7, r0
 8024a7e:	e5c7      	b.n	8024610 <_dtoa_r+0x428>
 8024a80:	9b07      	ldr	r3, [sp, #28]
 8024a82:	46ca      	mov	sl, r9
 8024a84:	2b00      	cmp	r3, #0
 8024a86:	f000 8100 	beq.w	8024c8a <_dtoa_r+0xaa2>
 8024a8a:	f1b8 0f00 	cmp.w	r8, #0
 8024a8e:	dd05      	ble.n	8024a9c <_dtoa_r+0x8b4>
 8024a90:	4639      	mov	r1, r7
 8024a92:	4642      	mov	r2, r8
 8024a94:	4630      	mov	r0, r6
 8024a96:	f001 f84f 	bl	8025b38 <__lshift>
 8024a9a:	4607      	mov	r7, r0
 8024a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a9e:	2b00      	cmp	r3, #0
 8024aa0:	d05d      	beq.n	8024b5e <_dtoa_r+0x976>
 8024aa2:	6879      	ldr	r1, [r7, #4]
 8024aa4:	4630      	mov	r0, r6
 8024aa6:	f000 fdeb 	bl	8025680 <_Balloc>
 8024aaa:	4680      	mov	r8, r0
 8024aac:	b928      	cbnz	r0, 8024aba <_dtoa_r+0x8d2>
 8024aae:	4b82      	ldr	r3, [pc, #520]	; (8024cb8 <_dtoa_r+0xad0>)
 8024ab0:	4602      	mov	r2, r0
 8024ab2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8024ab6:	f7ff bbaf 	b.w	8024218 <_dtoa_r+0x30>
 8024aba:	693a      	ldr	r2, [r7, #16]
 8024abc:	3202      	adds	r2, #2
 8024abe:	0092      	lsls	r2, r2, #2
 8024ac0:	f107 010c 	add.w	r1, r7, #12
 8024ac4:	300c      	adds	r0, #12
 8024ac6:	f7fd fa25 	bl	8021f14 <memcpy>
 8024aca:	2201      	movs	r2, #1
 8024acc:	4641      	mov	r1, r8
 8024ace:	4630      	mov	r0, r6
 8024ad0:	f001 f832 	bl	8025b38 <__lshift>
 8024ad4:	9b01      	ldr	r3, [sp, #4]
 8024ad6:	3301      	adds	r3, #1
 8024ad8:	9304      	str	r3, [sp, #16]
 8024ada:	9b01      	ldr	r3, [sp, #4]
 8024adc:	4453      	add	r3, sl
 8024ade:	9308      	str	r3, [sp, #32]
 8024ae0:	9b02      	ldr	r3, [sp, #8]
 8024ae2:	f003 0301 	and.w	r3, r3, #1
 8024ae6:	46b9      	mov	r9, r7
 8024ae8:	9307      	str	r3, [sp, #28]
 8024aea:	4607      	mov	r7, r0
 8024aec:	9b04      	ldr	r3, [sp, #16]
 8024aee:	4621      	mov	r1, r4
 8024af0:	3b01      	subs	r3, #1
 8024af2:	4628      	mov	r0, r5
 8024af4:	9302      	str	r3, [sp, #8]
 8024af6:	f7ff fae9 	bl	80240cc <quorem>
 8024afa:	4603      	mov	r3, r0
 8024afc:	3330      	adds	r3, #48	; 0x30
 8024afe:	9005      	str	r0, [sp, #20]
 8024b00:	4649      	mov	r1, r9
 8024b02:	4628      	mov	r0, r5
 8024b04:	9309      	str	r3, [sp, #36]	; 0x24
 8024b06:	f001 f887 	bl	8025c18 <__mcmp>
 8024b0a:	463a      	mov	r2, r7
 8024b0c:	4682      	mov	sl, r0
 8024b0e:	4621      	mov	r1, r4
 8024b10:	4630      	mov	r0, r6
 8024b12:	f001 f89d 	bl	8025c50 <__mdiff>
 8024b16:	68c2      	ldr	r2, [r0, #12]
 8024b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b1a:	4680      	mov	r8, r0
 8024b1c:	bb0a      	cbnz	r2, 8024b62 <_dtoa_r+0x97a>
 8024b1e:	4601      	mov	r1, r0
 8024b20:	4628      	mov	r0, r5
 8024b22:	f001 f879 	bl	8025c18 <__mcmp>
 8024b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b28:	4602      	mov	r2, r0
 8024b2a:	4641      	mov	r1, r8
 8024b2c:	4630      	mov	r0, r6
 8024b2e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8024b32:	f000 fde5 	bl	8025700 <_Bfree>
 8024b36:	9b06      	ldr	r3, [sp, #24]
 8024b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024b3a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8024b3e:	ea43 0102 	orr.w	r1, r3, r2
 8024b42:	9b07      	ldr	r3, [sp, #28]
 8024b44:	430b      	orrs	r3, r1
 8024b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b48:	d10d      	bne.n	8024b66 <_dtoa_r+0x97e>
 8024b4a:	2b39      	cmp	r3, #57	; 0x39
 8024b4c:	d029      	beq.n	8024ba2 <_dtoa_r+0x9ba>
 8024b4e:	f1ba 0f00 	cmp.w	sl, #0
 8024b52:	dd01      	ble.n	8024b58 <_dtoa_r+0x970>
 8024b54:	9b05      	ldr	r3, [sp, #20]
 8024b56:	3331      	adds	r3, #49	; 0x31
 8024b58:	9a02      	ldr	r2, [sp, #8]
 8024b5a:	7013      	strb	r3, [r2, #0]
 8024b5c:	e774      	b.n	8024a48 <_dtoa_r+0x860>
 8024b5e:	4638      	mov	r0, r7
 8024b60:	e7b8      	b.n	8024ad4 <_dtoa_r+0x8ec>
 8024b62:	2201      	movs	r2, #1
 8024b64:	e7e1      	b.n	8024b2a <_dtoa_r+0x942>
 8024b66:	f1ba 0f00 	cmp.w	sl, #0
 8024b6a:	db06      	blt.n	8024b7a <_dtoa_r+0x992>
 8024b6c:	9906      	ldr	r1, [sp, #24]
 8024b6e:	ea41 0a0a 	orr.w	sl, r1, sl
 8024b72:	9907      	ldr	r1, [sp, #28]
 8024b74:	ea5a 0101 	orrs.w	r1, sl, r1
 8024b78:	d120      	bne.n	8024bbc <_dtoa_r+0x9d4>
 8024b7a:	2a00      	cmp	r2, #0
 8024b7c:	ddec      	ble.n	8024b58 <_dtoa_r+0x970>
 8024b7e:	4629      	mov	r1, r5
 8024b80:	2201      	movs	r2, #1
 8024b82:	4630      	mov	r0, r6
 8024b84:	9304      	str	r3, [sp, #16]
 8024b86:	f000 ffd7 	bl	8025b38 <__lshift>
 8024b8a:	4621      	mov	r1, r4
 8024b8c:	4605      	mov	r5, r0
 8024b8e:	f001 f843 	bl	8025c18 <__mcmp>
 8024b92:	2800      	cmp	r0, #0
 8024b94:	9b04      	ldr	r3, [sp, #16]
 8024b96:	dc02      	bgt.n	8024b9e <_dtoa_r+0x9b6>
 8024b98:	d1de      	bne.n	8024b58 <_dtoa_r+0x970>
 8024b9a:	07da      	lsls	r2, r3, #31
 8024b9c:	d5dc      	bpl.n	8024b58 <_dtoa_r+0x970>
 8024b9e:	2b39      	cmp	r3, #57	; 0x39
 8024ba0:	d1d8      	bne.n	8024b54 <_dtoa_r+0x96c>
 8024ba2:	9a02      	ldr	r2, [sp, #8]
 8024ba4:	2339      	movs	r3, #57	; 0x39
 8024ba6:	7013      	strb	r3, [r2, #0]
 8024ba8:	4643      	mov	r3, r8
 8024baa:	4698      	mov	r8, r3
 8024bac:	3b01      	subs	r3, #1
 8024bae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8024bb2:	2a39      	cmp	r2, #57	; 0x39
 8024bb4:	d051      	beq.n	8024c5a <_dtoa_r+0xa72>
 8024bb6:	3201      	adds	r2, #1
 8024bb8:	701a      	strb	r2, [r3, #0]
 8024bba:	e745      	b.n	8024a48 <_dtoa_r+0x860>
 8024bbc:	2a00      	cmp	r2, #0
 8024bbe:	dd03      	ble.n	8024bc8 <_dtoa_r+0x9e0>
 8024bc0:	2b39      	cmp	r3, #57	; 0x39
 8024bc2:	d0ee      	beq.n	8024ba2 <_dtoa_r+0x9ba>
 8024bc4:	3301      	adds	r3, #1
 8024bc6:	e7c7      	b.n	8024b58 <_dtoa_r+0x970>
 8024bc8:	9a04      	ldr	r2, [sp, #16]
 8024bca:	9908      	ldr	r1, [sp, #32]
 8024bcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024bd0:	428a      	cmp	r2, r1
 8024bd2:	d02b      	beq.n	8024c2c <_dtoa_r+0xa44>
 8024bd4:	4629      	mov	r1, r5
 8024bd6:	2300      	movs	r3, #0
 8024bd8:	220a      	movs	r2, #10
 8024bda:	4630      	mov	r0, r6
 8024bdc:	f000 fdb2 	bl	8025744 <__multadd>
 8024be0:	45b9      	cmp	r9, r7
 8024be2:	4605      	mov	r5, r0
 8024be4:	f04f 0300 	mov.w	r3, #0
 8024be8:	f04f 020a 	mov.w	r2, #10
 8024bec:	4649      	mov	r1, r9
 8024bee:	4630      	mov	r0, r6
 8024bf0:	d107      	bne.n	8024c02 <_dtoa_r+0xa1a>
 8024bf2:	f000 fda7 	bl	8025744 <__multadd>
 8024bf6:	4681      	mov	r9, r0
 8024bf8:	4607      	mov	r7, r0
 8024bfa:	9b04      	ldr	r3, [sp, #16]
 8024bfc:	3301      	adds	r3, #1
 8024bfe:	9304      	str	r3, [sp, #16]
 8024c00:	e774      	b.n	8024aec <_dtoa_r+0x904>
 8024c02:	f000 fd9f 	bl	8025744 <__multadd>
 8024c06:	4639      	mov	r1, r7
 8024c08:	4681      	mov	r9, r0
 8024c0a:	2300      	movs	r3, #0
 8024c0c:	220a      	movs	r2, #10
 8024c0e:	4630      	mov	r0, r6
 8024c10:	f000 fd98 	bl	8025744 <__multadd>
 8024c14:	4607      	mov	r7, r0
 8024c16:	e7f0      	b.n	8024bfa <_dtoa_r+0xa12>
 8024c18:	f1ba 0f00 	cmp.w	sl, #0
 8024c1c:	9a01      	ldr	r2, [sp, #4]
 8024c1e:	bfcc      	ite	gt
 8024c20:	46d0      	movgt	r8, sl
 8024c22:	f04f 0801 	movle.w	r8, #1
 8024c26:	4490      	add	r8, r2
 8024c28:	f04f 0900 	mov.w	r9, #0
 8024c2c:	4629      	mov	r1, r5
 8024c2e:	2201      	movs	r2, #1
 8024c30:	4630      	mov	r0, r6
 8024c32:	9302      	str	r3, [sp, #8]
 8024c34:	f000 ff80 	bl	8025b38 <__lshift>
 8024c38:	4621      	mov	r1, r4
 8024c3a:	4605      	mov	r5, r0
 8024c3c:	f000 ffec 	bl	8025c18 <__mcmp>
 8024c40:	2800      	cmp	r0, #0
 8024c42:	dcb1      	bgt.n	8024ba8 <_dtoa_r+0x9c0>
 8024c44:	d102      	bne.n	8024c4c <_dtoa_r+0xa64>
 8024c46:	9b02      	ldr	r3, [sp, #8]
 8024c48:	07db      	lsls	r3, r3, #31
 8024c4a:	d4ad      	bmi.n	8024ba8 <_dtoa_r+0x9c0>
 8024c4c:	4643      	mov	r3, r8
 8024c4e:	4698      	mov	r8, r3
 8024c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024c54:	2a30      	cmp	r2, #48	; 0x30
 8024c56:	d0fa      	beq.n	8024c4e <_dtoa_r+0xa66>
 8024c58:	e6f6      	b.n	8024a48 <_dtoa_r+0x860>
 8024c5a:	9a01      	ldr	r2, [sp, #4]
 8024c5c:	429a      	cmp	r2, r3
 8024c5e:	d1a4      	bne.n	8024baa <_dtoa_r+0x9c2>
 8024c60:	f10b 0b01 	add.w	fp, fp, #1
 8024c64:	2331      	movs	r3, #49	; 0x31
 8024c66:	e778      	b.n	8024b5a <_dtoa_r+0x972>
 8024c68:	4b14      	ldr	r3, [pc, #80]	; (8024cbc <_dtoa_r+0xad4>)
 8024c6a:	f7ff bb27 	b.w	80242bc <_dtoa_r+0xd4>
 8024c6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	f47f ab03 	bne.w	802427c <_dtoa_r+0x94>
 8024c76:	4b12      	ldr	r3, [pc, #72]	; (8024cc0 <_dtoa_r+0xad8>)
 8024c78:	f7ff bb20 	b.w	80242bc <_dtoa_r+0xd4>
 8024c7c:	f1ba 0f00 	cmp.w	sl, #0
 8024c80:	dc03      	bgt.n	8024c8a <_dtoa_r+0xaa2>
 8024c82:	9b06      	ldr	r3, [sp, #24]
 8024c84:	2b02      	cmp	r3, #2
 8024c86:	f73f aec7 	bgt.w	8024a18 <_dtoa_r+0x830>
 8024c8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8024c8e:	4621      	mov	r1, r4
 8024c90:	4628      	mov	r0, r5
 8024c92:	f7ff fa1b 	bl	80240cc <quorem>
 8024c96:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8024c9a:	f808 3b01 	strb.w	r3, [r8], #1
 8024c9e:	9a01      	ldr	r2, [sp, #4]
 8024ca0:	eba8 0202 	sub.w	r2, r8, r2
 8024ca4:	4592      	cmp	sl, r2
 8024ca6:	ddb7      	ble.n	8024c18 <_dtoa_r+0xa30>
 8024ca8:	4629      	mov	r1, r5
 8024caa:	2300      	movs	r3, #0
 8024cac:	220a      	movs	r2, #10
 8024cae:	4630      	mov	r0, r6
 8024cb0:	f000 fd48 	bl	8025744 <__multadd>
 8024cb4:	4605      	mov	r5, r0
 8024cb6:	e7ea      	b.n	8024c8e <_dtoa_r+0xaa6>
 8024cb8:	08027fd8 	.word	0x08027fd8
 8024cbc:	08027e44 	.word	0x08027e44
 8024cc0:	08027f70 	.word	0x08027f70

08024cc4 <__sflush_r>:
 8024cc4:	898a      	ldrh	r2, [r1, #12]
 8024cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024cca:	4605      	mov	r5, r0
 8024ccc:	0710      	lsls	r0, r2, #28
 8024cce:	460c      	mov	r4, r1
 8024cd0:	d458      	bmi.n	8024d84 <__sflush_r+0xc0>
 8024cd2:	684b      	ldr	r3, [r1, #4]
 8024cd4:	2b00      	cmp	r3, #0
 8024cd6:	dc05      	bgt.n	8024ce4 <__sflush_r+0x20>
 8024cd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024cda:	2b00      	cmp	r3, #0
 8024cdc:	dc02      	bgt.n	8024ce4 <__sflush_r+0x20>
 8024cde:	2000      	movs	r0, #0
 8024ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024ce6:	2e00      	cmp	r6, #0
 8024ce8:	d0f9      	beq.n	8024cde <__sflush_r+0x1a>
 8024cea:	2300      	movs	r3, #0
 8024cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024cf0:	682f      	ldr	r7, [r5, #0]
 8024cf2:	602b      	str	r3, [r5, #0]
 8024cf4:	d032      	beq.n	8024d5c <__sflush_r+0x98>
 8024cf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024cf8:	89a3      	ldrh	r3, [r4, #12]
 8024cfa:	075a      	lsls	r2, r3, #29
 8024cfc:	d505      	bpl.n	8024d0a <__sflush_r+0x46>
 8024cfe:	6863      	ldr	r3, [r4, #4]
 8024d00:	1ac0      	subs	r0, r0, r3
 8024d02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024d04:	b10b      	cbz	r3, 8024d0a <__sflush_r+0x46>
 8024d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024d08:	1ac0      	subs	r0, r0, r3
 8024d0a:	2300      	movs	r3, #0
 8024d0c:	4602      	mov	r2, r0
 8024d0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024d10:	6a21      	ldr	r1, [r4, #32]
 8024d12:	4628      	mov	r0, r5
 8024d14:	47b0      	blx	r6
 8024d16:	1c43      	adds	r3, r0, #1
 8024d18:	89a3      	ldrh	r3, [r4, #12]
 8024d1a:	d106      	bne.n	8024d2a <__sflush_r+0x66>
 8024d1c:	6829      	ldr	r1, [r5, #0]
 8024d1e:	291d      	cmp	r1, #29
 8024d20:	d82c      	bhi.n	8024d7c <__sflush_r+0xb8>
 8024d22:	4a2a      	ldr	r2, [pc, #168]	; (8024dcc <__sflush_r+0x108>)
 8024d24:	40ca      	lsrs	r2, r1
 8024d26:	07d6      	lsls	r6, r2, #31
 8024d28:	d528      	bpl.n	8024d7c <__sflush_r+0xb8>
 8024d2a:	2200      	movs	r2, #0
 8024d2c:	6062      	str	r2, [r4, #4]
 8024d2e:	04d9      	lsls	r1, r3, #19
 8024d30:	6922      	ldr	r2, [r4, #16]
 8024d32:	6022      	str	r2, [r4, #0]
 8024d34:	d504      	bpl.n	8024d40 <__sflush_r+0x7c>
 8024d36:	1c42      	adds	r2, r0, #1
 8024d38:	d101      	bne.n	8024d3e <__sflush_r+0x7a>
 8024d3a:	682b      	ldr	r3, [r5, #0]
 8024d3c:	b903      	cbnz	r3, 8024d40 <__sflush_r+0x7c>
 8024d3e:	6560      	str	r0, [r4, #84]	; 0x54
 8024d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024d42:	602f      	str	r7, [r5, #0]
 8024d44:	2900      	cmp	r1, #0
 8024d46:	d0ca      	beq.n	8024cde <__sflush_r+0x1a>
 8024d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024d4c:	4299      	cmp	r1, r3
 8024d4e:	d002      	beq.n	8024d56 <__sflush_r+0x92>
 8024d50:	4628      	mov	r0, r5
 8024d52:	f7fd f8f5 	bl	8021f40 <_free_r>
 8024d56:	2000      	movs	r0, #0
 8024d58:	6360      	str	r0, [r4, #52]	; 0x34
 8024d5a:	e7c1      	b.n	8024ce0 <__sflush_r+0x1c>
 8024d5c:	6a21      	ldr	r1, [r4, #32]
 8024d5e:	2301      	movs	r3, #1
 8024d60:	4628      	mov	r0, r5
 8024d62:	47b0      	blx	r6
 8024d64:	1c41      	adds	r1, r0, #1
 8024d66:	d1c7      	bne.n	8024cf8 <__sflush_r+0x34>
 8024d68:	682b      	ldr	r3, [r5, #0]
 8024d6a:	2b00      	cmp	r3, #0
 8024d6c:	d0c4      	beq.n	8024cf8 <__sflush_r+0x34>
 8024d6e:	2b1d      	cmp	r3, #29
 8024d70:	d001      	beq.n	8024d76 <__sflush_r+0xb2>
 8024d72:	2b16      	cmp	r3, #22
 8024d74:	d101      	bne.n	8024d7a <__sflush_r+0xb6>
 8024d76:	602f      	str	r7, [r5, #0]
 8024d78:	e7b1      	b.n	8024cde <__sflush_r+0x1a>
 8024d7a:	89a3      	ldrh	r3, [r4, #12]
 8024d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024d80:	81a3      	strh	r3, [r4, #12]
 8024d82:	e7ad      	b.n	8024ce0 <__sflush_r+0x1c>
 8024d84:	690f      	ldr	r7, [r1, #16]
 8024d86:	2f00      	cmp	r7, #0
 8024d88:	d0a9      	beq.n	8024cde <__sflush_r+0x1a>
 8024d8a:	0793      	lsls	r3, r2, #30
 8024d8c:	680e      	ldr	r6, [r1, #0]
 8024d8e:	bf08      	it	eq
 8024d90:	694b      	ldreq	r3, [r1, #20]
 8024d92:	600f      	str	r7, [r1, #0]
 8024d94:	bf18      	it	ne
 8024d96:	2300      	movne	r3, #0
 8024d98:	eba6 0807 	sub.w	r8, r6, r7
 8024d9c:	608b      	str	r3, [r1, #8]
 8024d9e:	f1b8 0f00 	cmp.w	r8, #0
 8024da2:	dd9c      	ble.n	8024cde <__sflush_r+0x1a>
 8024da4:	6a21      	ldr	r1, [r4, #32]
 8024da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024da8:	4643      	mov	r3, r8
 8024daa:	463a      	mov	r2, r7
 8024dac:	4628      	mov	r0, r5
 8024dae:	47b0      	blx	r6
 8024db0:	2800      	cmp	r0, #0
 8024db2:	dc06      	bgt.n	8024dc2 <__sflush_r+0xfe>
 8024db4:	89a3      	ldrh	r3, [r4, #12]
 8024db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024dba:	81a3      	strh	r3, [r4, #12]
 8024dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8024dc0:	e78e      	b.n	8024ce0 <__sflush_r+0x1c>
 8024dc2:	4407      	add	r7, r0
 8024dc4:	eba8 0800 	sub.w	r8, r8, r0
 8024dc8:	e7e9      	b.n	8024d9e <__sflush_r+0xda>
 8024dca:	bf00      	nop
 8024dcc:	20400001 	.word	0x20400001

08024dd0 <_fflush_r>:
 8024dd0:	b538      	push	{r3, r4, r5, lr}
 8024dd2:	690b      	ldr	r3, [r1, #16]
 8024dd4:	4605      	mov	r5, r0
 8024dd6:	460c      	mov	r4, r1
 8024dd8:	b913      	cbnz	r3, 8024de0 <_fflush_r+0x10>
 8024dda:	2500      	movs	r5, #0
 8024ddc:	4628      	mov	r0, r5
 8024dde:	bd38      	pop	{r3, r4, r5, pc}
 8024de0:	b118      	cbz	r0, 8024dea <_fflush_r+0x1a>
 8024de2:	6983      	ldr	r3, [r0, #24]
 8024de4:	b90b      	cbnz	r3, 8024dea <_fflush_r+0x1a>
 8024de6:	f7fc ffc7 	bl	8021d78 <__sinit>
 8024dea:	4b14      	ldr	r3, [pc, #80]	; (8024e3c <_fflush_r+0x6c>)
 8024dec:	429c      	cmp	r4, r3
 8024dee:	d11b      	bne.n	8024e28 <_fflush_r+0x58>
 8024df0:	686c      	ldr	r4, [r5, #4]
 8024df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024df6:	2b00      	cmp	r3, #0
 8024df8:	d0ef      	beq.n	8024dda <_fflush_r+0xa>
 8024dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024dfc:	07d0      	lsls	r0, r2, #31
 8024dfe:	d404      	bmi.n	8024e0a <_fflush_r+0x3a>
 8024e00:	0599      	lsls	r1, r3, #22
 8024e02:	d402      	bmi.n	8024e0a <_fflush_r+0x3a>
 8024e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024e06:	f7fd f87a 	bl	8021efe <__retarget_lock_acquire_recursive>
 8024e0a:	4628      	mov	r0, r5
 8024e0c:	4621      	mov	r1, r4
 8024e0e:	f7ff ff59 	bl	8024cc4 <__sflush_r>
 8024e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024e14:	07da      	lsls	r2, r3, #31
 8024e16:	4605      	mov	r5, r0
 8024e18:	d4e0      	bmi.n	8024ddc <_fflush_r+0xc>
 8024e1a:	89a3      	ldrh	r3, [r4, #12]
 8024e1c:	059b      	lsls	r3, r3, #22
 8024e1e:	d4dd      	bmi.n	8024ddc <_fflush_r+0xc>
 8024e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024e22:	f7fd f86d 	bl	8021f00 <__retarget_lock_release_recursive>
 8024e26:	e7d9      	b.n	8024ddc <_fflush_r+0xc>
 8024e28:	4b05      	ldr	r3, [pc, #20]	; (8024e40 <_fflush_r+0x70>)
 8024e2a:	429c      	cmp	r4, r3
 8024e2c:	d101      	bne.n	8024e32 <_fflush_r+0x62>
 8024e2e:	68ac      	ldr	r4, [r5, #8]
 8024e30:	e7df      	b.n	8024df2 <_fflush_r+0x22>
 8024e32:	4b04      	ldr	r3, [pc, #16]	; (8024e44 <_fflush_r+0x74>)
 8024e34:	429c      	cmp	r4, r3
 8024e36:	bf08      	it	eq
 8024e38:	68ec      	ldreq	r4, [r5, #12]
 8024e3a:	e7da      	b.n	8024df2 <_fflush_r+0x22>
 8024e3c:	08027df0 	.word	0x08027df0
 8024e40:	08027e10 	.word	0x08027e10
 8024e44:	08027dd0 	.word	0x08027dd0

08024e48 <fiprintf>:
 8024e48:	b40e      	push	{r1, r2, r3}
 8024e4a:	b503      	push	{r0, r1, lr}
 8024e4c:	4601      	mov	r1, r0
 8024e4e:	ab03      	add	r3, sp, #12
 8024e50:	4805      	ldr	r0, [pc, #20]	; (8024e68 <fiprintf+0x20>)
 8024e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8024e56:	6800      	ldr	r0, [r0, #0]
 8024e58:	9301      	str	r3, [sp, #4]
 8024e5a:	f001 fa6b 	bl	8026334 <_vfiprintf_r>
 8024e5e:	b002      	add	sp, #8
 8024e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8024e64:	b003      	add	sp, #12
 8024e66:	4770      	bx	lr
 8024e68:	240002f8 	.word	0x240002f8

08024e6c <rshift>:
 8024e6c:	6903      	ldr	r3, [r0, #16]
 8024e6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8024e72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024e76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8024e7a:	f100 0414 	add.w	r4, r0, #20
 8024e7e:	dd45      	ble.n	8024f0c <rshift+0xa0>
 8024e80:	f011 011f 	ands.w	r1, r1, #31
 8024e84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8024e88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8024e8c:	d10c      	bne.n	8024ea8 <rshift+0x3c>
 8024e8e:	f100 0710 	add.w	r7, r0, #16
 8024e92:	4629      	mov	r1, r5
 8024e94:	42b1      	cmp	r1, r6
 8024e96:	d334      	bcc.n	8024f02 <rshift+0x96>
 8024e98:	1a9b      	subs	r3, r3, r2
 8024e9a:	009b      	lsls	r3, r3, #2
 8024e9c:	1eea      	subs	r2, r5, #3
 8024e9e:	4296      	cmp	r6, r2
 8024ea0:	bf38      	it	cc
 8024ea2:	2300      	movcc	r3, #0
 8024ea4:	4423      	add	r3, r4
 8024ea6:	e015      	b.n	8024ed4 <rshift+0x68>
 8024ea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8024eac:	f1c1 0820 	rsb	r8, r1, #32
 8024eb0:	40cf      	lsrs	r7, r1
 8024eb2:	f105 0e04 	add.w	lr, r5, #4
 8024eb6:	46a1      	mov	r9, r4
 8024eb8:	4576      	cmp	r6, lr
 8024eba:	46f4      	mov	ip, lr
 8024ebc:	d815      	bhi.n	8024eea <rshift+0x7e>
 8024ebe:	1a9a      	subs	r2, r3, r2
 8024ec0:	0092      	lsls	r2, r2, #2
 8024ec2:	3a04      	subs	r2, #4
 8024ec4:	3501      	adds	r5, #1
 8024ec6:	42ae      	cmp	r6, r5
 8024ec8:	bf38      	it	cc
 8024eca:	2200      	movcc	r2, #0
 8024ecc:	18a3      	adds	r3, r4, r2
 8024ece:	50a7      	str	r7, [r4, r2]
 8024ed0:	b107      	cbz	r7, 8024ed4 <rshift+0x68>
 8024ed2:	3304      	adds	r3, #4
 8024ed4:	1b1a      	subs	r2, r3, r4
 8024ed6:	42a3      	cmp	r3, r4
 8024ed8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8024edc:	bf08      	it	eq
 8024ede:	2300      	moveq	r3, #0
 8024ee0:	6102      	str	r2, [r0, #16]
 8024ee2:	bf08      	it	eq
 8024ee4:	6143      	streq	r3, [r0, #20]
 8024ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024eea:	f8dc c000 	ldr.w	ip, [ip]
 8024eee:	fa0c fc08 	lsl.w	ip, ip, r8
 8024ef2:	ea4c 0707 	orr.w	r7, ip, r7
 8024ef6:	f849 7b04 	str.w	r7, [r9], #4
 8024efa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8024efe:	40cf      	lsrs	r7, r1
 8024f00:	e7da      	b.n	8024eb8 <rshift+0x4c>
 8024f02:	f851 cb04 	ldr.w	ip, [r1], #4
 8024f06:	f847 cf04 	str.w	ip, [r7, #4]!
 8024f0a:	e7c3      	b.n	8024e94 <rshift+0x28>
 8024f0c:	4623      	mov	r3, r4
 8024f0e:	e7e1      	b.n	8024ed4 <rshift+0x68>

08024f10 <__hexdig_fun>:
 8024f10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8024f14:	2b09      	cmp	r3, #9
 8024f16:	d802      	bhi.n	8024f1e <__hexdig_fun+0xe>
 8024f18:	3820      	subs	r0, #32
 8024f1a:	b2c0      	uxtb	r0, r0
 8024f1c:	4770      	bx	lr
 8024f1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8024f22:	2b05      	cmp	r3, #5
 8024f24:	d801      	bhi.n	8024f2a <__hexdig_fun+0x1a>
 8024f26:	3847      	subs	r0, #71	; 0x47
 8024f28:	e7f7      	b.n	8024f1a <__hexdig_fun+0xa>
 8024f2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8024f2e:	2b05      	cmp	r3, #5
 8024f30:	d801      	bhi.n	8024f36 <__hexdig_fun+0x26>
 8024f32:	3827      	subs	r0, #39	; 0x27
 8024f34:	e7f1      	b.n	8024f1a <__hexdig_fun+0xa>
 8024f36:	2000      	movs	r0, #0
 8024f38:	4770      	bx	lr
	...

08024f3c <__gethex>:
 8024f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f40:	ed2d 8b02 	vpush	{d8}
 8024f44:	b089      	sub	sp, #36	; 0x24
 8024f46:	ee08 0a10 	vmov	s16, r0
 8024f4a:	9304      	str	r3, [sp, #16]
 8024f4c:	4bb4      	ldr	r3, [pc, #720]	; (8025220 <__gethex+0x2e4>)
 8024f4e:	681b      	ldr	r3, [r3, #0]
 8024f50:	9301      	str	r3, [sp, #4]
 8024f52:	4618      	mov	r0, r3
 8024f54:	468b      	mov	fp, r1
 8024f56:	4690      	mov	r8, r2
 8024f58:	f7db f9cc 	bl	80002f4 <strlen>
 8024f5c:	9b01      	ldr	r3, [sp, #4]
 8024f5e:	f8db 2000 	ldr.w	r2, [fp]
 8024f62:	4403      	add	r3, r0
 8024f64:	4682      	mov	sl, r0
 8024f66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8024f6a:	9305      	str	r3, [sp, #20]
 8024f6c:	1c93      	adds	r3, r2, #2
 8024f6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8024f72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8024f76:	32fe      	adds	r2, #254	; 0xfe
 8024f78:	18d1      	adds	r1, r2, r3
 8024f7a:	461f      	mov	r7, r3
 8024f7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8024f80:	9100      	str	r1, [sp, #0]
 8024f82:	2830      	cmp	r0, #48	; 0x30
 8024f84:	d0f8      	beq.n	8024f78 <__gethex+0x3c>
 8024f86:	f7ff ffc3 	bl	8024f10 <__hexdig_fun>
 8024f8a:	4604      	mov	r4, r0
 8024f8c:	2800      	cmp	r0, #0
 8024f8e:	d13a      	bne.n	8025006 <__gethex+0xca>
 8024f90:	9901      	ldr	r1, [sp, #4]
 8024f92:	4652      	mov	r2, sl
 8024f94:	4638      	mov	r0, r7
 8024f96:	f7fe f8b7 	bl	8023108 <strncmp>
 8024f9a:	4605      	mov	r5, r0
 8024f9c:	2800      	cmp	r0, #0
 8024f9e:	d168      	bne.n	8025072 <__gethex+0x136>
 8024fa0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8024fa4:	eb07 060a 	add.w	r6, r7, sl
 8024fa8:	f7ff ffb2 	bl	8024f10 <__hexdig_fun>
 8024fac:	2800      	cmp	r0, #0
 8024fae:	d062      	beq.n	8025076 <__gethex+0x13a>
 8024fb0:	4633      	mov	r3, r6
 8024fb2:	7818      	ldrb	r0, [r3, #0]
 8024fb4:	2830      	cmp	r0, #48	; 0x30
 8024fb6:	461f      	mov	r7, r3
 8024fb8:	f103 0301 	add.w	r3, r3, #1
 8024fbc:	d0f9      	beq.n	8024fb2 <__gethex+0x76>
 8024fbe:	f7ff ffa7 	bl	8024f10 <__hexdig_fun>
 8024fc2:	2301      	movs	r3, #1
 8024fc4:	fab0 f480 	clz	r4, r0
 8024fc8:	0964      	lsrs	r4, r4, #5
 8024fca:	4635      	mov	r5, r6
 8024fcc:	9300      	str	r3, [sp, #0]
 8024fce:	463a      	mov	r2, r7
 8024fd0:	4616      	mov	r6, r2
 8024fd2:	3201      	adds	r2, #1
 8024fd4:	7830      	ldrb	r0, [r6, #0]
 8024fd6:	f7ff ff9b 	bl	8024f10 <__hexdig_fun>
 8024fda:	2800      	cmp	r0, #0
 8024fdc:	d1f8      	bne.n	8024fd0 <__gethex+0x94>
 8024fde:	9901      	ldr	r1, [sp, #4]
 8024fe0:	4652      	mov	r2, sl
 8024fe2:	4630      	mov	r0, r6
 8024fe4:	f7fe f890 	bl	8023108 <strncmp>
 8024fe8:	b980      	cbnz	r0, 802500c <__gethex+0xd0>
 8024fea:	b94d      	cbnz	r5, 8025000 <__gethex+0xc4>
 8024fec:	eb06 050a 	add.w	r5, r6, sl
 8024ff0:	462a      	mov	r2, r5
 8024ff2:	4616      	mov	r6, r2
 8024ff4:	3201      	adds	r2, #1
 8024ff6:	7830      	ldrb	r0, [r6, #0]
 8024ff8:	f7ff ff8a 	bl	8024f10 <__hexdig_fun>
 8024ffc:	2800      	cmp	r0, #0
 8024ffe:	d1f8      	bne.n	8024ff2 <__gethex+0xb6>
 8025000:	1bad      	subs	r5, r5, r6
 8025002:	00ad      	lsls	r5, r5, #2
 8025004:	e004      	b.n	8025010 <__gethex+0xd4>
 8025006:	2400      	movs	r4, #0
 8025008:	4625      	mov	r5, r4
 802500a:	e7e0      	b.n	8024fce <__gethex+0x92>
 802500c:	2d00      	cmp	r5, #0
 802500e:	d1f7      	bne.n	8025000 <__gethex+0xc4>
 8025010:	7833      	ldrb	r3, [r6, #0]
 8025012:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8025016:	2b50      	cmp	r3, #80	; 0x50
 8025018:	d13b      	bne.n	8025092 <__gethex+0x156>
 802501a:	7873      	ldrb	r3, [r6, #1]
 802501c:	2b2b      	cmp	r3, #43	; 0x2b
 802501e:	d02c      	beq.n	802507a <__gethex+0x13e>
 8025020:	2b2d      	cmp	r3, #45	; 0x2d
 8025022:	d02e      	beq.n	8025082 <__gethex+0x146>
 8025024:	1c71      	adds	r1, r6, #1
 8025026:	f04f 0900 	mov.w	r9, #0
 802502a:	7808      	ldrb	r0, [r1, #0]
 802502c:	f7ff ff70 	bl	8024f10 <__hexdig_fun>
 8025030:	1e43      	subs	r3, r0, #1
 8025032:	b2db      	uxtb	r3, r3
 8025034:	2b18      	cmp	r3, #24
 8025036:	d82c      	bhi.n	8025092 <__gethex+0x156>
 8025038:	f1a0 0210 	sub.w	r2, r0, #16
 802503c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025040:	f7ff ff66 	bl	8024f10 <__hexdig_fun>
 8025044:	1e43      	subs	r3, r0, #1
 8025046:	b2db      	uxtb	r3, r3
 8025048:	2b18      	cmp	r3, #24
 802504a:	d91d      	bls.n	8025088 <__gethex+0x14c>
 802504c:	f1b9 0f00 	cmp.w	r9, #0
 8025050:	d000      	beq.n	8025054 <__gethex+0x118>
 8025052:	4252      	negs	r2, r2
 8025054:	4415      	add	r5, r2
 8025056:	f8cb 1000 	str.w	r1, [fp]
 802505a:	b1e4      	cbz	r4, 8025096 <__gethex+0x15a>
 802505c:	9b00      	ldr	r3, [sp, #0]
 802505e:	2b00      	cmp	r3, #0
 8025060:	bf14      	ite	ne
 8025062:	2700      	movne	r7, #0
 8025064:	2706      	moveq	r7, #6
 8025066:	4638      	mov	r0, r7
 8025068:	b009      	add	sp, #36	; 0x24
 802506a:	ecbd 8b02 	vpop	{d8}
 802506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025072:	463e      	mov	r6, r7
 8025074:	4625      	mov	r5, r4
 8025076:	2401      	movs	r4, #1
 8025078:	e7ca      	b.n	8025010 <__gethex+0xd4>
 802507a:	f04f 0900 	mov.w	r9, #0
 802507e:	1cb1      	adds	r1, r6, #2
 8025080:	e7d3      	b.n	802502a <__gethex+0xee>
 8025082:	f04f 0901 	mov.w	r9, #1
 8025086:	e7fa      	b.n	802507e <__gethex+0x142>
 8025088:	230a      	movs	r3, #10
 802508a:	fb03 0202 	mla	r2, r3, r2, r0
 802508e:	3a10      	subs	r2, #16
 8025090:	e7d4      	b.n	802503c <__gethex+0x100>
 8025092:	4631      	mov	r1, r6
 8025094:	e7df      	b.n	8025056 <__gethex+0x11a>
 8025096:	1bf3      	subs	r3, r6, r7
 8025098:	3b01      	subs	r3, #1
 802509a:	4621      	mov	r1, r4
 802509c:	2b07      	cmp	r3, #7
 802509e:	dc0b      	bgt.n	80250b8 <__gethex+0x17c>
 80250a0:	ee18 0a10 	vmov	r0, s16
 80250a4:	f000 faec 	bl	8025680 <_Balloc>
 80250a8:	4604      	mov	r4, r0
 80250aa:	b940      	cbnz	r0, 80250be <__gethex+0x182>
 80250ac:	4b5d      	ldr	r3, [pc, #372]	; (8025224 <__gethex+0x2e8>)
 80250ae:	4602      	mov	r2, r0
 80250b0:	21de      	movs	r1, #222	; 0xde
 80250b2:	485d      	ldr	r0, [pc, #372]	; (8025228 <__gethex+0x2ec>)
 80250b4:	f7fe ffdc 	bl	8024070 <__assert_func>
 80250b8:	3101      	adds	r1, #1
 80250ba:	105b      	asrs	r3, r3, #1
 80250bc:	e7ee      	b.n	802509c <__gethex+0x160>
 80250be:	f100 0914 	add.w	r9, r0, #20
 80250c2:	f04f 0b00 	mov.w	fp, #0
 80250c6:	f1ca 0301 	rsb	r3, sl, #1
 80250ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80250ce:	f8cd b000 	str.w	fp, [sp]
 80250d2:	9306      	str	r3, [sp, #24]
 80250d4:	42b7      	cmp	r7, r6
 80250d6:	d340      	bcc.n	802515a <__gethex+0x21e>
 80250d8:	9802      	ldr	r0, [sp, #8]
 80250da:	9b00      	ldr	r3, [sp, #0]
 80250dc:	f840 3b04 	str.w	r3, [r0], #4
 80250e0:	eba0 0009 	sub.w	r0, r0, r9
 80250e4:	1080      	asrs	r0, r0, #2
 80250e6:	0146      	lsls	r6, r0, #5
 80250e8:	6120      	str	r0, [r4, #16]
 80250ea:	4618      	mov	r0, r3
 80250ec:	f000 fbba 	bl	8025864 <__hi0bits>
 80250f0:	1a30      	subs	r0, r6, r0
 80250f2:	f8d8 6000 	ldr.w	r6, [r8]
 80250f6:	42b0      	cmp	r0, r6
 80250f8:	dd63      	ble.n	80251c2 <__gethex+0x286>
 80250fa:	1b87      	subs	r7, r0, r6
 80250fc:	4639      	mov	r1, r7
 80250fe:	4620      	mov	r0, r4
 8025100:	f000 ff5b 	bl	8025fba <__any_on>
 8025104:	4682      	mov	sl, r0
 8025106:	b1a8      	cbz	r0, 8025134 <__gethex+0x1f8>
 8025108:	1e7b      	subs	r3, r7, #1
 802510a:	1159      	asrs	r1, r3, #5
 802510c:	f003 021f 	and.w	r2, r3, #31
 8025110:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8025114:	f04f 0a01 	mov.w	sl, #1
 8025118:	fa0a f202 	lsl.w	r2, sl, r2
 802511c:	420a      	tst	r2, r1
 802511e:	d009      	beq.n	8025134 <__gethex+0x1f8>
 8025120:	4553      	cmp	r3, sl
 8025122:	dd05      	ble.n	8025130 <__gethex+0x1f4>
 8025124:	1eb9      	subs	r1, r7, #2
 8025126:	4620      	mov	r0, r4
 8025128:	f000 ff47 	bl	8025fba <__any_on>
 802512c:	2800      	cmp	r0, #0
 802512e:	d145      	bne.n	80251bc <__gethex+0x280>
 8025130:	f04f 0a02 	mov.w	sl, #2
 8025134:	4639      	mov	r1, r7
 8025136:	4620      	mov	r0, r4
 8025138:	f7ff fe98 	bl	8024e6c <rshift>
 802513c:	443d      	add	r5, r7
 802513e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025142:	42ab      	cmp	r3, r5
 8025144:	da4c      	bge.n	80251e0 <__gethex+0x2a4>
 8025146:	ee18 0a10 	vmov	r0, s16
 802514a:	4621      	mov	r1, r4
 802514c:	f000 fad8 	bl	8025700 <_Bfree>
 8025150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025152:	2300      	movs	r3, #0
 8025154:	6013      	str	r3, [r2, #0]
 8025156:	27a3      	movs	r7, #163	; 0xa3
 8025158:	e785      	b.n	8025066 <__gethex+0x12a>
 802515a:	1e73      	subs	r3, r6, #1
 802515c:	9a05      	ldr	r2, [sp, #20]
 802515e:	9303      	str	r3, [sp, #12]
 8025160:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8025164:	4293      	cmp	r3, r2
 8025166:	d019      	beq.n	802519c <__gethex+0x260>
 8025168:	f1bb 0f20 	cmp.w	fp, #32
 802516c:	d107      	bne.n	802517e <__gethex+0x242>
 802516e:	9b02      	ldr	r3, [sp, #8]
 8025170:	9a00      	ldr	r2, [sp, #0]
 8025172:	f843 2b04 	str.w	r2, [r3], #4
 8025176:	9302      	str	r3, [sp, #8]
 8025178:	2300      	movs	r3, #0
 802517a:	9300      	str	r3, [sp, #0]
 802517c:	469b      	mov	fp, r3
 802517e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8025182:	f7ff fec5 	bl	8024f10 <__hexdig_fun>
 8025186:	9b00      	ldr	r3, [sp, #0]
 8025188:	f000 000f 	and.w	r0, r0, #15
 802518c:	fa00 f00b 	lsl.w	r0, r0, fp
 8025190:	4303      	orrs	r3, r0
 8025192:	9300      	str	r3, [sp, #0]
 8025194:	f10b 0b04 	add.w	fp, fp, #4
 8025198:	9b03      	ldr	r3, [sp, #12]
 802519a:	e00d      	b.n	80251b8 <__gethex+0x27c>
 802519c:	9b03      	ldr	r3, [sp, #12]
 802519e:	9a06      	ldr	r2, [sp, #24]
 80251a0:	4413      	add	r3, r2
 80251a2:	42bb      	cmp	r3, r7
 80251a4:	d3e0      	bcc.n	8025168 <__gethex+0x22c>
 80251a6:	4618      	mov	r0, r3
 80251a8:	9901      	ldr	r1, [sp, #4]
 80251aa:	9307      	str	r3, [sp, #28]
 80251ac:	4652      	mov	r2, sl
 80251ae:	f7fd ffab 	bl	8023108 <strncmp>
 80251b2:	9b07      	ldr	r3, [sp, #28]
 80251b4:	2800      	cmp	r0, #0
 80251b6:	d1d7      	bne.n	8025168 <__gethex+0x22c>
 80251b8:	461e      	mov	r6, r3
 80251ba:	e78b      	b.n	80250d4 <__gethex+0x198>
 80251bc:	f04f 0a03 	mov.w	sl, #3
 80251c0:	e7b8      	b.n	8025134 <__gethex+0x1f8>
 80251c2:	da0a      	bge.n	80251da <__gethex+0x29e>
 80251c4:	1a37      	subs	r7, r6, r0
 80251c6:	4621      	mov	r1, r4
 80251c8:	ee18 0a10 	vmov	r0, s16
 80251cc:	463a      	mov	r2, r7
 80251ce:	f000 fcb3 	bl	8025b38 <__lshift>
 80251d2:	1bed      	subs	r5, r5, r7
 80251d4:	4604      	mov	r4, r0
 80251d6:	f100 0914 	add.w	r9, r0, #20
 80251da:	f04f 0a00 	mov.w	sl, #0
 80251de:	e7ae      	b.n	802513e <__gethex+0x202>
 80251e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80251e4:	42a8      	cmp	r0, r5
 80251e6:	dd72      	ble.n	80252ce <__gethex+0x392>
 80251e8:	1b45      	subs	r5, r0, r5
 80251ea:	42ae      	cmp	r6, r5
 80251ec:	dc36      	bgt.n	802525c <__gethex+0x320>
 80251ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80251f2:	2b02      	cmp	r3, #2
 80251f4:	d02a      	beq.n	802524c <__gethex+0x310>
 80251f6:	2b03      	cmp	r3, #3
 80251f8:	d02c      	beq.n	8025254 <__gethex+0x318>
 80251fa:	2b01      	cmp	r3, #1
 80251fc:	d11c      	bne.n	8025238 <__gethex+0x2fc>
 80251fe:	42ae      	cmp	r6, r5
 8025200:	d11a      	bne.n	8025238 <__gethex+0x2fc>
 8025202:	2e01      	cmp	r6, #1
 8025204:	d112      	bne.n	802522c <__gethex+0x2f0>
 8025206:	9a04      	ldr	r2, [sp, #16]
 8025208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802520c:	6013      	str	r3, [r2, #0]
 802520e:	2301      	movs	r3, #1
 8025210:	6123      	str	r3, [r4, #16]
 8025212:	f8c9 3000 	str.w	r3, [r9]
 8025216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025218:	2762      	movs	r7, #98	; 0x62
 802521a:	601c      	str	r4, [r3, #0]
 802521c:	e723      	b.n	8025066 <__gethex+0x12a>
 802521e:	bf00      	nop
 8025220:	08028050 	.word	0x08028050
 8025224:	08027fd8 	.word	0x08027fd8
 8025228:	08027fe9 	.word	0x08027fe9
 802522c:	1e71      	subs	r1, r6, #1
 802522e:	4620      	mov	r0, r4
 8025230:	f000 fec3 	bl	8025fba <__any_on>
 8025234:	2800      	cmp	r0, #0
 8025236:	d1e6      	bne.n	8025206 <__gethex+0x2ca>
 8025238:	ee18 0a10 	vmov	r0, s16
 802523c:	4621      	mov	r1, r4
 802523e:	f000 fa5f 	bl	8025700 <_Bfree>
 8025242:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025244:	2300      	movs	r3, #0
 8025246:	6013      	str	r3, [r2, #0]
 8025248:	2750      	movs	r7, #80	; 0x50
 802524a:	e70c      	b.n	8025066 <__gethex+0x12a>
 802524c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802524e:	2b00      	cmp	r3, #0
 8025250:	d1f2      	bne.n	8025238 <__gethex+0x2fc>
 8025252:	e7d8      	b.n	8025206 <__gethex+0x2ca>
 8025254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025256:	2b00      	cmp	r3, #0
 8025258:	d1d5      	bne.n	8025206 <__gethex+0x2ca>
 802525a:	e7ed      	b.n	8025238 <__gethex+0x2fc>
 802525c:	1e6f      	subs	r7, r5, #1
 802525e:	f1ba 0f00 	cmp.w	sl, #0
 8025262:	d131      	bne.n	80252c8 <__gethex+0x38c>
 8025264:	b127      	cbz	r7, 8025270 <__gethex+0x334>
 8025266:	4639      	mov	r1, r7
 8025268:	4620      	mov	r0, r4
 802526a:	f000 fea6 	bl	8025fba <__any_on>
 802526e:	4682      	mov	sl, r0
 8025270:	117b      	asrs	r3, r7, #5
 8025272:	2101      	movs	r1, #1
 8025274:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8025278:	f007 071f 	and.w	r7, r7, #31
 802527c:	fa01 f707 	lsl.w	r7, r1, r7
 8025280:	421f      	tst	r7, r3
 8025282:	4629      	mov	r1, r5
 8025284:	4620      	mov	r0, r4
 8025286:	bf18      	it	ne
 8025288:	f04a 0a02 	orrne.w	sl, sl, #2
 802528c:	1b76      	subs	r6, r6, r5
 802528e:	f7ff fded 	bl	8024e6c <rshift>
 8025292:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025296:	2702      	movs	r7, #2
 8025298:	f1ba 0f00 	cmp.w	sl, #0
 802529c:	d048      	beq.n	8025330 <__gethex+0x3f4>
 802529e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80252a2:	2b02      	cmp	r3, #2
 80252a4:	d015      	beq.n	80252d2 <__gethex+0x396>
 80252a6:	2b03      	cmp	r3, #3
 80252a8:	d017      	beq.n	80252da <__gethex+0x39e>
 80252aa:	2b01      	cmp	r3, #1
 80252ac:	d109      	bne.n	80252c2 <__gethex+0x386>
 80252ae:	f01a 0f02 	tst.w	sl, #2
 80252b2:	d006      	beq.n	80252c2 <__gethex+0x386>
 80252b4:	f8d9 0000 	ldr.w	r0, [r9]
 80252b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80252bc:	f01a 0f01 	tst.w	sl, #1
 80252c0:	d10e      	bne.n	80252e0 <__gethex+0x3a4>
 80252c2:	f047 0710 	orr.w	r7, r7, #16
 80252c6:	e033      	b.n	8025330 <__gethex+0x3f4>
 80252c8:	f04f 0a01 	mov.w	sl, #1
 80252cc:	e7d0      	b.n	8025270 <__gethex+0x334>
 80252ce:	2701      	movs	r7, #1
 80252d0:	e7e2      	b.n	8025298 <__gethex+0x35c>
 80252d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80252d4:	f1c3 0301 	rsb	r3, r3, #1
 80252d8:	9315      	str	r3, [sp, #84]	; 0x54
 80252da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80252dc:	2b00      	cmp	r3, #0
 80252de:	d0f0      	beq.n	80252c2 <__gethex+0x386>
 80252e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80252e4:	f104 0314 	add.w	r3, r4, #20
 80252e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80252ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80252f0:	f04f 0c00 	mov.w	ip, #0
 80252f4:	4618      	mov	r0, r3
 80252f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80252fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80252fe:	d01c      	beq.n	802533a <__gethex+0x3fe>
 8025300:	3201      	adds	r2, #1
 8025302:	6002      	str	r2, [r0, #0]
 8025304:	2f02      	cmp	r7, #2
 8025306:	f104 0314 	add.w	r3, r4, #20
 802530a:	d13f      	bne.n	802538c <__gethex+0x450>
 802530c:	f8d8 2000 	ldr.w	r2, [r8]
 8025310:	3a01      	subs	r2, #1
 8025312:	42b2      	cmp	r2, r6
 8025314:	d10a      	bne.n	802532c <__gethex+0x3f0>
 8025316:	1171      	asrs	r1, r6, #5
 8025318:	2201      	movs	r2, #1
 802531a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802531e:	f006 061f 	and.w	r6, r6, #31
 8025322:	fa02 f606 	lsl.w	r6, r2, r6
 8025326:	421e      	tst	r6, r3
 8025328:	bf18      	it	ne
 802532a:	4617      	movne	r7, r2
 802532c:	f047 0720 	orr.w	r7, r7, #32
 8025330:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025332:	601c      	str	r4, [r3, #0]
 8025334:	9b04      	ldr	r3, [sp, #16]
 8025336:	601d      	str	r5, [r3, #0]
 8025338:	e695      	b.n	8025066 <__gethex+0x12a>
 802533a:	4299      	cmp	r1, r3
 802533c:	f843 cc04 	str.w	ip, [r3, #-4]
 8025340:	d8d8      	bhi.n	80252f4 <__gethex+0x3b8>
 8025342:	68a3      	ldr	r3, [r4, #8]
 8025344:	459b      	cmp	fp, r3
 8025346:	db19      	blt.n	802537c <__gethex+0x440>
 8025348:	6861      	ldr	r1, [r4, #4]
 802534a:	ee18 0a10 	vmov	r0, s16
 802534e:	3101      	adds	r1, #1
 8025350:	f000 f996 	bl	8025680 <_Balloc>
 8025354:	4681      	mov	r9, r0
 8025356:	b918      	cbnz	r0, 8025360 <__gethex+0x424>
 8025358:	4b1a      	ldr	r3, [pc, #104]	; (80253c4 <__gethex+0x488>)
 802535a:	4602      	mov	r2, r0
 802535c:	2184      	movs	r1, #132	; 0x84
 802535e:	e6a8      	b.n	80250b2 <__gethex+0x176>
 8025360:	6922      	ldr	r2, [r4, #16]
 8025362:	3202      	adds	r2, #2
 8025364:	f104 010c 	add.w	r1, r4, #12
 8025368:	0092      	lsls	r2, r2, #2
 802536a:	300c      	adds	r0, #12
 802536c:	f7fc fdd2 	bl	8021f14 <memcpy>
 8025370:	4621      	mov	r1, r4
 8025372:	ee18 0a10 	vmov	r0, s16
 8025376:	f000 f9c3 	bl	8025700 <_Bfree>
 802537a:	464c      	mov	r4, r9
 802537c:	6923      	ldr	r3, [r4, #16]
 802537e:	1c5a      	adds	r2, r3, #1
 8025380:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8025384:	6122      	str	r2, [r4, #16]
 8025386:	2201      	movs	r2, #1
 8025388:	615a      	str	r2, [r3, #20]
 802538a:	e7bb      	b.n	8025304 <__gethex+0x3c8>
 802538c:	6922      	ldr	r2, [r4, #16]
 802538e:	455a      	cmp	r2, fp
 8025390:	dd0b      	ble.n	80253aa <__gethex+0x46e>
 8025392:	2101      	movs	r1, #1
 8025394:	4620      	mov	r0, r4
 8025396:	f7ff fd69 	bl	8024e6c <rshift>
 802539a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802539e:	3501      	adds	r5, #1
 80253a0:	42ab      	cmp	r3, r5
 80253a2:	f6ff aed0 	blt.w	8025146 <__gethex+0x20a>
 80253a6:	2701      	movs	r7, #1
 80253a8:	e7c0      	b.n	802532c <__gethex+0x3f0>
 80253aa:	f016 061f 	ands.w	r6, r6, #31
 80253ae:	d0fa      	beq.n	80253a6 <__gethex+0x46a>
 80253b0:	4453      	add	r3, sl
 80253b2:	f1c6 0620 	rsb	r6, r6, #32
 80253b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80253ba:	f000 fa53 	bl	8025864 <__hi0bits>
 80253be:	42b0      	cmp	r0, r6
 80253c0:	dbe7      	blt.n	8025392 <__gethex+0x456>
 80253c2:	e7f0      	b.n	80253a6 <__gethex+0x46a>
 80253c4:	08027fd8 	.word	0x08027fd8

080253c8 <L_shift>:
 80253c8:	f1c2 0208 	rsb	r2, r2, #8
 80253cc:	0092      	lsls	r2, r2, #2
 80253ce:	b570      	push	{r4, r5, r6, lr}
 80253d0:	f1c2 0620 	rsb	r6, r2, #32
 80253d4:	6843      	ldr	r3, [r0, #4]
 80253d6:	6804      	ldr	r4, [r0, #0]
 80253d8:	fa03 f506 	lsl.w	r5, r3, r6
 80253dc:	432c      	orrs	r4, r5
 80253de:	40d3      	lsrs	r3, r2
 80253e0:	6004      	str	r4, [r0, #0]
 80253e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80253e6:	4288      	cmp	r0, r1
 80253e8:	d3f4      	bcc.n	80253d4 <L_shift+0xc>
 80253ea:	bd70      	pop	{r4, r5, r6, pc}

080253ec <__match>:
 80253ec:	b530      	push	{r4, r5, lr}
 80253ee:	6803      	ldr	r3, [r0, #0]
 80253f0:	3301      	adds	r3, #1
 80253f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80253f6:	b914      	cbnz	r4, 80253fe <__match+0x12>
 80253f8:	6003      	str	r3, [r0, #0]
 80253fa:	2001      	movs	r0, #1
 80253fc:	bd30      	pop	{r4, r5, pc}
 80253fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025402:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8025406:	2d19      	cmp	r5, #25
 8025408:	bf98      	it	ls
 802540a:	3220      	addls	r2, #32
 802540c:	42a2      	cmp	r2, r4
 802540e:	d0f0      	beq.n	80253f2 <__match+0x6>
 8025410:	2000      	movs	r0, #0
 8025412:	e7f3      	b.n	80253fc <__match+0x10>

08025414 <__hexnan>:
 8025414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025418:	680b      	ldr	r3, [r1, #0]
 802541a:	115e      	asrs	r6, r3, #5
 802541c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8025420:	f013 031f 	ands.w	r3, r3, #31
 8025424:	b087      	sub	sp, #28
 8025426:	bf18      	it	ne
 8025428:	3604      	addne	r6, #4
 802542a:	2500      	movs	r5, #0
 802542c:	1f37      	subs	r7, r6, #4
 802542e:	4690      	mov	r8, r2
 8025430:	6802      	ldr	r2, [r0, #0]
 8025432:	9301      	str	r3, [sp, #4]
 8025434:	4682      	mov	sl, r0
 8025436:	f846 5c04 	str.w	r5, [r6, #-4]
 802543a:	46b9      	mov	r9, r7
 802543c:	463c      	mov	r4, r7
 802543e:	9502      	str	r5, [sp, #8]
 8025440:	46ab      	mov	fp, r5
 8025442:	7851      	ldrb	r1, [r2, #1]
 8025444:	1c53      	adds	r3, r2, #1
 8025446:	9303      	str	r3, [sp, #12]
 8025448:	b341      	cbz	r1, 802549c <__hexnan+0x88>
 802544a:	4608      	mov	r0, r1
 802544c:	9205      	str	r2, [sp, #20]
 802544e:	9104      	str	r1, [sp, #16]
 8025450:	f7ff fd5e 	bl	8024f10 <__hexdig_fun>
 8025454:	2800      	cmp	r0, #0
 8025456:	d14f      	bne.n	80254f8 <__hexnan+0xe4>
 8025458:	9904      	ldr	r1, [sp, #16]
 802545a:	9a05      	ldr	r2, [sp, #20]
 802545c:	2920      	cmp	r1, #32
 802545e:	d818      	bhi.n	8025492 <__hexnan+0x7e>
 8025460:	9b02      	ldr	r3, [sp, #8]
 8025462:	459b      	cmp	fp, r3
 8025464:	dd13      	ble.n	802548e <__hexnan+0x7a>
 8025466:	454c      	cmp	r4, r9
 8025468:	d206      	bcs.n	8025478 <__hexnan+0x64>
 802546a:	2d07      	cmp	r5, #7
 802546c:	dc04      	bgt.n	8025478 <__hexnan+0x64>
 802546e:	462a      	mov	r2, r5
 8025470:	4649      	mov	r1, r9
 8025472:	4620      	mov	r0, r4
 8025474:	f7ff ffa8 	bl	80253c8 <L_shift>
 8025478:	4544      	cmp	r4, r8
 802547a:	d950      	bls.n	802551e <__hexnan+0x10a>
 802547c:	2300      	movs	r3, #0
 802547e:	f1a4 0904 	sub.w	r9, r4, #4
 8025482:	f844 3c04 	str.w	r3, [r4, #-4]
 8025486:	f8cd b008 	str.w	fp, [sp, #8]
 802548a:	464c      	mov	r4, r9
 802548c:	461d      	mov	r5, r3
 802548e:	9a03      	ldr	r2, [sp, #12]
 8025490:	e7d7      	b.n	8025442 <__hexnan+0x2e>
 8025492:	2929      	cmp	r1, #41	; 0x29
 8025494:	d156      	bne.n	8025544 <__hexnan+0x130>
 8025496:	3202      	adds	r2, #2
 8025498:	f8ca 2000 	str.w	r2, [sl]
 802549c:	f1bb 0f00 	cmp.w	fp, #0
 80254a0:	d050      	beq.n	8025544 <__hexnan+0x130>
 80254a2:	454c      	cmp	r4, r9
 80254a4:	d206      	bcs.n	80254b4 <__hexnan+0xa0>
 80254a6:	2d07      	cmp	r5, #7
 80254a8:	dc04      	bgt.n	80254b4 <__hexnan+0xa0>
 80254aa:	462a      	mov	r2, r5
 80254ac:	4649      	mov	r1, r9
 80254ae:	4620      	mov	r0, r4
 80254b0:	f7ff ff8a 	bl	80253c8 <L_shift>
 80254b4:	4544      	cmp	r4, r8
 80254b6:	d934      	bls.n	8025522 <__hexnan+0x10e>
 80254b8:	f1a8 0204 	sub.w	r2, r8, #4
 80254bc:	4623      	mov	r3, r4
 80254be:	f853 1b04 	ldr.w	r1, [r3], #4
 80254c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80254c6:	429f      	cmp	r7, r3
 80254c8:	d2f9      	bcs.n	80254be <__hexnan+0xaa>
 80254ca:	1b3b      	subs	r3, r7, r4
 80254cc:	f023 0303 	bic.w	r3, r3, #3
 80254d0:	3304      	adds	r3, #4
 80254d2:	3401      	adds	r4, #1
 80254d4:	3e03      	subs	r6, #3
 80254d6:	42b4      	cmp	r4, r6
 80254d8:	bf88      	it	hi
 80254da:	2304      	movhi	r3, #4
 80254dc:	4443      	add	r3, r8
 80254de:	2200      	movs	r2, #0
 80254e0:	f843 2b04 	str.w	r2, [r3], #4
 80254e4:	429f      	cmp	r7, r3
 80254e6:	d2fb      	bcs.n	80254e0 <__hexnan+0xcc>
 80254e8:	683b      	ldr	r3, [r7, #0]
 80254ea:	b91b      	cbnz	r3, 80254f4 <__hexnan+0xe0>
 80254ec:	4547      	cmp	r7, r8
 80254ee:	d127      	bne.n	8025540 <__hexnan+0x12c>
 80254f0:	2301      	movs	r3, #1
 80254f2:	603b      	str	r3, [r7, #0]
 80254f4:	2005      	movs	r0, #5
 80254f6:	e026      	b.n	8025546 <__hexnan+0x132>
 80254f8:	3501      	adds	r5, #1
 80254fa:	2d08      	cmp	r5, #8
 80254fc:	f10b 0b01 	add.w	fp, fp, #1
 8025500:	dd06      	ble.n	8025510 <__hexnan+0xfc>
 8025502:	4544      	cmp	r4, r8
 8025504:	d9c3      	bls.n	802548e <__hexnan+0x7a>
 8025506:	2300      	movs	r3, #0
 8025508:	f844 3c04 	str.w	r3, [r4, #-4]
 802550c:	2501      	movs	r5, #1
 802550e:	3c04      	subs	r4, #4
 8025510:	6822      	ldr	r2, [r4, #0]
 8025512:	f000 000f 	and.w	r0, r0, #15
 8025516:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802551a:	6022      	str	r2, [r4, #0]
 802551c:	e7b7      	b.n	802548e <__hexnan+0x7a>
 802551e:	2508      	movs	r5, #8
 8025520:	e7b5      	b.n	802548e <__hexnan+0x7a>
 8025522:	9b01      	ldr	r3, [sp, #4]
 8025524:	2b00      	cmp	r3, #0
 8025526:	d0df      	beq.n	80254e8 <__hexnan+0xd4>
 8025528:	f04f 32ff 	mov.w	r2, #4294967295
 802552c:	f1c3 0320 	rsb	r3, r3, #32
 8025530:	fa22 f303 	lsr.w	r3, r2, r3
 8025534:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8025538:	401a      	ands	r2, r3
 802553a:	f846 2c04 	str.w	r2, [r6, #-4]
 802553e:	e7d3      	b.n	80254e8 <__hexnan+0xd4>
 8025540:	3f04      	subs	r7, #4
 8025542:	e7d1      	b.n	80254e8 <__hexnan+0xd4>
 8025544:	2004      	movs	r0, #4
 8025546:	b007      	add	sp, #28
 8025548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802554c <_localeconv_r>:
 802554c:	4800      	ldr	r0, [pc, #0]	; (8025550 <_localeconv_r+0x4>)
 802554e:	4770      	bx	lr
 8025550:	24000450 	.word	0x24000450

08025554 <_lseek_r>:
 8025554:	b538      	push	{r3, r4, r5, lr}
 8025556:	4d07      	ldr	r5, [pc, #28]	; (8025574 <_lseek_r+0x20>)
 8025558:	4604      	mov	r4, r0
 802555a:	4608      	mov	r0, r1
 802555c:	4611      	mov	r1, r2
 802555e:	2200      	movs	r2, #0
 8025560:	602a      	str	r2, [r5, #0]
 8025562:	461a      	mov	r2, r3
 8025564:	f7e2 fcac 	bl	8007ec0 <_lseek>
 8025568:	1c43      	adds	r3, r0, #1
 802556a:	d102      	bne.n	8025572 <_lseek_r+0x1e>
 802556c:	682b      	ldr	r3, [r5, #0]
 802556e:	b103      	cbz	r3, 8025572 <_lseek_r+0x1e>
 8025570:	6023      	str	r3, [r4, #0]
 8025572:	bd38      	pop	{r3, r4, r5, pc}
 8025574:	24009044 	.word	0x24009044

08025578 <__swhatbuf_r>:
 8025578:	b570      	push	{r4, r5, r6, lr}
 802557a:	460e      	mov	r6, r1
 802557c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025580:	2900      	cmp	r1, #0
 8025582:	b096      	sub	sp, #88	; 0x58
 8025584:	4614      	mov	r4, r2
 8025586:	461d      	mov	r5, r3
 8025588:	da08      	bge.n	802559c <__swhatbuf_r+0x24>
 802558a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802558e:	2200      	movs	r2, #0
 8025590:	602a      	str	r2, [r5, #0]
 8025592:	061a      	lsls	r2, r3, #24
 8025594:	d410      	bmi.n	80255b8 <__swhatbuf_r+0x40>
 8025596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802559a:	e00e      	b.n	80255ba <__swhatbuf_r+0x42>
 802559c:	466a      	mov	r2, sp
 802559e:	f001 f827 	bl	80265f0 <_fstat_r>
 80255a2:	2800      	cmp	r0, #0
 80255a4:	dbf1      	blt.n	802558a <__swhatbuf_r+0x12>
 80255a6:	9a01      	ldr	r2, [sp, #4]
 80255a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80255ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80255b0:	425a      	negs	r2, r3
 80255b2:	415a      	adcs	r2, r3
 80255b4:	602a      	str	r2, [r5, #0]
 80255b6:	e7ee      	b.n	8025596 <__swhatbuf_r+0x1e>
 80255b8:	2340      	movs	r3, #64	; 0x40
 80255ba:	2000      	movs	r0, #0
 80255bc:	6023      	str	r3, [r4, #0]
 80255be:	b016      	add	sp, #88	; 0x58
 80255c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080255c4 <__smakebuf_r>:
 80255c4:	898b      	ldrh	r3, [r1, #12]
 80255c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80255c8:	079d      	lsls	r5, r3, #30
 80255ca:	4606      	mov	r6, r0
 80255cc:	460c      	mov	r4, r1
 80255ce:	d507      	bpl.n	80255e0 <__smakebuf_r+0x1c>
 80255d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80255d4:	6023      	str	r3, [r4, #0]
 80255d6:	6123      	str	r3, [r4, #16]
 80255d8:	2301      	movs	r3, #1
 80255da:	6163      	str	r3, [r4, #20]
 80255dc:	b002      	add	sp, #8
 80255de:	bd70      	pop	{r4, r5, r6, pc}
 80255e0:	ab01      	add	r3, sp, #4
 80255e2:	466a      	mov	r2, sp
 80255e4:	f7ff ffc8 	bl	8025578 <__swhatbuf_r>
 80255e8:	9900      	ldr	r1, [sp, #0]
 80255ea:	4605      	mov	r5, r0
 80255ec:	4630      	mov	r0, r6
 80255ee:	f7fc fd13 	bl	8022018 <_malloc_r>
 80255f2:	b948      	cbnz	r0, 8025608 <__smakebuf_r+0x44>
 80255f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80255f8:	059a      	lsls	r2, r3, #22
 80255fa:	d4ef      	bmi.n	80255dc <__smakebuf_r+0x18>
 80255fc:	f023 0303 	bic.w	r3, r3, #3
 8025600:	f043 0302 	orr.w	r3, r3, #2
 8025604:	81a3      	strh	r3, [r4, #12]
 8025606:	e7e3      	b.n	80255d0 <__smakebuf_r+0xc>
 8025608:	4b0d      	ldr	r3, [pc, #52]	; (8025640 <__smakebuf_r+0x7c>)
 802560a:	62b3      	str	r3, [r6, #40]	; 0x28
 802560c:	89a3      	ldrh	r3, [r4, #12]
 802560e:	6020      	str	r0, [r4, #0]
 8025610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025614:	81a3      	strh	r3, [r4, #12]
 8025616:	9b00      	ldr	r3, [sp, #0]
 8025618:	6163      	str	r3, [r4, #20]
 802561a:	9b01      	ldr	r3, [sp, #4]
 802561c:	6120      	str	r0, [r4, #16]
 802561e:	b15b      	cbz	r3, 8025638 <__smakebuf_r+0x74>
 8025620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025624:	4630      	mov	r0, r6
 8025626:	f000 fff5 	bl	8026614 <_isatty_r>
 802562a:	b128      	cbz	r0, 8025638 <__smakebuf_r+0x74>
 802562c:	89a3      	ldrh	r3, [r4, #12]
 802562e:	f023 0303 	bic.w	r3, r3, #3
 8025632:	f043 0301 	orr.w	r3, r3, #1
 8025636:	81a3      	strh	r3, [r4, #12]
 8025638:	89a0      	ldrh	r0, [r4, #12]
 802563a:	4305      	orrs	r5, r0
 802563c:	81a5      	strh	r5, [r4, #12]
 802563e:	e7cd      	b.n	80255dc <__smakebuf_r+0x18>
 8025640:	08021d11 	.word	0x08021d11

08025644 <__ascii_mbtowc>:
 8025644:	b082      	sub	sp, #8
 8025646:	b901      	cbnz	r1, 802564a <__ascii_mbtowc+0x6>
 8025648:	a901      	add	r1, sp, #4
 802564a:	b142      	cbz	r2, 802565e <__ascii_mbtowc+0x1a>
 802564c:	b14b      	cbz	r3, 8025662 <__ascii_mbtowc+0x1e>
 802564e:	7813      	ldrb	r3, [r2, #0]
 8025650:	600b      	str	r3, [r1, #0]
 8025652:	7812      	ldrb	r2, [r2, #0]
 8025654:	1e10      	subs	r0, r2, #0
 8025656:	bf18      	it	ne
 8025658:	2001      	movne	r0, #1
 802565a:	b002      	add	sp, #8
 802565c:	4770      	bx	lr
 802565e:	4610      	mov	r0, r2
 8025660:	e7fb      	b.n	802565a <__ascii_mbtowc+0x16>
 8025662:	f06f 0001 	mvn.w	r0, #1
 8025666:	e7f8      	b.n	802565a <__ascii_mbtowc+0x16>

08025668 <__malloc_lock>:
 8025668:	4801      	ldr	r0, [pc, #4]	; (8025670 <__malloc_lock+0x8>)
 802566a:	f7fc bc48 	b.w	8021efe <__retarget_lock_acquire_recursive>
 802566e:	bf00      	nop
 8025670:	24009038 	.word	0x24009038

08025674 <__malloc_unlock>:
 8025674:	4801      	ldr	r0, [pc, #4]	; (802567c <__malloc_unlock+0x8>)
 8025676:	f7fc bc43 	b.w	8021f00 <__retarget_lock_release_recursive>
 802567a:	bf00      	nop
 802567c:	24009038 	.word	0x24009038

08025680 <_Balloc>:
 8025680:	b570      	push	{r4, r5, r6, lr}
 8025682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025684:	4604      	mov	r4, r0
 8025686:	460d      	mov	r5, r1
 8025688:	b976      	cbnz	r6, 80256a8 <_Balloc+0x28>
 802568a:	2010      	movs	r0, #16
 802568c:	f7fc fc3a 	bl	8021f04 <malloc>
 8025690:	4602      	mov	r2, r0
 8025692:	6260      	str	r0, [r4, #36]	; 0x24
 8025694:	b920      	cbnz	r0, 80256a0 <_Balloc+0x20>
 8025696:	4b18      	ldr	r3, [pc, #96]	; (80256f8 <_Balloc+0x78>)
 8025698:	4818      	ldr	r0, [pc, #96]	; (80256fc <_Balloc+0x7c>)
 802569a:	2166      	movs	r1, #102	; 0x66
 802569c:	f7fe fce8 	bl	8024070 <__assert_func>
 80256a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80256a4:	6006      	str	r6, [r0, #0]
 80256a6:	60c6      	str	r6, [r0, #12]
 80256a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80256aa:	68f3      	ldr	r3, [r6, #12]
 80256ac:	b183      	cbz	r3, 80256d0 <_Balloc+0x50>
 80256ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80256b0:	68db      	ldr	r3, [r3, #12]
 80256b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80256b6:	b9b8      	cbnz	r0, 80256e8 <_Balloc+0x68>
 80256b8:	2101      	movs	r1, #1
 80256ba:	fa01 f605 	lsl.w	r6, r1, r5
 80256be:	1d72      	adds	r2, r6, #5
 80256c0:	0092      	lsls	r2, r2, #2
 80256c2:	4620      	mov	r0, r4
 80256c4:	f000 fc9a 	bl	8025ffc <_calloc_r>
 80256c8:	b160      	cbz	r0, 80256e4 <_Balloc+0x64>
 80256ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80256ce:	e00e      	b.n	80256ee <_Balloc+0x6e>
 80256d0:	2221      	movs	r2, #33	; 0x21
 80256d2:	2104      	movs	r1, #4
 80256d4:	4620      	mov	r0, r4
 80256d6:	f000 fc91 	bl	8025ffc <_calloc_r>
 80256da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80256dc:	60f0      	str	r0, [r6, #12]
 80256de:	68db      	ldr	r3, [r3, #12]
 80256e0:	2b00      	cmp	r3, #0
 80256e2:	d1e4      	bne.n	80256ae <_Balloc+0x2e>
 80256e4:	2000      	movs	r0, #0
 80256e6:	bd70      	pop	{r4, r5, r6, pc}
 80256e8:	6802      	ldr	r2, [r0, #0]
 80256ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80256ee:	2300      	movs	r3, #0
 80256f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80256f4:	e7f7      	b.n	80256e6 <_Balloc+0x66>
 80256f6:	bf00      	nop
 80256f8:	08027ec0 	.word	0x08027ec0
 80256fc:	08028064 	.word	0x08028064

08025700 <_Bfree>:
 8025700:	b570      	push	{r4, r5, r6, lr}
 8025702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025704:	4605      	mov	r5, r0
 8025706:	460c      	mov	r4, r1
 8025708:	b976      	cbnz	r6, 8025728 <_Bfree+0x28>
 802570a:	2010      	movs	r0, #16
 802570c:	f7fc fbfa 	bl	8021f04 <malloc>
 8025710:	4602      	mov	r2, r0
 8025712:	6268      	str	r0, [r5, #36]	; 0x24
 8025714:	b920      	cbnz	r0, 8025720 <_Bfree+0x20>
 8025716:	4b09      	ldr	r3, [pc, #36]	; (802573c <_Bfree+0x3c>)
 8025718:	4809      	ldr	r0, [pc, #36]	; (8025740 <_Bfree+0x40>)
 802571a:	218a      	movs	r1, #138	; 0x8a
 802571c:	f7fe fca8 	bl	8024070 <__assert_func>
 8025720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025724:	6006      	str	r6, [r0, #0]
 8025726:	60c6      	str	r6, [r0, #12]
 8025728:	b13c      	cbz	r4, 802573a <_Bfree+0x3a>
 802572a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802572c:	6862      	ldr	r2, [r4, #4]
 802572e:	68db      	ldr	r3, [r3, #12]
 8025730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025734:	6021      	str	r1, [r4, #0]
 8025736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802573a:	bd70      	pop	{r4, r5, r6, pc}
 802573c:	08027ec0 	.word	0x08027ec0
 8025740:	08028064 	.word	0x08028064

08025744 <__multadd>:
 8025744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025748:	690d      	ldr	r5, [r1, #16]
 802574a:	4607      	mov	r7, r0
 802574c:	460c      	mov	r4, r1
 802574e:	461e      	mov	r6, r3
 8025750:	f101 0c14 	add.w	ip, r1, #20
 8025754:	2000      	movs	r0, #0
 8025756:	f8dc 3000 	ldr.w	r3, [ip]
 802575a:	b299      	uxth	r1, r3
 802575c:	fb02 6101 	mla	r1, r2, r1, r6
 8025760:	0c1e      	lsrs	r6, r3, #16
 8025762:	0c0b      	lsrs	r3, r1, #16
 8025764:	fb02 3306 	mla	r3, r2, r6, r3
 8025768:	b289      	uxth	r1, r1
 802576a:	3001      	adds	r0, #1
 802576c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025770:	4285      	cmp	r5, r0
 8025772:	f84c 1b04 	str.w	r1, [ip], #4
 8025776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802577a:	dcec      	bgt.n	8025756 <__multadd+0x12>
 802577c:	b30e      	cbz	r6, 80257c2 <__multadd+0x7e>
 802577e:	68a3      	ldr	r3, [r4, #8]
 8025780:	42ab      	cmp	r3, r5
 8025782:	dc19      	bgt.n	80257b8 <__multadd+0x74>
 8025784:	6861      	ldr	r1, [r4, #4]
 8025786:	4638      	mov	r0, r7
 8025788:	3101      	adds	r1, #1
 802578a:	f7ff ff79 	bl	8025680 <_Balloc>
 802578e:	4680      	mov	r8, r0
 8025790:	b928      	cbnz	r0, 802579e <__multadd+0x5a>
 8025792:	4602      	mov	r2, r0
 8025794:	4b0c      	ldr	r3, [pc, #48]	; (80257c8 <__multadd+0x84>)
 8025796:	480d      	ldr	r0, [pc, #52]	; (80257cc <__multadd+0x88>)
 8025798:	21b5      	movs	r1, #181	; 0xb5
 802579a:	f7fe fc69 	bl	8024070 <__assert_func>
 802579e:	6922      	ldr	r2, [r4, #16]
 80257a0:	3202      	adds	r2, #2
 80257a2:	f104 010c 	add.w	r1, r4, #12
 80257a6:	0092      	lsls	r2, r2, #2
 80257a8:	300c      	adds	r0, #12
 80257aa:	f7fc fbb3 	bl	8021f14 <memcpy>
 80257ae:	4621      	mov	r1, r4
 80257b0:	4638      	mov	r0, r7
 80257b2:	f7ff ffa5 	bl	8025700 <_Bfree>
 80257b6:	4644      	mov	r4, r8
 80257b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80257bc:	3501      	adds	r5, #1
 80257be:	615e      	str	r6, [r3, #20]
 80257c0:	6125      	str	r5, [r4, #16]
 80257c2:	4620      	mov	r0, r4
 80257c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80257c8:	08027fd8 	.word	0x08027fd8
 80257cc:	08028064 	.word	0x08028064

080257d0 <__s2b>:
 80257d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80257d4:	460c      	mov	r4, r1
 80257d6:	4615      	mov	r5, r2
 80257d8:	461f      	mov	r7, r3
 80257da:	2209      	movs	r2, #9
 80257dc:	3308      	adds	r3, #8
 80257de:	4606      	mov	r6, r0
 80257e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80257e4:	2100      	movs	r1, #0
 80257e6:	2201      	movs	r2, #1
 80257e8:	429a      	cmp	r2, r3
 80257ea:	db09      	blt.n	8025800 <__s2b+0x30>
 80257ec:	4630      	mov	r0, r6
 80257ee:	f7ff ff47 	bl	8025680 <_Balloc>
 80257f2:	b940      	cbnz	r0, 8025806 <__s2b+0x36>
 80257f4:	4602      	mov	r2, r0
 80257f6:	4b19      	ldr	r3, [pc, #100]	; (802585c <__s2b+0x8c>)
 80257f8:	4819      	ldr	r0, [pc, #100]	; (8025860 <__s2b+0x90>)
 80257fa:	21ce      	movs	r1, #206	; 0xce
 80257fc:	f7fe fc38 	bl	8024070 <__assert_func>
 8025800:	0052      	lsls	r2, r2, #1
 8025802:	3101      	adds	r1, #1
 8025804:	e7f0      	b.n	80257e8 <__s2b+0x18>
 8025806:	9b08      	ldr	r3, [sp, #32]
 8025808:	6143      	str	r3, [r0, #20]
 802580a:	2d09      	cmp	r5, #9
 802580c:	f04f 0301 	mov.w	r3, #1
 8025810:	6103      	str	r3, [r0, #16]
 8025812:	dd16      	ble.n	8025842 <__s2b+0x72>
 8025814:	f104 0909 	add.w	r9, r4, #9
 8025818:	46c8      	mov	r8, r9
 802581a:	442c      	add	r4, r5
 802581c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025820:	4601      	mov	r1, r0
 8025822:	3b30      	subs	r3, #48	; 0x30
 8025824:	220a      	movs	r2, #10
 8025826:	4630      	mov	r0, r6
 8025828:	f7ff ff8c 	bl	8025744 <__multadd>
 802582c:	45a0      	cmp	r8, r4
 802582e:	d1f5      	bne.n	802581c <__s2b+0x4c>
 8025830:	f1a5 0408 	sub.w	r4, r5, #8
 8025834:	444c      	add	r4, r9
 8025836:	1b2d      	subs	r5, r5, r4
 8025838:	1963      	adds	r3, r4, r5
 802583a:	42bb      	cmp	r3, r7
 802583c:	db04      	blt.n	8025848 <__s2b+0x78>
 802583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025842:	340a      	adds	r4, #10
 8025844:	2509      	movs	r5, #9
 8025846:	e7f6      	b.n	8025836 <__s2b+0x66>
 8025848:	f814 3b01 	ldrb.w	r3, [r4], #1
 802584c:	4601      	mov	r1, r0
 802584e:	3b30      	subs	r3, #48	; 0x30
 8025850:	220a      	movs	r2, #10
 8025852:	4630      	mov	r0, r6
 8025854:	f7ff ff76 	bl	8025744 <__multadd>
 8025858:	e7ee      	b.n	8025838 <__s2b+0x68>
 802585a:	bf00      	nop
 802585c:	08027fd8 	.word	0x08027fd8
 8025860:	08028064 	.word	0x08028064

08025864 <__hi0bits>:
 8025864:	0c03      	lsrs	r3, r0, #16
 8025866:	041b      	lsls	r3, r3, #16
 8025868:	b9d3      	cbnz	r3, 80258a0 <__hi0bits+0x3c>
 802586a:	0400      	lsls	r0, r0, #16
 802586c:	2310      	movs	r3, #16
 802586e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8025872:	bf04      	itt	eq
 8025874:	0200      	lsleq	r0, r0, #8
 8025876:	3308      	addeq	r3, #8
 8025878:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802587c:	bf04      	itt	eq
 802587e:	0100      	lsleq	r0, r0, #4
 8025880:	3304      	addeq	r3, #4
 8025882:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8025886:	bf04      	itt	eq
 8025888:	0080      	lsleq	r0, r0, #2
 802588a:	3302      	addeq	r3, #2
 802588c:	2800      	cmp	r0, #0
 802588e:	db05      	blt.n	802589c <__hi0bits+0x38>
 8025890:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8025894:	f103 0301 	add.w	r3, r3, #1
 8025898:	bf08      	it	eq
 802589a:	2320      	moveq	r3, #32
 802589c:	4618      	mov	r0, r3
 802589e:	4770      	bx	lr
 80258a0:	2300      	movs	r3, #0
 80258a2:	e7e4      	b.n	802586e <__hi0bits+0xa>

080258a4 <__lo0bits>:
 80258a4:	6803      	ldr	r3, [r0, #0]
 80258a6:	f013 0207 	ands.w	r2, r3, #7
 80258aa:	4601      	mov	r1, r0
 80258ac:	d00b      	beq.n	80258c6 <__lo0bits+0x22>
 80258ae:	07da      	lsls	r2, r3, #31
 80258b0:	d423      	bmi.n	80258fa <__lo0bits+0x56>
 80258b2:	0798      	lsls	r0, r3, #30
 80258b4:	bf49      	itett	mi
 80258b6:	085b      	lsrmi	r3, r3, #1
 80258b8:	089b      	lsrpl	r3, r3, #2
 80258ba:	2001      	movmi	r0, #1
 80258bc:	600b      	strmi	r3, [r1, #0]
 80258be:	bf5c      	itt	pl
 80258c0:	600b      	strpl	r3, [r1, #0]
 80258c2:	2002      	movpl	r0, #2
 80258c4:	4770      	bx	lr
 80258c6:	b298      	uxth	r0, r3
 80258c8:	b9a8      	cbnz	r0, 80258f6 <__lo0bits+0x52>
 80258ca:	0c1b      	lsrs	r3, r3, #16
 80258cc:	2010      	movs	r0, #16
 80258ce:	b2da      	uxtb	r2, r3
 80258d0:	b90a      	cbnz	r2, 80258d6 <__lo0bits+0x32>
 80258d2:	3008      	adds	r0, #8
 80258d4:	0a1b      	lsrs	r3, r3, #8
 80258d6:	071a      	lsls	r2, r3, #28
 80258d8:	bf04      	itt	eq
 80258da:	091b      	lsreq	r3, r3, #4
 80258dc:	3004      	addeq	r0, #4
 80258de:	079a      	lsls	r2, r3, #30
 80258e0:	bf04      	itt	eq
 80258e2:	089b      	lsreq	r3, r3, #2
 80258e4:	3002      	addeq	r0, #2
 80258e6:	07da      	lsls	r2, r3, #31
 80258e8:	d403      	bmi.n	80258f2 <__lo0bits+0x4e>
 80258ea:	085b      	lsrs	r3, r3, #1
 80258ec:	f100 0001 	add.w	r0, r0, #1
 80258f0:	d005      	beq.n	80258fe <__lo0bits+0x5a>
 80258f2:	600b      	str	r3, [r1, #0]
 80258f4:	4770      	bx	lr
 80258f6:	4610      	mov	r0, r2
 80258f8:	e7e9      	b.n	80258ce <__lo0bits+0x2a>
 80258fa:	2000      	movs	r0, #0
 80258fc:	4770      	bx	lr
 80258fe:	2020      	movs	r0, #32
 8025900:	4770      	bx	lr
	...

08025904 <__i2b>:
 8025904:	b510      	push	{r4, lr}
 8025906:	460c      	mov	r4, r1
 8025908:	2101      	movs	r1, #1
 802590a:	f7ff feb9 	bl	8025680 <_Balloc>
 802590e:	4602      	mov	r2, r0
 8025910:	b928      	cbnz	r0, 802591e <__i2b+0x1a>
 8025912:	4b05      	ldr	r3, [pc, #20]	; (8025928 <__i2b+0x24>)
 8025914:	4805      	ldr	r0, [pc, #20]	; (802592c <__i2b+0x28>)
 8025916:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802591a:	f7fe fba9 	bl	8024070 <__assert_func>
 802591e:	2301      	movs	r3, #1
 8025920:	6144      	str	r4, [r0, #20]
 8025922:	6103      	str	r3, [r0, #16]
 8025924:	bd10      	pop	{r4, pc}
 8025926:	bf00      	nop
 8025928:	08027fd8 	.word	0x08027fd8
 802592c:	08028064 	.word	0x08028064

08025930 <__multiply>:
 8025930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025934:	4691      	mov	r9, r2
 8025936:	690a      	ldr	r2, [r1, #16]
 8025938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802593c:	429a      	cmp	r2, r3
 802593e:	bfb8      	it	lt
 8025940:	460b      	movlt	r3, r1
 8025942:	460c      	mov	r4, r1
 8025944:	bfbc      	itt	lt
 8025946:	464c      	movlt	r4, r9
 8025948:	4699      	movlt	r9, r3
 802594a:	6927      	ldr	r7, [r4, #16]
 802594c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8025950:	68a3      	ldr	r3, [r4, #8]
 8025952:	6861      	ldr	r1, [r4, #4]
 8025954:	eb07 060a 	add.w	r6, r7, sl
 8025958:	42b3      	cmp	r3, r6
 802595a:	b085      	sub	sp, #20
 802595c:	bfb8      	it	lt
 802595e:	3101      	addlt	r1, #1
 8025960:	f7ff fe8e 	bl	8025680 <_Balloc>
 8025964:	b930      	cbnz	r0, 8025974 <__multiply+0x44>
 8025966:	4602      	mov	r2, r0
 8025968:	4b44      	ldr	r3, [pc, #272]	; (8025a7c <__multiply+0x14c>)
 802596a:	4845      	ldr	r0, [pc, #276]	; (8025a80 <__multiply+0x150>)
 802596c:	f240 115d 	movw	r1, #349	; 0x15d
 8025970:	f7fe fb7e 	bl	8024070 <__assert_func>
 8025974:	f100 0514 	add.w	r5, r0, #20
 8025978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802597c:	462b      	mov	r3, r5
 802597e:	2200      	movs	r2, #0
 8025980:	4543      	cmp	r3, r8
 8025982:	d321      	bcc.n	80259c8 <__multiply+0x98>
 8025984:	f104 0314 	add.w	r3, r4, #20
 8025988:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802598c:	f109 0314 	add.w	r3, r9, #20
 8025990:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8025994:	9202      	str	r2, [sp, #8]
 8025996:	1b3a      	subs	r2, r7, r4
 8025998:	3a15      	subs	r2, #21
 802599a:	f022 0203 	bic.w	r2, r2, #3
 802599e:	3204      	adds	r2, #4
 80259a0:	f104 0115 	add.w	r1, r4, #21
 80259a4:	428f      	cmp	r7, r1
 80259a6:	bf38      	it	cc
 80259a8:	2204      	movcc	r2, #4
 80259aa:	9201      	str	r2, [sp, #4]
 80259ac:	9a02      	ldr	r2, [sp, #8]
 80259ae:	9303      	str	r3, [sp, #12]
 80259b0:	429a      	cmp	r2, r3
 80259b2:	d80c      	bhi.n	80259ce <__multiply+0x9e>
 80259b4:	2e00      	cmp	r6, #0
 80259b6:	dd03      	ble.n	80259c0 <__multiply+0x90>
 80259b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80259bc:	2b00      	cmp	r3, #0
 80259be:	d05a      	beq.n	8025a76 <__multiply+0x146>
 80259c0:	6106      	str	r6, [r0, #16]
 80259c2:	b005      	add	sp, #20
 80259c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259c8:	f843 2b04 	str.w	r2, [r3], #4
 80259cc:	e7d8      	b.n	8025980 <__multiply+0x50>
 80259ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80259d2:	f1ba 0f00 	cmp.w	sl, #0
 80259d6:	d024      	beq.n	8025a22 <__multiply+0xf2>
 80259d8:	f104 0e14 	add.w	lr, r4, #20
 80259dc:	46a9      	mov	r9, r5
 80259de:	f04f 0c00 	mov.w	ip, #0
 80259e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80259e6:	f8d9 1000 	ldr.w	r1, [r9]
 80259ea:	fa1f fb82 	uxth.w	fp, r2
 80259ee:	b289      	uxth	r1, r1
 80259f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80259f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80259f8:	f8d9 2000 	ldr.w	r2, [r9]
 80259fc:	4461      	add	r1, ip
 80259fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025a02:	fb0a c20b 	mla	r2, sl, fp, ip
 8025a06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8025a0a:	b289      	uxth	r1, r1
 8025a0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8025a10:	4577      	cmp	r7, lr
 8025a12:	f849 1b04 	str.w	r1, [r9], #4
 8025a16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025a1a:	d8e2      	bhi.n	80259e2 <__multiply+0xb2>
 8025a1c:	9a01      	ldr	r2, [sp, #4]
 8025a1e:	f845 c002 	str.w	ip, [r5, r2]
 8025a22:	9a03      	ldr	r2, [sp, #12]
 8025a24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025a28:	3304      	adds	r3, #4
 8025a2a:	f1b9 0f00 	cmp.w	r9, #0
 8025a2e:	d020      	beq.n	8025a72 <__multiply+0x142>
 8025a30:	6829      	ldr	r1, [r5, #0]
 8025a32:	f104 0c14 	add.w	ip, r4, #20
 8025a36:	46ae      	mov	lr, r5
 8025a38:	f04f 0a00 	mov.w	sl, #0
 8025a3c:	f8bc b000 	ldrh.w	fp, [ip]
 8025a40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8025a44:	fb09 220b 	mla	r2, r9, fp, r2
 8025a48:	4492      	add	sl, r2
 8025a4a:	b289      	uxth	r1, r1
 8025a4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8025a50:	f84e 1b04 	str.w	r1, [lr], #4
 8025a54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8025a58:	f8be 1000 	ldrh.w	r1, [lr]
 8025a5c:	0c12      	lsrs	r2, r2, #16
 8025a5e:	fb09 1102 	mla	r1, r9, r2, r1
 8025a62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8025a66:	4567      	cmp	r7, ip
 8025a68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8025a6c:	d8e6      	bhi.n	8025a3c <__multiply+0x10c>
 8025a6e:	9a01      	ldr	r2, [sp, #4]
 8025a70:	50a9      	str	r1, [r5, r2]
 8025a72:	3504      	adds	r5, #4
 8025a74:	e79a      	b.n	80259ac <__multiply+0x7c>
 8025a76:	3e01      	subs	r6, #1
 8025a78:	e79c      	b.n	80259b4 <__multiply+0x84>
 8025a7a:	bf00      	nop
 8025a7c:	08027fd8 	.word	0x08027fd8
 8025a80:	08028064 	.word	0x08028064

08025a84 <__pow5mult>:
 8025a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a88:	4615      	mov	r5, r2
 8025a8a:	f012 0203 	ands.w	r2, r2, #3
 8025a8e:	4606      	mov	r6, r0
 8025a90:	460f      	mov	r7, r1
 8025a92:	d007      	beq.n	8025aa4 <__pow5mult+0x20>
 8025a94:	4c25      	ldr	r4, [pc, #148]	; (8025b2c <__pow5mult+0xa8>)
 8025a96:	3a01      	subs	r2, #1
 8025a98:	2300      	movs	r3, #0
 8025a9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025a9e:	f7ff fe51 	bl	8025744 <__multadd>
 8025aa2:	4607      	mov	r7, r0
 8025aa4:	10ad      	asrs	r5, r5, #2
 8025aa6:	d03d      	beq.n	8025b24 <__pow5mult+0xa0>
 8025aa8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8025aaa:	b97c      	cbnz	r4, 8025acc <__pow5mult+0x48>
 8025aac:	2010      	movs	r0, #16
 8025aae:	f7fc fa29 	bl	8021f04 <malloc>
 8025ab2:	4602      	mov	r2, r0
 8025ab4:	6270      	str	r0, [r6, #36]	; 0x24
 8025ab6:	b928      	cbnz	r0, 8025ac4 <__pow5mult+0x40>
 8025ab8:	4b1d      	ldr	r3, [pc, #116]	; (8025b30 <__pow5mult+0xac>)
 8025aba:	481e      	ldr	r0, [pc, #120]	; (8025b34 <__pow5mult+0xb0>)
 8025abc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8025ac0:	f7fe fad6 	bl	8024070 <__assert_func>
 8025ac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8025ac8:	6004      	str	r4, [r0, #0]
 8025aca:	60c4      	str	r4, [r0, #12]
 8025acc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8025ad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8025ad4:	b94c      	cbnz	r4, 8025aea <__pow5mult+0x66>
 8025ad6:	f240 2171 	movw	r1, #625	; 0x271
 8025ada:	4630      	mov	r0, r6
 8025adc:	f7ff ff12 	bl	8025904 <__i2b>
 8025ae0:	2300      	movs	r3, #0
 8025ae2:	f8c8 0008 	str.w	r0, [r8, #8]
 8025ae6:	4604      	mov	r4, r0
 8025ae8:	6003      	str	r3, [r0, #0]
 8025aea:	f04f 0900 	mov.w	r9, #0
 8025aee:	07eb      	lsls	r3, r5, #31
 8025af0:	d50a      	bpl.n	8025b08 <__pow5mult+0x84>
 8025af2:	4639      	mov	r1, r7
 8025af4:	4622      	mov	r2, r4
 8025af6:	4630      	mov	r0, r6
 8025af8:	f7ff ff1a 	bl	8025930 <__multiply>
 8025afc:	4639      	mov	r1, r7
 8025afe:	4680      	mov	r8, r0
 8025b00:	4630      	mov	r0, r6
 8025b02:	f7ff fdfd 	bl	8025700 <_Bfree>
 8025b06:	4647      	mov	r7, r8
 8025b08:	106d      	asrs	r5, r5, #1
 8025b0a:	d00b      	beq.n	8025b24 <__pow5mult+0xa0>
 8025b0c:	6820      	ldr	r0, [r4, #0]
 8025b0e:	b938      	cbnz	r0, 8025b20 <__pow5mult+0x9c>
 8025b10:	4622      	mov	r2, r4
 8025b12:	4621      	mov	r1, r4
 8025b14:	4630      	mov	r0, r6
 8025b16:	f7ff ff0b 	bl	8025930 <__multiply>
 8025b1a:	6020      	str	r0, [r4, #0]
 8025b1c:	f8c0 9000 	str.w	r9, [r0]
 8025b20:	4604      	mov	r4, r0
 8025b22:	e7e4      	b.n	8025aee <__pow5mult+0x6a>
 8025b24:	4638      	mov	r0, r7
 8025b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025b2a:	bf00      	nop
 8025b2c:	080281b0 	.word	0x080281b0
 8025b30:	08027ec0 	.word	0x08027ec0
 8025b34:	08028064 	.word	0x08028064

08025b38 <__lshift>:
 8025b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025b3c:	460c      	mov	r4, r1
 8025b3e:	6849      	ldr	r1, [r1, #4]
 8025b40:	6923      	ldr	r3, [r4, #16]
 8025b42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8025b46:	68a3      	ldr	r3, [r4, #8]
 8025b48:	4607      	mov	r7, r0
 8025b4a:	4691      	mov	r9, r2
 8025b4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8025b50:	f108 0601 	add.w	r6, r8, #1
 8025b54:	42b3      	cmp	r3, r6
 8025b56:	db0b      	blt.n	8025b70 <__lshift+0x38>
 8025b58:	4638      	mov	r0, r7
 8025b5a:	f7ff fd91 	bl	8025680 <_Balloc>
 8025b5e:	4605      	mov	r5, r0
 8025b60:	b948      	cbnz	r0, 8025b76 <__lshift+0x3e>
 8025b62:	4602      	mov	r2, r0
 8025b64:	4b2a      	ldr	r3, [pc, #168]	; (8025c10 <__lshift+0xd8>)
 8025b66:	482b      	ldr	r0, [pc, #172]	; (8025c14 <__lshift+0xdc>)
 8025b68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8025b6c:	f7fe fa80 	bl	8024070 <__assert_func>
 8025b70:	3101      	adds	r1, #1
 8025b72:	005b      	lsls	r3, r3, #1
 8025b74:	e7ee      	b.n	8025b54 <__lshift+0x1c>
 8025b76:	2300      	movs	r3, #0
 8025b78:	f100 0114 	add.w	r1, r0, #20
 8025b7c:	f100 0210 	add.w	r2, r0, #16
 8025b80:	4618      	mov	r0, r3
 8025b82:	4553      	cmp	r3, sl
 8025b84:	db37      	blt.n	8025bf6 <__lshift+0xbe>
 8025b86:	6920      	ldr	r0, [r4, #16]
 8025b88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8025b8c:	f104 0314 	add.w	r3, r4, #20
 8025b90:	f019 091f 	ands.w	r9, r9, #31
 8025b94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8025b98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8025b9c:	d02f      	beq.n	8025bfe <__lshift+0xc6>
 8025b9e:	f1c9 0e20 	rsb	lr, r9, #32
 8025ba2:	468a      	mov	sl, r1
 8025ba4:	f04f 0c00 	mov.w	ip, #0
 8025ba8:	681a      	ldr	r2, [r3, #0]
 8025baa:	fa02 f209 	lsl.w	r2, r2, r9
 8025bae:	ea42 020c 	orr.w	r2, r2, ip
 8025bb2:	f84a 2b04 	str.w	r2, [sl], #4
 8025bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8025bba:	4298      	cmp	r0, r3
 8025bbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8025bc0:	d8f2      	bhi.n	8025ba8 <__lshift+0x70>
 8025bc2:	1b03      	subs	r3, r0, r4
 8025bc4:	3b15      	subs	r3, #21
 8025bc6:	f023 0303 	bic.w	r3, r3, #3
 8025bca:	3304      	adds	r3, #4
 8025bcc:	f104 0215 	add.w	r2, r4, #21
 8025bd0:	4290      	cmp	r0, r2
 8025bd2:	bf38      	it	cc
 8025bd4:	2304      	movcc	r3, #4
 8025bd6:	f841 c003 	str.w	ip, [r1, r3]
 8025bda:	f1bc 0f00 	cmp.w	ip, #0
 8025bde:	d001      	beq.n	8025be4 <__lshift+0xac>
 8025be0:	f108 0602 	add.w	r6, r8, #2
 8025be4:	3e01      	subs	r6, #1
 8025be6:	4638      	mov	r0, r7
 8025be8:	612e      	str	r6, [r5, #16]
 8025bea:	4621      	mov	r1, r4
 8025bec:	f7ff fd88 	bl	8025700 <_Bfree>
 8025bf0:	4628      	mov	r0, r5
 8025bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025bf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8025bfa:	3301      	adds	r3, #1
 8025bfc:	e7c1      	b.n	8025b82 <__lshift+0x4a>
 8025bfe:	3904      	subs	r1, #4
 8025c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8025c04:	f841 2f04 	str.w	r2, [r1, #4]!
 8025c08:	4298      	cmp	r0, r3
 8025c0a:	d8f9      	bhi.n	8025c00 <__lshift+0xc8>
 8025c0c:	e7ea      	b.n	8025be4 <__lshift+0xac>
 8025c0e:	bf00      	nop
 8025c10:	08027fd8 	.word	0x08027fd8
 8025c14:	08028064 	.word	0x08028064

08025c18 <__mcmp>:
 8025c18:	b530      	push	{r4, r5, lr}
 8025c1a:	6902      	ldr	r2, [r0, #16]
 8025c1c:	690c      	ldr	r4, [r1, #16]
 8025c1e:	1b12      	subs	r2, r2, r4
 8025c20:	d10e      	bne.n	8025c40 <__mcmp+0x28>
 8025c22:	f100 0314 	add.w	r3, r0, #20
 8025c26:	3114      	adds	r1, #20
 8025c28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8025c2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8025c30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8025c34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8025c38:	42a5      	cmp	r5, r4
 8025c3a:	d003      	beq.n	8025c44 <__mcmp+0x2c>
 8025c3c:	d305      	bcc.n	8025c4a <__mcmp+0x32>
 8025c3e:	2201      	movs	r2, #1
 8025c40:	4610      	mov	r0, r2
 8025c42:	bd30      	pop	{r4, r5, pc}
 8025c44:	4283      	cmp	r3, r0
 8025c46:	d3f3      	bcc.n	8025c30 <__mcmp+0x18>
 8025c48:	e7fa      	b.n	8025c40 <__mcmp+0x28>
 8025c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8025c4e:	e7f7      	b.n	8025c40 <__mcmp+0x28>

08025c50 <__mdiff>:
 8025c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c54:	460c      	mov	r4, r1
 8025c56:	4606      	mov	r6, r0
 8025c58:	4611      	mov	r1, r2
 8025c5a:	4620      	mov	r0, r4
 8025c5c:	4690      	mov	r8, r2
 8025c5e:	f7ff ffdb 	bl	8025c18 <__mcmp>
 8025c62:	1e05      	subs	r5, r0, #0
 8025c64:	d110      	bne.n	8025c88 <__mdiff+0x38>
 8025c66:	4629      	mov	r1, r5
 8025c68:	4630      	mov	r0, r6
 8025c6a:	f7ff fd09 	bl	8025680 <_Balloc>
 8025c6e:	b930      	cbnz	r0, 8025c7e <__mdiff+0x2e>
 8025c70:	4b3a      	ldr	r3, [pc, #232]	; (8025d5c <__mdiff+0x10c>)
 8025c72:	4602      	mov	r2, r0
 8025c74:	f240 2132 	movw	r1, #562	; 0x232
 8025c78:	4839      	ldr	r0, [pc, #228]	; (8025d60 <__mdiff+0x110>)
 8025c7a:	f7fe f9f9 	bl	8024070 <__assert_func>
 8025c7e:	2301      	movs	r3, #1
 8025c80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8025c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c88:	bfa4      	itt	ge
 8025c8a:	4643      	movge	r3, r8
 8025c8c:	46a0      	movge	r8, r4
 8025c8e:	4630      	mov	r0, r6
 8025c90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8025c94:	bfa6      	itte	ge
 8025c96:	461c      	movge	r4, r3
 8025c98:	2500      	movge	r5, #0
 8025c9a:	2501      	movlt	r5, #1
 8025c9c:	f7ff fcf0 	bl	8025680 <_Balloc>
 8025ca0:	b920      	cbnz	r0, 8025cac <__mdiff+0x5c>
 8025ca2:	4b2e      	ldr	r3, [pc, #184]	; (8025d5c <__mdiff+0x10c>)
 8025ca4:	4602      	mov	r2, r0
 8025ca6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8025caa:	e7e5      	b.n	8025c78 <__mdiff+0x28>
 8025cac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8025cb0:	6926      	ldr	r6, [r4, #16]
 8025cb2:	60c5      	str	r5, [r0, #12]
 8025cb4:	f104 0914 	add.w	r9, r4, #20
 8025cb8:	f108 0514 	add.w	r5, r8, #20
 8025cbc:	f100 0e14 	add.w	lr, r0, #20
 8025cc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8025cc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8025cc8:	f108 0210 	add.w	r2, r8, #16
 8025ccc:	46f2      	mov	sl, lr
 8025cce:	2100      	movs	r1, #0
 8025cd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8025cd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8025cd8:	fa1f f883 	uxth.w	r8, r3
 8025cdc:	fa11 f18b 	uxtah	r1, r1, fp
 8025ce0:	0c1b      	lsrs	r3, r3, #16
 8025ce2:	eba1 0808 	sub.w	r8, r1, r8
 8025ce6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8025cea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8025cee:	fa1f f888 	uxth.w	r8, r8
 8025cf2:	1419      	asrs	r1, r3, #16
 8025cf4:	454e      	cmp	r6, r9
 8025cf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8025cfa:	f84a 3b04 	str.w	r3, [sl], #4
 8025cfe:	d8e7      	bhi.n	8025cd0 <__mdiff+0x80>
 8025d00:	1b33      	subs	r3, r6, r4
 8025d02:	3b15      	subs	r3, #21
 8025d04:	f023 0303 	bic.w	r3, r3, #3
 8025d08:	3304      	adds	r3, #4
 8025d0a:	3415      	adds	r4, #21
 8025d0c:	42a6      	cmp	r6, r4
 8025d0e:	bf38      	it	cc
 8025d10:	2304      	movcc	r3, #4
 8025d12:	441d      	add	r5, r3
 8025d14:	4473      	add	r3, lr
 8025d16:	469e      	mov	lr, r3
 8025d18:	462e      	mov	r6, r5
 8025d1a:	4566      	cmp	r6, ip
 8025d1c:	d30e      	bcc.n	8025d3c <__mdiff+0xec>
 8025d1e:	f10c 0203 	add.w	r2, ip, #3
 8025d22:	1b52      	subs	r2, r2, r5
 8025d24:	f022 0203 	bic.w	r2, r2, #3
 8025d28:	3d03      	subs	r5, #3
 8025d2a:	45ac      	cmp	ip, r5
 8025d2c:	bf38      	it	cc
 8025d2e:	2200      	movcc	r2, #0
 8025d30:	441a      	add	r2, r3
 8025d32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8025d36:	b17b      	cbz	r3, 8025d58 <__mdiff+0x108>
 8025d38:	6107      	str	r7, [r0, #16]
 8025d3a:	e7a3      	b.n	8025c84 <__mdiff+0x34>
 8025d3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8025d40:	fa11 f288 	uxtah	r2, r1, r8
 8025d44:	1414      	asrs	r4, r2, #16
 8025d46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8025d4a:	b292      	uxth	r2, r2
 8025d4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8025d50:	f84e 2b04 	str.w	r2, [lr], #4
 8025d54:	1421      	asrs	r1, r4, #16
 8025d56:	e7e0      	b.n	8025d1a <__mdiff+0xca>
 8025d58:	3f01      	subs	r7, #1
 8025d5a:	e7ea      	b.n	8025d32 <__mdiff+0xe2>
 8025d5c:	08027fd8 	.word	0x08027fd8
 8025d60:	08028064 	.word	0x08028064

08025d64 <__ulp>:
 8025d64:	b082      	sub	sp, #8
 8025d66:	ed8d 0b00 	vstr	d0, [sp]
 8025d6a:	9b01      	ldr	r3, [sp, #4]
 8025d6c:	4912      	ldr	r1, [pc, #72]	; (8025db8 <__ulp+0x54>)
 8025d6e:	4019      	ands	r1, r3
 8025d70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8025d74:	2900      	cmp	r1, #0
 8025d76:	dd05      	ble.n	8025d84 <__ulp+0x20>
 8025d78:	2200      	movs	r2, #0
 8025d7a:	460b      	mov	r3, r1
 8025d7c:	ec43 2b10 	vmov	d0, r2, r3
 8025d80:	b002      	add	sp, #8
 8025d82:	4770      	bx	lr
 8025d84:	4249      	negs	r1, r1
 8025d86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8025d8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8025d8e:	f04f 0200 	mov.w	r2, #0
 8025d92:	f04f 0300 	mov.w	r3, #0
 8025d96:	da04      	bge.n	8025da2 <__ulp+0x3e>
 8025d98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8025d9c:	fa41 f300 	asr.w	r3, r1, r0
 8025da0:	e7ec      	b.n	8025d7c <__ulp+0x18>
 8025da2:	f1a0 0114 	sub.w	r1, r0, #20
 8025da6:	291e      	cmp	r1, #30
 8025da8:	bfda      	itte	le
 8025daa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8025dae:	fa20 f101 	lsrle.w	r1, r0, r1
 8025db2:	2101      	movgt	r1, #1
 8025db4:	460a      	mov	r2, r1
 8025db6:	e7e1      	b.n	8025d7c <__ulp+0x18>
 8025db8:	7ff00000 	.word	0x7ff00000

08025dbc <__b2d>:
 8025dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dbe:	6905      	ldr	r5, [r0, #16]
 8025dc0:	f100 0714 	add.w	r7, r0, #20
 8025dc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8025dc8:	1f2e      	subs	r6, r5, #4
 8025dca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8025dce:	4620      	mov	r0, r4
 8025dd0:	f7ff fd48 	bl	8025864 <__hi0bits>
 8025dd4:	f1c0 0320 	rsb	r3, r0, #32
 8025dd8:	280a      	cmp	r0, #10
 8025dda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8025e58 <__b2d+0x9c>
 8025dde:	600b      	str	r3, [r1, #0]
 8025de0:	dc14      	bgt.n	8025e0c <__b2d+0x50>
 8025de2:	f1c0 0e0b 	rsb	lr, r0, #11
 8025de6:	fa24 f10e 	lsr.w	r1, r4, lr
 8025dea:	42b7      	cmp	r7, r6
 8025dec:	ea41 030c 	orr.w	r3, r1, ip
 8025df0:	bf34      	ite	cc
 8025df2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8025df6:	2100      	movcs	r1, #0
 8025df8:	3015      	adds	r0, #21
 8025dfa:	fa04 f000 	lsl.w	r0, r4, r0
 8025dfe:	fa21 f10e 	lsr.w	r1, r1, lr
 8025e02:	ea40 0201 	orr.w	r2, r0, r1
 8025e06:	ec43 2b10 	vmov	d0, r2, r3
 8025e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e0c:	42b7      	cmp	r7, r6
 8025e0e:	bf3a      	itte	cc
 8025e10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8025e14:	f1a5 0608 	subcc.w	r6, r5, #8
 8025e18:	2100      	movcs	r1, #0
 8025e1a:	380b      	subs	r0, #11
 8025e1c:	d017      	beq.n	8025e4e <__b2d+0x92>
 8025e1e:	f1c0 0c20 	rsb	ip, r0, #32
 8025e22:	fa04 f500 	lsl.w	r5, r4, r0
 8025e26:	42be      	cmp	r6, r7
 8025e28:	fa21 f40c 	lsr.w	r4, r1, ip
 8025e2c:	ea45 0504 	orr.w	r5, r5, r4
 8025e30:	bf8c      	ite	hi
 8025e32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8025e36:	2400      	movls	r4, #0
 8025e38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8025e3c:	fa01 f000 	lsl.w	r0, r1, r0
 8025e40:	fa24 f40c 	lsr.w	r4, r4, ip
 8025e44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8025e48:	ea40 0204 	orr.w	r2, r0, r4
 8025e4c:	e7db      	b.n	8025e06 <__b2d+0x4a>
 8025e4e:	ea44 030c 	orr.w	r3, r4, ip
 8025e52:	460a      	mov	r2, r1
 8025e54:	e7d7      	b.n	8025e06 <__b2d+0x4a>
 8025e56:	bf00      	nop
 8025e58:	3ff00000 	.word	0x3ff00000

08025e5c <__d2b>:
 8025e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025e60:	4689      	mov	r9, r1
 8025e62:	2101      	movs	r1, #1
 8025e64:	ec57 6b10 	vmov	r6, r7, d0
 8025e68:	4690      	mov	r8, r2
 8025e6a:	f7ff fc09 	bl	8025680 <_Balloc>
 8025e6e:	4604      	mov	r4, r0
 8025e70:	b930      	cbnz	r0, 8025e80 <__d2b+0x24>
 8025e72:	4602      	mov	r2, r0
 8025e74:	4b25      	ldr	r3, [pc, #148]	; (8025f0c <__d2b+0xb0>)
 8025e76:	4826      	ldr	r0, [pc, #152]	; (8025f10 <__d2b+0xb4>)
 8025e78:	f240 310a 	movw	r1, #778	; 0x30a
 8025e7c:	f7fe f8f8 	bl	8024070 <__assert_func>
 8025e80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8025e84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8025e88:	bb35      	cbnz	r5, 8025ed8 <__d2b+0x7c>
 8025e8a:	2e00      	cmp	r6, #0
 8025e8c:	9301      	str	r3, [sp, #4]
 8025e8e:	d028      	beq.n	8025ee2 <__d2b+0x86>
 8025e90:	4668      	mov	r0, sp
 8025e92:	9600      	str	r6, [sp, #0]
 8025e94:	f7ff fd06 	bl	80258a4 <__lo0bits>
 8025e98:	9900      	ldr	r1, [sp, #0]
 8025e9a:	b300      	cbz	r0, 8025ede <__d2b+0x82>
 8025e9c:	9a01      	ldr	r2, [sp, #4]
 8025e9e:	f1c0 0320 	rsb	r3, r0, #32
 8025ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8025ea6:	430b      	orrs	r3, r1
 8025ea8:	40c2      	lsrs	r2, r0
 8025eaa:	6163      	str	r3, [r4, #20]
 8025eac:	9201      	str	r2, [sp, #4]
 8025eae:	9b01      	ldr	r3, [sp, #4]
 8025eb0:	61a3      	str	r3, [r4, #24]
 8025eb2:	2b00      	cmp	r3, #0
 8025eb4:	bf14      	ite	ne
 8025eb6:	2202      	movne	r2, #2
 8025eb8:	2201      	moveq	r2, #1
 8025eba:	6122      	str	r2, [r4, #16]
 8025ebc:	b1d5      	cbz	r5, 8025ef4 <__d2b+0x98>
 8025ebe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8025ec2:	4405      	add	r5, r0
 8025ec4:	f8c9 5000 	str.w	r5, [r9]
 8025ec8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8025ecc:	f8c8 0000 	str.w	r0, [r8]
 8025ed0:	4620      	mov	r0, r4
 8025ed2:	b003      	add	sp, #12
 8025ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025edc:	e7d5      	b.n	8025e8a <__d2b+0x2e>
 8025ede:	6161      	str	r1, [r4, #20]
 8025ee0:	e7e5      	b.n	8025eae <__d2b+0x52>
 8025ee2:	a801      	add	r0, sp, #4
 8025ee4:	f7ff fcde 	bl	80258a4 <__lo0bits>
 8025ee8:	9b01      	ldr	r3, [sp, #4]
 8025eea:	6163      	str	r3, [r4, #20]
 8025eec:	2201      	movs	r2, #1
 8025eee:	6122      	str	r2, [r4, #16]
 8025ef0:	3020      	adds	r0, #32
 8025ef2:	e7e3      	b.n	8025ebc <__d2b+0x60>
 8025ef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8025ef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8025efc:	f8c9 0000 	str.w	r0, [r9]
 8025f00:	6918      	ldr	r0, [r3, #16]
 8025f02:	f7ff fcaf 	bl	8025864 <__hi0bits>
 8025f06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8025f0a:	e7df      	b.n	8025ecc <__d2b+0x70>
 8025f0c:	08027fd8 	.word	0x08027fd8
 8025f10:	08028064 	.word	0x08028064

08025f14 <__ratio>:
 8025f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f18:	4688      	mov	r8, r1
 8025f1a:	4669      	mov	r1, sp
 8025f1c:	4681      	mov	r9, r0
 8025f1e:	f7ff ff4d 	bl	8025dbc <__b2d>
 8025f22:	a901      	add	r1, sp, #4
 8025f24:	4640      	mov	r0, r8
 8025f26:	ec55 4b10 	vmov	r4, r5, d0
 8025f2a:	ee10 aa10 	vmov	sl, s0
 8025f2e:	f7ff ff45 	bl	8025dbc <__b2d>
 8025f32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8025f36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8025f3a:	1a59      	subs	r1, r3, r1
 8025f3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025f40:	1ad3      	subs	r3, r2, r3
 8025f42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8025f46:	ec57 6b10 	vmov	r6, r7, d0
 8025f4a:	2b00      	cmp	r3, #0
 8025f4c:	bfd6      	itet	le
 8025f4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8025f52:	462a      	movgt	r2, r5
 8025f54:	463a      	movle	r2, r7
 8025f56:	46ab      	mov	fp, r5
 8025f58:	bfd6      	itet	le
 8025f5a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8025f5e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8025f62:	ee00 3a90 	vmovle	s1, r3
 8025f66:	ec4b ab17 	vmov	d7, sl, fp
 8025f6a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8025f6e:	b003      	add	sp, #12
 8025f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f74 <__copybits>:
 8025f74:	3901      	subs	r1, #1
 8025f76:	b570      	push	{r4, r5, r6, lr}
 8025f78:	1149      	asrs	r1, r1, #5
 8025f7a:	6914      	ldr	r4, [r2, #16]
 8025f7c:	3101      	adds	r1, #1
 8025f7e:	f102 0314 	add.w	r3, r2, #20
 8025f82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8025f86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025f8a:	1f05      	subs	r5, r0, #4
 8025f8c:	42a3      	cmp	r3, r4
 8025f8e:	d30c      	bcc.n	8025faa <__copybits+0x36>
 8025f90:	1aa3      	subs	r3, r4, r2
 8025f92:	3b11      	subs	r3, #17
 8025f94:	f023 0303 	bic.w	r3, r3, #3
 8025f98:	3211      	adds	r2, #17
 8025f9a:	42a2      	cmp	r2, r4
 8025f9c:	bf88      	it	hi
 8025f9e:	2300      	movhi	r3, #0
 8025fa0:	4418      	add	r0, r3
 8025fa2:	2300      	movs	r3, #0
 8025fa4:	4288      	cmp	r0, r1
 8025fa6:	d305      	bcc.n	8025fb4 <__copybits+0x40>
 8025fa8:	bd70      	pop	{r4, r5, r6, pc}
 8025faa:	f853 6b04 	ldr.w	r6, [r3], #4
 8025fae:	f845 6f04 	str.w	r6, [r5, #4]!
 8025fb2:	e7eb      	b.n	8025f8c <__copybits+0x18>
 8025fb4:	f840 3b04 	str.w	r3, [r0], #4
 8025fb8:	e7f4      	b.n	8025fa4 <__copybits+0x30>

08025fba <__any_on>:
 8025fba:	f100 0214 	add.w	r2, r0, #20
 8025fbe:	6900      	ldr	r0, [r0, #16]
 8025fc0:	114b      	asrs	r3, r1, #5
 8025fc2:	4298      	cmp	r0, r3
 8025fc4:	b510      	push	{r4, lr}
 8025fc6:	db11      	blt.n	8025fec <__any_on+0x32>
 8025fc8:	dd0a      	ble.n	8025fe0 <__any_on+0x26>
 8025fca:	f011 011f 	ands.w	r1, r1, #31
 8025fce:	d007      	beq.n	8025fe0 <__any_on+0x26>
 8025fd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8025fd4:	fa24 f001 	lsr.w	r0, r4, r1
 8025fd8:	fa00 f101 	lsl.w	r1, r0, r1
 8025fdc:	428c      	cmp	r4, r1
 8025fde:	d10b      	bne.n	8025ff8 <__any_on+0x3e>
 8025fe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025fe4:	4293      	cmp	r3, r2
 8025fe6:	d803      	bhi.n	8025ff0 <__any_on+0x36>
 8025fe8:	2000      	movs	r0, #0
 8025fea:	bd10      	pop	{r4, pc}
 8025fec:	4603      	mov	r3, r0
 8025fee:	e7f7      	b.n	8025fe0 <__any_on+0x26>
 8025ff0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8025ff4:	2900      	cmp	r1, #0
 8025ff6:	d0f5      	beq.n	8025fe4 <__any_on+0x2a>
 8025ff8:	2001      	movs	r0, #1
 8025ffa:	e7f6      	b.n	8025fea <__any_on+0x30>

08025ffc <_calloc_r>:
 8025ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025ffe:	fba1 2402 	umull	r2, r4, r1, r2
 8026002:	b94c      	cbnz	r4, 8026018 <_calloc_r+0x1c>
 8026004:	4611      	mov	r1, r2
 8026006:	9201      	str	r2, [sp, #4]
 8026008:	f7fc f806 	bl	8022018 <_malloc_r>
 802600c:	9a01      	ldr	r2, [sp, #4]
 802600e:	4605      	mov	r5, r0
 8026010:	b930      	cbnz	r0, 8026020 <_calloc_r+0x24>
 8026012:	4628      	mov	r0, r5
 8026014:	b003      	add	sp, #12
 8026016:	bd30      	pop	{r4, r5, pc}
 8026018:	220c      	movs	r2, #12
 802601a:	6002      	str	r2, [r0, #0]
 802601c:	2500      	movs	r5, #0
 802601e:	e7f8      	b.n	8026012 <_calloc_r+0x16>
 8026020:	4621      	mov	r1, r4
 8026022:	f7fb ff85 	bl	8021f30 <memset>
 8026026:	e7f4      	b.n	8026012 <_calloc_r+0x16>

08026028 <__ssputs_r>:
 8026028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802602c:	688e      	ldr	r6, [r1, #8]
 802602e:	429e      	cmp	r6, r3
 8026030:	4682      	mov	sl, r0
 8026032:	460c      	mov	r4, r1
 8026034:	4690      	mov	r8, r2
 8026036:	461f      	mov	r7, r3
 8026038:	d838      	bhi.n	80260ac <__ssputs_r+0x84>
 802603a:	898a      	ldrh	r2, [r1, #12]
 802603c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026040:	d032      	beq.n	80260a8 <__ssputs_r+0x80>
 8026042:	6825      	ldr	r5, [r4, #0]
 8026044:	6909      	ldr	r1, [r1, #16]
 8026046:	eba5 0901 	sub.w	r9, r5, r1
 802604a:	6965      	ldr	r5, [r4, #20]
 802604c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026054:	3301      	adds	r3, #1
 8026056:	444b      	add	r3, r9
 8026058:	106d      	asrs	r5, r5, #1
 802605a:	429d      	cmp	r5, r3
 802605c:	bf38      	it	cc
 802605e:	461d      	movcc	r5, r3
 8026060:	0553      	lsls	r3, r2, #21
 8026062:	d531      	bpl.n	80260c8 <__ssputs_r+0xa0>
 8026064:	4629      	mov	r1, r5
 8026066:	f7fb ffd7 	bl	8022018 <_malloc_r>
 802606a:	4606      	mov	r6, r0
 802606c:	b950      	cbnz	r0, 8026084 <__ssputs_r+0x5c>
 802606e:	230c      	movs	r3, #12
 8026070:	f8ca 3000 	str.w	r3, [sl]
 8026074:	89a3      	ldrh	r3, [r4, #12]
 8026076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802607a:	81a3      	strh	r3, [r4, #12]
 802607c:	f04f 30ff 	mov.w	r0, #4294967295
 8026080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026084:	6921      	ldr	r1, [r4, #16]
 8026086:	464a      	mov	r2, r9
 8026088:	f7fb ff44 	bl	8021f14 <memcpy>
 802608c:	89a3      	ldrh	r3, [r4, #12]
 802608e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026096:	81a3      	strh	r3, [r4, #12]
 8026098:	6126      	str	r6, [r4, #16]
 802609a:	6165      	str	r5, [r4, #20]
 802609c:	444e      	add	r6, r9
 802609e:	eba5 0509 	sub.w	r5, r5, r9
 80260a2:	6026      	str	r6, [r4, #0]
 80260a4:	60a5      	str	r5, [r4, #8]
 80260a6:	463e      	mov	r6, r7
 80260a8:	42be      	cmp	r6, r7
 80260aa:	d900      	bls.n	80260ae <__ssputs_r+0x86>
 80260ac:	463e      	mov	r6, r7
 80260ae:	6820      	ldr	r0, [r4, #0]
 80260b0:	4632      	mov	r2, r6
 80260b2:	4641      	mov	r1, r8
 80260b4:	f000 fabe 	bl	8026634 <memmove>
 80260b8:	68a3      	ldr	r3, [r4, #8]
 80260ba:	1b9b      	subs	r3, r3, r6
 80260bc:	60a3      	str	r3, [r4, #8]
 80260be:	6823      	ldr	r3, [r4, #0]
 80260c0:	4433      	add	r3, r6
 80260c2:	6023      	str	r3, [r4, #0]
 80260c4:	2000      	movs	r0, #0
 80260c6:	e7db      	b.n	8026080 <__ssputs_r+0x58>
 80260c8:	462a      	mov	r2, r5
 80260ca:	f000 facd 	bl	8026668 <_realloc_r>
 80260ce:	4606      	mov	r6, r0
 80260d0:	2800      	cmp	r0, #0
 80260d2:	d1e1      	bne.n	8026098 <__ssputs_r+0x70>
 80260d4:	6921      	ldr	r1, [r4, #16]
 80260d6:	4650      	mov	r0, sl
 80260d8:	f7fb ff32 	bl	8021f40 <_free_r>
 80260dc:	e7c7      	b.n	802606e <__ssputs_r+0x46>
	...

080260e0 <_svfiprintf_r>:
 80260e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260e4:	4698      	mov	r8, r3
 80260e6:	898b      	ldrh	r3, [r1, #12]
 80260e8:	061b      	lsls	r3, r3, #24
 80260ea:	b09d      	sub	sp, #116	; 0x74
 80260ec:	4607      	mov	r7, r0
 80260ee:	460d      	mov	r5, r1
 80260f0:	4614      	mov	r4, r2
 80260f2:	d50e      	bpl.n	8026112 <_svfiprintf_r+0x32>
 80260f4:	690b      	ldr	r3, [r1, #16]
 80260f6:	b963      	cbnz	r3, 8026112 <_svfiprintf_r+0x32>
 80260f8:	2140      	movs	r1, #64	; 0x40
 80260fa:	f7fb ff8d 	bl	8022018 <_malloc_r>
 80260fe:	6028      	str	r0, [r5, #0]
 8026100:	6128      	str	r0, [r5, #16]
 8026102:	b920      	cbnz	r0, 802610e <_svfiprintf_r+0x2e>
 8026104:	230c      	movs	r3, #12
 8026106:	603b      	str	r3, [r7, #0]
 8026108:	f04f 30ff 	mov.w	r0, #4294967295
 802610c:	e0d1      	b.n	80262b2 <_svfiprintf_r+0x1d2>
 802610e:	2340      	movs	r3, #64	; 0x40
 8026110:	616b      	str	r3, [r5, #20]
 8026112:	2300      	movs	r3, #0
 8026114:	9309      	str	r3, [sp, #36]	; 0x24
 8026116:	2320      	movs	r3, #32
 8026118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802611c:	f8cd 800c 	str.w	r8, [sp, #12]
 8026120:	2330      	movs	r3, #48	; 0x30
 8026122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80262cc <_svfiprintf_r+0x1ec>
 8026126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802612a:	f04f 0901 	mov.w	r9, #1
 802612e:	4623      	mov	r3, r4
 8026130:	469a      	mov	sl, r3
 8026132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026136:	b10a      	cbz	r2, 802613c <_svfiprintf_r+0x5c>
 8026138:	2a25      	cmp	r2, #37	; 0x25
 802613a:	d1f9      	bne.n	8026130 <_svfiprintf_r+0x50>
 802613c:	ebba 0b04 	subs.w	fp, sl, r4
 8026140:	d00b      	beq.n	802615a <_svfiprintf_r+0x7a>
 8026142:	465b      	mov	r3, fp
 8026144:	4622      	mov	r2, r4
 8026146:	4629      	mov	r1, r5
 8026148:	4638      	mov	r0, r7
 802614a:	f7ff ff6d 	bl	8026028 <__ssputs_r>
 802614e:	3001      	adds	r0, #1
 8026150:	f000 80aa 	beq.w	80262a8 <_svfiprintf_r+0x1c8>
 8026154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026156:	445a      	add	r2, fp
 8026158:	9209      	str	r2, [sp, #36]	; 0x24
 802615a:	f89a 3000 	ldrb.w	r3, [sl]
 802615e:	2b00      	cmp	r3, #0
 8026160:	f000 80a2 	beq.w	80262a8 <_svfiprintf_r+0x1c8>
 8026164:	2300      	movs	r3, #0
 8026166:	f04f 32ff 	mov.w	r2, #4294967295
 802616a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802616e:	f10a 0a01 	add.w	sl, sl, #1
 8026172:	9304      	str	r3, [sp, #16]
 8026174:	9307      	str	r3, [sp, #28]
 8026176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802617a:	931a      	str	r3, [sp, #104]	; 0x68
 802617c:	4654      	mov	r4, sl
 802617e:	2205      	movs	r2, #5
 8026180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026184:	4851      	ldr	r0, [pc, #324]	; (80262cc <_svfiprintf_r+0x1ec>)
 8026186:	f7da f8c3 	bl	8000310 <memchr>
 802618a:	9a04      	ldr	r2, [sp, #16]
 802618c:	b9d8      	cbnz	r0, 80261c6 <_svfiprintf_r+0xe6>
 802618e:	06d0      	lsls	r0, r2, #27
 8026190:	bf44      	itt	mi
 8026192:	2320      	movmi	r3, #32
 8026194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026198:	0711      	lsls	r1, r2, #28
 802619a:	bf44      	itt	mi
 802619c:	232b      	movmi	r3, #43	; 0x2b
 802619e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80261a2:	f89a 3000 	ldrb.w	r3, [sl]
 80261a6:	2b2a      	cmp	r3, #42	; 0x2a
 80261a8:	d015      	beq.n	80261d6 <_svfiprintf_r+0xf6>
 80261aa:	9a07      	ldr	r2, [sp, #28]
 80261ac:	4654      	mov	r4, sl
 80261ae:	2000      	movs	r0, #0
 80261b0:	f04f 0c0a 	mov.w	ip, #10
 80261b4:	4621      	mov	r1, r4
 80261b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80261ba:	3b30      	subs	r3, #48	; 0x30
 80261bc:	2b09      	cmp	r3, #9
 80261be:	d94e      	bls.n	802625e <_svfiprintf_r+0x17e>
 80261c0:	b1b0      	cbz	r0, 80261f0 <_svfiprintf_r+0x110>
 80261c2:	9207      	str	r2, [sp, #28]
 80261c4:	e014      	b.n	80261f0 <_svfiprintf_r+0x110>
 80261c6:	eba0 0308 	sub.w	r3, r0, r8
 80261ca:	fa09 f303 	lsl.w	r3, r9, r3
 80261ce:	4313      	orrs	r3, r2
 80261d0:	9304      	str	r3, [sp, #16]
 80261d2:	46a2      	mov	sl, r4
 80261d4:	e7d2      	b.n	802617c <_svfiprintf_r+0x9c>
 80261d6:	9b03      	ldr	r3, [sp, #12]
 80261d8:	1d19      	adds	r1, r3, #4
 80261da:	681b      	ldr	r3, [r3, #0]
 80261dc:	9103      	str	r1, [sp, #12]
 80261de:	2b00      	cmp	r3, #0
 80261e0:	bfbb      	ittet	lt
 80261e2:	425b      	neglt	r3, r3
 80261e4:	f042 0202 	orrlt.w	r2, r2, #2
 80261e8:	9307      	strge	r3, [sp, #28]
 80261ea:	9307      	strlt	r3, [sp, #28]
 80261ec:	bfb8      	it	lt
 80261ee:	9204      	strlt	r2, [sp, #16]
 80261f0:	7823      	ldrb	r3, [r4, #0]
 80261f2:	2b2e      	cmp	r3, #46	; 0x2e
 80261f4:	d10c      	bne.n	8026210 <_svfiprintf_r+0x130>
 80261f6:	7863      	ldrb	r3, [r4, #1]
 80261f8:	2b2a      	cmp	r3, #42	; 0x2a
 80261fa:	d135      	bne.n	8026268 <_svfiprintf_r+0x188>
 80261fc:	9b03      	ldr	r3, [sp, #12]
 80261fe:	1d1a      	adds	r2, r3, #4
 8026200:	681b      	ldr	r3, [r3, #0]
 8026202:	9203      	str	r2, [sp, #12]
 8026204:	2b00      	cmp	r3, #0
 8026206:	bfb8      	it	lt
 8026208:	f04f 33ff 	movlt.w	r3, #4294967295
 802620c:	3402      	adds	r4, #2
 802620e:	9305      	str	r3, [sp, #20]
 8026210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80262dc <_svfiprintf_r+0x1fc>
 8026214:	7821      	ldrb	r1, [r4, #0]
 8026216:	2203      	movs	r2, #3
 8026218:	4650      	mov	r0, sl
 802621a:	f7da f879 	bl	8000310 <memchr>
 802621e:	b140      	cbz	r0, 8026232 <_svfiprintf_r+0x152>
 8026220:	2340      	movs	r3, #64	; 0x40
 8026222:	eba0 000a 	sub.w	r0, r0, sl
 8026226:	fa03 f000 	lsl.w	r0, r3, r0
 802622a:	9b04      	ldr	r3, [sp, #16]
 802622c:	4303      	orrs	r3, r0
 802622e:	3401      	adds	r4, #1
 8026230:	9304      	str	r3, [sp, #16]
 8026232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026236:	4826      	ldr	r0, [pc, #152]	; (80262d0 <_svfiprintf_r+0x1f0>)
 8026238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802623c:	2206      	movs	r2, #6
 802623e:	f7da f867 	bl	8000310 <memchr>
 8026242:	2800      	cmp	r0, #0
 8026244:	d038      	beq.n	80262b8 <_svfiprintf_r+0x1d8>
 8026246:	4b23      	ldr	r3, [pc, #140]	; (80262d4 <_svfiprintf_r+0x1f4>)
 8026248:	bb1b      	cbnz	r3, 8026292 <_svfiprintf_r+0x1b2>
 802624a:	9b03      	ldr	r3, [sp, #12]
 802624c:	3307      	adds	r3, #7
 802624e:	f023 0307 	bic.w	r3, r3, #7
 8026252:	3308      	adds	r3, #8
 8026254:	9303      	str	r3, [sp, #12]
 8026256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026258:	4433      	add	r3, r6
 802625a:	9309      	str	r3, [sp, #36]	; 0x24
 802625c:	e767      	b.n	802612e <_svfiprintf_r+0x4e>
 802625e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026262:	460c      	mov	r4, r1
 8026264:	2001      	movs	r0, #1
 8026266:	e7a5      	b.n	80261b4 <_svfiprintf_r+0xd4>
 8026268:	2300      	movs	r3, #0
 802626a:	3401      	adds	r4, #1
 802626c:	9305      	str	r3, [sp, #20]
 802626e:	4619      	mov	r1, r3
 8026270:	f04f 0c0a 	mov.w	ip, #10
 8026274:	4620      	mov	r0, r4
 8026276:	f810 2b01 	ldrb.w	r2, [r0], #1
 802627a:	3a30      	subs	r2, #48	; 0x30
 802627c:	2a09      	cmp	r2, #9
 802627e:	d903      	bls.n	8026288 <_svfiprintf_r+0x1a8>
 8026280:	2b00      	cmp	r3, #0
 8026282:	d0c5      	beq.n	8026210 <_svfiprintf_r+0x130>
 8026284:	9105      	str	r1, [sp, #20]
 8026286:	e7c3      	b.n	8026210 <_svfiprintf_r+0x130>
 8026288:	fb0c 2101 	mla	r1, ip, r1, r2
 802628c:	4604      	mov	r4, r0
 802628e:	2301      	movs	r3, #1
 8026290:	e7f0      	b.n	8026274 <_svfiprintf_r+0x194>
 8026292:	ab03      	add	r3, sp, #12
 8026294:	9300      	str	r3, [sp, #0]
 8026296:	462a      	mov	r2, r5
 8026298:	4b0f      	ldr	r3, [pc, #60]	; (80262d8 <_svfiprintf_r+0x1f8>)
 802629a:	a904      	add	r1, sp, #16
 802629c:	4638      	mov	r0, r7
 802629e:	f7fb ffbf 	bl	8022220 <_printf_float>
 80262a2:	1c42      	adds	r2, r0, #1
 80262a4:	4606      	mov	r6, r0
 80262a6:	d1d6      	bne.n	8026256 <_svfiprintf_r+0x176>
 80262a8:	89ab      	ldrh	r3, [r5, #12]
 80262aa:	065b      	lsls	r3, r3, #25
 80262ac:	f53f af2c 	bmi.w	8026108 <_svfiprintf_r+0x28>
 80262b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80262b2:	b01d      	add	sp, #116	; 0x74
 80262b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262b8:	ab03      	add	r3, sp, #12
 80262ba:	9300      	str	r3, [sp, #0]
 80262bc:	462a      	mov	r2, r5
 80262be:	4b06      	ldr	r3, [pc, #24]	; (80262d8 <_svfiprintf_r+0x1f8>)
 80262c0:	a904      	add	r1, sp, #16
 80262c2:	4638      	mov	r0, r7
 80262c4:	f7fc fa38 	bl	8022738 <_printf_i>
 80262c8:	e7eb      	b.n	80262a2 <_svfiprintf_r+0x1c2>
 80262ca:	bf00      	nop
 80262cc:	080281bc 	.word	0x080281bc
 80262d0:	080281c6 	.word	0x080281c6
 80262d4:	08022221 	.word	0x08022221
 80262d8:	08026029 	.word	0x08026029
 80262dc:	080281c2 	.word	0x080281c2

080262e0 <__sfputc_r>:
 80262e0:	6893      	ldr	r3, [r2, #8]
 80262e2:	3b01      	subs	r3, #1
 80262e4:	2b00      	cmp	r3, #0
 80262e6:	b410      	push	{r4}
 80262e8:	6093      	str	r3, [r2, #8]
 80262ea:	da08      	bge.n	80262fe <__sfputc_r+0x1e>
 80262ec:	6994      	ldr	r4, [r2, #24]
 80262ee:	42a3      	cmp	r3, r4
 80262f0:	db01      	blt.n	80262f6 <__sfputc_r+0x16>
 80262f2:	290a      	cmp	r1, #10
 80262f4:	d103      	bne.n	80262fe <__sfputc_r+0x1e>
 80262f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80262fa:	f7fd bde7 	b.w	8023ecc <__swbuf_r>
 80262fe:	6813      	ldr	r3, [r2, #0]
 8026300:	1c58      	adds	r0, r3, #1
 8026302:	6010      	str	r0, [r2, #0]
 8026304:	7019      	strb	r1, [r3, #0]
 8026306:	4608      	mov	r0, r1
 8026308:	f85d 4b04 	ldr.w	r4, [sp], #4
 802630c:	4770      	bx	lr

0802630e <__sfputs_r>:
 802630e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026310:	4606      	mov	r6, r0
 8026312:	460f      	mov	r7, r1
 8026314:	4614      	mov	r4, r2
 8026316:	18d5      	adds	r5, r2, r3
 8026318:	42ac      	cmp	r4, r5
 802631a:	d101      	bne.n	8026320 <__sfputs_r+0x12>
 802631c:	2000      	movs	r0, #0
 802631e:	e007      	b.n	8026330 <__sfputs_r+0x22>
 8026320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026324:	463a      	mov	r2, r7
 8026326:	4630      	mov	r0, r6
 8026328:	f7ff ffda 	bl	80262e0 <__sfputc_r>
 802632c:	1c43      	adds	r3, r0, #1
 802632e:	d1f3      	bne.n	8026318 <__sfputs_r+0xa>
 8026330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026334 <_vfiprintf_r>:
 8026334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026338:	460d      	mov	r5, r1
 802633a:	b09d      	sub	sp, #116	; 0x74
 802633c:	4614      	mov	r4, r2
 802633e:	4698      	mov	r8, r3
 8026340:	4606      	mov	r6, r0
 8026342:	b118      	cbz	r0, 802634c <_vfiprintf_r+0x18>
 8026344:	6983      	ldr	r3, [r0, #24]
 8026346:	b90b      	cbnz	r3, 802634c <_vfiprintf_r+0x18>
 8026348:	f7fb fd16 	bl	8021d78 <__sinit>
 802634c:	4b89      	ldr	r3, [pc, #548]	; (8026574 <_vfiprintf_r+0x240>)
 802634e:	429d      	cmp	r5, r3
 8026350:	d11b      	bne.n	802638a <_vfiprintf_r+0x56>
 8026352:	6875      	ldr	r5, [r6, #4]
 8026354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026356:	07d9      	lsls	r1, r3, #31
 8026358:	d405      	bmi.n	8026366 <_vfiprintf_r+0x32>
 802635a:	89ab      	ldrh	r3, [r5, #12]
 802635c:	059a      	lsls	r2, r3, #22
 802635e:	d402      	bmi.n	8026366 <_vfiprintf_r+0x32>
 8026360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026362:	f7fb fdcc 	bl	8021efe <__retarget_lock_acquire_recursive>
 8026366:	89ab      	ldrh	r3, [r5, #12]
 8026368:	071b      	lsls	r3, r3, #28
 802636a:	d501      	bpl.n	8026370 <_vfiprintf_r+0x3c>
 802636c:	692b      	ldr	r3, [r5, #16]
 802636e:	b9eb      	cbnz	r3, 80263ac <_vfiprintf_r+0x78>
 8026370:	4629      	mov	r1, r5
 8026372:	4630      	mov	r0, r6
 8026374:	f7fd fe0e 	bl	8023f94 <__swsetup_r>
 8026378:	b1c0      	cbz	r0, 80263ac <_vfiprintf_r+0x78>
 802637a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802637c:	07dc      	lsls	r4, r3, #31
 802637e:	d50e      	bpl.n	802639e <_vfiprintf_r+0x6a>
 8026380:	f04f 30ff 	mov.w	r0, #4294967295
 8026384:	b01d      	add	sp, #116	; 0x74
 8026386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802638a:	4b7b      	ldr	r3, [pc, #492]	; (8026578 <_vfiprintf_r+0x244>)
 802638c:	429d      	cmp	r5, r3
 802638e:	d101      	bne.n	8026394 <_vfiprintf_r+0x60>
 8026390:	68b5      	ldr	r5, [r6, #8]
 8026392:	e7df      	b.n	8026354 <_vfiprintf_r+0x20>
 8026394:	4b79      	ldr	r3, [pc, #484]	; (802657c <_vfiprintf_r+0x248>)
 8026396:	429d      	cmp	r5, r3
 8026398:	bf08      	it	eq
 802639a:	68f5      	ldreq	r5, [r6, #12]
 802639c:	e7da      	b.n	8026354 <_vfiprintf_r+0x20>
 802639e:	89ab      	ldrh	r3, [r5, #12]
 80263a0:	0598      	lsls	r0, r3, #22
 80263a2:	d4ed      	bmi.n	8026380 <_vfiprintf_r+0x4c>
 80263a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80263a6:	f7fb fdab 	bl	8021f00 <__retarget_lock_release_recursive>
 80263aa:	e7e9      	b.n	8026380 <_vfiprintf_r+0x4c>
 80263ac:	2300      	movs	r3, #0
 80263ae:	9309      	str	r3, [sp, #36]	; 0x24
 80263b0:	2320      	movs	r3, #32
 80263b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80263b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80263ba:	2330      	movs	r3, #48	; 0x30
 80263bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026580 <_vfiprintf_r+0x24c>
 80263c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80263c4:	f04f 0901 	mov.w	r9, #1
 80263c8:	4623      	mov	r3, r4
 80263ca:	469a      	mov	sl, r3
 80263cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80263d0:	b10a      	cbz	r2, 80263d6 <_vfiprintf_r+0xa2>
 80263d2:	2a25      	cmp	r2, #37	; 0x25
 80263d4:	d1f9      	bne.n	80263ca <_vfiprintf_r+0x96>
 80263d6:	ebba 0b04 	subs.w	fp, sl, r4
 80263da:	d00b      	beq.n	80263f4 <_vfiprintf_r+0xc0>
 80263dc:	465b      	mov	r3, fp
 80263de:	4622      	mov	r2, r4
 80263e0:	4629      	mov	r1, r5
 80263e2:	4630      	mov	r0, r6
 80263e4:	f7ff ff93 	bl	802630e <__sfputs_r>
 80263e8:	3001      	adds	r0, #1
 80263ea:	f000 80aa 	beq.w	8026542 <_vfiprintf_r+0x20e>
 80263ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80263f0:	445a      	add	r2, fp
 80263f2:	9209      	str	r2, [sp, #36]	; 0x24
 80263f4:	f89a 3000 	ldrb.w	r3, [sl]
 80263f8:	2b00      	cmp	r3, #0
 80263fa:	f000 80a2 	beq.w	8026542 <_vfiprintf_r+0x20e>
 80263fe:	2300      	movs	r3, #0
 8026400:	f04f 32ff 	mov.w	r2, #4294967295
 8026404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026408:	f10a 0a01 	add.w	sl, sl, #1
 802640c:	9304      	str	r3, [sp, #16]
 802640e:	9307      	str	r3, [sp, #28]
 8026410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026414:	931a      	str	r3, [sp, #104]	; 0x68
 8026416:	4654      	mov	r4, sl
 8026418:	2205      	movs	r2, #5
 802641a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802641e:	4858      	ldr	r0, [pc, #352]	; (8026580 <_vfiprintf_r+0x24c>)
 8026420:	f7d9 ff76 	bl	8000310 <memchr>
 8026424:	9a04      	ldr	r2, [sp, #16]
 8026426:	b9d8      	cbnz	r0, 8026460 <_vfiprintf_r+0x12c>
 8026428:	06d1      	lsls	r1, r2, #27
 802642a:	bf44      	itt	mi
 802642c:	2320      	movmi	r3, #32
 802642e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026432:	0713      	lsls	r3, r2, #28
 8026434:	bf44      	itt	mi
 8026436:	232b      	movmi	r3, #43	; 0x2b
 8026438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802643c:	f89a 3000 	ldrb.w	r3, [sl]
 8026440:	2b2a      	cmp	r3, #42	; 0x2a
 8026442:	d015      	beq.n	8026470 <_vfiprintf_r+0x13c>
 8026444:	9a07      	ldr	r2, [sp, #28]
 8026446:	4654      	mov	r4, sl
 8026448:	2000      	movs	r0, #0
 802644a:	f04f 0c0a 	mov.w	ip, #10
 802644e:	4621      	mov	r1, r4
 8026450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026454:	3b30      	subs	r3, #48	; 0x30
 8026456:	2b09      	cmp	r3, #9
 8026458:	d94e      	bls.n	80264f8 <_vfiprintf_r+0x1c4>
 802645a:	b1b0      	cbz	r0, 802648a <_vfiprintf_r+0x156>
 802645c:	9207      	str	r2, [sp, #28]
 802645e:	e014      	b.n	802648a <_vfiprintf_r+0x156>
 8026460:	eba0 0308 	sub.w	r3, r0, r8
 8026464:	fa09 f303 	lsl.w	r3, r9, r3
 8026468:	4313      	orrs	r3, r2
 802646a:	9304      	str	r3, [sp, #16]
 802646c:	46a2      	mov	sl, r4
 802646e:	e7d2      	b.n	8026416 <_vfiprintf_r+0xe2>
 8026470:	9b03      	ldr	r3, [sp, #12]
 8026472:	1d19      	adds	r1, r3, #4
 8026474:	681b      	ldr	r3, [r3, #0]
 8026476:	9103      	str	r1, [sp, #12]
 8026478:	2b00      	cmp	r3, #0
 802647a:	bfbb      	ittet	lt
 802647c:	425b      	neglt	r3, r3
 802647e:	f042 0202 	orrlt.w	r2, r2, #2
 8026482:	9307      	strge	r3, [sp, #28]
 8026484:	9307      	strlt	r3, [sp, #28]
 8026486:	bfb8      	it	lt
 8026488:	9204      	strlt	r2, [sp, #16]
 802648a:	7823      	ldrb	r3, [r4, #0]
 802648c:	2b2e      	cmp	r3, #46	; 0x2e
 802648e:	d10c      	bne.n	80264aa <_vfiprintf_r+0x176>
 8026490:	7863      	ldrb	r3, [r4, #1]
 8026492:	2b2a      	cmp	r3, #42	; 0x2a
 8026494:	d135      	bne.n	8026502 <_vfiprintf_r+0x1ce>
 8026496:	9b03      	ldr	r3, [sp, #12]
 8026498:	1d1a      	adds	r2, r3, #4
 802649a:	681b      	ldr	r3, [r3, #0]
 802649c:	9203      	str	r2, [sp, #12]
 802649e:	2b00      	cmp	r3, #0
 80264a0:	bfb8      	it	lt
 80264a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80264a6:	3402      	adds	r4, #2
 80264a8:	9305      	str	r3, [sp, #20]
 80264aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026590 <_vfiprintf_r+0x25c>
 80264ae:	7821      	ldrb	r1, [r4, #0]
 80264b0:	2203      	movs	r2, #3
 80264b2:	4650      	mov	r0, sl
 80264b4:	f7d9 ff2c 	bl	8000310 <memchr>
 80264b8:	b140      	cbz	r0, 80264cc <_vfiprintf_r+0x198>
 80264ba:	2340      	movs	r3, #64	; 0x40
 80264bc:	eba0 000a 	sub.w	r0, r0, sl
 80264c0:	fa03 f000 	lsl.w	r0, r3, r0
 80264c4:	9b04      	ldr	r3, [sp, #16]
 80264c6:	4303      	orrs	r3, r0
 80264c8:	3401      	adds	r4, #1
 80264ca:	9304      	str	r3, [sp, #16]
 80264cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80264d0:	482c      	ldr	r0, [pc, #176]	; (8026584 <_vfiprintf_r+0x250>)
 80264d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80264d6:	2206      	movs	r2, #6
 80264d8:	f7d9 ff1a 	bl	8000310 <memchr>
 80264dc:	2800      	cmp	r0, #0
 80264de:	d03f      	beq.n	8026560 <_vfiprintf_r+0x22c>
 80264e0:	4b29      	ldr	r3, [pc, #164]	; (8026588 <_vfiprintf_r+0x254>)
 80264e2:	bb1b      	cbnz	r3, 802652c <_vfiprintf_r+0x1f8>
 80264e4:	9b03      	ldr	r3, [sp, #12]
 80264e6:	3307      	adds	r3, #7
 80264e8:	f023 0307 	bic.w	r3, r3, #7
 80264ec:	3308      	adds	r3, #8
 80264ee:	9303      	str	r3, [sp, #12]
 80264f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264f2:	443b      	add	r3, r7
 80264f4:	9309      	str	r3, [sp, #36]	; 0x24
 80264f6:	e767      	b.n	80263c8 <_vfiprintf_r+0x94>
 80264f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80264fc:	460c      	mov	r4, r1
 80264fe:	2001      	movs	r0, #1
 8026500:	e7a5      	b.n	802644e <_vfiprintf_r+0x11a>
 8026502:	2300      	movs	r3, #0
 8026504:	3401      	adds	r4, #1
 8026506:	9305      	str	r3, [sp, #20]
 8026508:	4619      	mov	r1, r3
 802650a:	f04f 0c0a 	mov.w	ip, #10
 802650e:	4620      	mov	r0, r4
 8026510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026514:	3a30      	subs	r2, #48	; 0x30
 8026516:	2a09      	cmp	r2, #9
 8026518:	d903      	bls.n	8026522 <_vfiprintf_r+0x1ee>
 802651a:	2b00      	cmp	r3, #0
 802651c:	d0c5      	beq.n	80264aa <_vfiprintf_r+0x176>
 802651e:	9105      	str	r1, [sp, #20]
 8026520:	e7c3      	b.n	80264aa <_vfiprintf_r+0x176>
 8026522:	fb0c 2101 	mla	r1, ip, r1, r2
 8026526:	4604      	mov	r4, r0
 8026528:	2301      	movs	r3, #1
 802652a:	e7f0      	b.n	802650e <_vfiprintf_r+0x1da>
 802652c:	ab03      	add	r3, sp, #12
 802652e:	9300      	str	r3, [sp, #0]
 8026530:	462a      	mov	r2, r5
 8026532:	4b16      	ldr	r3, [pc, #88]	; (802658c <_vfiprintf_r+0x258>)
 8026534:	a904      	add	r1, sp, #16
 8026536:	4630      	mov	r0, r6
 8026538:	f7fb fe72 	bl	8022220 <_printf_float>
 802653c:	4607      	mov	r7, r0
 802653e:	1c78      	adds	r0, r7, #1
 8026540:	d1d6      	bne.n	80264f0 <_vfiprintf_r+0x1bc>
 8026542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026544:	07d9      	lsls	r1, r3, #31
 8026546:	d405      	bmi.n	8026554 <_vfiprintf_r+0x220>
 8026548:	89ab      	ldrh	r3, [r5, #12]
 802654a:	059a      	lsls	r2, r3, #22
 802654c:	d402      	bmi.n	8026554 <_vfiprintf_r+0x220>
 802654e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026550:	f7fb fcd6 	bl	8021f00 <__retarget_lock_release_recursive>
 8026554:	89ab      	ldrh	r3, [r5, #12]
 8026556:	065b      	lsls	r3, r3, #25
 8026558:	f53f af12 	bmi.w	8026380 <_vfiprintf_r+0x4c>
 802655c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802655e:	e711      	b.n	8026384 <_vfiprintf_r+0x50>
 8026560:	ab03      	add	r3, sp, #12
 8026562:	9300      	str	r3, [sp, #0]
 8026564:	462a      	mov	r2, r5
 8026566:	4b09      	ldr	r3, [pc, #36]	; (802658c <_vfiprintf_r+0x258>)
 8026568:	a904      	add	r1, sp, #16
 802656a:	4630      	mov	r0, r6
 802656c:	f7fc f8e4 	bl	8022738 <_printf_i>
 8026570:	e7e4      	b.n	802653c <_vfiprintf_r+0x208>
 8026572:	bf00      	nop
 8026574:	08027df0 	.word	0x08027df0
 8026578:	08027e10 	.word	0x08027e10
 802657c:	08027dd0 	.word	0x08027dd0
 8026580:	080281bc 	.word	0x080281bc
 8026584:	080281c6 	.word	0x080281c6
 8026588:	08022221 	.word	0x08022221
 802658c:	0802630f 	.word	0x0802630f
 8026590:	080281c2 	.word	0x080281c2

08026594 <_read_r>:
 8026594:	b538      	push	{r3, r4, r5, lr}
 8026596:	4d07      	ldr	r5, [pc, #28]	; (80265b4 <_read_r+0x20>)
 8026598:	4604      	mov	r4, r0
 802659a:	4608      	mov	r0, r1
 802659c:	4611      	mov	r1, r2
 802659e:	2200      	movs	r2, #0
 80265a0:	602a      	str	r2, [r5, #0]
 80265a2:	461a      	mov	r2, r3
 80265a4:	f7e1 fc48 	bl	8007e38 <_read>
 80265a8:	1c43      	adds	r3, r0, #1
 80265aa:	d102      	bne.n	80265b2 <_read_r+0x1e>
 80265ac:	682b      	ldr	r3, [r5, #0]
 80265ae:	b103      	cbz	r3, 80265b2 <_read_r+0x1e>
 80265b0:	6023      	str	r3, [r4, #0]
 80265b2:	bd38      	pop	{r3, r4, r5, pc}
 80265b4:	24009044 	.word	0x24009044

080265b8 <nan>:
 80265b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80265c0 <nan+0x8>
 80265bc:	4770      	bx	lr
 80265be:	bf00      	nop
 80265c0:	00000000 	.word	0x00000000
 80265c4:	7ff80000 	.word	0x7ff80000

080265c8 <__ascii_wctomb>:
 80265c8:	b149      	cbz	r1, 80265de <__ascii_wctomb+0x16>
 80265ca:	2aff      	cmp	r2, #255	; 0xff
 80265cc:	bf85      	ittet	hi
 80265ce:	238a      	movhi	r3, #138	; 0x8a
 80265d0:	6003      	strhi	r3, [r0, #0]
 80265d2:	700a      	strbls	r2, [r1, #0]
 80265d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80265d8:	bf98      	it	ls
 80265da:	2001      	movls	r0, #1
 80265dc:	4770      	bx	lr
 80265de:	4608      	mov	r0, r1
 80265e0:	4770      	bx	lr

080265e2 <abort>:
 80265e2:	b508      	push	{r3, lr}
 80265e4:	2006      	movs	r0, #6
 80265e6:	f000 f897 	bl	8026718 <raise>
 80265ea:	2001      	movs	r0, #1
 80265ec:	f7e1 fc1a 	bl	8007e24 <_exit>

080265f0 <_fstat_r>:
 80265f0:	b538      	push	{r3, r4, r5, lr}
 80265f2:	4d07      	ldr	r5, [pc, #28]	; (8026610 <_fstat_r+0x20>)
 80265f4:	2300      	movs	r3, #0
 80265f6:	4604      	mov	r4, r0
 80265f8:	4608      	mov	r0, r1
 80265fa:	4611      	mov	r1, r2
 80265fc:	602b      	str	r3, [r5, #0]
 80265fe:	f7e1 fc44 	bl	8007e8a <_fstat>
 8026602:	1c43      	adds	r3, r0, #1
 8026604:	d102      	bne.n	802660c <_fstat_r+0x1c>
 8026606:	682b      	ldr	r3, [r5, #0]
 8026608:	b103      	cbz	r3, 802660c <_fstat_r+0x1c>
 802660a:	6023      	str	r3, [r4, #0]
 802660c:	bd38      	pop	{r3, r4, r5, pc}
 802660e:	bf00      	nop
 8026610:	24009044 	.word	0x24009044

08026614 <_isatty_r>:
 8026614:	b538      	push	{r3, r4, r5, lr}
 8026616:	4d06      	ldr	r5, [pc, #24]	; (8026630 <_isatty_r+0x1c>)
 8026618:	2300      	movs	r3, #0
 802661a:	4604      	mov	r4, r0
 802661c:	4608      	mov	r0, r1
 802661e:	602b      	str	r3, [r5, #0]
 8026620:	f7e1 fc43 	bl	8007eaa <_isatty>
 8026624:	1c43      	adds	r3, r0, #1
 8026626:	d102      	bne.n	802662e <_isatty_r+0x1a>
 8026628:	682b      	ldr	r3, [r5, #0]
 802662a:	b103      	cbz	r3, 802662e <_isatty_r+0x1a>
 802662c:	6023      	str	r3, [r4, #0]
 802662e:	bd38      	pop	{r3, r4, r5, pc}
 8026630:	24009044 	.word	0x24009044

08026634 <memmove>:
 8026634:	4288      	cmp	r0, r1
 8026636:	b510      	push	{r4, lr}
 8026638:	eb01 0402 	add.w	r4, r1, r2
 802663c:	d902      	bls.n	8026644 <memmove+0x10>
 802663e:	4284      	cmp	r4, r0
 8026640:	4623      	mov	r3, r4
 8026642:	d807      	bhi.n	8026654 <memmove+0x20>
 8026644:	1e43      	subs	r3, r0, #1
 8026646:	42a1      	cmp	r1, r4
 8026648:	d008      	beq.n	802665c <memmove+0x28>
 802664a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802664e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026652:	e7f8      	b.n	8026646 <memmove+0x12>
 8026654:	4402      	add	r2, r0
 8026656:	4601      	mov	r1, r0
 8026658:	428a      	cmp	r2, r1
 802665a:	d100      	bne.n	802665e <memmove+0x2a>
 802665c:	bd10      	pop	{r4, pc}
 802665e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026666:	e7f7      	b.n	8026658 <memmove+0x24>

08026668 <_realloc_r>:
 8026668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802666c:	4680      	mov	r8, r0
 802666e:	4614      	mov	r4, r2
 8026670:	460e      	mov	r6, r1
 8026672:	b921      	cbnz	r1, 802667e <_realloc_r+0x16>
 8026674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026678:	4611      	mov	r1, r2
 802667a:	f7fb bccd 	b.w	8022018 <_malloc_r>
 802667e:	b92a      	cbnz	r2, 802668c <_realloc_r+0x24>
 8026680:	f7fb fc5e 	bl	8021f40 <_free_r>
 8026684:	4625      	mov	r5, r4
 8026686:	4628      	mov	r0, r5
 8026688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802668c:	f000 f860 	bl	8026750 <_malloc_usable_size_r>
 8026690:	4284      	cmp	r4, r0
 8026692:	4607      	mov	r7, r0
 8026694:	d802      	bhi.n	802669c <_realloc_r+0x34>
 8026696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802669a:	d812      	bhi.n	80266c2 <_realloc_r+0x5a>
 802669c:	4621      	mov	r1, r4
 802669e:	4640      	mov	r0, r8
 80266a0:	f7fb fcba 	bl	8022018 <_malloc_r>
 80266a4:	4605      	mov	r5, r0
 80266a6:	2800      	cmp	r0, #0
 80266a8:	d0ed      	beq.n	8026686 <_realloc_r+0x1e>
 80266aa:	42bc      	cmp	r4, r7
 80266ac:	4622      	mov	r2, r4
 80266ae:	4631      	mov	r1, r6
 80266b0:	bf28      	it	cs
 80266b2:	463a      	movcs	r2, r7
 80266b4:	f7fb fc2e 	bl	8021f14 <memcpy>
 80266b8:	4631      	mov	r1, r6
 80266ba:	4640      	mov	r0, r8
 80266bc:	f7fb fc40 	bl	8021f40 <_free_r>
 80266c0:	e7e1      	b.n	8026686 <_realloc_r+0x1e>
 80266c2:	4635      	mov	r5, r6
 80266c4:	e7df      	b.n	8026686 <_realloc_r+0x1e>

080266c6 <_raise_r>:
 80266c6:	291f      	cmp	r1, #31
 80266c8:	b538      	push	{r3, r4, r5, lr}
 80266ca:	4604      	mov	r4, r0
 80266cc:	460d      	mov	r5, r1
 80266ce:	d904      	bls.n	80266da <_raise_r+0x14>
 80266d0:	2316      	movs	r3, #22
 80266d2:	6003      	str	r3, [r0, #0]
 80266d4:	f04f 30ff 	mov.w	r0, #4294967295
 80266d8:	bd38      	pop	{r3, r4, r5, pc}
 80266da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80266dc:	b112      	cbz	r2, 80266e4 <_raise_r+0x1e>
 80266de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80266e2:	b94b      	cbnz	r3, 80266f8 <_raise_r+0x32>
 80266e4:	4620      	mov	r0, r4
 80266e6:	f000 f831 	bl	802674c <_getpid_r>
 80266ea:	462a      	mov	r2, r5
 80266ec:	4601      	mov	r1, r0
 80266ee:	4620      	mov	r0, r4
 80266f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80266f4:	f000 b818 	b.w	8026728 <_kill_r>
 80266f8:	2b01      	cmp	r3, #1
 80266fa:	d00a      	beq.n	8026712 <_raise_r+0x4c>
 80266fc:	1c59      	adds	r1, r3, #1
 80266fe:	d103      	bne.n	8026708 <_raise_r+0x42>
 8026700:	2316      	movs	r3, #22
 8026702:	6003      	str	r3, [r0, #0]
 8026704:	2001      	movs	r0, #1
 8026706:	e7e7      	b.n	80266d8 <_raise_r+0x12>
 8026708:	2400      	movs	r4, #0
 802670a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802670e:	4628      	mov	r0, r5
 8026710:	4798      	blx	r3
 8026712:	2000      	movs	r0, #0
 8026714:	e7e0      	b.n	80266d8 <_raise_r+0x12>
	...

08026718 <raise>:
 8026718:	4b02      	ldr	r3, [pc, #8]	; (8026724 <raise+0xc>)
 802671a:	4601      	mov	r1, r0
 802671c:	6818      	ldr	r0, [r3, #0]
 802671e:	f7ff bfd2 	b.w	80266c6 <_raise_r>
 8026722:	bf00      	nop
 8026724:	240002f8 	.word	0x240002f8

08026728 <_kill_r>:
 8026728:	b538      	push	{r3, r4, r5, lr}
 802672a:	4d07      	ldr	r5, [pc, #28]	; (8026748 <_kill_r+0x20>)
 802672c:	2300      	movs	r3, #0
 802672e:	4604      	mov	r4, r0
 8026730:	4608      	mov	r0, r1
 8026732:	4611      	mov	r1, r2
 8026734:	602b      	str	r3, [r5, #0]
 8026736:	f7e1 fb65 	bl	8007e04 <_kill>
 802673a:	1c43      	adds	r3, r0, #1
 802673c:	d102      	bne.n	8026744 <_kill_r+0x1c>
 802673e:	682b      	ldr	r3, [r5, #0]
 8026740:	b103      	cbz	r3, 8026744 <_kill_r+0x1c>
 8026742:	6023      	str	r3, [r4, #0]
 8026744:	bd38      	pop	{r3, r4, r5, pc}
 8026746:	bf00      	nop
 8026748:	24009044 	.word	0x24009044

0802674c <_getpid_r>:
 802674c:	f7e1 bb52 	b.w	8007df4 <_getpid>

08026750 <_malloc_usable_size_r>:
 8026750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026754:	1f18      	subs	r0, r3, #4
 8026756:	2b00      	cmp	r3, #0
 8026758:	bfbc      	itt	lt
 802675a:	580b      	ldrlt	r3, [r1, r0]
 802675c:	18c0      	addlt	r0, r0, r3
 802675e:	4770      	bx	lr

08026760 <checkint>:
 8026760:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8026764:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8026768:	429a      	cmp	r2, r3
 802676a:	b570      	push	{r4, r5, r6, lr}
 802676c:	dd2a      	ble.n	80267c4 <checkint+0x64>
 802676e:	f240 4333 	movw	r3, #1075	; 0x433
 8026772:	429a      	cmp	r2, r3
 8026774:	dc24      	bgt.n	80267c0 <checkint+0x60>
 8026776:	1a9b      	subs	r3, r3, r2
 8026778:	f1a3 0620 	sub.w	r6, r3, #32
 802677c:	f04f 32ff 	mov.w	r2, #4294967295
 8026780:	fa02 f403 	lsl.w	r4, r2, r3
 8026784:	fa02 f606 	lsl.w	r6, r2, r6
 8026788:	f1c3 0520 	rsb	r5, r3, #32
 802678c:	fa22 f505 	lsr.w	r5, r2, r5
 8026790:	4334      	orrs	r4, r6
 8026792:	432c      	orrs	r4, r5
 8026794:	409a      	lsls	r2, r3
 8026796:	ea20 0202 	bic.w	r2, r0, r2
 802679a:	ea21 0404 	bic.w	r4, r1, r4
 802679e:	4322      	orrs	r2, r4
 80267a0:	f1a3 0420 	sub.w	r4, r3, #32
 80267a4:	f1c3 0220 	rsb	r2, r3, #32
 80267a8:	d10c      	bne.n	80267c4 <checkint+0x64>
 80267aa:	40d8      	lsrs	r0, r3
 80267ac:	fa01 f302 	lsl.w	r3, r1, r2
 80267b0:	4318      	orrs	r0, r3
 80267b2:	40e1      	lsrs	r1, r4
 80267b4:	4308      	orrs	r0, r1
 80267b6:	f000 0001 	and.w	r0, r0, #1
 80267ba:	f1d0 0002 	rsbs	r0, r0, #2
 80267be:	bd70      	pop	{r4, r5, r6, pc}
 80267c0:	2002      	movs	r0, #2
 80267c2:	e7fc      	b.n	80267be <checkint+0x5e>
 80267c4:	2000      	movs	r0, #0
 80267c6:	e7fa      	b.n	80267be <checkint+0x5e>

080267c8 <pow>:
 80267c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80267cc:	ee10 4a90 	vmov	r4, s1
 80267d0:	ed2d 8b0a 	vpush	{d8-d12}
 80267d4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80267d8:	ee11 7a90 	vmov	r7, s3
 80267dc:	f10a 32ff 	add.w	r2, sl, #4294967295
 80267e0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80267e4:	429a      	cmp	r2, r3
 80267e6:	ee10 6a10 	vmov	r6, s0
 80267ea:	ee11 0a10 	vmov	r0, s2
 80267ee:	b086      	sub	sp, #24
 80267f0:	46d4      	mov	ip, sl
 80267f2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80267f6:	d806      	bhi.n	8026806 <pow+0x3e>
 80267f8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80267fc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8026800:	2b7f      	cmp	r3, #127	; 0x7f
 8026802:	f240 8156 	bls.w	8026ab2 <pow+0x2ea>
 8026806:	1802      	adds	r2, r0, r0
 8026808:	eb47 0107 	adc.w	r1, r7, r7
 802680c:	f06f 0e01 	mvn.w	lr, #1
 8026810:	f112 39ff 	adds.w	r9, r2, #4294967295
 8026814:	f141 38ff 	adc.w	r8, r1, #4294967295
 8026818:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 802681c:	45ce      	cmp	lr, r9
 802681e:	eb73 0808 	sbcs.w	r8, r3, r8
 8026822:	d23f      	bcs.n	80268a4 <pow+0xdc>
 8026824:	ea52 0301 	orrs.w	r3, r2, r1
 8026828:	f04f 0300 	mov.w	r3, #0
 802682c:	d10c      	bne.n	8026848 <pow+0x80>
 802682e:	19b6      	adds	r6, r6, r6
 8026830:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8026834:	4164      	adcs	r4, r4
 8026836:	42b3      	cmp	r3, r6
 8026838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802683c:	41a3      	sbcs	r3, r4
 802683e:	f0c0 808c 	bcc.w	802695a <pow+0x192>
 8026842:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8026846:	e028      	b.n	802689a <pow+0xd2>
 8026848:	4da3      	ldr	r5, [pc, #652]	; (8026ad8 <pow+0x310>)
 802684a:	42ac      	cmp	r4, r5
 802684c:	bf08      	it	eq
 802684e:	429e      	cmpeq	r6, r3
 8026850:	d107      	bne.n	8026862 <pow+0x9a>
 8026852:	1800      	adds	r0, r0, r0
 8026854:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8026858:	417f      	adcs	r7, r7
 802685a:	4283      	cmp	r3, r0
 802685c:	4b9f      	ldr	r3, [pc, #636]	; (8026adc <pow+0x314>)
 802685e:	41bb      	sbcs	r3, r7
 8026860:	e7ed      	b.n	802683e <pow+0x76>
 8026862:	19b6      	adds	r6, r6, r6
 8026864:	489e      	ldr	r0, [pc, #632]	; (8026ae0 <pow+0x318>)
 8026866:	4164      	adcs	r4, r4
 8026868:	42b3      	cmp	r3, r6
 802686a:	eb70 0504 	sbcs.w	r5, r0, r4
 802686e:	d374      	bcc.n	802695a <pow+0x192>
 8026870:	4281      	cmp	r1, r0
 8026872:	bf08      	it	eq
 8026874:	429a      	cmpeq	r2, r3
 8026876:	d170      	bne.n	802695a <pow+0x192>
 8026878:	4a9a      	ldr	r2, [pc, #616]	; (8026ae4 <pow+0x31c>)
 802687a:	4294      	cmp	r4, r2
 802687c:	bf08      	it	eq
 802687e:	429e      	cmpeq	r6, r3
 8026880:	d0df      	beq.n	8026842 <pow+0x7a>
 8026882:	4294      	cmp	r4, r2
 8026884:	ea6f 0707 	mvn.w	r7, r7
 8026888:	bf34      	ite	cc
 802688a:	2400      	movcc	r4, #0
 802688c:	2401      	movcs	r4, #1
 802688e:	0fff      	lsrs	r7, r7, #31
 8026890:	42bc      	cmp	r4, r7
 8026892:	f040 81d9 	bne.w	8026c48 <pow+0x480>
 8026896:	ee21 0b01 	vmul.f64	d0, d1, d1
 802689a:	b006      	add	sp, #24
 802689c:	ecbd 8b0a 	vpop	{d8-d12}
 80268a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80268a4:	eb16 0806 	adds.w	r8, r6, r6
 80268a8:	eb44 0904 	adc.w	r9, r4, r4
 80268ac:	f118 31ff 	adds.w	r1, r8, #4294967295
 80268b0:	f169 0200 	sbc.w	r2, r9, #0
 80268b4:	458e      	cmp	lr, r1
 80268b6:	4193      	sbcs	r3, r2
 80268b8:	d223      	bcs.n	8026902 <pow+0x13a>
 80268ba:	ee20 0b00 	vmul.f64	d0, d0, d0
 80268be:	2c00      	cmp	r4, #0
 80268c0:	da12      	bge.n	80268e8 <pow+0x120>
 80268c2:	4639      	mov	r1, r7
 80268c4:	f7ff ff4c 	bl	8026760 <checkint>
 80268c8:	2801      	cmp	r0, #1
 80268ca:	d10d      	bne.n	80268e8 <pow+0x120>
 80268cc:	eeb1 0b40 	vneg.f64	d0, d0
 80268d0:	ea58 0309 	orrs.w	r3, r8, r9
 80268d4:	d10a      	bne.n	80268ec <pow+0x124>
 80268d6:	2f00      	cmp	r7, #0
 80268d8:	dadf      	bge.n	802689a <pow+0xd2>
 80268da:	b006      	add	sp, #24
 80268dc:	ecbd 8b0a 	vpop	{d8-d12}
 80268e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80268e4:	f000 bbc4 	b.w	8027070 <__math_divzero>
 80268e8:	2000      	movs	r0, #0
 80268ea:	e7f1      	b.n	80268d0 <pow+0x108>
 80268ec:	2f00      	cmp	r7, #0
 80268ee:	dad4      	bge.n	802689a <pow+0xd2>
 80268f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80268f4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80268f8:	ed8d 7b00 	vstr	d7, [sp]
 80268fc:	ed9d 0b00 	vldr	d0, [sp]
 8026900:	e7cb      	b.n	802689a <pow+0xd2>
 8026902:	2c00      	cmp	r4, #0
 8026904:	da2c      	bge.n	8026960 <pow+0x198>
 8026906:	4639      	mov	r1, r7
 8026908:	f7ff ff2a 	bl	8026760 <checkint>
 802690c:	b930      	cbnz	r0, 802691c <pow+0x154>
 802690e:	b006      	add	sp, #24
 8026910:	ecbd 8b0a 	vpop	{d8-d12}
 8026914:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026918:	f000 bbc2 	b.w	80270a0 <__math_invalid>
 802691c:	2801      	cmp	r0, #1
 802691e:	bf14      	ite	ne
 8026920:	2000      	movne	r0, #0
 8026922:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8026926:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 802692a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 802692e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8026932:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8026936:	2b7f      	cmp	r3, #127	; 0x7f
 8026938:	d92d      	bls.n	8026996 <pow+0x1ce>
 802693a:	4b67      	ldr	r3, [pc, #412]	; (8026ad8 <pow+0x310>)
 802693c:	2000      	movs	r0, #0
 802693e:	429c      	cmp	r4, r3
 8026940:	bf08      	it	eq
 8026942:	4286      	cmpeq	r6, r0
 8026944:	f43f af7d 	beq.w	8026842 <pow+0x7a>
 8026948:	f240 31bd 	movw	r1, #957	; 0x3bd
 802694c:	428a      	cmp	r2, r1
 802694e:	d80c      	bhi.n	802696a <pow+0x1a2>
 8026950:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8026954:	42b0      	cmp	r0, r6
 8026956:	41a3      	sbcs	r3, r4
 8026958:	d204      	bcs.n	8026964 <pow+0x19c>
 802695a:	ee31 0b00 	vadd.f64	d0, d1, d0
 802695e:	e79c      	b.n	802689a <pow+0xd2>
 8026960:	2000      	movs	r0, #0
 8026962:	e7e4      	b.n	802692e <pow+0x166>
 8026964:	ee30 0b41 	vsub.f64	d0, d0, d1
 8026968:	e797      	b.n	802689a <pow+0xd2>
 802696a:	2e01      	cmp	r6, #1
 802696c:	eb74 0303 	sbcs.w	r3, r4, r3
 8026970:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8026974:	bf34      	ite	cc
 8026976:	2301      	movcc	r3, #1
 8026978:	2300      	movcs	r3, #0
 802697a:	4295      	cmp	r5, r2
 802697c:	bf8c      	ite	hi
 802697e:	2500      	movhi	r5, #0
 8026980:	2501      	movls	r5, #1
 8026982:	42ab      	cmp	r3, r5
 8026984:	f000 809d 	beq.w	8026ac2 <pow+0x2fa>
 8026988:	b006      	add	sp, #24
 802698a:	ecbd 8b0a 	vpop	{d8-d12}
 802698e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026992:	f000 bb65 	b.w	8027060 <__math_oflow>
 8026996:	f1bc 0f00 	cmp.w	ip, #0
 802699a:	d10b      	bne.n	80269b4 <pow+0x1ec>
 802699c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8026ad0 <pow+0x308>
 80269a0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80269a4:	ec53 2b17 	vmov	r2, r3, d7
 80269a8:	ee17 6a10 	vmov	r6, s14
 80269ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80269b0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80269b4:	4b4c      	ldr	r3, [pc, #304]	; (8026ae8 <pow+0x320>)
 80269b6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80269ba:	4423      	add	r3, r4
 80269bc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80269c0:	1519      	asrs	r1, r3, #20
 80269c2:	0d1b      	lsrs	r3, r3, #20
 80269c4:	051b      	lsls	r3, r3, #20
 80269c6:	eba4 0903 	sub.w	r9, r4, r3
 80269ca:	4b48      	ldr	r3, [pc, #288]	; (8026aec <pow+0x324>)
 80269cc:	ee04 1a10 	vmov	s8, r1
 80269d0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80269d4:	f1b6 0800 	subs.w	r8, r6, #0
 80269d8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80269dc:	ec49 8b15 	vmov	d5, r8, r9
 80269e0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80269e4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80269e8:	ed93 7b00 	vldr	d7, [r3]
 80269ec:	ed93 5b02 	vldr	d5, [r3, #8]
 80269f0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80269f4:	eea4 2b07 	vfma.f64	d2, d4, d7
 80269f8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80269fc:	ee36 ab02 	vadd.f64	d10, d6, d2
 8026a00:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8026a04:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026a08:	ed93 5b04 	vldr	d5, [r3, #16]
 8026a0c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8026a10:	ee37 7b02 	vadd.f64	d7, d7, d2
 8026a14:	ee26 5b05 	vmul.f64	d5, d6, d5
 8026a18:	ed93 4b08 	vldr	d4, [r3, #32]
 8026a1c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8026a20:	eeb0 9b40 	vmov.f64	d9, d0
 8026a24:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8026a28:	ed93 5b06 	vldr	d5, [r3, #24]
 8026a2c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8026a30:	ee26 bb00 	vmul.f64	d11, d6, d0
 8026a34:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8026a38:	eea6 5b04 	vfma.f64	d5, d6, d4
 8026a3c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8026a40:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8026a44:	ee37 9b09 	vadd.f64	d9, d7, d9
 8026a48:	ee3a ab00 	vadd.f64	d10, d10, d0
 8026a4c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8026a50:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8026a54:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8026a58:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8026a5c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8026a60:	eea0 4b03 	vfma.f64	d4, d0, d3
 8026a64:	eea0 5b04 	vfma.f64	d5, d0, d4
 8026a68:	eeab ab05 	vfma.f64	d10, d11, d5
 8026a6c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8026a70:	ee21 7b06 	vmul.f64	d7, d1, d6
 8026a74:	ee17 3a90 	vmov	r3, s15
 8026a78:	eeb0 5b47 	vmov.f64	d5, d7
 8026a7c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8026a80:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8026a84:	18b2      	adds	r2, r6, r2
 8026a86:	2a3e      	cmp	r2, #62	; 0x3e
 8026a88:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8026a8c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8026a90:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8026a94:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8026a98:	d92b      	bls.n	8026af2 <pow+0x32a>
 8026a9a:	2a00      	cmp	r2, #0
 8026a9c:	da0b      	bge.n	8026ab6 <pow+0x2ee>
 8026a9e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8026aa2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8026aa6:	2800      	cmp	r0, #0
 8026aa8:	f43f aef7 	beq.w	802689a <pow+0xd2>
 8026aac:	eeb1 0b40 	vneg.f64	d0, d0
 8026ab0:	e6f3      	b.n	802689a <pow+0xd2>
 8026ab2:	2000      	movs	r0, #0
 8026ab4:	e77e      	b.n	80269b4 <pow+0x1ec>
 8026ab6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8026aba:	d919      	bls.n	8026af0 <pow+0x328>
 8026abc:	2b00      	cmp	r3, #0
 8026abe:	f6bf af63 	bge.w	8026988 <pow+0x1c0>
 8026ac2:	b006      	add	sp, #24
 8026ac4:	ecbd 8b0a 	vpop	{d8-d12}
 8026ac8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026acc:	f000 bac0 	b.w	8027050 <__math_uflow>
 8026ad0:	00000000 	.word	0x00000000
 8026ad4:	43300000 	.word	0x43300000
 8026ad8:	3ff00000 	.word	0x3ff00000
 8026adc:	fff00000 	.word	0xfff00000
 8026ae0:	ffe00000 	.word	0xffe00000
 8026ae4:	7fe00000 	.word	0x7fe00000
 8026ae8:	c0196aab 	.word	0xc0196aab
 8026aec:	080281d0 	.word	0x080281d0
 8026af0:	2600      	movs	r6, #0
 8026af2:	495d      	ldr	r1, [pc, #372]	; (8026c68 <pow+0x4a0>)
 8026af4:	ed91 4b02 	vldr	d4, [r1, #8]
 8026af8:	ed91 3b00 	vldr	d3, [r1]
 8026afc:	eeb0 6b44 	vmov.f64	d6, d4
 8026b00:	eea7 6b03 	vfma.f64	d6, d7, d3
 8026b04:	ee16 5a10 	vmov	r5, s12
 8026b08:	ee36 6b44 	vsub.f64	d6, d6, d4
 8026b0c:	ed91 4b04 	vldr	d4, [r1, #16]
 8026b10:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8026b14:	eea6 7b04 	vfma.f64	d7, d6, d4
 8026b18:	eeb0 0b47 	vmov.f64	d0, d7
 8026b1c:	ed91 7b06 	vldr	d7, [r1, #24]
 8026b20:	18dc      	adds	r4, r3, r3
 8026b22:	f104 030f 	add.w	r3, r4, #15
 8026b26:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8026b2a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8026b2e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8026b32:	ee35 0b00 	vadd.f64	d0, d5, d0
 8026b36:	ee20 6b00 	vmul.f64	d6, d0, d0
 8026b3a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8026b3e:	ed91 5b08 	vldr	d5, [r1, #32]
 8026b42:	ee30 7b07 	vadd.f64	d7, d0, d7
 8026b46:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8026b4a:	eea0 5b04 	vfma.f64	d5, d0, d4
 8026b4e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8026b52:	eea6 7b05 	vfma.f64	d7, d6, d5
 8026b56:	ee26 6b06 	vmul.f64	d6, d6, d6
 8026b5a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8026b5e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8026b62:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8026b66:	eea0 5b04 	vfma.f64	d5, d0, d4
 8026b6a:	1940      	adds	r0, r0, r5
 8026b6c:	2700      	movs	r7, #0
 8026b6e:	eb17 020c 	adds.w	r2, r7, ip
 8026b72:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8026b76:	eea6 7b05 	vfma.f64	d7, d6, d5
 8026b7a:	2e00      	cmp	r6, #0
 8026b7c:	d15f      	bne.n	8026c3e <pow+0x476>
 8026b7e:	42bd      	cmp	r5, r7
 8026b80:	db13      	blt.n	8026baa <pow+0x3e2>
 8026b82:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8026b86:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8026b8a:	4610      	mov	r0, r2
 8026b8c:	ec41 0b10 	vmov	d0, r0, r1
 8026b90:	eea7 0b00 	vfma.f64	d0, d7, d0
 8026b94:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8026c50 <pow+0x488>
 8026b98:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026b9c:	b006      	add	sp, #24
 8026b9e:	ecbd 8b0a 	vpop	{d8-d12}
 8026ba2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ba6:	f000 ba93 	b.w	80270d0 <__math_check_oflow>
 8026baa:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8026bae:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8026bb2:	4610      	mov	r0, r2
 8026bb4:	ec41 0b15 	vmov	d5, r0, r1
 8026bb8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8026bbc:	ee27 6b05 	vmul.f64	d6, d7, d5
 8026bc0:	ee35 7b06 	vadd.f64	d7, d5, d6
 8026bc4:	eeb0 3bc7 	vabs.f64	d3, d7
 8026bc8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8026bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bd0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8026c58 <pow+0x490>
 8026bd4:	d52a      	bpl.n	8026c2c <pow+0x464>
 8026bd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8026bda:	ee35 5b47 	vsub.f64	d5, d5, d7
 8026bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026be2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8026be6:	ee35 6b06 	vadd.f64	d6, d5, d6
 8026bea:	bf48      	it	mi
 8026bec:	eeb0 4b43 	vmovmi.f64	d4, d3
 8026bf0:	ee37 3b04 	vadd.f64	d3, d7, d4
 8026bf4:	ee34 5b43 	vsub.f64	d5, d4, d3
 8026bf8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8026bfc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8026c00:	ee37 7b03 	vadd.f64	d7, d7, d3
 8026c04:	ee37 7b44 	vsub.f64	d7, d7, d4
 8026c08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c10:	d104      	bne.n	8026c1c <pow+0x454>
 8026c12:	4632      	mov	r2, r6
 8026c14:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8026c18:	ec43 2b17 	vmov	d7, r2, r3
 8026c1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026c20:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026c24:	ee26 6b00 	vmul.f64	d6, d6, d0
 8026c28:	ed8d 6b04 	vstr	d6, [sp, #16]
 8026c2c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8026c30:	b006      	add	sp, #24
 8026c32:	ecbd 8b0a 	vpop	{d8-d12}
 8026c36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026c3a:	f000 ba40 	b.w	80270be <__math_check_uflow>
 8026c3e:	ec43 2b10 	vmov	d0, r2, r3
 8026c42:	eea7 0b00 	vfma.f64	d0, d7, d0
 8026c46:	e628      	b.n	802689a <pow+0xd2>
 8026c48:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8026c60 <pow+0x498>
 8026c4c:	e625      	b.n	802689a <pow+0xd2>
 8026c4e:	bf00      	nop
 8026c50:	00000000 	.word	0x00000000
 8026c54:	7f000000 	.word	0x7f000000
 8026c58:	00000000 	.word	0x00000000
 8026c5c:	00100000 	.word	0x00100000
	...
 8026c68:	08029230 	.word	0x08029230

08026c6c <asinf>:
 8026c6c:	b508      	push	{r3, lr}
 8026c6e:	ed2d 8b02 	vpush	{d8}
 8026c72:	eeb0 8a40 	vmov.f32	s16, s0
 8026c76:	f000 f845 	bl	8026d04 <__ieee754_asinf>
 8026c7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8026c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c82:	eef0 8a40 	vmov.f32	s17, s0
 8026c86:	d615      	bvs.n	8026cb4 <asinf+0x48>
 8026c88:	eeb0 0a48 	vmov.f32	s0, s16
 8026c8c:	f000 fb08 	bl	80272a0 <fabsf>
 8026c90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026c94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8026c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c9c:	dd0a      	ble.n	8026cb4 <asinf+0x48>
 8026c9e:	f7fb f80d 	bl	8021cbc <__errno>
 8026ca2:	ecbd 8b02 	vpop	{d8}
 8026ca6:	2321      	movs	r3, #33	; 0x21
 8026ca8:	6003      	str	r3, [r0, #0]
 8026caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8026cae:	4804      	ldr	r0, [pc, #16]	; (8026cc0 <asinf+0x54>)
 8026cb0:	f7fc b976 	b.w	8022fa0 <nanf>
 8026cb4:	eeb0 0a68 	vmov.f32	s0, s17
 8026cb8:	ecbd 8b02 	vpop	{d8}
 8026cbc:	bd08      	pop	{r3, pc}
 8026cbe:	bf00      	nop
 8026cc0:	08027f6f 	.word	0x08027f6f

08026cc4 <atan2f>:
 8026cc4:	f000 b904 	b.w	8026ed0 <__ieee754_atan2f>

08026cc8 <sqrtf>:
 8026cc8:	b508      	push	{r3, lr}
 8026cca:	ed2d 8b02 	vpush	{d8}
 8026cce:	eeb0 8a40 	vmov.f32	s16, s0
 8026cd2:	f000 f99b 	bl	802700c <__ieee754_sqrtf>
 8026cd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8026cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cde:	d60c      	bvs.n	8026cfa <sqrtf+0x32>
 8026ce0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8026d00 <sqrtf+0x38>
 8026ce4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cec:	d505      	bpl.n	8026cfa <sqrtf+0x32>
 8026cee:	f7fa ffe5 	bl	8021cbc <__errno>
 8026cf2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8026cf6:	2321      	movs	r3, #33	; 0x21
 8026cf8:	6003      	str	r3, [r0, #0]
 8026cfa:	ecbd 8b02 	vpop	{d8}
 8026cfe:	bd08      	pop	{r3, pc}
 8026d00:	00000000 	.word	0x00000000

08026d04 <__ieee754_asinf>:
 8026d04:	b538      	push	{r3, r4, r5, lr}
 8026d06:	ee10 5a10 	vmov	r5, s0
 8026d0a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8026d0e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8026d12:	ed2d 8b04 	vpush	{d8-d9}
 8026d16:	d10c      	bne.n	8026d32 <__ieee754_asinf+0x2e>
 8026d18:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8026e90 <__ieee754_asinf+0x18c>
 8026d1c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8026e94 <__ieee754_asinf+0x190>
 8026d20:	ee60 7a27 	vmul.f32	s15, s0, s15
 8026d24:	eee0 7a07 	vfma.f32	s15, s0, s14
 8026d28:	eeb0 0a67 	vmov.f32	s0, s15
 8026d2c:	ecbd 8b04 	vpop	{d8-d9}
 8026d30:	bd38      	pop	{r3, r4, r5, pc}
 8026d32:	dd04      	ble.n	8026d3e <__ieee754_asinf+0x3a>
 8026d34:	ee70 7a40 	vsub.f32	s15, s0, s0
 8026d38:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8026d3c:	e7f6      	b.n	8026d2c <__ieee754_asinf+0x28>
 8026d3e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8026d42:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8026d46:	da0b      	bge.n	8026d60 <__ieee754_asinf+0x5c>
 8026d48:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8026d4c:	da52      	bge.n	8026df4 <__ieee754_asinf+0xf0>
 8026d4e:	eddf 7a52 	vldr	s15, [pc, #328]	; 8026e98 <__ieee754_asinf+0x194>
 8026d52:	ee70 7a27 	vadd.f32	s15, s0, s15
 8026d56:	eef4 7ae8 	vcmpe.f32	s15, s17
 8026d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d5e:	dce5      	bgt.n	8026d2c <__ieee754_asinf+0x28>
 8026d60:	f000 fa9e 	bl	80272a0 <fabsf>
 8026d64:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8026d68:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8026d6c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8026d70:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8026e9c <__ieee754_asinf+0x198>
 8026d74:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8026ea0 <__ieee754_asinf+0x19c>
 8026d78:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8026ea4 <__ieee754_asinf+0x1a0>
 8026d7c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8026d80:	eddf 7a49 	vldr	s15, [pc, #292]	; 8026ea8 <__ieee754_asinf+0x1a4>
 8026d84:	eee7 7a08 	vfma.f32	s15, s14, s16
 8026d88:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8026eac <__ieee754_asinf+0x1a8>
 8026d8c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8026d90:	eddf 7a47 	vldr	s15, [pc, #284]	; 8026eb0 <__ieee754_asinf+0x1ac>
 8026d94:	eee7 7a08 	vfma.f32	s15, s14, s16
 8026d98:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8026eb4 <__ieee754_asinf+0x1b0>
 8026d9c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8026da0:	eddf 7a45 	vldr	s15, [pc, #276]	; 8026eb8 <__ieee754_asinf+0x1b4>
 8026da4:	eee8 7a07 	vfma.f32	s15, s16, s14
 8026da8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8026ebc <__ieee754_asinf+0x1b8>
 8026dac:	eea7 7a88 	vfma.f32	s14, s15, s16
 8026db0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8026ec0 <__ieee754_asinf+0x1bc>
 8026db4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8026db8:	eeb0 0a48 	vmov.f32	s0, s16
 8026dbc:	eee7 8a88 	vfma.f32	s17, s15, s16
 8026dc0:	f000 f924 	bl	802700c <__ieee754_sqrtf>
 8026dc4:	4b3f      	ldr	r3, [pc, #252]	; (8026ec4 <__ieee754_asinf+0x1c0>)
 8026dc6:	ee29 9a08 	vmul.f32	s18, s18, s16
 8026dca:	429c      	cmp	r4, r3
 8026dcc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8026dd0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8026dd4:	dd3d      	ble.n	8026e52 <__ieee754_asinf+0x14e>
 8026dd6:	eea0 0a06 	vfma.f32	s0, s0, s12
 8026dda:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8026ec8 <__ieee754_asinf+0x1c4>
 8026dde:	eee0 7a26 	vfma.f32	s15, s0, s13
 8026de2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8026e94 <__ieee754_asinf+0x190>
 8026de6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026dea:	2d00      	cmp	r5, #0
 8026dec:	bfd8      	it	le
 8026dee:	eeb1 0a40 	vnegle.f32	s0, s0
 8026df2:	e79b      	b.n	8026d2c <__ieee754_asinf+0x28>
 8026df4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8026df8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8026e9c <__ieee754_asinf+0x198>
 8026dfc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8026ea0 <__ieee754_asinf+0x19c>
 8026e00:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8026eb4 <__ieee754_asinf+0x1b0>
 8026e04:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8026e08:	eddf 6a27 	vldr	s13, [pc, #156]	; 8026ea8 <__ieee754_asinf+0x1a4>
 8026e0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026e10:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8026eac <__ieee754_asinf+0x1a8>
 8026e14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8026e18:	eddf 6a25 	vldr	s13, [pc, #148]	; 8026eb0 <__ieee754_asinf+0x1ac>
 8026e1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026e20:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8026ea4 <__ieee754_asinf+0x1a0>
 8026e24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8026e28:	eddf 6a23 	vldr	s13, [pc, #140]	; 8026eb8 <__ieee754_asinf+0x1b4>
 8026e2c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8026e30:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8026ebc <__ieee754_asinf+0x1b8>
 8026e34:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8026e38:	eddf 6a21 	vldr	s13, [pc, #132]	; 8026ec0 <__ieee754_asinf+0x1bc>
 8026e3c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8026e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026e44:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8026e48:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8026e4c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8026e50:	e76c      	b.n	8026d2c <__ieee754_asinf+0x28>
 8026e52:	ee10 3a10 	vmov	r3, s0
 8026e56:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8026e5a:	f023 030f 	bic.w	r3, r3, #15
 8026e5e:	ee07 3a10 	vmov	s14, r3
 8026e62:	eea7 8a47 	vfms.f32	s16, s14, s14
 8026e66:	ee70 7a07 	vadd.f32	s15, s0, s14
 8026e6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026e6e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8026e72:	eddf 7a07 	vldr	s15, [pc, #28]	; 8026e90 <__ieee754_asinf+0x18c>
 8026e76:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8026e7a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8026e7e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8026ecc <__ieee754_asinf+0x1c8>
 8026e82:	eeb0 6a40 	vmov.f32	s12, s0
 8026e86:	eea7 6a66 	vfms.f32	s12, s14, s13
 8026e8a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8026e8e:	e7aa      	b.n	8026de6 <__ieee754_asinf+0xe2>
 8026e90:	b33bbd2e 	.word	0xb33bbd2e
 8026e94:	3fc90fdb 	.word	0x3fc90fdb
 8026e98:	7149f2ca 	.word	0x7149f2ca
 8026e9c:	3811ef08 	.word	0x3811ef08
 8026ea0:	3a4f7f04 	.word	0x3a4f7f04
 8026ea4:	3e2aaaab 	.word	0x3e2aaaab
 8026ea8:	bd241146 	.word	0xbd241146
 8026eac:	3e4e0aa8 	.word	0x3e4e0aa8
 8026eb0:	bea6b090 	.word	0xbea6b090
 8026eb4:	3d9dc62e 	.word	0x3d9dc62e
 8026eb8:	bf303361 	.word	0xbf303361
 8026ebc:	4001572d 	.word	0x4001572d
 8026ec0:	c019d139 	.word	0xc019d139
 8026ec4:	3f799999 	.word	0x3f799999
 8026ec8:	333bbd2e 	.word	0x333bbd2e
 8026ecc:	3f490fdb 	.word	0x3f490fdb

08026ed0 <__ieee754_atan2f>:
 8026ed0:	ee10 2a90 	vmov	r2, s1
 8026ed4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8026ed8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026edc:	b510      	push	{r4, lr}
 8026ede:	eef0 7a40 	vmov.f32	s15, s0
 8026ee2:	dc06      	bgt.n	8026ef2 <__ieee754_atan2f+0x22>
 8026ee4:	ee10 0a10 	vmov	r0, s0
 8026ee8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8026eec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026ef0:	dd04      	ble.n	8026efc <__ieee754_atan2f+0x2c>
 8026ef2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8026ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8026efa:	bd10      	pop	{r4, pc}
 8026efc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8026f00:	d103      	bne.n	8026f0a <__ieee754_atan2f+0x3a>
 8026f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026f06:	f000 b8f7 	b.w	80270f8 <atanf>
 8026f0a:	1794      	asrs	r4, r2, #30
 8026f0c:	f004 0402 	and.w	r4, r4, #2
 8026f10:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8026f14:	b93b      	cbnz	r3, 8026f26 <__ieee754_atan2f+0x56>
 8026f16:	2c02      	cmp	r4, #2
 8026f18:	d05c      	beq.n	8026fd4 <__ieee754_atan2f+0x104>
 8026f1a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8026fe8 <__ieee754_atan2f+0x118>
 8026f1e:	2c03      	cmp	r4, #3
 8026f20:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8026f24:	e7e7      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026f26:	b939      	cbnz	r1, 8026f38 <__ieee754_atan2f+0x68>
 8026f28:	eddf 7a30 	vldr	s15, [pc, #192]	; 8026fec <__ieee754_atan2f+0x11c>
 8026f2c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8026ff0 <__ieee754_atan2f+0x120>
 8026f30:	2800      	cmp	r0, #0
 8026f32:	fe67 7a80 	vselge.f32	s15, s15, s0
 8026f36:	e7de      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026f38:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026f3c:	d110      	bne.n	8026f60 <__ieee754_atan2f+0x90>
 8026f3e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026f42:	f104 34ff 	add.w	r4, r4, #4294967295
 8026f46:	d107      	bne.n	8026f58 <__ieee754_atan2f+0x88>
 8026f48:	2c02      	cmp	r4, #2
 8026f4a:	d846      	bhi.n	8026fda <__ieee754_atan2f+0x10a>
 8026f4c:	4b29      	ldr	r3, [pc, #164]	; (8026ff4 <__ieee754_atan2f+0x124>)
 8026f4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026f52:	edd4 7a00 	vldr	s15, [r4]
 8026f56:	e7ce      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026f58:	2c02      	cmp	r4, #2
 8026f5a:	d841      	bhi.n	8026fe0 <__ieee754_atan2f+0x110>
 8026f5c:	4b26      	ldr	r3, [pc, #152]	; (8026ff8 <__ieee754_atan2f+0x128>)
 8026f5e:	e7f6      	b.n	8026f4e <__ieee754_atan2f+0x7e>
 8026f60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026f64:	d0e0      	beq.n	8026f28 <__ieee754_atan2f+0x58>
 8026f66:	1a5b      	subs	r3, r3, r1
 8026f68:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8026f6c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8026f70:	da1a      	bge.n	8026fa8 <__ieee754_atan2f+0xd8>
 8026f72:	2a00      	cmp	r2, #0
 8026f74:	da01      	bge.n	8026f7a <__ieee754_atan2f+0xaa>
 8026f76:	313c      	adds	r1, #60	; 0x3c
 8026f78:	db19      	blt.n	8026fae <__ieee754_atan2f+0xde>
 8026f7a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8026f7e:	f000 f98f 	bl	80272a0 <fabsf>
 8026f82:	f000 f8b9 	bl	80270f8 <atanf>
 8026f86:	eef0 7a40 	vmov.f32	s15, s0
 8026f8a:	2c01      	cmp	r4, #1
 8026f8c:	d012      	beq.n	8026fb4 <__ieee754_atan2f+0xe4>
 8026f8e:	2c02      	cmp	r4, #2
 8026f90:	d017      	beq.n	8026fc2 <__ieee754_atan2f+0xf2>
 8026f92:	2c00      	cmp	r4, #0
 8026f94:	d0af      	beq.n	8026ef6 <__ieee754_atan2f+0x26>
 8026f96:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8026ffc <__ieee754_atan2f+0x12c>
 8026f9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8026f9e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8027000 <__ieee754_atan2f+0x130>
 8026fa2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8026fa6:	e7a6      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026fa8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8026fec <__ieee754_atan2f+0x11c>
 8026fac:	e7ed      	b.n	8026f8a <__ieee754_atan2f+0xba>
 8026fae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8027004 <__ieee754_atan2f+0x134>
 8026fb2:	e7ea      	b.n	8026f8a <__ieee754_atan2f+0xba>
 8026fb4:	ee17 3a90 	vmov	r3, s15
 8026fb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026fbc:	ee07 3a90 	vmov	s15, r3
 8026fc0:	e799      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026fc2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8026ffc <__ieee754_atan2f+0x12c>
 8026fc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8026fca:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8027000 <__ieee754_atan2f+0x130>
 8026fce:	ee70 7a67 	vsub.f32	s15, s0, s15
 8026fd2:	e790      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026fd4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8027000 <__ieee754_atan2f+0x130>
 8026fd8:	e78d      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026fda:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8027008 <__ieee754_atan2f+0x138>
 8026fde:	e78a      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026fe0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8027004 <__ieee754_atan2f+0x134>
 8026fe4:	e787      	b.n	8026ef6 <__ieee754_atan2f+0x26>
 8026fe6:	bf00      	nop
 8026fe8:	c0490fdb 	.word	0xc0490fdb
 8026fec:	3fc90fdb 	.word	0x3fc90fdb
 8026ff0:	bfc90fdb 	.word	0xbfc90fdb
 8026ff4:	08029218 	.word	0x08029218
 8026ff8:	08029224 	.word	0x08029224
 8026ffc:	33bbbd2e 	.word	0x33bbbd2e
 8027000:	40490fdb 	.word	0x40490fdb
 8027004:	00000000 	.word	0x00000000
 8027008:	3f490fdb 	.word	0x3f490fdb

0802700c <__ieee754_sqrtf>:
 802700c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8027010:	4770      	bx	lr

08027012 <with_errno>:
 8027012:	b513      	push	{r0, r1, r4, lr}
 8027014:	4604      	mov	r4, r0
 8027016:	ed8d 0b00 	vstr	d0, [sp]
 802701a:	f7fa fe4f 	bl	8021cbc <__errno>
 802701e:	ed9d 0b00 	vldr	d0, [sp]
 8027022:	6004      	str	r4, [r0, #0]
 8027024:	b002      	add	sp, #8
 8027026:	bd10      	pop	{r4, pc}

08027028 <xflow>:
 8027028:	b082      	sub	sp, #8
 802702a:	b158      	cbz	r0, 8027044 <xflow+0x1c>
 802702c:	eeb1 7b40 	vneg.f64	d7, d0
 8027030:	ed8d 7b00 	vstr	d7, [sp]
 8027034:	ed9d 7b00 	vldr	d7, [sp]
 8027038:	2022      	movs	r0, #34	; 0x22
 802703a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802703e:	b002      	add	sp, #8
 8027040:	f7ff bfe7 	b.w	8027012 <with_errno>
 8027044:	eeb0 7b40 	vmov.f64	d7, d0
 8027048:	e7f2      	b.n	8027030 <xflow+0x8>
 802704a:	0000      	movs	r0, r0
 802704c:	0000      	movs	r0, r0
	...

08027050 <__math_uflow>:
 8027050:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027058 <__math_uflow+0x8>
 8027054:	f7ff bfe8 	b.w	8027028 <xflow>
 8027058:	00000000 	.word	0x00000000
 802705c:	10000000 	.word	0x10000000

08027060 <__math_oflow>:
 8027060:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027068 <__math_oflow+0x8>
 8027064:	f7ff bfe0 	b.w	8027028 <xflow>
 8027068:	00000000 	.word	0x00000000
 802706c:	70000000 	.word	0x70000000

08027070 <__math_divzero>:
 8027070:	b082      	sub	sp, #8
 8027072:	2800      	cmp	r0, #0
 8027074:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8027078:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 802707c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8027080:	ed8d 7b00 	vstr	d7, [sp]
 8027084:	ed9d 0b00 	vldr	d0, [sp]
 8027088:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8027098 <__math_divzero+0x28>
 802708c:	2022      	movs	r0, #34	; 0x22
 802708e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8027092:	b002      	add	sp, #8
 8027094:	f7ff bfbd 	b.w	8027012 <with_errno>
	...

080270a0 <__math_invalid>:
 80270a0:	eeb0 7b40 	vmov.f64	d7, d0
 80270a4:	eeb4 7b47 	vcmp.f64	d7, d7
 80270a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270ac:	ee30 6b40 	vsub.f64	d6, d0, d0
 80270b0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80270b4:	d602      	bvs.n	80270bc <__math_invalid+0x1c>
 80270b6:	2021      	movs	r0, #33	; 0x21
 80270b8:	f7ff bfab 	b.w	8027012 <with_errno>
 80270bc:	4770      	bx	lr

080270be <__math_check_uflow>:
 80270be:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80270c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270c6:	d102      	bne.n	80270ce <__math_check_uflow+0x10>
 80270c8:	2022      	movs	r0, #34	; 0x22
 80270ca:	f7ff bfa2 	b.w	8027012 <with_errno>
 80270ce:	4770      	bx	lr

080270d0 <__math_check_oflow>:
 80270d0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80270f0 <__math_check_oflow+0x20>
 80270d4:	eeb0 7bc0 	vabs.f64	d7, d0
 80270d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80270dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270e0:	dd02      	ble.n	80270e8 <__math_check_oflow+0x18>
 80270e2:	2022      	movs	r0, #34	; 0x22
 80270e4:	f7ff bf95 	b.w	8027012 <with_errno>
 80270e8:	4770      	bx	lr
 80270ea:	bf00      	nop
 80270ec:	f3af 8000 	nop.w
 80270f0:	ffffffff 	.word	0xffffffff
 80270f4:	7fefffff 	.word	0x7fefffff

080270f8 <atanf>:
 80270f8:	b538      	push	{r3, r4, r5, lr}
 80270fa:	ee10 5a10 	vmov	r5, s0
 80270fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8027102:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8027106:	eef0 7a40 	vmov.f32	s15, s0
 802710a:	db0f      	blt.n	802712c <atanf+0x34>
 802710c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8027110:	dd04      	ble.n	802711c <atanf+0x24>
 8027112:	ee70 7a00 	vadd.f32	s15, s0, s0
 8027116:	eeb0 0a67 	vmov.f32	s0, s15
 802711a:	bd38      	pop	{r3, r4, r5, pc}
 802711c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8027254 <atanf+0x15c>
 8027120:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8027258 <atanf+0x160>
 8027124:	2d00      	cmp	r5, #0
 8027126:	fe77 7a80 	vselgt.f32	s15, s15, s0
 802712a:	e7f4      	b.n	8027116 <atanf+0x1e>
 802712c:	4b4b      	ldr	r3, [pc, #300]	; (802725c <atanf+0x164>)
 802712e:	429c      	cmp	r4, r3
 8027130:	dc10      	bgt.n	8027154 <atanf+0x5c>
 8027132:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8027136:	da0a      	bge.n	802714e <atanf+0x56>
 8027138:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8027260 <atanf+0x168>
 802713c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8027140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027144:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8027148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802714c:	dce3      	bgt.n	8027116 <atanf+0x1e>
 802714e:	f04f 33ff 	mov.w	r3, #4294967295
 8027152:	e013      	b.n	802717c <atanf+0x84>
 8027154:	f000 f8a4 	bl	80272a0 <fabsf>
 8027158:	4b42      	ldr	r3, [pc, #264]	; (8027264 <atanf+0x16c>)
 802715a:	429c      	cmp	r4, r3
 802715c:	dc4f      	bgt.n	80271fe <atanf+0x106>
 802715e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8027162:	429c      	cmp	r4, r3
 8027164:	dc41      	bgt.n	80271ea <atanf+0xf2>
 8027166:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802716a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802716e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027172:	2300      	movs	r3, #0
 8027174:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027178:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802717c:	1c5a      	adds	r2, r3, #1
 802717e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8027182:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8027268 <atanf+0x170>
 8027186:	eddf 5a39 	vldr	s11, [pc, #228]	; 802726c <atanf+0x174>
 802718a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8027270 <atanf+0x178>
 802718e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8027192:	eee6 5a87 	vfma.f32	s11, s13, s14
 8027196:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8027274 <atanf+0x17c>
 802719a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802719e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8027278 <atanf+0x180>
 80271a2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80271a6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 802727c <atanf+0x184>
 80271aa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80271ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8027280 <atanf+0x188>
 80271b2:	eee7 5a26 	vfma.f32	s11, s14, s13
 80271b6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8027284 <atanf+0x18c>
 80271ba:	eea6 5a87 	vfma.f32	s10, s13, s14
 80271be:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8027288 <atanf+0x190>
 80271c2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80271c6:	ed9f 5a31 	vldr	s10, [pc, #196]	; 802728c <atanf+0x194>
 80271ca:	eea7 5a26 	vfma.f32	s10, s14, s13
 80271ce:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8027290 <atanf+0x198>
 80271d2:	eea5 7a26 	vfma.f32	s14, s10, s13
 80271d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80271da:	eea5 7a86 	vfma.f32	s14, s11, s12
 80271de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80271e2:	d121      	bne.n	8027228 <atanf+0x130>
 80271e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80271e8:	e795      	b.n	8027116 <atanf+0x1e>
 80271ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80271ee:	ee30 7a67 	vsub.f32	s14, s0, s15
 80271f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80271f6:	2301      	movs	r3, #1
 80271f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80271fc:	e7be      	b.n	802717c <atanf+0x84>
 80271fe:	4b25      	ldr	r3, [pc, #148]	; (8027294 <atanf+0x19c>)
 8027200:	429c      	cmp	r4, r3
 8027202:	dc0b      	bgt.n	802721c <atanf+0x124>
 8027204:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8027208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802720c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027210:	2302      	movs	r3, #2
 8027212:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802721a:	e7af      	b.n	802717c <atanf+0x84>
 802721c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027220:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027224:	2303      	movs	r3, #3
 8027226:	e7a9      	b.n	802717c <atanf+0x84>
 8027228:	4a1b      	ldr	r2, [pc, #108]	; (8027298 <atanf+0x1a0>)
 802722a:	491c      	ldr	r1, [pc, #112]	; (802729c <atanf+0x1a4>)
 802722c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8027230:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8027234:	ed93 0a00 	vldr	s0, [r3]
 8027238:	ee37 7a40 	vsub.f32	s14, s14, s0
 802723c:	ed92 0a00 	vldr	s0, [r2]
 8027240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027244:	2d00      	cmp	r5, #0
 8027246:	ee70 7a67 	vsub.f32	s15, s0, s15
 802724a:	bfb8      	it	lt
 802724c:	eef1 7a67 	vneglt.f32	s15, s15
 8027250:	e761      	b.n	8027116 <atanf+0x1e>
 8027252:	bf00      	nop
 8027254:	3fc90fdb 	.word	0x3fc90fdb
 8027258:	bfc90fdb 	.word	0xbfc90fdb
 802725c:	3edfffff 	.word	0x3edfffff
 8027260:	7149f2ca 	.word	0x7149f2ca
 8027264:	3f97ffff 	.word	0x3f97ffff
 8027268:	3c8569d7 	.word	0x3c8569d7
 802726c:	3d4bda59 	.word	0x3d4bda59
 8027270:	bd6ef16b 	.word	0xbd6ef16b
 8027274:	3d886b35 	.word	0x3d886b35
 8027278:	3dba2e6e 	.word	0x3dba2e6e
 802727c:	3e124925 	.word	0x3e124925
 8027280:	3eaaaaab 	.word	0x3eaaaaab
 8027284:	bd15a221 	.word	0xbd15a221
 8027288:	bd9d8795 	.word	0xbd9d8795
 802728c:	bde38e38 	.word	0xbde38e38
 8027290:	be4ccccd 	.word	0xbe4ccccd
 8027294:	401bffff 	.word	0x401bffff
 8027298:	08029aa0 	.word	0x08029aa0
 802729c:	08029ab0 	.word	0x08029ab0

080272a0 <fabsf>:
 80272a0:	ee10 3a10 	vmov	r3, s0
 80272a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80272a8:	ee00 3a10 	vmov	s0, r3
 80272ac:	4770      	bx	lr
	...

080272b0 <_init>:
 80272b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272b2:	bf00      	nop
 80272b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80272b6:	bc08      	pop	{r3}
 80272b8:	469e      	mov	lr, r3
 80272ba:	4770      	bx	lr

080272bc <_fini>:
 80272bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272be:	bf00      	nop
 80272c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80272c2:	bc08      	pop	{r3}
 80272c4:	469e      	mov	lr, r3
 80272c6:	4770      	bx	lr
